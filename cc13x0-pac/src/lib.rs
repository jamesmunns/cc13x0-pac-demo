#![doc = "Peripheral access API for CC13X0 microcontrollers (generated using svd2rust v0.17.0)\n\nYou can find an overview of the API [here].\n\n[here]: https://docs.rs/svd2rust/0.17.0/svd2rust/#peripheral-api"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
extern crate bare_metal;
extern crate cortex_m;
#[cfg(feature = "rt")]
extern crate cortex_m_rt;
extern crate vcell;
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[cfg(feature = "rt")]
extern "C" {
    fn AON_GPIO_EDGE();
    fn I2C_IRQ();
    fn RFC_CPE_1();
    fn AON_RTC_COMB();
    fn UART0_COMB();
    fn AUX_SWEV0();
    fn SSI0_COMB();
    fn SSI1_COMB();
    fn RFC_CPE_0();
    fn RFC_HW_COMB();
    fn RFC_CMD_ACK();
    fn I2S_IRQ();
    fn AUX_SWEV1();
    fn WDT_IRQ();
    fn GPT0A();
    fn GPT0B();
    fn GPT1A();
    fn GPT1B();
    fn GPT2A();
    fn GPT2B();
    fn GPT3A();
    fn GPT3B();
    fn CRYPTO_RESULT_AVAIL_IRQ();
    fn DMA_DONE_COMB();
    fn DMA_ERR();
    fn FLASH();
    fn SWEV0();
    fn AUX_COMB();
    fn AON_PROG0();
    fn PROG0();
    fn AUX_COMPA();
    fn AUX_ADC_IRQ();
    fn TRNG_IRQ();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 133] = [
    Vector {
        _handler: AON_GPIO_EDGE,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I2C_IRQ },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: RFC_CPE_1,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AON_RTC_COMB,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: UART0_COMB,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AUX_SWEV0,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: SSI0_COMB,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: SSI1_COMB,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: RFC_CPE_0,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: RFC_HW_COMB,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: RFC_CMD_ACK,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I2S_IRQ },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AUX_SWEV1,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: WDT_IRQ },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT0A },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT0B },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT1A },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT1B },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT2A },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT2B },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT3A },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: GPT3B },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: CRYPTO_RESULT_AVAIL_IRQ,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMA_DONE_COMB,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: DMA_ERR },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: FLASH },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SWEV0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: AUX_COMB },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AON_PROG0,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: PROG0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AUX_COMPA,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AUX_ADC_IRQ,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TRNG_IRQ },
];
#[doc = r"Enumeration of all the interrupts"]
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Interrupt {
    #[doc = "0 - AON_GPIO_EDGE"]
    AON_GPIO_EDGE = 0,
    #[doc = "4 - I2C_IRQ"]
    I2C_IRQ = 4,
    #[doc = "8 - RFC_CPE_1"]
    RFC_CPE_1 = 8,
    #[doc = "16 - AON_RTC_COMB"]
    AON_RTC_COMB = 16,
    #[doc = "20 - UART0_COMB"]
    UART0_COMB = 20,
    #[doc = "24 - AUX_SWEV0"]
    AUX_SWEV0 = 24,
    #[doc = "28 - SSI0_COMB"]
    SSI0_COMB = 28,
    #[doc = "32 - SSI1_COMB"]
    SSI1_COMB = 32,
    #[doc = "36 - RFC_CPE_0"]
    RFC_CPE_0 = 36,
    #[doc = "40 - RFC_HW_COMB"]
    RFC_HW_COMB = 40,
    #[doc = "44 - RFC_CMD_ACK"]
    RFC_CMD_ACK = 44,
    #[doc = "48 - I2S_IRQ"]
    I2S_IRQ = 48,
    #[doc = "52 - AUX_SWEV1"]
    AUX_SWEV1 = 52,
    #[doc = "56 - WDT_IRQ"]
    WDT_IRQ = 56,
    #[doc = "60 - GPT0A"]
    GPT0A = 60,
    #[doc = "64 - GPT0B"]
    GPT0B = 64,
    #[doc = "68 - GPT1A"]
    GPT1A = 68,
    #[doc = "72 - GPT1B"]
    GPT1B = 72,
    #[doc = "76 - GPT2A"]
    GPT2A = 76,
    #[doc = "80 - GPT2B"]
    GPT2B = 80,
    #[doc = "84 - GPT3A"]
    GPT3A = 84,
    #[doc = "88 - GPT3B"]
    GPT3B = 88,
    #[doc = "92 - CRYPTO_RESULT_AVAIL_IRQ"]
    CRYPTO_RESULT_AVAIL_IRQ = 92,
    #[doc = "96 - DMA_DONE_COMB"]
    DMA_DONE_COMB = 96,
    #[doc = "100 - DMA_ERR"]
    DMA_ERR = 100,
    #[doc = "104 - FLASH"]
    FLASH = 104,
    #[doc = "108 - SWEV0"]
    SWEV0 = 108,
    #[doc = "112 - AUX_COMB"]
    AUX_COMB = 112,
    #[doc = "116 - AON_PROG0"]
    AON_PROG0 = 116,
    #[doc = "120 - PROG0"]
    PROG0 = 120,
    #[doc = "124 - AUX_COMPA"]
    AUX_COMPA = 124,
    #[doc = "128 - AUX_ADC_IRQ"]
    AUX_ADC_IRQ = 128,
    #[doc = "132 - TRNG_IRQ"]
    TRNG_IRQ = 132,
}
unsafe impl bare_metal::Nr for Interrupt {
    #[inline(always)]
    fn nr(&self) -> u8 {
        *self as u8
    }
}
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = "This trait shows that register has `read` method"]
    #[doc = ""]
    #[doc = "Registers marked with `Writable` can be also `modify`'ed"]
    pub trait Readable {}
    #[doc = "This trait shows that register has `write`, `write_with_zero` and `reset` method"]
    #[doc = ""]
    #[doc = "Registers marked with `Readable` can be also `modify`'ed"]
    pub trait Writable {}
    #[doc = "Reset value of the register"]
    #[doc = ""]
    #[doc = "This value is initial value for `write` method."]
    #[doc = "It can be also directly writed to register by `reset` method."]
    pub trait ResetValue {
        #[doc = "Register size"]
        type Type;
        #[doc = "Reset value of the register"]
        fn reset_value() -> Self::Type;
    }
    #[doc = "This structure provides volatile access to register"]
    pub struct Reg<U, REG> {
        register: vcell::VolatileCell<U>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<U: Send, REG> Send for Reg<U, REG> {}
    impl<U, REG> Reg<U, REG>
    where
        Self: Readable,
        U: Copy,
    {
        #[doc = "Reads the contents of `Readable` register"]
        #[doc = ""]
        #[doc = "You can read the contents of a register in such way:"]
        #[doc = "```ignore"]
        #[doc = "let bits = periph.reg.read().bits();"]
        #[doc = "```"]
        #[doc = "or get the content of a particular field of a register."]
        #[doc = "```ignore"]
        #[doc = "let reader = periph.reg.read();"]
        #[doc = "let bits = reader.field1().bits();"]
        #[doc = "let flag = reader.field2().bit_is_set();"]
        #[doc = "```"]
        #[inline(always)]
        pub fn read(&self) -> R<U, Self> {
            R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            }
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: ResetValue<Type = U> + Writable,
        U: Copy,
    {
        #[doc = "Writes the reset value to `Writable` register"]
        #[doc = ""]
        #[doc = "Resets the register to its initial state"]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(Self::reset_value())
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: ResetValue<Type = U> + Writable,
        U: Copy,
    {
        #[doc = "Writes bits to `Writable` register"]
        #[doc = ""]
        #[doc = "You can write raw bits into a register:"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = "```"]
        #[doc = "or write only the fields you need:"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.write(|w| w"]
        #[doc = "    .field1().bits(newfield1bits)"]
        #[doc = "    .field2().set_bit()"]
        #[doc = "    .field3().variant(VARIANT)"]
        #[doc = ");"]
        #[doc = "```"]
        #[doc = "Other fields will have reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut W<U, Self>) -> &mut W<U, Self>,
        {
            self.register.set(
                f(&mut W {
                    bits: Self::reset_value(),
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: Writable,
        U: Copy + Default,
    {
        #[doc = "Writes Zero to `Writable` register"]
        #[doc = ""]
        #[doc = "Similar to `write`, but unused bits will contain 0."]
        #[inline(always)]
        pub fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut W<U, Self>) -> &mut W<U, Self>,
        {
            self.register.set(
                f(&mut W {
                    bits: U::default(),
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<U, REG> Reg<U, REG>
    where
        Self: Readable + Writable,
        U: Copy,
    {
        #[doc = "Modifies the contents of the register"]
        #[doc = ""]
        #[doc = "E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "   r.bits() | 3"]
        #[doc = ") });"]
        #[doc = "```"]
        #[doc = "or"]
        #[doc = "```ignore"]
        #[doc = "periph.reg.modify(|_, w| w"]
        #[doc = "    .field1().bits(newfield1bits)"]
        #[doc = "    .field2().set_bit()"]
        #[doc = "    .field3().variant(VARIANT)"]
        #[doc = ");"]
        #[doc = "```"]
        #[doc = "Other fields will have value they had before call `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&R<U, Self>, &'w mut W<U, Self>) -> &'w mut W<U, Self>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &R {
                        bits,
                        _reg: marker::PhantomData,
                    },
                    &mut W {
                        bits,
                        _reg: marker::PhantomData,
                    },
                )
                .bits,
            );
        }
    }
    #[doc = "Register/field reader"]
    #[doc = ""]
    #[doc = "Result of the [`read`](Reg::read) method of a register."]
    #[doc = "Also it can be used in the [`modify`](Reg::read) method"]
    pub struct R<U, T> {
        pub(crate) bits: U,
        _reg: marker::PhantomData<T>,
    }
    impl<U, T> R<U, T>
    where
        U: Copy,
    {
        #[doc = "Create new instance of reader"]
        #[inline(always)]
        pub(crate) fn new(bits: U) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
        #[doc = "Read raw bits from register/field"]
        #[inline(always)]
        pub fn bits(&self) -> U {
            self.bits
        }
    }
    impl<U, T, FI> PartialEq<FI> for R<U, T>
    where
        U: PartialEq,
        FI: Copy + Into<U>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    impl<FI> R<bool, FI> {
        #[doc = "Value of the field as raw bits"]
        #[inline(always)]
        pub fn bit(&self) -> bool {
            self.bits
        }
        #[doc = "Returns `true` if the bit is clear (0)"]
        #[inline(always)]
        pub fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = "Returns `true` if the bit is set (1)"]
        #[inline(always)]
        pub fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    #[doc = "Register writer"]
    #[doc = ""]
    #[doc = "Used as an argument to the closures in the [`write`](Reg::write) and [`modify`](Reg::modify) methods of the register"]
    pub struct W<U, REG> {
        #[doc = "Writable bits"]
        pub(crate) bits: U,
        _reg: marker::PhantomData<REG>,
    }
    impl<U, REG> W<U, REG> {
        #[doc = "Writes raw bits to the register"]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: U) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc = "Used if enumerated values cover not the whole range"]
    #[derive(Clone, Copy, PartialEq)]
    pub enum Variant<U, T> {
        #[doc = "Expected variant"]
        Val(T),
        #[doc = "Raw bits"]
        Res(U),
    }
}
#[doc = "Always On (AON) Battery And Temperature MONitor (BATMON) residing in the AON domain Note: This module only supports 32 bit Read/Write access from MCU."]
pub struct AON_BATMON {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON_BATMON {}
impl AON_BATMON {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon_batmon::RegisterBlock {
        0x4009_5000 as *const _
    }
}
impl Deref for AON_BATMON {
    type Target = aon_batmon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AON_BATMON::ptr() }
    }
}
#[doc = "Always On (AON) Battery And Temperature MONitor (BATMON) residing in the AON domain Note: This module only supports 32 bit Read/Write access from MCU."]
pub mod aon_batmon {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Internal. Only to be used through TI provided API."]
        pub ctl: CTL,
        #[doc = "0x04 - Internal. Only to be used through TI provided API."]
        pub meascfg: MEASCFG,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - Internal. Only to be used through TI provided API."]
        pub tempp0: TEMPP0,
        #[doc = "0x10 - Internal. Only to be used through TI provided API."]
        pub tempp1: TEMPP1,
        #[doc = "0x14 - Internal. Only to be used through TI provided API."]
        pub tempp2: TEMPP2,
        #[doc = "0x18 - Internal. Only to be used through TI provided API."]
        pub batmonp0: BATMONP0,
        #[doc = "0x1c - Internal. Only to be used through TI provided API."]
        pub batmonp1: BATMONP1,
        #[doc = "0x20 - Internal. Only to be used through TI provided API."]
        pub iostrp0: IOSTRP0,
        #[doc = "0x24 - Internal. Only to be used through TI provided API."]
        pub flashpumpp0: FLASHPUMPP0,
        #[doc = "0x28 - Last Measured Battery Voltage This register may be read while BATUPD.STAT = 1"]
        pub bat: BAT,
        #[doc = "0x2c - Battery Update Indicates BAT Updates"]
        pub batupd: BATUPD,
        #[doc = "0x30 - Temperature Last Measured Temperature in Degrees Celsius This register may be read while TEMPUPD.STAT = 1."]
        pub temp: TEMP,
        #[doc = "0x34 - Temperature Update Indicates TEMP Updates"]
        pub tempupd: TEMPUPD,
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CALC_EN`"]
        pub type CALC_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALC_EN`"]
        pub struct CALC_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALC_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `MEAS_EN`"]
        pub type MEAS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEAS_EN`"]
        pub struct MEAS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEAS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - CALC_EN"]
            #[inline(always)]
            pub fn calc_en(&self) -> CALC_EN_R {
                CALC_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - MEAS_EN"]
            #[inline(always)]
            pub fn meas_en(&self) -> MEAS_EN_R {
                MEAS_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - CALC_EN"]
            #[inline(always)]
            pub fn calc_en(&mut self) -> CALC_EN_W {
                CALC_EN_W { w: self }
            }
            #[doc = "Bit 0 - MEAS_EN"]
            #[inline(always)]
            pub fn meas_en(&mut self) -> MEAS_EN_W {
                MEAS_EN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [meascfg](meascfg) module"]
    pub type MEASCFG = crate::Reg<u32, _MEASCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MEASCFG;
    #[doc = "`read()` method returns [meascfg::R](meascfg::R) reader structure"]
    impl crate::Readable for MEASCFG {}
    #[doc = "`write(|w| ..)` method takes [meascfg::W](meascfg::W) writer structure"]
    impl crate::Writable for MEASCFG {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod meascfg {
        #[doc = "Reader of register MEASCFG"]
        pub type R = crate::R<u32, super::MEASCFG>;
        #[doc = "Writer for register MEASCFG"]
        pub type W = crate::W<u32, super::MEASCFG>;
        #[doc = "Register MEASCFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::MEASCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PER`"]
        pub type PER_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PER`"]
        pub struct PER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - PER"]
            #[inline(always)]
            pub fn per(&self) -> PER_R {
                PER_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - PER"]
            #[inline(always)]
            pub fn per(&mut self) -> PER_W {
                PER_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tempp0](tempp0) module"]
    pub type TEMPP0 = crate::Reg<u32, _TEMPP0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TEMPP0;
    #[doc = "`read()` method returns [tempp0::R](tempp0::R) reader structure"]
    impl crate::Readable for TEMPP0 {}
    #[doc = "`write(|w| ..)` method takes [tempp0::W](tempp0::W) writer structure"]
    impl crate::Writable for TEMPP0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod tempp0 {
        #[doc = "Reader of register TEMPP0"]
        pub type R = crate::R<u32, super::TEMPP0>;
        #[doc = "Writer for register TEMPP0"]
        pub type W = crate::W<u32, super::TEMPP0>;
        #[doc = "Register TEMPP0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::TEMPP0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tempp1](tempp1) module"]
    pub type TEMPP1 = crate::Reg<u32, _TEMPP1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TEMPP1;
    #[doc = "`read()` method returns [tempp1::R](tempp1::R) reader structure"]
    impl crate::Readable for TEMPP1 {}
    #[doc = "`write(|w| ..)` method takes [tempp1::W](tempp1::W) writer structure"]
    impl crate::Writable for TEMPP1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod tempp1 {
        #[doc = "Reader of register TEMPP1"]
        pub type R = crate::R<u32, super::TEMPP1>;
        #[doc = "Writer for register TEMPP1"]
        pub type W = crate::W<u32, super::TEMPP1>;
        #[doc = "Register TEMPP1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::TEMPP1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tempp2](tempp2) module"]
    pub type TEMPP2 = crate::Reg<u32, _TEMPP2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TEMPP2;
    #[doc = "`read()` method returns [tempp2::R](tempp2::R) reader structure"]
    impl crate::Readable for TEMPP2 {}
    #[doc = "`write(|w| ..)` method takes [tempp2::W](tempp2::W) writer structure"]
    impl crate::Writable for TEMPP2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod tempp2 {
        #[doc = "Reader of register TEMPP2"]
        pub type R = crate::R<u32, super::TEMPP2>;
        #[doc = "Writer for register TEMPP2"]
        pub type W = crate::W<u32, super::TEMPP2>;
        #[doc = "Register TEMPP2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::TEMPP2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [batmonp0](batmonp0) module"]
    pub type BATMONP0 = crate::Reg<u32, _BATMONP0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BATMONP0;
    #[doc = "`read()` method returns [batmonp0::R](batmonp0::R) reader structure"]
    impl crate::Readable for BATMONP0 {}
    #[doc = "`write(|w| ..)` method takes [batmonp0::W](batmonp0::W) writer structure"]
    impl crate::Writable for BATMONP0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod batmonp0 {
        #[doc = "Reader of register BATMONP0"]
        pub type R = crate::R<u32, super::BATMONP0>;
        #[doc = "Writer for register BATMONP0"]
        pub type W = crate::W<u32, super::BATMONP0>;
        #[doc = "Register BATMONP0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::BATMONP0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [batmonp1](batmonp1) module"]
    pub type BATMONP1 = crate::Reg<u32, _BATMONP1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BATMONP1;
    #[doc = "`read()` method returns [batmonp1::R](batmonp1::R) reader structure"]
    impl crate::Readable for BATMONP1 {}
    #[doc = "`write(|w| ..)` method takes [batmonp1::W](batmonp1::W) writer structure"]
    impl crate::Writable for BATMONP1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod batmonp1 {
        #[doc = "Reader of register BATMONP1"]
        pub type R = crate::R<u32, super::BATMONP1>;
        #[doc = "Writer for register BATMONP1"]
        pub type W = crate::W<u32, super::BATMONP1>;
        #[doc = "Register BATMONP1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::BATMONP1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iostrp0](iostrp0) module"]
    pub type IOSTRP0 = crate::Reg<u32, _IOSTRP0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOSTRP0;
    #[doc = "`read()` method returns [iostrp0::R](iostrp0::R) reader structure"]
    impl crate::Readable for IOSTRP0 {}
    #[doc = "`write(|w| ..)` method takes [iostrp0::W](iostrp0::W) writer structure"]
    impl crate::Writable for IOSTRP0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod iostrp0 {
        #[doc = "Reader of register IOSTRP0"]
        pub type R = crate::R<u32, super::IOSTRP0>;
        #[doc = "Writer for register IOSTRP0"]
        pub type W = crate::W<u32, super::IOSTRP0>;
        #[doc = "Register IOSTRP0 `reset()`'s with value 0x28"]
        impl crate::ResetValue for super::IOSTRP0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x28
            }
        }
        #[doc = "Reader of field `CFG2`"]
        pub type CFG2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG2`"]
        pub struct CFG2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CFG1`"]
        pub type CFG1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG1`"]
        pub struct CFG1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:5 - CFG2"]
            #[inline(always)]
            pub fn cfg2(&self) -> CFG2_R {
                CFG2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - CFG1"]
            #[inline(always)]
            pub fn cfg1(&self) -> CFG1_R {
                CFG1_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:5 - CFG2"]
            #[inline(always)]
            pub fn cfg2(&mut self) -> CFG2_W {
                CFG2_W { w: self }
            }
            #[doc = "Bits 0:3 - CFG1"]
            #[inline(always)]
            pub fn cfg1(&mut self) -> CFG1_W {
                CFG1_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flashpumpp0](flashpumpp0) module"]
    pub type FLASHPUMPP0 = crate::Reg<u32, _FLASHPUMPP0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASHPUMPP0;
    #[doc = "`read()` method returns [flashpumpp0::R](flashpumpp0::R) reader structure"]
    impl crate::Readable for FLASHPUMPP0 {}
    #[doc = "`write(|w| ..)` method takes [flashpumpp0::W](flashpumpp0::W) writer structure"]
    impl crate::Writable for FLASHPUMPP0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flashpumpp0 {
        #[doc = "Reader of register FLASHPUMPP0"]
        pub type R = crate::R<u32, super::FLASHPUMPP0>;
        #[doc = "Writer for register FLASHPUMPP0"]
        pub type W = crate::W<u32, super::FLASHPUMPP0>;
        #[doc = "Register FLASHPUMPP0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLASHPUMPP0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FALLB`"]
        pub type FALLB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FALLB`"]
        pub struct FALLB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FALLB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `HIGHLIM`"]
        pub type HIGHLIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HIGHLIM`"]
        pub struct HIGHLIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HIGHLIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `LOWLIM`"]
        pub type LOWLIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LOWLIM`"]
        pub struct LOWLIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOWLIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVR`"]
        pub struct OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - FALLB"]
            #[inline(always)]
            pub fn fallb(&self) -> FALLB_R {
                FALLB_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - HIGHLIM"]
            #[inline(always)]
            pub fn highlim(&self) -> HIGHLIM_R {
                HIGHLIM_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bit 5 - LOWLIM"]
            #[inline(always)]
            pub fn lowlim(&self) -> LOWLIM_R {
                LOWLIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - OVR"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 0:3 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 8 - FALLB"]
            #[inline(always)]
            pub fn fallb(&mut self) -> FALLB_W {
                FALLB_W { w: self }
            }
            #[doc = "Bits 6:7 - HIGHLIM"]
            #[inline(always)]
            pub fn highlim(&mut self) -> HIGHLIM_W {
                HIGHLIM_W { w: self }
            }
            #[doc = "Bit 5 - LOWLIM"]
            #[inline(always)]
            pub fn lowlim(&mut self) -> LOWLIM_W {
                LOWLIM_W { w: self }
            }
            #[doc = "Bit 4 - OVR"]
            #[inline(always)]
            pub fn ovr(&mut self) -> OVR_W {
                OVR_W { w: self }
            }
            #[doc = "Bits 0:3 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Last Measured Battery Voltage This register may be read while BATUPD.STAT = 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bat](bat) module"]
    pub type BAT = crate::Reg<u32, _BAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BAT;
    #[doc = "`read()` method returns [bat::R](bat::R) reader structure"]
    impl crate::Readable for BAT {}
    #[doc = "Last Measured Battery Voltage This register may be read while BATUPD.STAT = 1"]
    pub mod bat {
        #[doc = "Reader of register BAT"]
        pub type R = crate::R<u32, super::BAT>;
        #[doc = "Reader of field `INT`"]
        pub type INT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `FRAC`"]
        pub type FRAC_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 8:10 - INT"]
            #[inline(always)]
            pub fn int(&self) -> INT_R {
                INT_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 0:7 - FRAC"]
            #[inline(always)]
            pub fn frac(&self) -> FRAC_R {
                FRAC_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Battery Update Indicates BAT Updates\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [batupd](batupd) module"]
    pub type BATUPD = crate::Reg<u32, _BATUPD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BATUPD;
    #[doc = "`read()` method returns [batupd::R](batupd::R) reader structure"]
    impl crate::Readable for BATUPD {}
    #[doc = "`write(|w| ..)` method takes [batupd::W](batupd::W) writer structure"]
    impl crate::Writable for BATUPD {}
    #[doc = "Battery Update Indicates BAT Updates"]
    pub mod batupd {
        #[doc = "Reader of register BATUPD"]
        pub type R = crate::R<u32, super::BATUPD>;
        #[doc = "Writer for register BATUPD"]
        pub type W = crate::W<u32, super::BATUPD>;
        #[doc = "Register BATUPD `reset()`'s with value 0"]
        impl crate::ResetValue for super::BATUPD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Temperature Last Measured Temperature in Degrees Celsius This register may be read while TEMPUPD.STAT = 1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [temp](temp) module"]
    pub type TEMP = crate::Reg<u32, _TEMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TEMP;
    #[doc = "`read()` method returns [temp::R](temp::R) reader structure"]
    impl crate::Readable for TEMP {}
    #[doc = "Temperature Last Measured Temperature in Degrees Celsius This register may be read while TEMPUPD.STAT = 1."]
    pub mod temp {
        #[doc = "Reader of register TEMP"]
        pub type R = crate::R<u32, super::TEMP>;
        #[doc = "Reader of field `INT`"]
        pub type INT_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 8:16 - INT"]
            #[inline(always)]
            pub fn int(&self) -> INT_R {
                INT_R::new(((self.bits >> 8) & 0x01ff) as u16)
            }
        }
    }
    #[doc = "Temperature Update Indicates TEMP Updates\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tempupd](tempupd) module"]
    pub type TEMPUPD = crate::Reg<u32, _TEMPUPD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TEMPUPD;
    #[doc = "`read()` method returns [tempupd::R](tempupd::R) reader structure"]
    impl crate::Readable for TEMPUPD {}
    #[doc = "`write(|w| ..)` method takes [tempupd::W](tempupd::W) writer structure"]
    impl crate::Writable for TEMPUPD {}
    #[doc = "Temperature Update Indicates TEMP Updates"]
    pub mod tempupd {
        #[doc = "Reader of register TEMPUPD"]
        pub type R = crate::R<u32, super::TEMPUPD>;
        #[doc = "Writer for register TEMPUPD"]
        pub type W = crate::W<u32, super::TEMPUPD>;
        #[doc = "Register TEMPUPD `reset()`'s with value 0"]
        impl crate::ResetValue for super::TEMPUPD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
}
#[doc = "This module configures the event fabric located in the AON domain. Note: This module is only supporting 32 bit ReadWrite access from MCU"]
pub struct AON_EVENT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON_EVENT {}
impl AON_EVENT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon_event::RegisterBlock {
        0x4009_3000 as *const _
    }
}
impl Deref for AON_EVENT {
    type Target = aon_event::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AON_EVENT::ptr() }
    }
}
#[doc = "This module configures the event fabric located in the AON domain. Note: This module is only supporting 32 bit ReadWrite access from MCU"]
pub mod aon_event {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Wake-up Selector For MCU This register contains pointers to 4 events which are routed to AON_WUC as wakeup sources for MCU. AON_WUC will start a wakeup sequence for the MCU domain when either of the 4 selected events are asserted. A wakeup sequence will guarantee that the MCU power switches are turned on, LDO resources are available and SCLK_HF is available and selected as clock source for MCU. Note: It is recommended ( or required when AON_WUC:MCUCLK.PWR_DWN_SRC=NONE) to also setup a wakeup event here before MCU is requesting powerdown. ( PRCM requests uLDO, see conditions in PRCM:VDCTL.ULDO ) as it will speed up the wakeup procedure."]
        pub mcuwusel: MCUWUSEL,
        #[doc = "0x04 - Wake-up Selector For AUX This register contains pointers to 3 events which are routed to AON_WUC as wakeup sources for AUX. AON_WUC will start a wakeup sequence for the AUX domain when either of the 3 selected events are asserted. A wakeup sequence will guarantee that the AUX power switches are turned on, LDO resources are available and SCLK_HF is available and selected as clock source for AUX. Note: It is recommended ( or required when AON_WUC:AUXCLK.PWR_DWN_SRC=NONE) to also setup a wakeup event here before AUX is requesting powerdown. ( AUX_WUC:PWRDWNREQ.REQ is asserted\\]
) as it will speed up the wakeup procedure."]
        pub auxwusel: AUXWUSEL,
        #[doc = "0x08 - Event Selector For MCU Event Fabric This register contains pointers for 3 AON events that are routed to the MCU Event Fabric EVENT"]
        pub evtomcusel: EVTOMCUSEL,
        #[doc = "0x0c - RTC Capture Event Selector For AON_RTC This register contains a pointer to select an AON event for RTC capture. Please refer to AON_RTC:CH1CAPT"]
        pub rtcsel: RTCSEL,
    }
    #[doc = "Wake-up Selector For MCU This register contains pointers to 4 events which are routed to AON_WUC as wakeup sources for MCU. AON_WUC will start a wakeup sequence for the MCU domain when either of the 4 selected events are asserted. A wakeup sequence will guarantee that the MCU power switches are turned on, LDO resources are available and SCLK_HF is available and selected as clock source for MCU. Note: It is recommended ( or required when AON_WUC:MCUCLK.PWR_DWN_SRC=NONE) to also setup a wakeup event here before MCU is requesting powerdown. ( PRCM requests uLDO, see conditions in PRCM:VDCTL.ULDO ) as it will speed up the wakeup procedure.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcuwusel](mcuwusel) module"]
    pub type MCUWUSEL = crate::Reg<u32, _MCUWUSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCUWUSEL;
    #[doc = "`read()` method returns [mcuwusel::R](mcuwusel::R) reader structure"]
    impl crate::Readable for MCUWUSEL {}
    #[doc = "`write(|w| ..)` method takes [mcuwusel::W](mcuwusel::W) writer structure"]
    impl crate::Writable for MCUWUSEL {}
    #[doc = "Wake-up Selector For MCU This register contains pointers to 4 events which are routed to AON_WUC as wakeup sources for MCU. AON_WUC will start a wakeup sequence for the MCU domain when either of the 4 selected events are asserted. A wakeup sequence will guarantee that the MCU power switches are turned on, LDO resources are available and SCLK_HF is available and selected as clock source for MCU. Note: It is recommended ( or required when AON_WUC:MCUCLK.PWR_DWN_SRC=NONE) to also setup a wakeup event here before MCU is requesting powerdown. ( PRCM requests uLDO, see conditions in PRCM:VDCTL.ULDO ) as it will speed up the wakeup procedure."]
    pub mod mcuwusel {
        #[doc = "Reader of register MCUWUSEL"]
        pub type R = crate::R<u32, super::MCUWUSEL>;
        #[doc = "Writer for register MCUWUSEL"]
        pub type W = crate::W<u32, super::MCUWUSEL>;
        #[doc = "Register MCUWUSEL `reset()`'s with value 0x3f3f_3f3f"]
        impl crate::ResetValue for super::MCUWUSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x3f3f_3f3f
            }
        }
        #[doc = "Reader of field `WU3_EV`"]
        pub type WU3_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU3_EV`"]
        pub struct WU3_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU3_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 24)) | (((value as u32) & 0x3f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `WU2_EV`"]
        pub type WU2_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU2_EV`"]
        pub struct WU2_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU2_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 16)) | (((value as u32) & 0x3f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `WU1_EV`"]
        pub type WU1_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU1_EV`"]
        pub struct WU1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU1_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 8)) | (((value as u32) & 0x3f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `WU0_EV`"]
        pub type WU0_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU0_EV`"]
        pub struct WU0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU0_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:29 - WU3_EV"]
            #[inline(always)]
            pub fn wu3_ev(&self) -> WU3_EV_R {
                WU3_EV_R::new(((self.bits >> 24) & 0x3f) as u8)
            }
            #[doc = "Bits 16:21 - WU2_EV"]
            #[inline(always)]
            pub fn wu2_ev(&self) -> WU2_EV_R {
                WU2_EV_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bits 8:13 - WU1_EV"]
            #[inline(always)]
            pub fn wu1_ev(&self) -> WU1_EV_R {
                WU1_EV_R::new(((self.bits >> 8) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - WU0_EV"]
            #[inline(always)]
            pub fn wu0_ev(&self) -> WU0_EV_R {
                WU0_EV_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:29 - WU3_EV"]
            #[inline(always)]
            pub fn wu3_ev(&mut self) -> WU3_EV_W {
                WU3_EV_W { w: self }
            }
            #[doc = "Bits 16:21 - WU2_EV"]
            #[inline(always)]
            pub fn wu2_ev(&mut self) -> WU2_EV_W {
                WU2_EV_W { w: self }
            }
            #[doc = "Bits 8:13 - WU1_EV"]
            #[inline(always)]
            pub fn wu1_ev(&mut self) -> WU1_EV_W {
                WU1_EV_W { w: self }
            }
            #[doc = "Bits 0:5 - WU0_EV"]
            #[inline(always)]
            pub fn wu0_ev(&mut self) -> WU0_EV_W {
                WU0_EV_W { w: self }
            }
        }
    }
    #[doc = "Wake-up Selector For AUX This register contains pointers to 3 events which are routed to AON_WUC as wakeup sources for AUX. AON_WUC will start a wakeup sequence for the AUX domain when either of the 3 selected events are asserted. A wakeup sequence will guarantee that the AUX power switches are turned on, LDO resources are available and SCLK_HF is available and selected as clock source for AUX. Note: It is recommended ( or required when AON_WUC:AUXCLK.PWR_DWN_SRC=NONE) to also setup a wakeup event here before AUX is requesting powerdown. ( AUX_WUC:PWRDWNREQ.REQ is asserted\\]
) as it will speed up the wakeup procedure.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [auxwusel](auxwusel) module"]
    pub type AUXWUSEL = crate::Reg<u32, _AUXWUSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUXWUSEL;
    #[doc = "`read()` method returns [auxwusel::R](auxwusel::R) reader structure"]
    impl crate::Readable for AUXWUSEL {}
    #[doc = "`write(|w| ..)` method takes [auxwusel::W](auxwusel::W) writer structure"]
    impl crate::Writable for AUXWUSEL {}
    #[doc = "Wake-up Selector For AUX This register contains pointers to 3 events which are routed to AON_WUC as wakeup sources for AUX. AON_WUC will start a wakeup sequence for the AUX domain when either of the 3 selected events are asserted. A wakeup sequence will guarantee that the AUX power switches are turned on, LDO resources are available and SCLK_HF is available and selected as clock source for AUX. Note: It is recommended ( or required when AON_WUC:AUXCLK.PWR_DWN_SRC=NONE) to also setup a wakeup event here before AUX is requesting powerdown. ( AUX_WUC:PWRDWNREQ.REQ is asserted\\]
) as it will speed up the wakeup procedure."]
    pub mod auxwusel {
        #[doc = "Reader of register AUXWUSEL"]
        pub type R = crate::R<u32, super::AUXWUSEL>;
        #[doc = "Writer for register AUXWUSEL"]
        pub type W = crate::W<u32, super::AUXWUSEL>;
        #[doc = "Register AUXWUSEL `reset()`'s with value 0x003f_3f3f"]
        impl crate::ResetValue for super::AUXWUSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x003f_3f3f
            }
        }
        #[doc = "Reader of field `WU2_EV`"]
        pub type WU2_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU2_EV`"]
        pub struct WU2_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU2_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 16)) | (((value as u32) & 0x3f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `WU1_EV`"]
        pub type WU1_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU1_EV`"]
        pub struct WU1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU1_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 8)) | (((value as u32) & 0x3f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `WU0_EV`"]
        pub type WU0_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU0_EV`"]
        pub struct WU0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU0_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:21 - WU2_EV"]
            #[inline(always)]
            pub fn wu2_ev(&self) -> WU2_EV_R {
                WU2_EV_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bits 8:13 - WU1_EV"]
            #[inline(always)]
            pub fn wu1_ev(&self) -> WU1_EV_R {
                WU1_EV_R::new(((self.bits >> 8) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - WU0_EV"]
            #[inline(always)]
            pub fn wu0_ev(&self) -> WU0_EV_R {
                WU0_EV_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:21 - WU2_EV"]
            #[inline(always)]
            pub fn wu2_ev(&mut self) -> WU2_EV_W {
                WU2_EV_W { w: self }
            }
            #[doc = "Bits 8:13 - WU1_EV"]
            #[inline(always)]
            pub fn wu1_ev(&mut self) -> WU1_EV_W {
                WU1_EV_W { w: self }
            }
            #[doc = "Bits 0:5 - WU0_EV"]
            #[inline(always)]
            pub fn wu0_ev(&mut self) -> WU0_EV_W {
                WU0_EV_W { w: self }
            }
        }
    }
    #[doc = "Event Selector For MCU Event Fabric This register contains pointers for 3 AON events that are routed to the MCU Event Fabric EVENT\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtomcusel](evtomcusel) module"]
    pub type EVTOMCUSEL = crate::Reg<u32, _EVTOMCUSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOMCUSEL;
    #[doc = "`read()` method returns [evtomcusel::R](evtomcusel::R) reader structure"]
    impl crate::Readable for EVTOMCUSEL {}
    #[doc = "`write(|w| ..)` method takes [evtomcusel::W](evtomcusel::W) writer structure"]
    impl crate::Writable for EVTOMCUSEL {}
    #[doc = "Event Selector For MCU Event Fabric This register contains pointers for 3 AON events that are routed to the MCU Event Fabric EVENT"]
    pub mod evtomcusel {
        #[doc = "Reader of register EVTOMCUSEL"]
        pub type R = crate::R<u32, super::EVTOMCUSEL>;
        #[doc = "Writer for register EVTOMCUSEL"]
        pub type W = crate::W<u32, super::EVTOMCUSEL>;
        #[doc = "Register EVTOMCUSEL `reset()`'s with value 0x002b_2b2b"]
        impl crate::ResetValue for super::EVTOMCUSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x002b_2b2b
            }
        }
        #[doc = "Reader of field `AON_PROG2_EV`"]
        pub type AON_PROG2_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AON_PROG2_EV`"]
        pub struct AON_PROG2_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_PROG2_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 16)) | (((value as u32) & 0x3f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `AON_PROG1_EV`"]
        pub type AON_PROG1_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AON_PROG1_EV`"]
        pub struct AON_PROG1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_PROG1_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 8)) | (((value as u32) & 0x3f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AON_PROG0_EV`"]
        pub type AON_PROG0_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AON_PROG0_EV`"]
        pub struct AON_PROG0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_PROG0_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:21 - AON_PROG2_EV"]
            #[inline(always)]
            pub fn aon_prog2_ev(&self) -> AON_PROG2_EV_R {
                AON_PROG2_EV_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bits 8:13 - AON_PROG1_EV"]
            #[inline(always)]
            pub fn aon_prog1_ev(&self) -> AON_PROG1_EV_R {
                AON_PROG1_EV_R::new(((self.bits >> 8) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - AON_PROG0_EV"]
            #[inline(always)]
            pub fn aon_prog0_ev(&self) -> AON_PROG0_EV_R {
                AON_PROG0_EV_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:21 - AON_PROG2_EV"]
            #[inline(always)]
            pub fn aon_prog2_ev(&mut self) -> AON_PROG2_EV_W {
                AON_PROG2_EV_W { w: self }
            }
            #[doc = "Bits 8:13 - AON_PROG1_EV"]
            #[inline(always)]
            pub fn aon_prog1_ev(&mut self) -> AON_PROG1_EV_W {
                AON_PROG1_EV_W { w: self }
            }
            #[doc = "Bits 0:5 - AON_PROG0_EV"]
            #[inline(always)]
            pub fn aon_prog0_ev(&mut self) -> AON_PROG0_EV_W {
                AON_PROG0_EV_W { w: self }
            }
        }
    }
    #[doc = "RTC Capture Event Selector For AON_RTC This register contains a pointer to select an AON event for RTC capture. Please refer to AON_RTC:CH1CAPT\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcsel](rtcsel) module"]
    pub type RTCSEL = crate::Reg<u32, _RTCSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCSEL;
    #[doc = "`read()` method returns [rtcsel::R](rtcsel::R) reader structure"]
    impl crate::Readable for RTCSEL {}
    #[doc = "`write(|w| ..)` method takes [rtcsel::W](rtcsel::W) writer structure"]
    impl crate::Writable for RTCSEL {}
    #[doc = "RTC Capture Event Selector For AON_RTC This register contains a pointer to select an AON event for RTC capture. Please refer to AON_RTC:CH1CAPT"]
    pub mod rtcsel {
        #[doc = "Reader of register RTCSEL"]
        pub type R = crate::R<u32, super::RTCSEL>;
        #[doc = "Writer for register RTCSEL"]
        pub type W = crate::W<u32, super::RTCSEL>;
        #[doc = "Register RTCSEL `reset()`'s with value 0x3f"]
        impl crate::ResetValue for super::RTCSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x3f
            }
        }
        #[doc = "Reader of field `RTC_CH1_CAPT_EV`"]
        pub type RTC_CH1_CAPT_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RTC_CH1_CAPT_EV`"]
        pub struct RTC_CH1_CAPT_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTC_CH1_CAPT_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - RTC_CH1_CAPT_EV"]
            #[inline(always)]
            pub fn rtc_ch1_capt_ev(&self) -> RTC_CH1_CAPT_EV_R {
                RTC_CH1_CAPT_EV_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - RTC_CH1_CAPT_EV"]
            #[inline(always)]
            pub fn rtc_ch1_capt_ev(&mut self) -> RTC_CH1_CAPT_EV_W {
                RTC_CH1_CAPT_EV_W { w: self }
            }
        }
    }
}
#[doc = "Always On (AON) IO Controller - controls IO operation when the MCU IO Controller (IOC) is powered off and resides in the AON domain. Note: This module only supports 32 bit Read/Write access from MCU."]
pub struct AON_IOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON_IOC {}
impl AON_IOC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon_ioc::RegisterBlock {
        0x4009_4000 as *const _
    }
}
impl Deref for AON_IOC {
    type Target = aon_ioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AON_IOC::ptr() }
    }
}
#[doc = "Always On (AON) IO Controller - controls IO operation when the MCU IO Controller (IOC) is powered off and resides in the AON domain. Note: This module only supports 32 bit Read/Write access from MCU."]
pub mod aon_ioc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Internal. Only to be used through TI provided API."]
        pub iostrmin: IOSTRMIN,
        #[doc = "0x04 - Internal. Only to be used through TI provided API."]
        pub iostrmed: IOSTRMED,
        #[doc = "0x08 - Internal. Only to be used through TI provided API."]
        pub iostrmax: IOSTRMAX,
        #[doc = "0x0c - IO Latch Control Controls transparency of all latches holding I/O or configuration state from the MCU IOC"]
        pub ioclatch: IOCLATCH,
        #[doc = "0x10 - SCLK_LF External Output Control"]
        pub clk32kctl: CLK32KCTL,
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iostrmin](iostrmin) module"]
    pub type IOSTRMIN = crate::Reg<u32, _IOSTRMIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOSTRMIN;
    #[doc = "`read()` method returns [iostrmin::R](iostrmin::R) reader structure"]
    impl crate::Readable for IOSTRMIN {}
    #[doc = "`write(|w| ..)` method takes [iostrmin::W](iostrmin::W) writer structure"]
    impl crate::Writable for IOSTRMIN {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod iostrmin {
        #[doc = "Reader of register IOSTRMIN"]
        pub type R = crate::R<u32, super::IOSTRMIN>;
        #[doc = "Writer for register IOSTRMIN"]
        pub type W = crate::W<u32, super::IOSTRMIN>;
        #[doc = "Register IOSTRMIN `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::IOSTRMIN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Reader of field `GRAY_CODE`"]
        pub type GRAY_CODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GRAY_CODE`"]
        pub struct GRAY_CODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GRAY_CODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - GRAY_CODE"]
            #[inline(always)]
            pub fn gray_code(&self) -> GRAY_CODE_R {
                GRAY_CODE_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - GRAY_CODE"]
            #[inline(always)]
            pub fn gray_code(&mut self) -> GRAY_CODE_W {
                GRAY_CODE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iostrmed](iostrmed) module"]
    pub type IOSTRMED = crate::Reg<u32, _IOSTRMED>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOSTRMED;
    #[doc = "`read()` method returns [iostrmed::R](iostrmed::R) reader structure"]
    impl crate::Readable for IOSTRMED {}
    #[doc = "`write(|w| ..)` method takes [iostrmed::W](iostrmed::W) writer structure"]
    impl crate::Writable for IOSTRMED {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod iostrmed {
        #[doc = "Reader of register IOSTRMED"]
        pub type R = crate::R<u32, super::IOSTRMED>;
        #[doc = "Writer for register IOSTRMED"]
        pub type W = crate::W<u32, super::IOSTRMED>;
        #[doc = "Register IOSTRMED `reset()`'s with value 0x06"]
        impl crate::ResetValue for super::IOSTRMED {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x06
            }
        }
        #[doc = "Reader of field `GRAY_CODE`"]
        pub type GRAY_CODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GRAY_CODE`"]
        pub struct GRAY_CODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GRAY_CODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - GRAY_CODE"]
            #[inline(always)]
            pub fn gray_code(&self) -> GRAY_CODE_R {
                GRAY_CODE_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - GRAY_CODE"]
            #[inline(always)]
            pub fn gray_code(&mut self) -> GRAY_CODE_W {
                GRAY_CODE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iostrmax](iostrmax) module"]
    pub type IOSTRMAX = crate::Reg<u32, _IOSTRMAX>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOSTRMAX;
    #[doc = "`read()` method returns [iostrmax::R](iostrmax::R) reader structure"]
    impl crate::Readable for IOSTRMAX {}
    #[doc = "`write(|w| ..)` method takes [iostrmax::W](iostrmax::W) writer structure"]
    impl crate::Writable for IOSTRMAX {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod iostrmax {
        #[doc = "Reader of register IOSTRMAX"]
        pub type R = crate::R<u32, super::IOSTRMAX>;
        #[doc = "Writer for register IOSTRMAX"]
        pub type W = crate::W<u32, super::IOSTRMAX>;
        #[doc = "Register IOSTRMAX `reset()`'s with value 0x05"]
        impl crate::ResetValue for super::IOSTRMAX {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x05
            }
        }
        #[doc = "Reader of field `GRAY_CODE`"]
        pub type GRAY_CODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GRAY_CODE`"]
        pub struct GRAY_CODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GRAY_CODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - GRAY_CODE"]
            #[inline(always)]
            pub fn gray_code(&self) -> GRAY_CODE_R {
                GRAY_CODE_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - GRAY_CODE"]
            #[inline(always)]
            pub fn gray_code(&mut self) -> GRAY_CODE_W {
                GRAY_CODE_W { w: self }
            }
        }
    }
    #[doc = "IO Latch Control Controls transparency of all latches holding I/O or configuration state from the MCU IOC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ioclatch](ioclatch) module"]
    pub type IOCLATCH = crate::Reg<u32, _IOCLATCH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCLATCH;
    #[doc = "`read()` method returns [ioclatch::R](ioclatch::R) reader structure"]
    impl crate::Readable for IOCLATCH {}
    #[doc = "`write(|w| ..)` method takes [ioclatch::W](ioclatch::W) writer structure"]
    impl crate::Writable for IOCLATCH {}
    #[doc = "IO Latch Control Controls transparency of all latches holding I/O or configuration state from the MCU IOC"]
    pub mod ioclatch {
        #[doc = "Reader of register IOCLATCH"]
        pub type R = crate::R<u32, super::IOCLATCH>;
        #[doc = "Writer for register IOCLATCH"]
        pub type W = crate::W<u32, super::IOCLATCH>;
        #[doc = "Register IOCLATCH `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::IOCLATCH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "SCLK_LF External Output Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk32kctl](clk32kctl) module"]
    pub type CLK32KCTL = crate::Reg<u32, _CLK32KCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLK32KCTL;
    #[doc = "`read()` method returns [clk32kctl::R](clk32kctl::R) reader structure"]
    impl crate::Readable for CLK32KCTL {}
    #[doc = "`write(|w| ..)` method takes [clk32kctl::W](clk32kctl::W) writer structure"]
    impl crate::Writable for CLK32KCTL {}
    #[doc = "SCLK_LF External Output Control"]
    pub mod clk32kctl {
        #[doc = "Reader of register CLK32KCTL"]
        pub type R = crate::R<u32, super::CLK32KCTL>;
        #[doc = "Writer for register CLK32KCTL"]
        pub type W = crate::W<u32, super::CLK32KCTL>;
        #[doc = "Register CLK32KCTL `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::CLK32KCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `OE_N`"]
        pub type OE_N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OE_N`"]
        pub struct OE_N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OE_N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - OE_N"]
            #[inline(always)]
            pub fn oe_n(&self) -> OE_N_R {
                OE_N_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - OE_N"]
            #[inline(always)]
            pub fn oe_n(&mut self) -> OE_N_W {
                OE_N_W { w: self }
            }
        }
    }
}
#[doc = "This component control the Real Time Clock residing in AON Note: This module is only supporting 32 bit ReadWrite access."]
pub struct AON_RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON_RTC {}
impl AON_RTC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon_rtc::RegisterBlock {
        0x4009_2000 as *const _
    }
}
impl Deref for AON_RTC {
    type Target = aon_rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AON_RTC::ptr() }
    }
}
#[doc = "This component control the Real Time Clock residing in AON Note: This module is only supporting 32 bit ReadWrite access."]
pub mod aon_rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control This register contains various bitfields for configuration of RTC"]
        pub ctl: CTL,
        #[doc = "0x04 - Event Flags, RTC Status This register contains event flags from the 3 RTC channels. Each flag will be cleared when writing a '1' to the corresponding bitfield."]
        pub evflags: EVFLAGS,
        #[doc = "0x08 - Second Counter Value, Integer Part"]
        pub sec: SEC,
        #[doc = "0x0c - Second Counter Value, Fractional Part"]
        pub subsec: SUBSEC,
        #[doc = "0x10 - Subseconds Increment Value added to SUBSEC.VALUE on every SCLK_LFclock cycle."]
        pub subsecinc: SUBSECINC,
        #[doc = "0x14 - Channel Configuration"]
        pub chctl: CHCTL,
        #[doc = "0x18 - Channel 0 Compare Value"]
        pub ch0cmp: CH0CMP,
        #[doc = "0x1c - Channel 1 Compare Value"]
        pub ch1cmp: CH1CMP,
        #[doc = "0x20 - Channel 2 Compare Value"]
        pub ch2cmp: CH2CMP,
        #[doc = "0x24 - Channel 2 Compare Value Auto-increment This register is primarily used to generate periodical wake-up for the AUX_SCE module, through the \\[AUX_EVCTL.EVSTAT0.AON_RTC\\]
event."]
        pub ch2cmpinc: CH2CMPINC,
        #[doc = "0x28 - Channel 1 Capture Value If CHCTL.CH1_EN = 1and CHCTL.CH1_CAPT_EN = 1, capture occurs on each rising edge of the event selected in AON_EVENT:RTCSEL."]
        pub ch1capt: CH1CAPT,
        #[doc = "0x2c - AON Synchronization This register is used for synchronizing between MCU and entire AON domain."]
        pub sync: SYNC,
    }
    #[doc = "Control This register contains various bitfields for configuration of RTC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control This register contains various bitfields for configuration of RTC"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMB_EV_MASK`"]
        pub type COMB_EV_MASK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMB_EV_MASK`"]
        pub struct COMB_EV_MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMB_EV_MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 16)) | (((value as u32) & 0x07) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `EV_DELAY`"]
        pub type EV_DELAY_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV_DELAY`"]
        pub struct EV_DELAY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_DELAY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `RESET`"]
        pub type RESET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RTC_4KHZ_EN`"]
        pub type RTC_4KHZ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTC_4KHZ_EN`"]
        pub struct RTC_4KHZ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTC_4KHZ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RTC_UPD_EN`"]
        pub type RTC_UPD_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTC_UPD_EN`"]
        pub struct RTC_UPD_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTC_UPD_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:18 - COMB_EV_MASK"]
            #[inline(always)]
            pub fn comb_ev_mask(&self) -> COMB_EV_MASK_R {
                COMB_EV_MASK_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - EV_DELAY"]
            #[inline(always)]
            pub fn ev_delay(&self) -> EV_DELAY_R {
                EV_DELAY_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - RESET"]
            #[inline(always)]
            pub fn reset(&self) -> RESET_R {
                RESET_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RTC_4KHZ_EN"]
            #[inline(always)]
            pub fn rtc_4khz_en(&self) -> RTC_4KHZ_EN_R {
                RTC_4KHZ_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTC_UPD_EN"]
            #[inline(always)]
            pub fn rtc_upd_en(&self) -> RTC_UPD_EN_R {
                RTC_UPD_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 16:18 - COMB_EV_MASK"]
            #[inline(always)]
            pub fn comb_ev_mask(&mut self) -> COMB_EV_MASK_W {
                COMB_EV_MASK_W { w: self }
            }
            #[doc = "Bits 8:11 - EV_DELAY"]
            #[inline(always)]
            pub fn ev_delay(&mut self) -> EV_DELAY_W {
                EV_DELAY_W { w: self }
            }
            #[doc = "Bit 7 - RESET"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
            #[doc = "Bit 2 - RTC_4KHZ_EN"]
            #[inline(always)]
            pub fn rtc_4khz_en(&mut self) -> RTC_4KHZ_EN_W {
                RTC_4KHZ_EN_W { w: self }
            }
            #[doc = "Bit 1 - RTC_UPD_EN"]
            #[inline(always)]
            pub fn rtc_upd_en(&mut self) -> RTC_UPD_EN_W {
                RTC_UPD_EN_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Event Flags, RTC Status This register contains event flags from the 3 RTC channels. Each flag will be cleared when writing a '1' to the corresponding bitfield.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evflags](evflags) module"]
    pub type EVFLAGS = crate::Reg<u32, _EVFLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVFLAGS;
    #[doc = "`read()` method returns [evflags::R](evflags::R) reader structure"]
    impl crate::Readable for EVFLAGS {}
    #[doc = "`write(|w| ..)` method takes [evflags::W](evflags::W) writer structure"]
    impl crate::Writable for EVFLAGS {}
    #[doc = "Event Flags, RTC Status This register contains event flags from the 3 RTC channels. Each flag will be cleared when writing a '1' to the corresponding bitfield."]
    pub mod evflags {
        #[doc = "Reader of register EVFLAGS"]
        pub type R = crate::R<u32, super::EVFLAGS>;
        #[doc = "Writer for register EVFLAGS"]
        pub type W = crate::W<u32, super::EVFLAGS>;
        #[doc = "Register EVFLAGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVFLAGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CH2`"]
        pub type CH2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH2`"]
        pub struct CH2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CH1`"]
        pub type CH1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH1`"]
        pub struct CH1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CH0`"]
        pub type CH0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH0`"]
        pub struct CH0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - CH2"]
            #[inline(always)]
            pub fn ch2(&self) -> CH2_R {
                CH2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CH1"]
            #[inline(always)]
            pub fn ch1(&self) -> CH1_R {
                CH1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CH0"]
            #[inline(always)]
            pub fn ch0(&self) -> CH0_R {
                CH0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - CH2"]
            #[inline(always)]
            pub fn ch2(&mut self) -> CH2_W {
                CH2_W { w: self }
            }
            #[doc = "Bit 8 - CH1"]
            #[inline(always)]
            pub fn ch1(&mut self) -> CH1_W {
                CH1_W { w: self }
            }
            #[doc = "Bit 0 - CH0"]
            #[inline(always)]
            pub fn ch0(&mut self) -> CH0_W {
                CH0_W { w: self }
            }
        }
    }
    #[doc = "Second Counter Value, Integer Part\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sec](sec) module"]
    pub type SEC = crate::Reg<u32, _SEC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SEC;
    #[doc = "`read()` method returns [sec::R](sec::R) reader structure"]
    impl crate::Readable for SEC {}
    #[doc = "`write(|w| ..)` method takes [sec::W](sec::W) writer structure"]
    impl crate::Writable for SEC {}
    #[doc = "Second Counter Value, Integer Part"]
    pub mod sec {
        #[doc = "Reader of register SEC"]
        pub type R = crate::R<u32, super::SEC>;
        #[doc = "Writer for register SEC"]
        pub type W = crate::W<u32, super::SEC>;
        #[doc = "Register SEC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SEC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Second Counter Value, Fractional Part\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [subsec](subsec) module"]
    pub type SUBSEC = crate::Reg<u32, _SUBSEC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SUBSEC;
    #[doc = "`read()` method returns [subsec::R](subsec::R) reader structure"]
    impl crate::Readable for SUBSEC {}
    #[doc = "`write(|w| ..)` method takes [subsec::W](subsec::W) writer structure"]
    impl crate::Writable for SUBSEC {}
    #[doc = "Second Counter Value, Fractional Part"]
    pub mod subsec {
        #[doc = "Reader of register SUBSEC"]
        pub type R = crate::R<u32, super::SUBSEC>;
        #[doc = "Writer for register SUBSEC"]
        pub type W = crate::W<u32, super::SUBSEC>;
        #[doc = "Register SUBSEC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SUBSEC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Subseconds Increment Value added to SUBSEC.VALUE on every SCLK_LFclock cycle.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [subsecinc](subsecinc) module"]
    pub type SUBSECINC = crate::Reg<u32, _SUBSECINC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SUBSECINC;
    #[doc = "`read()` method returns [subsecinc::R](subsecinc::R) reader structure"]
    impl crate::Readable for SUBSECINC {}
    #[doc = "Subseconds Increment Value added to SUBSEC.VALUE on every SCLK_LFclock cycle."]
    pub mod subsecinc {
        #[doc = "Reader of register SUBSECINC"]
        pub type R = crate::R<u32, super::SUBSECINC>;
        #[doc = "Reader of field `VALUEINC`"]
        pub type VALUEINC_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:23 - VALUEINC"]
            #[inline(always)]
            pub fn valueinc(&self) -> VALUEINC_R {
                VALUEINC_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Channel Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chctl](chctl) module"]
    pub type CHCTL = crate::Reg<u32, _CHCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CHCTL;
    #[doc = "`read()` method returns [chctl::R](chctl::R) reader structure"]
    impl crate::Readable for CHCTL {}
    #[doc = "`write(|w| ..)` method takes [chctl::W](chctl::W) writer structure"]
    impl crate::Writable for CHCTL {}
    #[doc = "Channel Configuration"]
    pub mod chctl {
        #[doc = "Reader of register CHCTL"]
        pub type R = crate::R<u32, super::CHCTL>;
        #[doc = "Writer for register CHCTL"]
        pub type W = crate::W<u32, super::CHCTL>;
        #[doc = "Register CHCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CHCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CH2_CONT_EN`"]
        pub type CH2_CONT_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH2_CONT_EN`"]
        pub struct CH2_CONT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2_CONT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `CH2_EN`"]
        pub type CH2_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH2_EN`"]
        pub struct CH2_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH2_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CH1_CAPT_EN`"]
        pub type CH1_CAPT_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH1_CAPT_EN`"]
        pub struct CH1_CAPT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1_CAPT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CH1_EN`"]
        pub type CH1_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH1_EN`"]
        pub struct CH1_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH1_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CH0_EN`"]
        pub type CH0_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CH0_EN`"]
        pub struct CH0_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CH0_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 18 - CH2_CONT_EN"]
            #[inline(always)]
            pub fn ch2_cont_en(&self) -> CH2_CONT_EN_R {
                CH2_CONT_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 16 - CH2_EN"]
            #[inline(always)]
            pub fn ch2_en(&self) -> CH2_EN_R {
                CH2_EN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CH1_CAPT_EN"]
            #[inline(always)]
            pub fn ch1_capt_en(&self) -> CH1_CAPT_EN_R {
                CH1_CAPT_EN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CH1_EN"]
            #[inline(always)]
            pub fn ch1_en(&self) -> CH1_EN_R {
                CH1_EN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CH0_EN"]
            #[inline(always)]
            pub fn ch0_en(&self) -> CH0_EN_R {
                CH0_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 18 - CH2_CONT_EN"]
            #[inline(always)]
            pub fn ch2_cont_en(&mut self) -> CH2_CONT_EN_W {
                CH2_CONT_EN_W { w: self }
            }
            #[doc = "Bit 16 - CH2_EN"]
            #[inline(always)]
            pub fn ch2_en(&mut self) -> CH2_EN_W {
                CH2_EN_W { w: self }
            }
            #[doc = "Bit 9 - CH1_CAPT_EN"]
            #[inline(always)]
            pub fn ch1_capt_en(&mut self) -> CH1_CAPT_EN_W {
                CH1_CAPT_EN_W { w: self }
            }
            #[doc = "Bit 8 - CH1_EN"]
            #[inline(always)]
            pub fn ch1_en(&mut self) -> CH1_EN_W {
                CH1_EN_W { w: self }
            }
            #[doc = "Bit 0 - CH0_EN"]
            #[inline(always)]
            pub fn ch0_en(&mut self) -> CH0_EN_W {
                CH0_EN_W { w: self }
            }
        }
    }
    #[doc = "Channel 0 Compare Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch0cmp](ch0cmp) module"]
    pub type CH0CMP = crate::Reg<u32, _CH0CMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CH0CMP;
    #[doc = "`read()` method returns [ch0cmp::R](ch0cmp::R) reader structure"]
    impl crate::Readable for CH0CMP {}
    #[doc = "`write(|w| ..)` method takes [ch0cmp::W](ch0cmp::W) writer structure"]
    impl crate::Writable for CH0CMP {}
    #[doc = "Channel 0 Compare Value"]
    pub mod ch0cmp {
        #[doc = "Reader of register CH0CMP"]
        pub type R = crate::R<u32, super::CH0CMP>;
        #[doc = "Writer for register CH0CMP"]
        pub type W = crate::W<u32, super::CH0CMP>;
        #[doc = "Register CH0CMP `reset()`'s with value 0"]
        impl crate::ResetValue for super::CH0CMP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Channel 1 Compare Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch1cmp](ch1cmp) module"]
    pub type CH1CMP = crate::Reg<u32, _CH1CMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CH1CMP;
    #[doc = "`read()` method returns [ch1cmp::R](ch1cmp::R) reader structure"]
    impl crate::Readable for CH1CMP {}
    #[doc = "`write(|w| ..)` method takes [ch1cmp::W](ch1cmp::W) writer structure"]
    impl crate::Writable for CH1CMP {}
    #[doc = "Channel 1 Compare Value"]
    pub mod ch1cmp {
        #[doc = "Reader of register CH1CMP"]
        pub type R = crate::R<u32, super::CH1CMP>;
        #[doc = "Writer for register CH1CMP"]
        pub type W = crate::W<u32, super::CH1CMP>;
        #[doc = "Register CH1CMP `reset()`'s with value 0"]
        impl crate::ResetValue for super::CH1CMP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Channel 2 Compare Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch2cmp](ch2cmp) module"]
    pub type CH2CMP = crate::Reg<u32, _CH2CMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CH2CMP;
    #[doc = "`read()` method returns [ch2cmp::R](ch2cmp::R) reader structure"]
    impl crate::Readable for CH2CMP {}
    #[doc = "`write(|w| ..)` method takes [ch2cmp::W](ch2cmp::W) writer structure"]
    impl crate::Writable for CH2CMP {}
    #[doc = "Channel 2 Compare Value"]
    pub mod ch2cmp {
        #[doc = "Reader of register CH2CMP"]
        pub type R = crate::R<u32, super::CH2CMP>;
        #[doc = "Writer for register CH2CMP"]
        pub type W = crate::W<u32, super::CH2CMP>;
        #[doc = "Register CH2CMP `reset()`'s with value 0"]
        impl crate::ResetValue for super::CH2CMP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Channel 2 Compare Value Auto-increment This register is primarily used to generate periodical wake-up for the AUX_SCE module, through the \\[AUX_EVCTL.EVSTAT0.AON_RTC\\]
event.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch2cmpinc](ch2cmpinc) module"]
    pub type CH2CMPINC = crate::Reg<u32, _CH2CMPINC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CH2CMPINC;
    #[doc = "`read()` method returns [ch2cmpinc::R](ch2cmpinc::R) reader structure"]
    impl crate::Readable for CH2CMPINC {}
    #[doc = "`write(|w| ..)` method takes [ch2cmpinc::W](ch2cmpinc::W) writer structure"]
    impl crate::Writable for CH2CMPINC {}
    #[doc = "Channel 2 Compare Value Auto-increment This register is primarily used to generate periodical wake-up for the AUX_SCE module, through the \\[AUX_EVCTL.EVSTAT0.AON_RTC\\]
event."]
    pub mod ch2cmpinc {
        #[doc = "Reader of register CH2CMPINC"]
        pub type R = crate::R<u32, super::CH2CMPINC>;
        #[doc = "Writer for register CH2CMPINC"]
        pub type W = crate::W<u32, super::CH2CMPINC>;
        #[doc = "Register CH2CMPINC `reset()`'s with value 0"]
        impl crate::ResetValue for super::CH2CMPINC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Channel 1 Capture Value If CHCTL.CH1_EN = 1and CHCTL.CH1_CAPT_EN = 1, capture occurs on each rising edge of the event selected in AON_EVENT:RTCSEL.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch1capt](ch1capt) module"]
    pub type CH1CAPT = crate::Reg<u32, _CH1CAPT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CH1CAPT;
    #[doc = "`read()` method returns [ch1capt::R](ch1capt::R) reader structure"]
    impl crate::Readable for CH1CAPT {}
    #[doc = "Channel 1 Capture Value If CHCTL.CH1_EN = 1and CHCTL.CH1_CAPT_EN = 1, capture occurs on each rising edge of the event selected in AON_EVENT:RTCSEL."]
    pub mod ch1capt {
        #[doc = "Reader of register CH1CAPT"]
        pub type R = crate::R<u32, super::CH1CAPT>;
        #[doc = "Reader of field `SEC`"]
        pub type SEC_R = crate::R<u16, u16>;
        #[doc = "Reader of field `SUBSEC`"]
        pub type SUBSEC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - SEC"]
            #[inline(always)]
            pub fn sec(&self) -> SEC_R {
                SEC_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - SUBSEC"]
            #[inline(always)]
            pub fn subsec(&self) -> SUBSEC_R {
                SUBSEC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "AON Synchronization This register is used for synchronizing between MCU and entire AON domain.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "AON Synchronization This register is used for synchronizing between MCU and entire AON domain."]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WBUSY`"]
        pub type WBUSY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WBUSY`"]
        pub struct WBUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WBUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - WBUSY"]
            #[inline(always)]
            pub fn wbusy(&self) -> WBUSY_R {
                WBUSY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - WBUSY"]
            #[inline(always)]
            pub fn wbusy(&mut self) -> WBUSY_W {
                WBUSY_W { w: self }
            }
        }
    }
}
#[doc = "This component controls AON_SYSCTL, which is the device's system controller. Note: This module is only supporting 32 bit ReadWrite access from MCU"]
pub struct AON_SYSCTL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON_SYSCTL {}
impl AON_SYSCTL {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon_sysctl::RegisterBlock {
        0x4009_0000 as *const _
    }
}
impl Deref for AON_SYSCTL {
    type Target = aon_sysctl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AON_SYSCTL::ptr() }
    }
}
#[doc = "This component controls AON_SYSCTL, which is the device's system controller. Note: This module is only supporting 32 bit ReadWrite access from MCU"]
pub mod aon_sysctl {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Power Management This register controls bitfields for setting low level power management features such as selection of regulator for VDDR supply and control of IO ring where certain segments can be enabled / disabled."]
        pub pwrctl: PWRCTL,
        #[doc = "0x04 - Reset Management This register contains bitfields releated to system reset such as reset source and reset request and control of brown out resets."]
        pub resetctl: RESETCTL,
        #[doc = "0x08 - Sleep Mode This register is used to unfreeze the IO pad ring after waking up from SHUTDOWN"]
        pub sleepctl: SLEEPCTL,
    }
    #[doc = "Power Management This register controls bitfields for setting low level power management features such as selection of regulator for VDDR supply and control of IO ring where certain segments can be enabled / disabled.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwrctl](pwrctl) module"]
    pub type PWRCTL = crate::Reg<u32, _PWRCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWRCTL;
    #[doc = "`read()` method returns [pwrctl::R](pwrctl::R) reader structure"]
    impl crate::Readable for PWRCTL {}
    #[doc = "`write(|w| ..)` method takes [pwrctl::W](pwrctl::W) writer structure"]
    impl crate::Writable for PWRCTL {}
    #[doc = "Power Management This register controls bitfields for setting low level power management features such as selection of regulator for VDDR supply and control of IO ring where certain segments can be enabled / disabled."]
    pub mod pwrctl {
        #[doc = "Reader of register PWRCTL"]
        pub type R = crate::R<u32, super::PWRCTL>;
        #[doc = "Writer for register PWRCTL"]
        pub type W = crate::W<u32, super::PWRCTL>;
        #[doc = "Register PWRCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::PWRCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DCDC_ACTIVE`"]
        pub type DCDC_ACTIVE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DCDC_ACTIVE`"]
        pub struct DCDC_ACTIVE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCDC_ACTIVE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `EXT_REG_MODE`"]
        pub type EXT_REG_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EXT_REG_MODE`"]
        pub struct EXT_REG_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXT_REG_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DCDC_EN`"]
        pub type DCDC_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DCDC_EN`"]
        pub struct DCDC_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCDC_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - DCDC_ACTIVE"]
            #[inline(always)]
            pub fn dcdc_active(&self) -> DCDC_ACTIVE_R {
                DCDC_ACTIVE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - EXT_REG_MODE"]
            #[inline(always)]
            pub fn ext_reg_mode(&self) -> EXT_REG_MODE_R {
                EXT_REG_MODE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DCDC_EN"]
            #[inline(always)]
            pub fn dcdc_en(&self) -> DCDC_EN_R {
                DCDC_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - DCDC_ACTIVE"]
            #[inline(always)]
            pub fn dcdc_active(&mut self) -> DCDC_ACTIVE_W {
                DCDC_ACTIVE_W { w: self }
            }
            #[doc = "Bit 1 - EXT_REG_MODE"]
            #[inline(always)]
            pub fn ext_reg_mode(&mut self) -> EXT_REG_MODE_W {
                EXT_REG_MODE_W { w: self }
            }
            #[doc = "Bit 0 - DCDC_EN"]
            #[inline(always)]
            pub fn dcdc_en(&mut self) -> DCDC_EN_W {
                DCDC_EN_W { w: self }
            }
        }
    }
    #[doc = "Reset Management This register contains bitfields releated to system reset such as reset source and reset request and control of brown out resets.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [resetctl](resetctl) module"]
    pub type RESETCTL = crate::Reg<u32, _RESETCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESETCTL;
    #[doc = "`read()` method returns [resetctl::R](resetctl::R) reader structure"]
    impl crate::Readable for RESETCTL {}
    #[doc = "`write(|w| ..)` method takes [resetctl::W](resetctl::W) writer structure"]
    impl crate::Writable for RESETCTL {}
    #[doc = "Reset Management This register contains bitfields releated to system reset such as reset source and reset request and control of brown out resets."]
    pub mod resetctl {
        #[doc = "Reader of register RESETCTL"]
        pub type R = crate::R<u32, super::RESETCTL>;
        #[doc = "Writer for register RESETCTL"]
        pub type W = crate::W<u32, super::RESETCTL>;
        #[doc = "Register RESETCTL `reset()`'s with value 0xe0"]
        impl crate::ResetValue for super::RESETCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xe0
            }
        }
        #[doc = "Reader of field `SYSRESET`"]
        pub type SYSRESET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSRESET`"]
        pub struct SYSRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSRESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DET_1_CLR`"]
        pub type BOOT_DET_1_CLR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DET_1_CLR`"]
        pub struct BOOT_DET_1_CLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DET_1_CLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DET_0_CLR`"]
        pub type BOOT_DET_0_CLR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DET_0_CLR`"]
        pub struct BOOT_DET_0_CLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DET_0_CLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DET_1_SET`"]
        pub type BOOT_DET_1_SET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DET_1_SET`"]
        pub struct BOOT_DET_1_SET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DET_1_SET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DET_0_SET`"]
        pub type BOOT_DET_0_SET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DET_0_SET`"]
        pub struct BOOT_DET_0_SET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DET_0_SET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `WU_FROM_SD`"]
        pub type WU_FROM_SD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WU_FROM_SD`"]
        pub struct WU_FROM_SD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_FROM_SD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `GPIO_WU_FROM_SD`"]
        pub type GPIO_WU_FROM_SD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GPIO_WU_FROM_SD`"]
        pub struct GPIO_WU_FROM_SD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPIO_WU_FROM_SD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DET_1`"]
        pub type BOOT_DET_1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DET_1`"]
        pub struct BOOT_DET_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DET_1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DET_0`"]
        pub type BOOT_DET_0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DET_0`"]
        pub struct BOOT_DET_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DET_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `VDDS_LOSS_EN_OVR`"]
        pub type VDDS_LOSS_EN_OVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VDDS_LOSS_EN_OVR`"]
        pub struct VDDS_LOSS_EN_OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDDS_LOSS_EN_OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `VDDR_LOSS_EN_OVR`"]
        pub type VDDR_LOSS_EN_OVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VDDR_LOSS_EN_OVR`"]
        pub struct VDDR_LOSS_EN_OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDDR_LOSS_EN_OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `VDD_LOSS_EN_OVR`"]
        pub type VDD_LOSS_EN_OVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VDD_LOSS_EN_OVR`"]
        pub struct VDD_LOSS_EN_OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDD_LOSS_EN_OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `VDDS_LOSS_EN`"]
        pub type VDDS_LOSS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VDDS_LOSS_EN`"]
        pub struct VDDS_LOSS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDDS_LOSS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `VDDR_LOSS_EN`"]
        pub type VDDR_LOSS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VDDR_LOSS_EN`"]
        pub struct VDDR_LOSS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDDR_LOSS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `VDD_LOSS_EN`"]
        pub type VDD_LOSS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VDD_LOSS_EN`"]
        pub struct VDD_LOSS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDD_LOSS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CLK_LOSS_EN`"]
        pub type CLK_LOSS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_LOSS_EN`"]
        pub struct CLK_LOSS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_LOSS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RESET_SRC`"]
        pub type RESET_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RESET_SRC`"]
        pub struct RESET_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 1)) | (((value as u32) & 0x07) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - SYSRESET"]
            #[inline(always)]
            pub fn sysreset(&self) -> SYSRESET_R {
                SYSRESET_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 25 - BOOT_DET_1_CLR"]
            #[inline(always)]
            pub fn boot_det_1_clr(&self) -> BOOT_DET_1_CLR_R {
                BOOT_DET_1_CLR_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - BOOT_DET_0_CLR"]
            #[inline(always)]
            pub fn boot_det_0_clr(&self) -> BOOT_DET_0_CLR_R {
                BOOT_DET_0_CLR_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 17 - BOOT_DET_1_SET"]
            #[inline(always)]
            pub fn boot_det_1_set(&self) -> BOOT_DET_1_SET_R {
                BOOT_DET_1_SET_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - BOOT_DET_0_SET"]
            #[inline(always)]
            pub fn boot_det_0_set(&self) -> BOOT_DET_0_SET_R {
                BOOT_DET_0_SET_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - WU_FROM_SD"]
            #[inline(always)]
            pub fn wu_from_sd(&self) -> WU_FROM_SD_R {
                WU_FROM_SD_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - GPIO_WU_FROM_SD"]
            #[inline(always)]
            pub fn gpio_wu_from_sd(&self) -> GPIO_WU_FROM_SD_R {
                GPIO_WU_FROM_SD_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - BOOT_DET_1"]
            #[inline(always)]
            pub fn boot_det_1(&self) -> BOOT_DET_1_R {
                BOOT_DET_1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - BOOT_DET_0"]
            #[inline(always)]
            pub fn boot_det_0(&self) -> BOOT_DET_0_R {
                BOOT_DET_0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - VDDS_LOSS_EN_OVR"]
            #[inline(always)]
            pub fn vdds_loss_en_ovr(&self) -> VDDS_LOSS_EN_OVR_R {
                VDDS_LOSS_EN_OVR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - VDDR_LOSS_EN_OVR"]
            #[inline(always)]
            pub fn vddr_loss_en_ovr(&self) -> VDDR_LOSS_EN_OVR_R {
                VDDR_LOSS_EN_OVR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - VDD_LOSS_EN_OVR"]
            #[inline(always)]
            pub fn vdd_loss_en_ovr(&self) -> VDD_LOSS_EN_OVR_R {
                VDD_LOSS_EN_OVR_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - VDDS_LOSS_EN"]
            #[inline(always)]
            pub fn vdds_loss_en(&self) -> VDDS_LOSS_EN_R {
                VDDS_LOSS_EN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - VDDR_LOSS_EN"]
            #[inline(always)]
            pub fn vddr_loss_en(&self) -> VDDR_LOSS_EN_R {
                VDDR_LOSS_EN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - VDD_LOSS_EN"]
            #[inline(always)]
            pub fn vdd_loss_en(&self) -> VDD_LOSS_EN_R {
                VDD_LOSS_EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CLK_LOSS_EN"]
            #[inline(always)]
            pub fn clk_loss_en(&self) -> CLK_LOSS_EN_R {
                CLK_LOSS_EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 1:3 - RESET_SRC"]
            #[inline(always)]
            pub fn reset_src(&self) -> RESET_SRC_R {
                RESET_SRC_R::new(((self.bits >> 1) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - SYSRESET"]
            #[inline(always)]
            pub fn sysreset(&mut self) -> SYSRESET_W {
                SYSRESET_W { w: self }
            }
            #[doc = "Bit 25 - BOOT_DET_1_CLR"]
            #[inline(always)]
            pub fn boot_det_1_clr(&mut self) -> BOOT_DET_1_CLR_W {
                BOOT_DET_1_CLR_W { w: self }
            }
            #[doc = "Bit 24 - BOOT_DET_0_CLR"]
            #[inline(always)]
            pub fn boot_det_0_clr(&mut self) -> BOOT_DET_0_CLR_W {
                BOOT_DET_0_CLR_W { w: self }
            }
            #[doc = "Bit 17 - BOOT_DET_1_SET"]
            #[inline(always)]
            pub fn boot_det_1_set(&mut self) -> BOOT_DET_1_SET_W {
                BOOT_DET_1_SET_W { w: self }
            }
            #[doc = "Bit 16 - BOOT_DET_0_SET"]
            #[inline(always)]
            pub fn boot_det_0_set(&mut self) -> BOOT_DET_0_SET_W {
                BOOT_DET_0_SET_W { w: self }
            }
            #[doc = "Bit 15 - WU_FROM_SD"]
            #[inline(always)]
            pub fn wu_from_sd(&mut self) -> WU_FROM_SD_W {
                WU_FROM_SD_W { w: self }
            }
            #[doc = "Bit 14 - GPIO_WU_FROM_SD"]
            #[inline(always)]
            pub fn gpio_wu_from_sd(&mut self) -> GPIO_WU_FROM_SD_W {
                GPIO_WU_FROM_SD_W { w: self }
            }
            #[doc = "Bit 13 - BOOT_DET_1"]
            #[inline(always)]
            pub fn boot_det_1(&mut self) -> BOOT_DET_1_W {
                BOOT_DET_1_W { w: self }
            }
            #[doc = "Bit 12 - BOOT_DET_0"]
            #[inline(always)]
            pub fn boot_det_0(&mut self) -> BOOT_DET_0_W {
                BOOT_DET_0_W { w: self }
            }
            #[doc = "Bit 11 - VDDS_LOSS_EN_OVR"]
            #[inline(always)]
            pub fn vdds_loss_en_ovr(&mut self) -> VDDS_LOSS_EN_OVR_W {
                VDDS_LOSS_EN_OVR_W { w: self }
            }
            #[doc = "Bit 10 - VDDR_LOSS_EN_OVR"]
            #[inline(always)]
            pub fn vddr_loss_en_ovr(&mut self) -> VDDR_LOSS_EN_OVR_W {
                VDDR_LOSS_EN_OVR_W { w: self }
            }
            #[doc = "Bit 9 - VDD_LOSS_EN_OVR"]
            #[inline(always)]
            pub fn vdd_loss_en_ovr(&mut self) -> VDD_LOSS_EN_OVR_W {
                VDD_LOSS_EN_OVR_W { w: self }
            }
            #[doc = "Bit 7 - VDDS_LOSS_EN"]
            #[inline(always)]
            pub fn vdds_loss_en(&mut self) -> VDDS_LOSS_EN_W {
                VDDS_LOSS_EN_W { w: self }
            }
            #[doc = "Bit 6 - VDDR_LOSS_EN"]
            #[inline(always)]
            pub fn vddr_loss_en(&mut self) -> VDDR_LOSS_EN_W {
                VDDR_LOSS_EN_W { w: self }
            }
            #[doc = "Bit 5 - VDD_LOSS_EN"]
            #[inline(always)]
            pub fn vdd_loss_en(&mut self) -> VDD_LOSS_EN_W {
                VDD_LOSS_EN_W { w: self }
            }
            #[doc = "Bit 4 - CLK_LOSS_EN"]
            #[inline(always)]
            pub fn clk_loss_en(&mut self) -> CLK_LOSS_EN_W {
                CLK_LOSS_EN_W { w: self }
            }
            #[doc = "Bits 1:3 - RESET_SRC"]
            #[inline(always)]
            pub fn reset_src(&mut self) -> RESET_SRC_W {
                RESET_SRC_W { w: self }
            }
        }
    }
    #[doc = "Sleep Mode This register is used to unfreeze the IO pad ring after waking up from SHUTDOWN\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sleepctl](sleepctl) module"]
    pub type SLEEPCTL = crate::Reg<u32, _SLEEPCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SLEEPCTL;
    #[doc = "`read()` method returns [sleepctl::R](sleepctl::R) reader structure"]
    impl crate::Readable for SLEEPCTL {}
    #[doc = "`write(|w| ..)` method takes [sleepctl::W](sleepctl::W) writer structure"]
    impl crate::Writable for SLEEPCTL {}
    #[doc = "Sleep Mode This register is used to unfreeze the IO pad ring after waking up from SHUTDOWN"]
    pub mod sleepctl {
        #[doc = "Reader of register SLEEPCTL"]
        pub type R = crate::R<u32, super::SLEEPCTL>;
        #[doc = "Writer for register SLEEPCTL"]
        pub type W = crate::W<u32, super::SLEEPCTL>;
        #[doc = "Register SLEEPCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SLEEPCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO_PAD_SLEEP_DIS`"]
        pub type IO_PAD_SLEEP_DIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IO_PAD_SLEEP_DIS`"]
        pub struct IO_PAD_SLEEP_DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO_PAD_SLEEP_DIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - IO_PAD_SLEEP_DIS"]
            #[inline(always)]
            pub fn io_pad_sleep_dis(&self) -> IO_PAD_SLEEP_DIS_R {
                IO_PAD_SLEEP_DIS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - IO_PAD_SLEEP_DIS"]
            #[inline(always)]
            pub fn io_pad_sleep_dis(&mut self) -> IO_PAD_SLEEP_DIS_W {
                IO_PAD_SLEEP_DIS_W { w: self }
            }
        }
    }
}
#[doc = "This component control the Wakeup controller residing in the AON domain. Note: This module is only supporting 32 bit ReadWrite access from MCU"]
pub struct AON_WUC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON_WUC {}
impl AON_WUC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon_wuc::RegisterBlock {
        0x4009_1000 as *const _
    }
}
impl Deref for AON_WUC {
    type Target = aon_wuc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AON_WUC::ptr() }
    }
}
#[doc = "This component control the Wakeup controller residing in the AON domain. Note: This module is only supporting 32 bit ReadWrite access from MCU"]
pub mod aon_wuc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - MCU Clock Management This register contains bitfields related to the MCU clock."]
        pub mcuclk: MCUCLK,
        #[doc = "0x04 - AUX Clock Management This register contains bitfields that are relevant for setting up the clock to the AUX domain."]
        pub auxclk: AUXCLK,
        #[doc = "0x08 - MCU Configuration This register contains power management related bitfields for the MCU domain."]
        pub mcucfg: MCUCFG,
        #[doc = "0x0c - AUX Configuration This register contains power management related signals for the AUX domain."]
        pub auxcfg: AUXCFG,
        #[doc = "0x10 - AUX Control This register contains events and control signals for the AUX domain."]
        pub auxctl: AUXCTL,
        #[doc = "0x14 - Power Status This register is used to monitor various power management related signals in AON. Most signals are for test, calibration and debug purpose only, and others can be used to detect that AUX or JTAG domains are powered up."]
        pub pwrstat: PWRSTAT,
        #[doc = "0x18 - Shutdown Control This register contains bitfields required for entering shutdown mode"]
        pub shutdown: SHUTDOWN,
        _reserved7: [u8; 4usize],
        #[doc = "0x20 - Control 0 This register contains various chip level control and debug bitfields."]
        pub ctl0: CTL0,
        #[doc = "0x24 - Control 1 This register contains various chip level control and debug bitfields."]
        pub ctl1: CTL1,
        _reserved9: [u8; 8usize],
        #[doc = "0x30 - Recharge Controller Configuration This register sets all relevant patameters for controlling the recharge algorithm."]
        pub rechargecfg: RECHARGECFG,
        #[doc = "0x34 - Recharge Controller Status This register controls various status registers which are updated during recharge. The register is mostly intended for test and debug."]
        pub rechargestat: RECHARGESTAT,
        #[doc = "0x38 - Oscillator Configuration This register sets the period for Amplitude compensation requests sent to the oscillator control system. The amplitude compensations is only applicable when XOSC_HF is running in low power mode."]
        pub osccfg: OSCCFG,
        _reserved12: [u8; 4usize],
        #[doc = "0x40 - JTAG Configuration This register contains control for configuration of the JTAG domain,- hereunder access permissions for each TAP."]
        pub jtagcfg: JTAGCFG,
        #[doc = "0x44 - JTAG USERCODE Boot code copies the JTAG USERCODE to this register from where it is forwarded to the debug subsystem."]
        pub jtagusercode: JTAGUSERCODE,
    }
    #[doc = "MCU Clock Management This register contains bitfields related to the MCU clock.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcuclk](mcuclk) module"]
    pub type MCUCLK = crate::Reg<u32, _MCUCLK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCUCLK;
    #[doc = "`read()` method returns [mcuclk::R](mcuclk::R) reader structure"]
    impl crate::Readable for MCUCLK {}
    #[doc = "`write(|w| ..)` method takes [mcuclk::W](mcuclk::W) writer structure"]
    impl crate::Writable for MCUCLK {}
    #[doc = "MCU Clock Management This register contains bitfields related to the MCU clock."]
    pub mod mcuclk {
        #[doc = "Reader of register MCUCLK"]
        pub type R = crate::R<u32, super::MCUCLK>;
        #[doc = "Writer for register MCUCLK"]
        pub type W = crate::W<u32, super::MCUCLK>;
        #[doc = "Register MCUCLK `reset()`'s with value 0"]
        impl crate::ResetValue for super::MCUCLK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RCOSC_HF_CAL_DONE`"]
        pub type RCOSC_HF_CAL_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RCOSC_HF_CAL_DONE`"]
        pub struct RCOSC_HF_CAL_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSC_HF_CAL_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PWR_DWN_SRC`"]
        pub type PWR_DWN_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PWR_DWN_SRC`"]
        pub struct PWR_DWN_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWR_DWN_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - RCOSC_HF_CAL_DONE"]
            #[inline(always)]
            pub fn rcosc_hf_cal_done(&self) -> RCOSC_HF_CAL_DONE_R {
                RCOSC_HF_CAL_DONE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - PWR_DWN_SRC"]
            #[inline(always)]
            pub fn pwr_dwn_src(&self) -> PWR_DWN_SRC_R {
                PWR_DWN_SRC_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 2 - RCOSC_HF_CAL_DONE"]
            #[inline(always)]
            pub fn rcosc_hf_cal_done(&mut self) -> RCOSC_HF_CAL_DONE_W {
                RCOSC_HF_CAL_DONE_W { w: self }
            }
            #[doc = "Bits 0:1 - PWR_DWN_SRC"]
            #[inline(always)]
            pub fn pwr_dwn_src(&mut self) -> PWR_DWN_SRC_W {
                PWR_DWN_SRC_W { w: self }
            }
        }
    }
    #[doc = "AUX Clock Management This register contains bitfields that are relevant for setting up the clock to the AUX domain.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [auxclk](auxclk) module"]
    pub type AUXCLK = crate::Reg<u32, _AUXCLK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUXCLK;
    #[doc = "`read()` method returns [auxclk::R](auxclk::R) reader structure"]
    impl crate::Readable for AUXCLK {}
    #[doc = "`write(|w| ..)` method takes [auxclk::W](auxclk::W) writer structure"]
    impl crate::Writable for AUXCLK {}
    #[doc = "AUX Clock Management This register contains bitfields that are relevant for setting up the clock to the AUX domain."]
    pub mod auxclk {
        #[doc = "Reader of register AUXCLK"]
        pub type R = crate::R<u32, super::AUXCLK>;
        #[doc = "Writer for register AUXCLK"]
        pub type W = crate::W<u32, super::AUXCLK>;
        #[doc = "Register AUXCLK `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::AUXCLK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `PWR_DWN_SRC`"]
        pub type PWR_DWN_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PWR_DWN_SRC`"]
        pub struct PWR_DWN_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWR_DWN_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `SCLK_HF_DIV`"]
        pub type SCLK_HF_DIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLK_HF_DIV`"]
        pub struct SCLK_HF_DIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLK_HF_DIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SRC`"]
        pub type SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SRC`"]
        pub struct SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 11:12 - PWR_DWN_SRC"]
            #[inline(always)]
            pub fn pwr_dwn_src(&self) -> PWR_DWN_SRC_R {
                PWR_DWN_SRC_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 8:10 - SCLK_HF_DIV"]
            #[inline(always)]
            pub fn sclk_hf_div(&self) -> SCLK_HF_DIV_R {
                SCLK_HF_DIV_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - SRC"]
            #[inline(always)]
            pub fn src(&self) -> SRC_R {
                SRC_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 11:12 - PWR_DWN_SRC"]
            #[inline(always)]
            pub fn pwr_dwn_src(&mut self) -> PWR_DWN_SRC_W {
                PWR_DWN_SRC_W { w: self }
            }
            #[doc = "Bits 8:10 - SCLK_HF_DIV"]
            #[inline(always)]
            pub fn sclk_hf_div(&mut self) -> SCLK_HF_DIV_W {
                SCLK_HF_DIV_W { w: self }
            }
            #[doc = "Bits 0:2 - SRC"]
            #[inline(always)]
            pub fn src(&mut self) -> SRC_W {
                SRC_W { w: self }
            }
        }
    }
    #[doc = "MCU Configuration This register contains power management related bitfields for the MCU domain.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcucfg](mcucfg) module"]
    pub type MCUCFG = crate::Reg<u32, _MCUCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCUCFG;
    #[doc = "`read()` method returns [mcucfg::R](mcucfg::R) reader structure"]
    impl crate::Readable for MCUCFG {}
    #[doc = "`write(|w| ..)` method takes [mcucfg::W](mcucfg::W) writer structure"]
    impl crate::Writable for MCUCFG {}
    #[doc = "MCU Configuration This register contains power management related bitfields for the MCU domain."]
    pub mod mcucfg {
        #[doc = "Reader of register MCUCFG"]
        pub type R = crate::R<u32, super::MCUCFG>;
        #[doc = "Writer for register MCUCFG"]
        pub type W = crate::W<u32, super::MCUCFG>;
        #[doc = "Register MCUCFG `reset()`'s with value 0x0f"]
        impl crate::ResetValue for super::MCUCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0f
            }
        }
        #[doc = "Reader of field `VIRT_OFF`"]
        pub type VIRT_OFF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VIRT_OFF`"]
        pub struct VIRT_OFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VIRT_OFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `FIXED_WU_EN`"]
        pub type FIXED_WU_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FIXED_WU_EN`"]
        pub struct FIXED_WU_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FIXED_WU_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SRAM_RET_EN`"]
        pub type SRAM_RET_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SRAM_RET_EN`"]
        pub struct SRAM_RET_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAM_RET_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 17 - VIRT_OFF"]
            #[inline(always)]
            pub fn virt_off(&self) -> VIRT_OFF_R {
                VIRT_OFF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - FIXED_WU_EN"]
            #[inline(always)]
            pub fn fixed_wu_en(&self) -> FIXED_WU_EN_R {
                FIXED_WU_EN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 0:3 - SRAM_RET_EN"]
            #[inline(always)]
            pub fn sram_ret_en(&self) -> SRAM_RET_EN_R {
                SRAM_RET_EN_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 17 - VIRT_OFF"]
            #[inline(always)]
            pub fn virt_off(&mut self) -> VIRT_OFF_W {
                VIRT_OFF_W { w: self }
            }
            #[doc = "Bit 16 - FIXED_WU_EN"]
            #[inline(always)]
            pub fn fixed_wu_en(&mut self) -> FIXED_WU_EN_W {
                FIXED_WU_EN_W { w: self }
            }
            #[doc = "Bits 0:3 - SRAM_RET_EN"]
            #[inline(always)]
            pub fn sram_ret_en(&mut self) -> SRAM_RET_EN_W {
                SRAM_RET_EN_W { w: self }
            }
        }
    }
    #[doc = "AUX Configuration This register contains power management related signals for the AUX domain.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [auxcfg](auxcfg) module"]
    pub type AUXCFG = crate::Reg<u32, _AUXCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUXCFG;
    #[doc = "`read()` method returns [auxcfg::R](auxcfg::R) reader structure"]
    impl crate::Readable for AUXCFG {}
    #[doc = "`write(|w| ..)` method takes [auxcfg::W](auxcfg::W) writer structure"]
    impl crate::Writable for AUXCFG {}
    #[doc = "AUX Configuration This register contains power management related signals for the AUX domain."]
    pub mod auxcfg {
        #[doc = "Reader of register AUXCFG"]
        pub type R = crate::R<u32, super::AUXCFG>;
        #[doc = "Writer for register AUXCFG"]
        pub type W = crate::W<u32, super::AUXCFG>;
        #[doc = "Register AUXCFG `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::AUXCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `RAM_RET_EN`"]
        pub type RAM_RET_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_RET_EN`"]
        pub struct RAM_RET_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_RET_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RAM_RET_EN"]
            #[inline(always)]
            pub fn ram_ret_en(&self) -> RAM_RET_EN_R {
                RAM_RET_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RAM_RET_EN"]
            #[inline(always)]
            pub fn ram_ret_en(&mut self) -> RAM_RET_EN_W {
                RAM_RET_EN_W { w: self }
            }
        }
    }
    #[doc = "AUX Control This register contains events and control signals for the AUX domain.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [auxctl](auxctl) module"]
    pub type AUXCTL = crate::Reg<u32, _AUXCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUXCTL;
    #[doc = "`read()` method returns [auxctl::R](auxctl::R) reader structure"]
    impl crate::Readable for AUXCTL {}
    #[doc = "`write(|w| ..)` method takes [auxctl::W](auxctl::W) writer structure"]
    impl crate::Writable for AUXCTL {}
    #[doc = "AUX Control This register contains events and control signals for the AUX domain."]
    pub mod auxctl {
        #[doc = "Reader of register AUXCTL"]
        pub type R = crate::R<u32, super::AUXCTL>;
        #[doc = "Writer for register AUXCTL"]
        pub type W = crate::W<u32, super::AUXCTL>;
        #[doc = "Register AUXCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AUXCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RESET_REQ`"]
        pub type RESET_REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET_REQ`"]
        pub struct RESET_REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `SCE_RUN_EN`"]
        pub type SCE_RUN_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCE_RUN_EN`"]
        pub struct SCE_RUN_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCE_RUN_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV`"]
        pub type SWEV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV`"]
        pub struct SWEV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_FORCE_ON`"]
        pub type AUX_FORCE_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_FORCE_ON`"]
        pub struct AUX_FORCE_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_FORCE_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - RESET_REQ"]
            #[inline(always)]
            pub fn reset_req(&self) -> RESET_REQ_R {
                RESET_REQ_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SCE_RUN_EN"]
            #[inline(always)]
            pub fn sce_run_en(&self) -> SCE_RUN_EN_R {
                SCE_RUN_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SWEV"]
            #[inline(always)]
            pub fn swev(&self) -> SWEV_R {
                SWEV_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AUX_FORCE_ON"]
            #[inline(always)]
            pub fn aux_force_on(&self) -> AUX_FORCE_ON_R {
                AUX_FORCE_ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - RESET_REQ"]
            #[inline(always)]
            pub fn reset_req(&mut self) -> RESET_REQ_W {
                RESET_REQ_W { w: self }
            }
            #[doc = "Bit 2 - SCE_RUN_EN"]
            #[inline(always)]
            pub fn sce_run_en(&mut self) -> SCE_RUN_EN_W {
                SCE_RUN_EN_W { w: self }
            }
            #[doc = "Bit 1 - SWEV"]
            #[inline(always)]
            pub fn swev(&mut self) -> SWEV_W {
                SWEV_W { w: self }
            }
            #[doc = "Bit 0 - AUX_FORCE_ON"]
            #[inline(always)]
            pub fn aux_force_on(&mut self) -> AUX_FORCE_ON_W {
                AUX_FORCE_ON_W { w: self }
            }
        }
    }
    #[doc = "Power Status This register is used to monitor various power management related signals in AON. Most signals are for test, calibration and debug purpose only, and others can be used to detect that AUX or JTAG domains are powered up.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwrstat](pwrstat) module"]
    pub type PWRSTAT = crate::Reg<u32, _PWRSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWRSTAT;
    #[doc = "`read()` method returns [pwrstat::R](pwrstat::R) reader structure"]
    impl crate::Readable for PWRSTAT {}
    #[doc = "`write(|w| ..)` method takes [pwrstat::W](pwrstat::W) writer structure"]
    impl crate::Writable for PWRSTAT {}
    #[doc = "Power Status This register is used to monitor various power management related signals in AON. Most signals are for test, calibration and debug purpose only, and others can be used to detect that AUX or JTAG domains are powered up."]
    pub mod pwrstat {
        #[doc = "Reader of register PWRSTAT"]
        pub type R = crate::R<u32, super::PWRSTAT>;
        #[doc = "Writer for register PWRSTAT"]
        pub type W = crate::W<u32, super::PWRSTAT>;
        #[doc = "Register PWRSTAT `reset()`'s with value 0xe000_0000"]
        impl crate::ResetValue for super::PWRSTAT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xe000_0000
            }
        }
        #[doc = "Reader of field `AUX_PWR_DWN`"]
        pub type AUX_PWR_DWN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_PWR_DWN`"]
        pub struct AUX_PWR_DWN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_PWR_DWN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `JTAG_PD_ON`"]
        pub type JTAG_PD_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JTAG_PD_ON`"]
        pub struct JTAG_PD_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JTAG_PD_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_PD_ON`"]
        pub type AUX_PD_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_PD_ON`"]
        pub struct AUX_PD_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_PD_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `MCU_PD_ON`"]
        pub type MCU_PD_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCU_PD_ON`"]
        pub struct MCU_PD_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCU_PD_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_BUS_CONNECTED`"]
        pub type AUX_BUS_CONNECTED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_BUS_CONNECTED`"]
        pub struct AUX_BUS_CONNECTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_BUS_CONNECTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_RESET_DONE`"]
        pub type AUX_RESET_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_RESET_DONE`"]
        pub struct AUX_RESET_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_RESET_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - AUX_PWR_DWN"]
            #[inline(always)]
            pub fn aux_pwr_dwn(&self) -> AUX_PWR_DWN_R {
                AUX_PWR_DWN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 6 - JTAG_PD_ON"]
            #[inline(always)]
            pub fn jtag_pd_on(&self) -> JTAG_PD_ON_R {
                JTAG_PD_ON_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - AUX_PD_ON"]
            #[inline(always)]
            pub fn aux_pd_on(&self) -> AUX_PD_ON_R {
                AUX_PD_ON_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - MCU_PD_ON"]
            #[inline(always)]
            pub fn mcu_pd_on(&self) -> MCU_PD_ON_R {
                MCU_PD_ON_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUX_BUS_CONNECTED"]
            #[inline(always)]
            pub fn aux_bus_connected(&self) -> AUX_BUS_CONNECTED_R {
                AUX_BUS_CONNECTED_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUX_RESET_DONE"]
            #[inline(always)]
            pub fn aux_reset_done(&self) -> AUX_RESET_DONE_R {
                AUX_RESET_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - AUX_PWR_DWN"]
            #[inline(always)]
            pub fn aux_pwr_dwn(&mut self) -> AUX_PWR_DWN_W {
                AUX_PWR_DWN_W { w: self }
            }
            #[doc = "Bit 6 - JTAG_PD_ON"]
            #[inline(always)]
            pub fn jtag_pd_on(&mut self) -> JTAG_PD_ON_W {
                JTAG_PD_ON_W { w: self }
            }
            #[doc = "Bit 5 - AUX_PD_ON"]
            #[inline(always)]
            pub fn aux_pd_on(&mut self) -> AUX_PD_ON_W {
                AUX_PD_ON_W { w: self }
            }
            #[doc = "Bit 4 - MCU_PD_ON"]
            #[inline(always)]
            pub fn mcu_pd_on(&mut self) -> MCU_PD_ON_W {
                MCU_PD_ON_W { w: self }
            }
            #[doc = "Bit 2 - AUX_BUS_CONNECTED"]
            #[inline(always)]
            pub fn aux_bus_connected(&mut self) -> AUX_BUS_CONNECTED_W {
                AUX_BUS_CONNECTED_W { w: self }
            }
            #[doc = "Bit 1 - AUX_RESET_DONE"]
            #[inline(always)]
            pub fn aux_reset_done(&mut self) -> AUX_RESET_DONE_W {
                AUX_RESET_DONE_W { w: self }
            }
        }
    }
    #[doc = "Shutdown Control This register contains bitfields required for entering shutdown mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shutdown](shutdown) module"]
    pub type SHUTDOWN = crate::Reg<u32, _SHUTDOWN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHUTDOWN;
    #[doc = "`read()` method returns [shutdown::R](shutdown::R) reader structure"]
    impl crate::Readable for SHUTDOWN {}
    #[doc = "`write(|w| ..)` method takes [shutdown::W](shutdown::W) writer structure"]
    impl crate::Writable for SHUTDOWN {}
    #[doc = "Shutdown Control This register contains bitfields required for entering shutdown mode"]
    pub mod shutdown {
        #[doc = "Reader of register SHUTDOWN"]
        pub type R = crate::R<u32, super::SHUTDOWN>;
        #[doc = "Writer for register SHUTDOWN"]
        pub type W = crate::W<u32, super::SHUTDOWN>;
        #[doc = "Register SHUTDOWN `reset()`'s with value 0"]
        impl crate::ResetValue for super::SHUTDOWN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Control 0 This register contains various chip level control and debug bitfields.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl0](ctl0) module"]
    pub type CTL0 = crate::Reg<u32, _CTL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL0;
    #[doc = "`read()` method returns [ctl0::R](ctl0::R) reader structure"]
    impl crate::Readable for CTL0 {}
    #[doc = "`write(|w| ..)` method takes [ctl0::W](ctl0::W) writer structure"]
    impl crate::Writable for CTL0 {}
    #[doc = "Control 0 This register contains various chip level control and debug bitfields."]
    pub mod ctl0 {
        #[doc = "Reader of register CTL0"]
        pub type R = crate::R<u32, super::CTL0>;
        #[doc = "Writer for register CTL0"]
        pub type W = crate::W<u32, super::CTL0>;
        #[doc = "Register CTL0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PWR_DWN_DIS`"]
        pub type PWR_DWN_DIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWR_DWN_DIS`"]
        pub struct PWR_DWN_DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWR_DWN_DIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_SRAM_ERASE`"]
        pub type AUX_SRAM_ERASE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_SRAM_ERASE`"]
        pub struct AUX_SRAM_ERASE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_SRAM_ERASE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MCU_SRAM_ERASE`"]
        pub type MCU_SRAM_ERASE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCU_SRAM_ERASE`"]
        pub struct MCU_SRAM_ERASE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCU_SRAM_ERASE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - PWR_DWN_DIS"]
            #[inline(always)]
            pub fn pwr_dwn_dis(&self) -> PWR_DWN_DIS_R {
                PWR_DWN_DIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 3 - AUX_SRAM_ERASE"]
            #[inline(always)]
            pub fn aux_sram_erase(&self) -> AUX_SRAM_ERASE_R {
                AUX_SRAM_ERASE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - MCU_SRAM_ERASE"]
            #[inline(always)]
            pub fn mcu_sram_erase(&self) -> MCU_SRAM_ERASE_R {
                MCU_SRAM_ERASE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - PWR_DWN_DIS"]
            #[inline(always)]
            pub fn pwr_dwn_dis(&mut self) -> PWR_DWN_DIS_W {
                PWR_DWN_DIS_W { w: self }
            }
            #[doc = "Bit 3 - AUX_SRAM_ERASE"]
            #[inline(always)]
            pub fn aux_sram_erase(&mut self) -> AUX_SRAM_ERASE_W {
                AUX_SRAM_ERASE_W { w: self }
            }
            #[doc = "Bit 2 - MCU_SRAM_ERASE"]
            #[inline(always)]
            pub fn mcu_sram_erase(&mut self) -> MCU_SRAM_ERASE_W {
                MCU_SRAM_ERASE_W { w: self }
            }
        }
    }
    #[doc = "Control 1 This register contains various chip level control and debug bitfields.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl1](ctl1) module"]
    pub type CTL1 = crate::Reg<u32, _CTL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL1;
    #[doc = "`read()` method returns [ctl1::R](ctl1::R) reader structure"]
    impl crate::Readable for CTL1 {}
    #[doc = "`write(|w| ..)` method takes [ctl1::W](ctl1::W) writer structure"]
    impl crate::Writable for CTL1 {}
    #[doc = "Control 1 This register contains various chip level control and debug bitfields."]
    pub mod ctl1 {
        #[doc = "Reader of register CTL1"]
        pub type R = crate::R<u32, super::CTL1>;
        #[doc = "Writer for register CTL1"]
        pub type W = crate::W<u32, super::CTL1>;
        #[doc = "Register CTL1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MCU_RESET_SRC`"]
        pub type MCU_RESET_SRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCU_RESET_SRC`"]
        pub struct MCU_RESET_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCU_RESET_SRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `MCU_WARM_RESET`"]
        pub type MCU_WARM_RESET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCU_WARM_RESET`"]
        pub struct MCU_WARM_RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCU_WARM_RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - MCU_RESET_SRC"]
            #[inline(always)]
            pub fn mcu_reset_src(&self) -> MCU_RESET_SRC_R {
                MCU_RESET_SRC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - MCU_WARM_RESET"]
            #[inline(always)]
            pub fn mcu_warm_reset(&self) -> MCU_WARM_RESET_R {
                MCU_WARM_RESET_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - MCU_RESET_SRC"]
            #[inline(always)]
            pub fn mcu_reset_src(&mut self) -> MCU_RESET_SRC_W {
                MCU_RESET_SRC_W { w: self }
            }
            #[doc = "Bit 0 - MCU_WARM_RESET"]
            #[inline(always)]
            pub fn mcu_warm_reset(&mut self) -> MCU_WARM_RESET_W {
                MCU_WARM_RESET_W { w: self }
            }
        }
    }
    #[doc = "Recharge Controller Configuration This register sets all relevant patameters for controlling the recharge algorithm.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rechargecfg](rechargecfg) module"]
    pub type RECHARGECFG = crate::Reg<u32, _RECHARGECFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RECHARGECFG;
    #[doc = "`read()` method returns [rechargecfg::R](rechargecfg::R) reader structure"]
    impl crate::Readable for RECHARGECFG {}
    #[doc = "`write(|w| ..)` method takes [rechargecfg::W](rechargecfg::W) writer structure"]
    impl crate::Writable for RECHARGECFG {}
    #[doc = "Recharge Controller Configuration This register sets all relevant patameters for controlling the recharge algorithm."]
    pub mod rechargecfg {
        #[doc = "Reader of register RECHARGECFG"]
        pub type R = crate::R<u32, super::RECHARGECFG>;
        #[doc = "Writer for register RECHARGECFG"]
        pub type W = crate::W<u32, super::RECHARGECFG>;
        #[doc = "Register RECHARGECFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::RECHARGECFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADAPTIVE_EN`"]
        pub type ADAPTIVE_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADAPTIVE_EN`"]
        pub struct ADAPTIVE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADAPTIVE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `C2`"]
        pub type C2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `C2`"]
        pub struct C2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> C2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `C1`"]
        pub type C1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `C1`"]
        pub struct C1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> C1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MAX_PER_M`"]
        pub type MAX_PER_M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MAX_PER_M`"]
        pub struct MAX_PER_M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_PER_M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 11)) | (((value as u32) & 0x1f) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `MAX_PER_E`"]
        pub type MAX_PER_E_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MAX_PER_E`"]
        pub struct MAX_PER_E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_PER_E_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PER_M`"]
        pub type PER_M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PER_M`"]
        pub struct PER_M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | (((value as u32) & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PER_E`"]
        pub type PER_E_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PER_E`"]
        pub struct PER_E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_E_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - ADAPTIVE_EN"]
            #[inline(always)]
            pub fn adaptive_en(&self) -> ADAPTIVE_EN_R {
                ADAPTIVE_EN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bits 20:23 - C2"]
            #[inline(always)]
            pub fn c2(&self) -> C2_R {
                C2_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - C1"]
            #[inline(always)]
            pub fn c1(&self) -> C1_R {
                C1_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 11:15 - MAX_PER_M"]
            #[inline(always)]
            pub fn max_per_m(&self) -> MAX_PER_M_R {
                MAX_PER_M_R::new(((self.bits >> 11) & 0x1f) as u8)
            }
            #[doc = "Bits 8:10 - MAX_PER_E"]
            #[inline(always)]
            pub fn max_per_e(&self) -> MAX_PER_E_R {
                MAX_PER_E_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 3:7 - PER_M"]
            #[inline(always)]
            pub fn per_m(&self) -> PER_M_R {
                PER_M_R::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 0:2 - PER_E"]
            #[inline(always)]
            pub fn per_e(&self) -> PER_E_R {
                PER_E_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - ADAPTIVE_EN"]
            #[inline(always)]
            pub fn adaptive_en(&mut self) -> ADAPTIVE_EN_W {
                ADAPTIVE_EN_W { w: self }
            }
            #[doc = "Bits 20:23 - C2"]
            #[inline(always)]
            pub fn c2(&mut self) -> C2_W {
                C2_W { w: self }
            }
            #[doc = "Bits 16:19 - C1"]
            #[inline(always)]
            pub fn c1(&mut self) -> C1_W {
                C1_W { w: self }
            }
            #[doc = "Bits 11:15 - MAX_PER_M"]
            #[inline(always)]
            pub fn max_per_m(&mut self) -> MAX_PER_M_W {
                MAX_PER_M_W { w: self }
            }
            #[doc = "Bits 8:10 - MAX_PER_E"]
            #[inline(always)]
            pub fn max_per_e(&mut self) -> MAX_PER_E_W {
                MAX_PER_E_W { w: self }
            }
            #[doc = "Bits 3:7 - PER_M"]
            #[inline(always)]
            pub fn per_m(&mut self) -> PER_M_W {
                PER_M_W { w: self }
            }
            #[doc = "Bits 0:2 - PER_E"]
            #[inline(always)]
            pub fn per_e(&mut self) -> PER_E_W {
                PER_E_W { w: self }
            }
        }
    }
    #[doc = "Recharge Controller Status This register controls various status registers which are updated during recharge. The register is mostly intended for test and debug.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rechargestat](rechargestat) module"]
    pub type RECHARGESTAT = crate::Reg<u32, _RECHARGESTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RECHARGESTAT;
    #[doc = "`read()` method returns [rechargestat::R](rechargestat::R) reader structure"]
    impl crate::Readable for RECHARGESTAT {}
    #[doc = "`write(|w| ..)` method takes [rechargestat::W](rechargestat::W) writer structure"]
    impl crate::Writable for RECHARGESTAT {}
    #[doc = "Recharge Controller Status This register controls various status registers which are updated during recharge. The register is mostly intended for test and debug."]
    pub mod rechargestat {
        #[doc = "Reader of register RECHARGESTAT"]
        pub type R = crate::R<u32, super::RECHARGESTAT>;
        #[doc = "Writer for register RECHARGESTAT"]
        pub type W = crate::W<u32, super::RECHARGESTAT>;
        #[doc = "Register RECHARGESTAT `reset()`'s with value 0"]
        impl crate::ResetValue for super::RECHARGESTAT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VDDR_SMPLS`"]
        pub type VDDR_SMPLS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VDDR_SMPLS`"]
        pub struct VDDR_SMPLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VDDR_SMPLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MAX_USED_PER`"]
        pub type MAX_USED_PER_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MAX_USED_PER`"]
        pub struct MAX_USED_PER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_USED_PER_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:19 - VDDR_SMPLS"]
            #[inline(always)]
            pub fn vddr_smpls(&self) -> VDDR_SMPLS_R {
                VDDR_SMPLS_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 0:15 - MAX_USED_PER"]
            #[inline(always)]
            pub fn max_used_per(&self) -> MAX_USED_PER_R {
                MAX_USED_PER_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:19 - VDDR_SMPLS"]
            #[inline(always)]
            pub fn vddr_smpls(&mut self) -> VDDR_SMPLS_W {
                VDDR_SMPLS_W { w: self }
            }
            #[doc = "Bits 0:15 - MAX_USED_PER"]
            #[inline(always)]
            pub fn max_used_per(&mut self) -> MAX_USED_PER_W {
                MAX_USED_PER_W { w: self }
            }
        }
    }
    #[doc = "Oscillator Configuration This register sets the period for Amplitude compensation requests sent to the oscillator control system. The amplitude compensations is only applicable when XOSC_HF is running in low power mode.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [osccfg](osccfg) module"]
    pub type OSCCFG = crate::Reg<u32, _OSCCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSCCFG;
    #[doc = "`read()` method returns [osccfg::R](osccfg::R) reader structure"]
    impl crate::Readable for OSCCFG {}
    #[doc = "`write(|w| ..)` method takes [osccfg::W](osccfg::W) writer structure"]
    impl crate::Writable for OSCCFG {}
    #[doc = "Oscillator Configuration This register sets the period for Amplitude compensation requests sent to the oscillator control system. The amplitude compensations is only applicable when XOSC_HF is running in low power mode."]
    pub mod osccfg {
        #[doc = "Reader of register OSCCFG"]
        pub type R = crate::R<u32, super::OSCCFG>;
        #[doc = "Writer for register OSCCFG"]
        pub type W = crate::W<u32, super::OSCCFG>;
        #[doc = "Register OSCCFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::OSCCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PER_M`"]
        pub type PER_M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PER_M`"]
        pub struct PER_M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | (((value as u32) & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PER_E`"]
        pub type PER_E_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PER_E`"]
        pub struct PER_E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_E_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 3:7 - PER_M"]
            #[inline(always)]
            pub fn per_m(&self) -> PER_M_R {
                PER_M_R::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 0:2 - PER_E"]
            #[inline(always)]
            pub fn per_e(&self) -> PER_E_R {
                PER_E_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 3:7 - PER_M"]
            #[inline(always)]
            pub fn per_m(&mut self) -> PER_M_W {
                PER_M_W { w: self }
            }
            #[doc = "Bits 0:2 - PER_E"]
            #[inline(always)]
            pub fn per_e(&mut self) -> PER_E_W {
                PER_E_W { w: self }
            }
        }
    }
    #[doc = "JTAG Configuration This register contains control for configuration of the JTAG domain,- hereunder access permissions for each TAP.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jtagcfg](jtagcfg) module"]
    pub type JTAGCFG = crate::Reg<u32, _JTAGCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JTAGCFG;
    #[doc = "`read()` method returns [jtagcfg::R](jtagcfg::R) reader structure"]
    impl crate::Readable for JTAGCFG {}
    #[doc = "`write(|w| ..)` method takes [jtagcfg::W](jtagcfg::W) writer structure"]
    impl crate::Writable for JTAGCFG {}
    #[doc = "JTAG Configuration This register contains control for configuration of the JTAG domain,- hereunder access permissions for each TAP."]
    pub mod jtagcfg {
        #[doc = "Reader of register JTAGCFG"]
        pub type R = crate::R<u32, super::JTAGCFG>;
        #[doc = "Writer for register JTAGCFG"]
        pub type W = crate::W<u32, super::JTAGCFG>;
        #[doc = "Register JTAGCFG `reset()`'s with value 0x0100"]
        impl crate::ResetValue for super::JTAGCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0100
            }
        }
        #[doc = "Reader of field `JTAG_PD_FORCE_ON`"]
        pub type JTAG_PD_FORCE_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `JTAG_PD_FORCE_ON`"]
        pub struct JTAG_PD_FORCE_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> JTAG_PD_FORCE_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - JTAG_PD_FORCE_ON"]
            #[inline(always)]
            pub fn jtag_pd_force_on(&self) -> JTAG_PD_FORCE_ON_R {
                JTAG_PD_FORCE_ON_R::new(((self.bits >> 8) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - JTAG_PD_FORCE_ON"]
            #[inline(always)]
            pub fn jtag_pd_force_on(&mut self) -> JTAG_PD_FORCE_ON_W {
                JTAG_PD_FORCE_ON_W { w: self }
            }
        }
    }
    #[doc = "JTAG USERCODE Boot code copies the JTAG USERCODE to this register from where it is forwarded to the debug subsystem.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [jtagusercode](jtagusercode) module"]
    pub type JTAGUSERCODE = crate::Reg<u32, _JTAGUSERCODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _JTAGUSERCODE;
    #[doc = "`read()` method returns [jtagusercode::R](jtagusercode::R) reader structure"]
    impl crate::Readable for JTAGUSERCODE {}
    #[doc = "`write(|w| ..)` method takes [jtagusercode::W](jtagusercode::W) writer structure"]
    impl crate::Writable for JTAGUSERCODE {}
    #[doc = "JTAG USERCODE Boot code copies the JTAG USERCODE to this register from where it is forwarded to the debug subsystem."]
    pub mod jtagusercode {
        #[doc = "Reader of register JTAGUSERCODE"]
        pub type R = crate::R<u32, super::JTAGUSERCODE>;
        #[doc = "Writer for register JTAGUSERCODE"]
        pub type W = crate::W<u32, super::JTAGUSERCODE>;
        #[doc = "Register JTAGUSERCODE `reset()`'s with value 0x0b99_a02f"]
        impl crate::ResetValue for super::JTAGUSERCODE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0b99_a02f
            }
        }
        #[doc = "Reader of field `USER_CODE`"]
        pub type USER_CODE_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `USER_CODE`"]
        pub struct USER_CODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USER_CODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - USER_CODE"]
            #[inline(always)]
            pub fn user_code(&self) -> USER_CODE_R {
                USER_CODE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - USER_CODE"]
            #[inline(always)]
            pub fn user_code(&mut self) -> USER_CODE_W {
                USER_CODE_W { w: self }
            }
        }
    }
}
#[doc = "Configuration registers controlling analog peripherals of AUX. Registers Fields should be considered static unless otherwise noted (as dynamic)"]
pub struct AUX_ADI4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_ADI4 {}
impl AUX_ADI4 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_adi4::RegisterBlock {
        0x400c_b000 as *const _
    }
}
impl Deref for AUX_ADI4 {
    type Target = aux_adi4::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_ADI4::ptr() }
    }
}
#[doc = "Configuration registers controlling analog peripherals of AUX. Registers Fields should be considered static unless otherwise noted (as dynamic)"]
pub mod aux_adi4 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Internal. Only to be used through TI provided API."]
        pub mux0: MUX0,
        #[doc = "0x01 - Internal. Only to be used through TI provided API."]
        pub mux1: MUX1,
        #[doc = "0x02 - Internal. Only to be used through TI provided API."]
        pub mux2: MUX2,
        #[doc = "0x03 - Internal. Only to be used through TI provided API."]
        pub mux3: MUX3,
        #[doc = "0x04 - Current Source Strength and trim control for current source"]
        pub isrc: ISRC,
        #[doc = "0x05 - Comparator Control COMPA and COMPB comparators"]
        pub comp: COMP,
        _reserved6: [u8; 1usize],
        #[doc = "0x07 - Internal. Only to be used through TI provided API."]
        pub mux4: MUX4,
        #[doc = "0x08 - ADC Control 0"]
        pub adc0: ADC0,
        #[doc = "0x09 - ADC Control 1"]
        pub adc1: ADC1,
        #[doc = "0x0a - ADC Reference 0 Control reference used by the ADC"]
        pub adcref0: ADCREF0,
        #[doc = "0x0b - ADC Reference 1 Control reference used by the ADC"]
        pub adcref1: ADCREF1,
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mux0](mux0) module"]
    pub type MUX0 = crate::Reg<u8, _MUX0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MUX0;
    #[doc = "`read()` method returns [mux0::R](mux0::R) reader structure"]
    impl crate::Readable for MUX0 {}
    #[doc = "`write(|w| ..)` method takes [mux0::W](mux0::W) writer structure"]
    impl crate::Writable for MUX0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod mux0 {
        #[doc = "Reader of register MUX0"]
        pub type R = crate::R<u8, super::MUX0>;
        #[doc = "Writer for register MUX0"]
        pub type W = crate::W<u8, super::MUX0>;
        #[doc = "Register MUX0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MUX0 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPA_IN`"]
        pub type COMPA_IN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMPA_IN`"]
        pub struct COMPA_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u8) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `COMPA_REF`"]
        pub type COMPA_REF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMPA_REF`"]
        pub struct COMPA_REF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_REF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u8) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:7 - COMPA_IN"]
            #[inline(always)]
            pub fn compa_in(&self) -> COMPA_IN_R {
                COMPA_IN_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - COMPA_REF"]
            #[inline(always)]
            pub fn compa_ref(&self) -> COMPA_REF_R {
                COMPA_REF_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:7 - COMPA_IN"]
            #[inline(always)]
            pub fn compa_in(&mut self) -> COMPA_IN_W {
                COMPA_IN_W { w: self }
            }
            #[doc = "Bits 0:3 - COMPA_REF"]
            #[inline(always)]
            pub fn compa_ref(&mut self) -> COMPA_REF_W {
                COMPA_REF_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mux1](mux1) module"]
    pub type MUX1 = crate::Reg<u8, _MUX1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MUX1;
    #[doc = "`read()` method returns [mux1::R](mux1::R) reader structure"]
    impl crate::Readable for MUX1 {}
    #[doc = "`write(|w| ..)` method takes [mux1::W](mux1::W) writer structure"]
    impl crate::Writable for MUX1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod mux1 {
        #[doc = "Reader of register MUX1"]
        pub type R = crate::R<u8, super::MUX1>;
        #[doc = "Writer for register MUX1"]
        pub type W = crate::W<u8, super::MUX1>;
        #[doc = "Register MUX1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MUX1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPA_IN`"]
        pub type COMPA_IN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMPA_IN`"]
        pub struct COMPA_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - COMPA_IN"]
            #[inline(always)]
            pub fn compa_in(&self) -> COMPA_IN_R {
                COMPA_IN_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - COMPA_IN"]
            #[inline(always)]
            pub fn compa_in(&mut self) -> COMPA_IN_W {
                COMPA_IN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mux2](mux2) module"]
    pub type MUX2 = crate::Reg<u8, _MUX2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MUX2;
    #[doc = "`read()` method returns [mux2::R](mux2::R) reader structure"]
    impl crate::Readable for MUX2 {}
    #[doc = "`write(|w| ..)` method takes [mux2::W](mux2::W) writer structure"]
    impl crate::Writable for MUX2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod mux2 {
        #[doc = "Reader of register MUX2"]
        pub type R = crate::R<u8, super::MUX2>;
        #[doc = "Writer for register MUX2"]
        pub type W = crate::W<u8, super::MUX2>;
        #[doc = "Register MUX2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MUX2 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADCCOMPB_IN`"]
        pub type ADCCOMPB_IN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADCCOMPB_IN`"]
        pub struct ADCCOMPB_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCCOMPB_IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | (((value as u8) & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `COMPB_REF`"]
        pub type COMPB_REF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMPB_REF`"]
        pub struct COMPB_REF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPB_REF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u8) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 3:7 - ADCCOMPB_IN"]
            #[inline(always)]
            pub fn adccompb_in(&self) -> ADCCOMPB_IN_R {
                ADCCOMPB_IN_R::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 0:2 - COMPB_REF"]
            #[inline(always)]
            pub fn compb_ref(&self) -> COMPB_REF_R {
                COMPB_REF_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 3:7 - ADCCOMPB_IN"]
            #[inline(always)]
            pub fn adccompb_in(&mut self) -> ADCCOMPB_IN_W {
                ADCCOMPB_IN_W { w: self }
            }
            #[doc = "Bits 0:2 - COMPB_REF"]
            #[inline(always)]
            pub fn compb_ref(&mut self) -> COMPB_REF_W {
                COMPB_REF_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mux3](mux3) module"]
    pub type MUX3 = crate::Reg<u8, _MUX3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MUX3;
    #[doc = "`read()` method returns [mux3::R](mux3::R) reader structure"]
    impl crate::Readable for MUX3 {}
    #[doc = "`write(|w| ..)` method takes [mux3::W](mux3::W) writer structure"]
    impl crate::Writable for MUX3 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod mux3 {
        #[doc = "Reader of register MUX3"]
        pub type R = crate::R<u8, super::MUX3>;
        #[doc = "Writer for register MUX3"]
        pub type W = crate::W<u8, super::MUX3>;
        #[doc = "Register MUX3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MUX3 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADCCOMPB_IN`"]
        pub type ADCCOMPB_IN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADCCOMPB_IN`"]
        pub struct ADCCOMPB_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCCOMPB_IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - ADCCOMPB_IN"]
            #[inline(always)]
            pub fn adccompb_in(&self) -> ADCCOMPB_IN_R {
                ADCCOMPB_IN_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - ADCCOMPB_IN"]
            #[inline(always)]
            pub fn adccompb_in(&mut self) -> ADCCOMPB_IN_W {
                ADCCOMPB_IN_W { w: self }
            }
        }
    }
    #[doc = "Current Source Strength and trim control for current source\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isrc](isrc) module"]
    pub type ISRC = crate::Reg<u8, _ISRC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISRC;
    #[doc = "`read()` method returns [isrc::R](isrc::R) reader structure"]
    impl crate::Readable for ISRC {}
    #[doc = "`write(|w| ..)` method takes [isrc::W](isrc::W) writer structure"]
    impl crate::Writable for ISRC {}
    #[doc = "Current Source Strength and trim control for current source"]
    pub mod isrc {
        #[doc = "Reader of register ISRC"]
        pub type R = crate::R<u8, super::ISRC>;
        #[doc = "Writer for register ISRC"]
        pub type W = crate::W<u8, super::ISRC>;
        #[doc = "Register ISRC `reset()`'s with value 0"]
        impl crate::ResetValue for super::ISRC {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TRIM`"]
        pub type TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM`"]
        pub struct TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 2)) | (((value as u8) & 0x3f) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 2:7 - TRIM"]
            #[inline(always)]
            pub fn trim(&self) -> TRIM_R {
                TRIM_R::new(((self.bits >> 2) & 0x3f) as u8)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 2:7 - TRIM"]
            #[inline(always)]
            pub fn trim(&mut self) -> TRIM_W {
                TRIM_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Comparator Control COMPA and COMPB comparators\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [comp](comp) module"]
    pub type COMP = crate::Reg<u8, _COMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _COMP;
    #[doc = "`read()` method returns [comp::R](comp::R) reader structure"]
    impl crate::Readable for COMP {}
    #[doc = "`write(|w| ..)` method takes [comp::W](comp::W) writer structure"]
    impl crate::Writable for COMP {}
    #[doc = "Comparator Control COMPA and COMPB comparators"]
    pub mod comp {
        #[doc = "Reader of register COMP"]
        pub type R = crate::R<u8, super::COMP>;
        #[doc = "Writer for register COMP"]
        pub type W = crate::W<u8, super::COMP>;
        #[doc = "Register COMP `reset()`'s with value 0"]
        impl crate::ResetValue for super::COMP {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPA_REF_RES_EN`"]
        pub type COMPA_REF_RES_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPA_REF_RES_EN`"]
        pub struct COMPA_REF_RES_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_REF_RES_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `COMPA_REF_CURR_EN`"]
        pub type COMPA_REF_CURR_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPA_REF_CURR_EN`"]
        pub struct COMPA_REF_CURR_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_REF_CURR_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `COMPB_TRIM`"]
        pub type COMPB_TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMPB_TRIM`"]
        pub struct COMPB_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPB_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u8) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `COMPB_EN`"]
        pub type COMPB_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPB_EN`"]
        pub struct COMPB_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPB_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u8) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `COMPA_EN`"]
        pub type COMPA_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMPA_EN`"]
        pub struct COMPA_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - COMPA_REF_RES_EN"]
            #[inline(always)]
            pub fn compa_ref_res_en(&self) -> COMPA_REF_RES_EN_R {
                COMPA_REF_RES_EN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - COMPA_REF_CURR_EN"]
            #[inline(always)]
            pub fn compa_ref_curr_en(&self) -> COMPA_REF_CURR_EN_R {
                COMPA_REF_CURR_EN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 3:5 - COMPB_TRIM"]
            #[inline(always)]
            pub fn compb_trim(&self) -> COMPB_TRIM_R {
                COMPB_TRIM_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bit 2 - COMPB_EN"]
            #[inline(always)]
            pub fn compb_en(&self) -> COMPB_EN_R {
                COMPB_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - COMPA_EN"]
            #[inline(always)]
            pub fn compa_en(&self) -> COMPA_EN_R {
                COMPA_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - COMPA_REF_RES_EN"]
            #[inline(always)]
            pub fn compa_ref_res_en(&mut self) -> COMPA_REF_RES_EN_W {
                COMPA_REF_RES_EN_W { w: self }
            }
            #[doc = "Bit 6 - COMPA_REF_CURR_EN"]
            #[inline(always)]
            pub fn compa_ref_curr_en(&mut self) -> COMPA_REF_CURR_EN_W {
                COMPA_REF_CURR_EN_W { w: self }
            }
            #[doc = "Bits 3:5 - COMPB_TRIM"]
            #[inline(always)]
            pub fn compb_trim(&mut self) -> COMPB_TRIM_W {
                COMPB_TRIM_W { w: self }
            }
            #[doc = "Bit 2 - COMPB_EN"]
            #[inline(always)]
            pub fn compb_en(&mut self) -> COMPB_EN_W {
                COMPB_EN_W { w: self }
            }
            #[doc = "Bit 0 - COMPA_EN"]
            #[inline(always)]
            pub fn compa_en(&mut self) -> COMPA_EN_W {
                COMPA_EN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mux4](mux4) module"]
    pub type MUX4 = crate::Reg<u8, _MUX4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MUX4;
    #[doc = "`read()` method returns [mux4::R](mux4::R) reader structure"]
    impl crate::Readable for MUX4 {}
    #[doc = "`write(|w| ..)` method takes [mux4::W](mux4::W) writer structure"]
    impl crate::Writable for MUX4 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod mux4 {
        #[doc = "Reader of register MUX4"]
        pub type R = crate::R<u8, super::MUX4>;
        #[doc = "Writer for register MUX4"]
        pub type W = crate::W<u8, super::MUX4>;
        #[doc = "Register MUX4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MUX4 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMPA_REF`"]
        pub type COMPA_REF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `COMPA_REF`"]
        pub struct COMPA_REF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPA_REF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u8) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - COMPA_REF"]
            #[inline(always)]
            pub fn compa_ref(&self) -> COMPA_REF_R {
                COMPA_REF_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - COMPA_REF"]
            #[inline(always)]
            pub fn compa_ref(&mut self) -> COMPA_REF_W {
                COMPA_REF_W { w: self }
            }
        }
    }
    #[doc = "ADC Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc0](adc0) module"]
    pub type ADC0 = crate::Reg<u8, _ADC0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADC0;
    #[doc = "`read()` method returns [adc0::R](adc0::R) reader structure"]
    impl crate::Readable for ADC0 {}
    #[doc = "`write(|w| ..)` method takes [adc0::W](adc0::W) writer structure"]
    impl crate::Writable for ADC0 {}
    #[doc = "ADC Control 0"]
    pub mod adc0 {
        #[doc = "Reader of register ADC0"]
        pub type R = crate::R<u8, super::ADC0>;
        #[doc = "Writer for register ADC0"]
        pub type W = crate::W<u8, super::ADC0>;
        #[doc = "Register ADC0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADC0 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMPL_MODE`"]
        pub type SMPL_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPL_MODE`"]
        pub struct SMPL_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPL_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u8) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SMPL_CYCLE_EXP`"]
        pub type SMPL_CYCLE_EXP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMPL_CYCLE_EXP`"]
        pub struct SMPL_CYCLE_EXP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPL_CYCLE_EXP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 3)) | (((value as u8) & 0x0f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RESET_N`"]
        pub type RESET_N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET_N`"]
        pub struct RESET_N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u8) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - SMPL_MODE"]
            #[inline(always)]
            pub fn smpl_mode(&self) -> SMPL_MODE_R {
                SMPL_MODE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 3:6 - SMPL_CYCLE_EXP"]
            #[inline(always)]
            pub fn smpl_cycle_exp(&self) -> SMPL_CYCLE_EXP_R {
                SMPL_CYCLE_EXP_R::new(((self.bits >> 3) & 0x0f) as u8)
            }
            #[doc = "Bit 1 - RESET_N"]
            #[inline(always)]
            pub fn reset_n(&self) -> RESET_N_R {
                RESET_N_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - SMPL_MODE"]
            #[inline(always)]
            pub fn smpl_mode(&mut self) -> SMPL_MODE_W {
                SMPL_MODE_W { w: self }
            }
            #[doc = "Bits 3:6 - SMPL_CYCLE_EXP"]
            #[inline(always)]
            pub fn smpl_cycle_exp(&mut self) -> SMPL_CYCLE_EXP_W {
                SMPL_CYCLE_EXP_W { w: self }
            }
            #[doc = "Bit 1 - RESET_N"]
            #[inline(always)]
            pub fn reset_n(&mut self) -> RESET_N_W {
                RESET_N_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "ADC Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc1](adc1) module"]
    pub type ADC1 = crate::Reg<u8, _ADC1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADC1;
    #[doc = "`read()` method returns [adc1::R](adc1::R) reader structure"]
    impl crate::Readable for ADC1 {}
    #[doc = "`write(|w| ..)` method takes [adc1::W](adc1::W) writer structure"]
    impl crate::Writable for ADC1 {}
    #[doc = "ADC Control 1"]
    pub mod adc1 {
        #[doc = "Reader of register ADC1"]
        pub type R = crate::R<u8, super::ADC1>;
        #[doc = "Writer for register ADC1"]
        pub type W = crate::W<u8, super::ADC1>;
        #[doc = "Register ADC1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADC1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCALE_DIS`"]
        pub type SCALE_DIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCALE_DIS`"]
        pub struct SCALE_DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCALE_DIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SCALE_DIS"]
            #[inline(always)]
            pub fn scale_dis(&self) -> SCALE_DIS_R {
                SCALE_DIS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SCALE_DIS"]
            #[inline(always)]
            pub fn scale_dis(&mut self) -> SCALE_DIS_W {
                SCALE_DIS_W { w: self }
            }
        }
    }
    #[doc = "ADC Reference 0 Control reference used by the ADC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcref0](adcref0) module"]
    pub type ADCREF0 = crate::Reg<u8, _ADCREF0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCREF0;
    #[doc = "`read()` method returns [adcref0::R](adcref0::R) reader structure"]
    impl crate::Readable for ADCREF0 {}
    #[doc = "`write(|w| ..)` method takes [adcref0::W](adcref0::W) writer structure"]
    impl crate::Writable for ADCREF0 {}
    #[doc = "ADC Reference 0 Control reference used by the ADC"]
    pub mod adcref0 {
        #[doc = "Reader of register ADCREF0"]
        pub type R = crate::R<u8, super::ADCREF0>;
        #[doc = "Writer for register ADCREF0"]
        pub type W = crate::W<u8, super::ADCREF0>;
        #[doc = "Register ADCREF0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCREF0 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REF_ON_IDLE`"]
        pub type REF_ON_IDLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REF_ON_IDLE`"]
        pub struct REF_ON_IDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REF_ON_IDLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u8) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `IOMUX`"]
        pub type IOMUX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOMUX`"]
        pub struct IOMUX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMUX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u8) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `EXT`"]
        pub type EXT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EXT`"]
        pub struct EXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u8) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SRC`"]
        pub type SRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SRC`"]
        pub struct SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u8) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u8) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 6 - REF_ON_IDLE"]
            #[inline(always)]
            pub fn ref_on_idle(&self) -> REF_ON_IDLE_R {
                REF_ON_IDLE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IOMUX"]
            #[inline(always)]
            pub fn iomux(&self) -> IOMUX_R {
                IOMUX_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - EXT"]
            #[inline(always)]
            pub fn ext(&self) -> EXT_R {
                EXT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - SRC"]
            #[inline(always)]
            pub fn src(&self) -> SRC_R {
                SRC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - REF_ON_IDLE"]
            #[inline(always)]
            pub fn ref_on_idle(&mut self) -> REF_ON_IDLE_W {
                REF_ON_IDLE_W { w: self }
            }
            #[doc = "Bit 5 - IOMUX"]
            #[inline(always)]
            pub fn iomux(&mut self) -> IOMUX_W {
                IOMUX_W { w: self }
            }
            #[doc = "Bit 4 - EXT"]
            #[inline(always)]
            pub fn ext(&mut self) -> EXT_W {
                EXT_W { w: self }
            }
            #[doc = "Bit 3 - SRC"]
            #[inline(always)]
            pub fn src(&mut self) -> SRC_W {
                SRC_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "ADC Reference 1 Control reference used by the ADC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcref1](adcref1) module"]
    pub type ADCREF1 = crate::Reg<u8, _ADCREF1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCREF1;
    #[doc = "`read()` method returns [adcref1::R](adcref1::R) reader structure"]
    impl crate::Readable for ADCREF1 {}
    #[doc = "`write(|w| ..)` method takes [adcref1::W](adcref1::W) writer structure"]
    impl crate::Writable for ADCREF1 {}
    #[doc = "ADC Reference 1 Control reference used by the ADC"]
    pub mod adcref1 {
        #[doc = "Reader of register ADCREF1"]
        pub type R = crate::R<u8, super::ADCREF1>;
        #[doc = "Writer for register ADCREF1"]
        pub type W = crate::W<u8, super::ADCREF1>;
        #[doc = "Register ADCREF1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCREF1 {
            type Type = u8;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VTRIM`"]
        pub type VTRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VTRIM`"]
        pub struct VTRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VTRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u8) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - VTRIM"]
            #[inline(always)]
            pub fn vtrim(&self) -> VTRIM_R {
                VTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - VTRIM"]
            #[inline(always)]
            pub fn vtrim(&mut self) -> VTRIM_W {
                VTRIM_W { w: self }
            }
        }
    }
}
#[doc = "AUX Analog/Digital Input Output Controller"]
pub struct AUX_AIODIO0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_AIODIO0 {}
impl AUX_AIODIO0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_aiodio0::RegisterBlock {
        0x400c_1000 as *const _
    }
}
impl Deref for AUX_AIODIO0 {
    type Target = aux_aiodio0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_AIODIO0::ptr() }
    }
}
#[doc = "AUX Analog/Digital Input Output Controller"]
pub mod aux_aiodio0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - General Purpose Input/Output Data Out This register is used to set data on the pads assigned to AUX"]
        pub gpiodout: GPIODOUT,
        #[doc = "0x04 - Input Output Mode Controls pull-up pull-down and output mode for the IO pins assigned to AUX"]
        pub iomode: IOMODE,
        #[doc = "0x08 - General Purpose Input Output Data In"]
        pub gpiodin: GPIODIN,
        #[doc = "0x0c - General Purpose Input Output Data Out Set Strobes for setting output data register bits"]
        pub gpiodoutset: GPIODOUTSET,
        #[doc = "0x10 - General Purpose Input Output Data Out Clear Strobes for clearing output data register bits"]
        pub gpiodoutclr: GPIODOUTCLR,
        #[doc = "0x14 - General Purpose Input Output Data Out Toggle Strobes for toggling output data register bits"]
        pub gpiodouttgl: GPIODOUTTGL,
        #[doc = "0x18 - General Purpose Input Output Input Enable"]
        pub gpiodie: GPIODIE,
    }
    #[doc = "General Purpose Input/Output Data Out This register is used to set data on the pads assigned to AUX\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodout](gpiodout) module"]
    pub type GPIODOUT = crate::Reg<u32, _GPIODOUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUT;
    #[doc = "`read()` method returns [gpiodout::R](gpiodout::R) reader structure"]
    impl crate::Readable for GPIODOUT {}
    #[doc = "`write(|w| ..)` method takes [gpiodout::W](gpiodout::W) writer structure"]
    impl crate::Writable for GPIODOUT {}
    #[doc = "General Purpose Input/Output Data Out This register is used to set data on the pads assigned to AUX"]
    pub mod gpiodout {
        #[doc = "Reader of register GPIODOUT"]
        pub type R = crate::R<u32, super::GPIODOUT>;
        #[doc = "Writer for register GPIODOUT"]
        pub type W = crate::W<u32, super::GPIODOUT>;
        #[doc = "Register GPIODOUT `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "Input Output Mode Controls pull-up pull-down and output mode for the IO pins assigned to AUX\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iomode](iomode) module"]
    pub type IOMODE = crate::Reg<u32, _IOMODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOMODE;
    #[doc = "`read()` method returns [iomode::R](iomode::R) reader structure"]
    impl crate::Readable for IOMODE {}
    #[doc = "`write(|w| ..)` method takes [iomode::W](iomode::W) writer structure"]
    impl crate::Writable for IOMODE {}
    #[doc = "Input Output Mode Controls pull-up pull-down and output mode for the IO pins assigned to AUX"]
    pub mod iomode {
        #[doc = "Reader of register IOMODE"]
        pub type R = crate::R<u32, super::IOMODE>;
        #[doc = "Writer for register IOMODE"]
        pub type W = crate::W<u32, super::IOMODE>;
        #[doc = "Register IOMODE `reset()`'s with value 0"]
        impl crate::ResetValue for super::IOMODE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7`"]
        pub type IO7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7`"]
        pub struct IO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `IO6`"]
        pub type IO6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO6`"]
        pub struct IO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IO5`"]
        pub type IO5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO5`"]
        pub struct IO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IO4`"]
        pub type IO4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO4`"]
        pub struct IO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IO3`"]
        pub type IO3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO3`"]
        pub struct IO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `IO2`"]
        pub type IO2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO2`"]
        pub struct IO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IO1`"]
        pub type IO1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO1`"]
        pub struct IO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IO0`"]
        pub type IO0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO0`"]
        pub struct IO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 14:15 - IO7"]
            #[inline(always)]
            pub fn io7(&self) -> IO7_R {
                IO7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - IO6"]
            #[inline(always)]
            pub fn io6(&self) -> IO6_R {
                IO6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - IO5"]
            #[inline(always)]
            pub fn io5(&self) -> IO5_R {
                IO5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IO4"]
            #[inline(always)]
            pub fn io4(&self) -> IO4_R {
                IO4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - IO3"]
            #[inline(always)]
            pub fn io3(&self) -> IO3_R {
                IO3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - IO2"]
            #[inline(always)]
            pub fn io2(&self) -> IO2_R {
                IO2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - IO1"]
            #[inline(always)]
            pub fn io1(&self) -> IO1_R {
                IO1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - IO0"]
            #[inline(always)]
            pub fn io0(&self) -> IO0_R {
                IO0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 14:15 - IO7"]
            #[inline(always)]
            pub fn io7(&mut self) -> IO7_W {
                IO7_W { w: self }
            }
            #[doc = "Bits 12:13 - IO6"]
            #[inline(always)]
            pub fn io6(&mut self) -> IO6_W {
                IO6_W { w: self }
            }
            #[doc = "Bits 10:11 - IO5"]
            #[inline(always)]
            pub fn io5(&mut self) -> IO5_W {
                IO5_W { w: self }
            }
            #[doc = "Bits 8:9 - IO4"]
            #[inline(always)]
            pub fn io4(&mut self) -> IO4_W {
                IO4_W { w: self }
            }
            #[doc = "Bits 6:7 - IO3"]
            #[inline(always)]
            pub fn io3(&mut self) -> IO3_W {
                IO3_W { w: self }
            }
            #[doc = "Bits 4:5 - IO2"]
            #[inline(always)]
            pub fn io2(&mut self) -> IO2_W {
                IO2_W { w: self }
            }
            #[doc = "Bits 2:3 - IO1"]
            #[inline(always)]
            pub fn io1(&mut self) -> IO1_W {
                IO1_W { w: self }
            }
            #[doc = "Bits 0:1 - IO0"]
            #[inline(always)]
            pub fn io0(&mut self) -> IO0_W {
                IO0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Data In\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodin](gpiodin) module"]
    pub type GPIODIN = crate::Reg<u32, _GPIODIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODIN;
    #[doc = "`read()` method returns [gpiodin::R](gpiodin::R) reader structure"]
    impl crate::Readable for GPIODIN {}
    #[doc = "General Purpose Input Output Data In"]
    pub mod gpiodin {
        #[doc = "Reader of register GPIODIN"]
        pub type R = crate::R<u32, super::GPIODIN>;
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "General Purpose Input Output Data Out Set Strobes for setting output data register bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodoutset](gpiodoutset) module"]
    pub type GPIODOUTSET = crate::Reg<u32, _GPIODOUTSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUTSET;
    #[doc = "`read()` method returns [gpiodoutset::R](gpiodoutset::R) reader structure"]
    impl crate::Readable for GPIODOUTSET {}
    #[doc = "`write(|w| ..)` method takes [gpiodoutset::W](gpiodoutset::W) writer structure"]
    impl crate::Writable for GPIODOUTSET {}
    #[doc = "General Purpose Input Output Data Out Set Strobes for setting output data register bits"]
    pub mod gpiodoutset {
        #[doc = "Reader of register GPIODOUTSET"]
        pub type R = crate::R<u32, super::GPIODOUTSET>;
        #[doc = "Writer for register GPIODOUTSET"]
        pub type W = crate::W<u32, super::GPIODOUTSET>;
        #[doc = "Register GPIODOUTSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUTSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Data Out Clear Strobes for clearing output data register bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodoutclr](gpiodoutclr) module"]
    pub type GPIODOUTCLR = crate::Reg<u32, _GPIODOUTCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUTCLR;
    #[doc = "`read()` method returns [gpiodoutclr::R](gpiodoutclr::R) reader structure"]
    impl crate::Readable for GPIODOUTCLR {}
    #[doc = "`write(|w| ..)` method takes [gpiodoutclr::W](gpiodoutclr::W) writer structure"]
    impl crate::Writable for GPIODOUTCLR {}
    #[doc = "General Purpose Input Output Data Out Clear Strobes for clearing output data register bits"]
    pub mod gpiodoutclr {
        #[doc = "Reader of register GPIODOUTCLR"]
        pub type R = crate::R<u32, super::GPIODOUTCLR>;
        #[doc = "Writer for register GPIODOUTCLR"]
        pub type W = crate::W<u32, super::GPIODOUTCLR>;
        #[doc = "Register GPIODOUTCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUTCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Data Out Toggle Strobes for toggling output data register bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodouttgl](gpiodouttgl) module"]
    pub type GPIODOUTTGL = crate::Reg<u32, _GPIODOUTTGL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUTTGL;
    #[doc = "`read()` method returns [gpiodouttgl::R](gpiodouttgl::R) reader structure"]
    impl crate::Readable for GPIODOUTTGL {}
    #[doc = "`write(|w| ..)` method takes [gpiodouttgl::W](gpiodouttgl::W) writer structure"]
    impl crate::Writable for GPIODOUTTGL {}
    #[doc = "General Purpose Input Output Data Out Toggle Strobes for toggling output data register bits"]
    pub mod gpiodouttgl {
        #[doc = "Reader of register GPIODOUTTGL"]
        pub type R = crate::R<u32, super::GPIODOUTTGL>;
        #[doc = "Writer for register GPIODOUTTGL"]
        pub type W = crate::W<u32, super::GPIODOUTTGL>;
        #[doc = "Register GPIODOUTTGL `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUTTGL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Input Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodie](gpiodie) module"]
    pub type GPIODIE = crate::Reg<u32, _GPIODIE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODIE;
    #[doc = "`read()` method returns [gpiodie::R](gpiodie::R) reader structure"]
    impl crate::Readable for GPIODIE {}
    #[doc = "`write(|w| ..)` method takes [gpiodie::W](gpiodie::W) writer structure"]
    impl crate::Writable for GPIODIE {}
    #[doc = "General Purpose Input Output Input Enable"]
    pub mod gpiodie {
        #[doc = "Reader of register GPIODIE"]
        pub type R = crate::R<u32, super::GPIODIE>;
        #[doc = "Writer for register GPIODIE"]
        pub type W = crate::W<u32, super::GPIODIE>;
        #[doc = "Register GPIODIE `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODIE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
}
#[doc = "AUX Analog/Digital Input Output Controller"]
pub struct AUX_AIODIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_AIODIO1 {}
impl AUX_AIODIO1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_aiodio1::RegisterBlock {
        0x400c_2000 as *const _
    }
}
impl Deref for AUX_AIODIO1 {
    type Target = aux_aiodio1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_AIODIO1::ptr() }
    }
}
#[doc = "AUX Analog/Digital Input Output Controller"]
pub mod aux_aiodio1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - General Purpose Input/Output Data Out This register is used to set data on the pads assigned to AUX"]
        pub gpiodout: GPIODOUT,
        #[doc = "0x04 - Input Output Mode Controls pull-up pull-down and output mode for the IO pins assigned to AUX"]
        pub iomode: IOMODE,
        #[doc = "0x08 - General Purpose Input Output Data In"]
        pub gpiodin: GPIODIN,
        #[doc = "0x0c - General Purpose Input Output Data Out Set Strobes for setting output data register bits"]
        pub gpiodoutset: GPIODOUTSET,
        #[doc = "0x10 - General Purpose Input Output Data Out Clear Strobes for clearing output data register bits"]
        pub gpiodoutclr: GPIODOUTCLR,
        #[doc = "0x14 - General Purpose Input Output Data Out Toggle Strobes for toggling output data register bits"]
        pub gpiodouttgl: GPIODOUTTGL,
        #[doc = "0x18 - General Purpose Input Output Input Enable"]
        pub gpiodie: GPIODIE,
    }
    #[doc = "General Purpose Input/Output Data Out This register is used to set data on the pads assigned to AUX\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodout](gpiodout) module"]
    pub type GPIODOUT = crate::Reg<u32, _GPIODOUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUT;
    #[doc = "`read()` method returns [gpiodout::R](gpiodout::R) reader structure"]
    impl crate::Readable for GPIODOUT {}
    #[doc = "`write(|w| ..)` method takes [gpiodout::W](gpiodout::W) writer structure"]
    impl crate::Writable for GPIODOUT {}
    #[doc = "General Purpose Input/Output Data Out This register is used to set data on the pads assigned to AUX"]
    pub mod gpiodout {
        #[doc = "Reader of register GPIODOUT"]
        pub type R = crate::R<u32, super::GPIODOUT>;
        #[doc = "Writer for register GPIODOUT"]
        pub type W = crate::W<u32, super::GPIODOUT>;
        #[doc = "Register GPIODOUT `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "Input Output Mode Controls pull-up pull-down and output mode for the IO pins assigned to AUX\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iomode](iomode) module"]
    pub type IOMODE = crate::Reg<u32, _IOMODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOMODE;
    #[doc = "`read()` method returns [iomode::R](iomode::R) reader structure"]
    impl crate::Readable for IOMODE {}
    #[doc = "`write(|w| ..)` method takes [iomode::W](iomode::W) writer structure"]
    impl crate::Writable for IOMODE {}
    #[doc = "Input Output Mode Controls pull-up pull-down and output mode for the IO pins assigned to AUX"]
    pub mod iomode {
        #[doc = "Reader of register IOMODE"]
        pub type R = crate::R<u32, super::IOMODE>;
        #[doc = "Writer for register IOMODE"]
        pub type W = crate::W<u32, super::IOMODE>;
        #[doc = "Register IOMODE `reset()`'s with value 0"]
        impl crate::ResetValue for super::IOMODE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7`"]
        pub type IO7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7`"]
        pub struct IO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `IO6`"]
        pub type IO6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO6`"]
        pub struct IO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IO5`"]
        pub type IO5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO5`"]
        pub struct IO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IO4`"]
        pub type IO4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO4`"]
        pub struct IO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IO3`"]
        pub type IO3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO3`"]
        pub struct IO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `IO2`"]
        pub type IO2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO2`"]
        pub struct IO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IO1`"]
        pub type IO1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO1`"]
        pub struct IO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IO0`"]
        pub type IO0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO0`"]
        pub struct IO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 14:15 - IO7"]
            #[inline(always)]
            pub fn io7(&self) -> IO7_R {
                IO7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - IO6"]
            #[inline(always)]
            pub fn io6(&self) -> IO6_R {
                IO6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - IO5"]
            #[inline(always)]
            pub fn io5(&self) -> IO5_R {
                IO5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IO4"]
            #[inline(always)]
            pub fn io4(&self) -> IO4_R {
                IO4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - IO3"]
            #[inline(always)]
            pub fn io3(&self) -> IO3_R {
                IO3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - IO2"]
            #[inline(always)]
            pub fn io2(&self) -> IO2_R {
                IO2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - IO1"]
            #[inline(always)]
            pub fn io1(&self) -> IO1_R {
                IO1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - IO0"]
            #[inline(always)]
            pub fn io0(&self) -> IO0_R {
                IO0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 14:15 - IO7"]
            #[inline(always)]
            pub fn io7(&mut self) -> IO7_W {
                IO7_W { w: self }
            }
            #[doc = "Bits 12:13 - IO6"]
            #[inline(always)]
            pub fn io6(&mut self) -> IO6_W {
                IO6_W { w: self }
            }
            #[doc = "Bits 10:11 - IO5"]
            #[inline(always)]
            pub fn io5(&mut self) -> IO5_W {
                IO5_W { w: self }
            }
            #[doc = "Bits 8:9 - IO4"]
            #[inline(always)]
            pub fn io4(&mut self) -> IO4_W {
                IO4_W { w: self }
            }
            #[doc = "Bits 6:7 - IO3"]
            #[inline(always)]
            pub fn io3(&mut self) -> IO3_W {
                IO3_W { w: self }
            }
            #[doc = "Bits 4:5 - IO2"]
            #[inline(always)]
            pub fn io2(&mut self) -> IO2_W {
                IO2_W { w: self }
            }
            #[doc = "Bits 2:3 - IO1"]
            #[inline(always)]
            pub fn io1(&mut self) -> IO1_W {
                IO1_W { w: self }
            }
            #[doc = "Bits 0:1 - IO0"]
            #[inline(always)]
            pub fn io0(&mut self) -> IO0_W {
                IO0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Data In\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodin](gpiodin) module"]
    pub type GPIODIN = crate::Reg<u32, _GPIODIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODIN;
    #[doc = "`read()` method returns [gpiodin::R](gpiodin::R) reader structure"]
    impl crate::Readable for GPIODIN {}
    #[doc = "General Purpose Input Output Data In"]
    pub mod gpiodin {
        #[doc = "Reader of register GPIODIN"]
        pub type R = crate::R<u32, super::GPIODIN>;
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "General Purpose Input Output Data Out Set Strobes for setting output data register bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodoutset](gpiodoutset) module"]
    pub type GPIODOUTSET = crate::Reg<u32, _GPIODOUTSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUTSET;
    #[doc = "`read()` method returns [gpiodoutset::R](gpiodoutset::R) reader structure"]
    impl crate::Readable for GPIODOUTSET {}
    #[doc = "`write(|w| ..)` method takes [gpiodoutset::W](gpiodoutset::W) writer structure"]
    impl crate::Writable for GPIODOUTSET {}
    #[doc = "General Purpose Input Output Data Out Set Strobes for setting output data register bits"]
    pub mod gpiodoutset {
        #[doc = "Reader of register GPIODOUTSET"]
        pub type R = crate::R<u32, super::GPIODOUTSET>;
        #[doc = "Writer for register GPIODOUTSET"]
        pub type W = crate::W<u32, super::GPIODOUTSET>;
        #[doc = "Register GPIODOUTSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUTSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Data Out Clear Strobes for clearing output data register bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodoutclr](gpiodoutclr) module"]
    pub type GPIODOUTCLR = crate::Reg<u32, _GPIODOUTCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUTCLR;
    #[doc = "`read()` method returns [gpiodoutclr::R](gpiodoutclr::R) reader structure"]
    impl crate::Readable for GPIODOUTCLR {}
    #[doc = "`write(|w| ..)` method takes [gpiodoutclr::W](gpiodoutclr::W) writer structure"]
    impl crate::Writable for GPIODOUTCLR {}
    #[doc = "General Purpose Input Output Data Out Clear Strobes for clearing output data register bits"]
    pub mod gpiodoutclr {
        #[doc = "Reader of register GPIODOUTCLR"]
        pub type R = crate::R<u32, super::GPIODOUTCLR>;
        #[doc = "Writer for register GPIODOUTCLR"]
        pub type W = crate::W<u32, super::GPIODOUTCLR>;
        #[doc = "Register GPIODOUTCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUTCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Data Out Toggle Strobes for toggling output data register bits\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodouttgl](gpiodouttgl) module"]
    pub type GPIODOUTTGL = crate::Reg<u32, _GPIODOUTTGL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODOUTTGL;
    #[doc = "`read()` method returns [gpiodouttgl::R](gpiodouttgl::R) reader structure"]
    impl crate::Readable for GPIODOUTTGL {}
    #[doc = "`write(|w| ..)` method takes [gpiodouttgl::W](gpiodouttgl::W) writer structure"]
    impl crate::Writable for GPIODOUTTGL {}
    #[doc = "General Purpose Input Output Data Out Toggle Strobes for toggling output data register bits"]
    pub mod gpiodouttgl {
        #[doc = "Reader of register GPIODOUTTGL"]
        pub type R = crate::R<u32, super::GPIODOUTTGL>;
        #[doc = "Writer for register GPIODOUTTGL"]
        pub type W = crate::W<u32, super::GPIODOUTTGL>;
        #[doc = "Register GPIODOUTTGL `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODOUTTGL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
    #[doc = "General Purpose Input Output Input Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpiodie](gpiodie) module"]
    pub type GPIODIE = crate::Reg<u32, _GPIODIE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIODIE;
    #[doc = "`read()` method returns [gpiodie::R](gpiodie::R) reader structure"]
    impl crate::Readable for GPIODIE {}
    #[doc = "`write(|w| ..)` method takes [gpiodie::W](gpiodie::W) writer structure"]
    impl crate::Writable for GPIODIE {}
    #[doc = "General Purpose Input Output Input Enable"]
    pub mod gpiodie {
        #[doc = "Reader of register GPIODIE"]
        pub type R = crate::R<u32, super::GPIODIE>;
        #[doc = "Writer for register GPIODIE"]
        pub type W = crate::W<u32, super::GPIODIE>;
        #[doc = "Register GPIODIE `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIODIE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IO7_0`"]
        pub type IO7_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IO7_0`"]
        pub struct IO7_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IO7_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&self) -> IO7_0_R {
                IO7_0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO7_0"]
            #[inline(always)]
            pub fn io7_0(&mut self) -> IO7_0_W {
                IO7_0_W { w: self }
            }
        }
    }
}
#[doc = "AUX Analog Peripheral Control Module"]
pub struct AUX_ANAIF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_ANAIF {}
impl AUX_ANAIF {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_anaif::RegisterBlock {
        0x400c_9000 as *const _
    }
}
impl Deref for AUX_ANAIF {
    type Target = aux_anaif::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_ANAIF::ptr() }
    }
}
#[doc = "AUX Analog Peripheral Control Module"]
pub mod aux_anaif {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 16usize],
        #[doc = "0x10 - ADC Control"]
        pub adcctl: ADCCTL,
        #[doc = "0x14 - ADC FIFO Status FIFO can hold up to four ADC samples"]
        pub adcfifostat: ADCFIFOSTAT,
        #[doc = "0x18 - ADC FIFO"]
        pub adcfifo: ADCFIFO,
        #[doc = "0x1c - ADC Trigger"]
        pub adctrig: ADCTRIG,
        #[doc = "0x20 - Current Source Control"]
        pub isrcctl: ISRCCTL,
    }
    #[doc = "ADC Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcctl](adcctl) module"]
    pub type ADCCTL = crate::Reg<u32, _ADCCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCCTL;
    #[doc = "`read()` method returns [adcctl::R](adcctl::R) reader structure"]
    impl crate::Readable for ADCCTL {}
    #[doc = "`write(|w| ..)` method takes [adcctl::W](adcctl::W) writer structure"]
    impl crate::Writable for ADCCTL {}
    #[doc = "ADC Control"]
    pub mod adcctl {
        #[doc = "Reader of register ADCCTL"]
        pub type R = crate::R<u32, super::ADCCTL>;
        #[doc = "Writer for register ADCCTL"]
        pub type W = crate::W<u32, super::ADCCTL>;
        #[doc = "Register ADCCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `START_POL`"]
        pub type START_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `START_POL`"]
        pub struct START_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `START_SRC`"]
        pub type START_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `START_SRC`"]
        pub struct START_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CMD`"]
        pub type CMD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CMD`"]
        pub struct CMD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - START_POL"]
            #[inline(always)]
            pub fn start_pol(&self) -> START_POL_R {
                START_POL_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - START_SRC"]
            #[inline(always)]
            pub fn start_src(&self) -> START_SRC_R {
                START_SRC_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:1 - CMD"]
            #[inline(always)]
            pub fn cmd(&self) -> CMD_R {
                CMD_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 13 - START_POL"]
            #[inline(always)]
            pub fn start_pol(&mut self) -> START_POL_W {
                START_POL_W { w: self }
            }
            #[doc = "Bits 8:12 - START_SRC"]
            #[inline(always)]
            pub fn start_src(&mut self) -> START_SRC_W {
                START_SRC_W { w: self }
            }
            #[doc = "Bits 0:1 - CMD"]
            #[inline(always)]
            pub fn cmd(&mut self) -> CMD_W {
                CMD_W { w: self }
            }
        }
    }
    #[doc = "ADC FIFO Status FIFO can hold up to four ADC samples\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcfifostat](adcfifostat) module"]
    pub type ADCFIFOSTAT = crate::Reg<u32, _ADCFIFOSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCFIFOSTAT;
    #[doc = "`read()` method returns [adcfifostat::R](adcfifostat::R) reader structure"]
    impl crate::Readable for ADCFIFOSTAT {}
    #[doc = "ADC FIFO Status FIFO can hold up to four ADC samples"]
    pub mod adcfifostat {
        #[doc = "Reader of register ADCFIFOSTAT"]
        pub type R = crate::R<u32, super::ADCFIFOSTAT>;
        #[doc = "Reader of field `OVERFLOW`"]
        pub type OVERFLOW_R = crate::R<bool, bool>;
        #[doc = "Reader of field `UNDERFLOW`"]
        pub type UNDERFLOW_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FULL`"]
        pub type FULL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALMOST_FULL`"]
        pub type ALMOST_FULL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EMPTY`"]
        pub type EMPTY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 4 - OVERFLOW"]
            #[inline(always)]
            pub fn overflow(&self) -> OVERFLOW_R {
                OVERFLOW_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - UNDERFLOW"]
            #[inline(always)]
            pub fn underflow(&self) -> UNDERFLOW_R {
                UNDERFLOW_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FULL"]
            #[inline(always)]
            pub fn full(&self) -> FULL_R {
                FULL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ALMOST_FULL"]
            #[inline(always)]
            pub fn almost_full(&self) -> ALMOST_FULL_R {
                ALMOST_FULL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - EMPTY"]
            #[inline(always)]
            pub fn empty(&self) -> EMPTY_R {
                EMPTY_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "ADC FIFO\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcfifo](adcfifo) module"]
    pub type ADCFIFO = crate::Reg<u32, _ADCFIFO>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCFIFO;
    #[doc = "`read()` method returns [adcfifo::R](adcfifo::R) reader structure"]
    impl crate::Readable for ADCFIFO {}
    #[doc = "`write(|w| ..)` method takes [adcfifo::W](adcfifo::W) writer structure"]
    impl crate::Writable for ADCFIFO {}
    #[doc = "ADC FIFO"]
    pub mod adcfifo {
        #[doc = "Reader of register ADCFIFO"]
        pub type R = crate::R<u32, super::ADCFIFO>;
        #[doc = "Writer for register ADCFIFO"]
        pub type W = crate::W<u32, super::ADCFIFO>;
        #[doc = "Register ADCFIFO `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCFIFO {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "ADC Trigger\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adctrig](adctrig) module"]
    pub type ADCTRIG = crate::Reg<u32, _ADCTRIG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCTRIG;
    #[doc = "`read()` method returns [adctrig::R](adctrig::R) reader structure"]
    impl crate::Readable for ADCTRIG {}
    #[doc = "`write(|w| ..)` method takes [adctrig::W](adctrig::W) writer structure"]
    impl crate::Writable for ADCTRIG {}
    #[doc = "ADC Trigger"]
    pub mod adctrig {
        #[doc = "Reader of register ADCTRIG"]
        pub type R = crate::R<u32, super::ADCTRIG>;
        #[doc = "Writer for register ADCTRIG"]
        pub type W = crate::W<u32, super::ADCTRIG>;
        #[doc = "Register ADCTRIG `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCTRIG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `START`"]
        pub type START_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `START`"]
        pub struct START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - START"]
            #[inline(always)]
            pub fn start(&self) -> START_R {
                START_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - START"]
            #[inline(always)]
            pub fn start(&mut self) -> START_W {
                START_W { w: self }
            }
        }
    }
    #[doc = "Current Source Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isrcctl](isrcctl) module"]
    pub type ISRCCTL = crate::Reg<u32, _ISRCCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISRCCTL;
    #[doc = "`read()` method returns [isrcctl::R](isrcctl::R) reader structure"]
    impl crate::Readable for ISRCCTL {}
    #[doc = "`write(|w| ..)` method takes [isrcctl::W](isrcctl::W) writer structure"]
    impl crate::Writable for ISRCCTL {}
    #[doc = "Current Source Control"]
    pub mod isrcctl {
        #[doc = "Reader of register ISRCCTL"]
        pub type R = crate::R<u32, super::ISRCCTL>;
        #[doc = "Writer for register ISRCCTL"]
        pub type W = crate::W<u32, super::ISRCCTL>;
        #[doc = "Register ISRCCTL `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::ISRCCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `RESET_N`"]
        pub type RESET_N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET_N`"]
        pub struct RESET_N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RESET_N"]
            #[inline(always)]
            pub fn reset_n(&self) -> RESET_N_R {
                RESET_N_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RESET_N"]
            #[inline(always)]
            pub fn reset_n(&mut self) -> RESET_N_W {
                RESET_N_W { w: self }
            }
        }
    }
}
#[doc = "This is the DDI for the digital block that controls all the analog clock oscillators (OSC_DIG) and performs qualification of the clocks generated."]
pub struct AUX_DDI0_OSC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_DDI0_OSC {}
impl AUX_DDI0_OSC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_ddi0_osc::RegisterBlock {
        0x400c_a000 as *const _
    }
}
impl Deref for AUX_DDI0_OSC {
    type Target = aux_ddi0_osc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_DDI0_OSC::ptr() }
    }
}
#[doc = "This is the DDI for the digital block that controls all the analog clock oscillators (OSC_DIG) and performs qualification of the clocks generated."]
pub mod aux_ddi0_osc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control 0 Controls various clock source selects"]
        pub ctl0: CTL0,
        #[doc = "0x04 - Control 1 This register contains various OSC_DIG configuration"]
        pub ctl1: CTL1,
        #[doc = "0x08 - RADC External Configuration"]
        pub radcextcfg: RADCEXTCFG,
        #[doc = "0x0c - Amplitude Compensation Control"]
        pub ampcompctl: AMPCOMPCTL,
        #[doc = "0x10 - Amplitude Compensation Threashold 1 This register contains various threshhold values for amplitude compensation algorithm"]
        pub ampcompth1: AMPCOMPTH1,
        #[doc = "0x14 - Amplitude Compensation Threashold 2 This register contains various threshhold values for amplitude compensation algorithm."]
        pub ampcompth2: AMPCOMPTH2,
        #[doc = "0x18 - Analog Bypass Values 1"]
        pub anabypassval1: ANABYPASSVAL1,
        #[doc = "0x1c - Internal. Only to be used through TI provided API."]
        pub anabypassval2: ANABYPASSVAL2,
        #[doc = "0x20 - Analog Test Control"]
        pub atestctl: ATESTCTL,
        #[doc = "0x24 - ADC Doubler Nanoamp Control"]
        pub adcdoublernanoampctl: ADCDOUBLERNANOAMPCTL,
        #[doc = "0x28 - XOSCHF Control"]
        pub xoschfctl: XOSCHFCTL,
        #[doc = "0x2c - Low Frequency Oscillator Control"]
        pub lfoscctl: LFOSCCTL,
        #[doc = "0x30 - RCOSCHF Control"]
        pub rcoschfctl: RCOSCHFCTL,
        #[doc = "0x34 - Status 0 This register contains status signals from OSC_DIG"]
        pub stat0: STAT0,
        #[doc = "0x38 - Status 1 This register contains status signals from OSC_DIG"]
        pub stat1: STAT1,
        #[doc = "0x3c - Status 2 This register contains status signals from AMPCOMP FSM"]
        pub stat2: STAT2,
    }
    #[doc = "Control 0 Controls various clock source selects\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl0](ctl0) module"]
    pub type CTL0 = crate::Reg<u32, _CTL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL0;
    #[doc = "`read()` method returns [ctl0::R](ctl0::R) reader structure"]
    impl crate::Readable for CTL0 {}
    #[doc = "`write(|w| ..)` method takes [ctl0::W](ctl0::W) writer structure"]
    impl crate::Writable for CTL0 {}
    #[doc = "Control 0 Controls various clock source selects"]
    pub mod ctl0 {
        #[doc = "Reader of register CTL0"]
        pub type R = crate::R<u32, super::CTL0>;
        #[doc = "Writer for register CTL0"]
        pub type W = crate::W<u32, super::CTL0>;
        #[doc = "Register CTL0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `XTAL_IS_24M`"]
        pub type XTAL_IS_24M_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `XTAL_IS_24M`"]
        pub struct XTAL_IS_24M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XTAL_IS_24M_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `BYPASS_XOSC_LF_CLK_QUAL`"]
        pub type BYPASS_XOSC_LF_CLK_QUAL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPASS_XOSC_LF_CLK_QUAL`"]
        pub struct BYPASS_XOSC_LF_CLK_QUAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPASS_XOSC_LF_CLK_QUAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `BYPASS_RCOSC_LF_CLK_QUAL`"]
        pub type BYPASS_RCOSC_LF_CLK_QUAL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPASS_RCOSC_LF_CLK_QUAL`"]
        pub struct BYPASS_RCOSC_LF_CLK_QUAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPASS_RCOSC_LF_CLK_QUAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DOUBLER_START_DURATION`"]
        pub type DOUBLER_START_DURATION_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DOUBLER_START_DURATION`"]
        pub struct DOUBLER_START_DURATION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOUBLER_START_DURATION_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `DOUBLER_RESET_DURATION`"]
        pub type DOUBLER_RESET_DURATION_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DOUBLER_RESET_DURATION`"]
        pub struct DOUBLER_RESET_DURATION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOUBLER_RESET_DURATION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `FORCE_KICKSTART_EN`"]
        pub type FORCE_KICKSTART_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FORCE_KICKSTART_EN`"]
        pub struct FORCE_KICKSTART_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FORCE_KICKSTART_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `ALLOW_SCLK_HF_SWITCHING`"]
        pub type ALLOW_SCLK_HF_SWITCHING_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALLOW_SCLK_HF_SWITCHING`"]
        pub struct ALLOW_SCLK_HF_SWITCHING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALLOW_SCLK_HF_SWITCHING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `RCOSC_LF_TRIMMED`"]
        pub type RCOSC_LF_TRIMMED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RCOSC_LF_TRIMMED`"]
        pub struct RCOSC_LF_TRIMMED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSC_LF_TRIMMED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `XOSC_HF_POWER_MODE`"]
        pub type XOSC_HF_POWER_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `XOSC_HF_POWER_MODE`"]
        pub struct XOSC_HF_POWER_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSC_HF_POWER_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `XOSC_LF_DIG_BYPASS`"]
        pub type XOSC_LF_DIG_BYPASS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `XOSC_LF_DIG_BYPASS`"]
        pub struct XOSC_LF_DIG_BYPASS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSC_LF_DIG_BYPASS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CLK_LOSS_EN`"]
        pub type CLK_LOSS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_LOSS_EN`"]
        pub struct CLK_LOSS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_LOSS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ACLK_TDC_SRC_SEL`"]
        pub type ACLK_TDC_SRC_SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ACLK_TDC_SRC_SEL`"]
        pub struct ACLK_TDC_SRC_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACLK_TDC_SRC_SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 7)) | (((value as u32) & 0x03) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ACLK_REF_SRC_SEL`"]
        pub type ACLK_REF_SRC_SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ACLK_REF_SRC_SEL`"]
        pub struct ACLK_REF_SRC_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACLK_REF_SRC_SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SCLK_LF_SRC_SEL`"]
        pub type SCLK_LF_SRC_SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLK_LF_SRC_SEL`"]
        pub struct SCLK_LF_SRC_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLK_LF_SRC_SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SCLK_MF_SRC_SEL`"]
        pub type SCLK_MF_SRC_SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCLK_MF_SRC_SEL`"]
        pub struct SCLK_MF_SRC_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLK_MF_SRC_SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SCLK_HF_SRC_SEL`"]
        pub type SCLK_HF_SRC_SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCLK_HF_SRC_SEL`"]
        pub struct SCLK_HF_SRC_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLK_HF_SRC_SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - XTAL_IS_24M"]
            #[inline(always)]
            pub fn xtal_is_24m(&self) -> XTAL_IS_24M_R {
                XTAL_IS_24M_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 29 - BYPASS_XOSC_LF_CLK_QUAL"]
            #[inline(always)]
            pub fn bypass_xosc_lf_clk_qual(&self) -> BYPASS_XOSC_LF_CLK_QUAL_R {
                BYPASS_XOSC_LF_CLK_QUAL_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - BYPASS_RCOSC_LF_CLK_QUAL"]
            #[inline(always)]
            pub fn bypass_rcosc_lf_clk_qual(&self) -> BYPASS_RCOSC_LF_CLK_QUAL_R {
                BYPASS_RCOSC_LF_CLK_QUAL_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bits 26:27 - DOUBLER_START_DURATION"]
            #[inline(always)]
            pub fn doubler_start_duration(&self) -> DOUBLER_START_DURATION_R {
                DOUBLER_START_DURATION_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bit 25 - DOUBLER_RESET_DURATION"]
            #[inline(always)]
            pub fn doubler_reset_duration(&self) -> DOUBLER_RESET_DURATION_R {
                DOUBLER_RESET_DURATION_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 22 - FORCE_KICKSTART_EN"]
            #[inline(always)]
            pub fn force_kickstart_en(&self) -> FORCE_KICKSTART_EN_R {
                FORCE_KICKSTART_EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ALLOW_SCLK_HF_SWITCHING"]
            #[inline(always)]
            pub fn allow_sclk_hf_switching(&self) -> ALLOW_SCLK_HF_SWITCHING_R {
                ALLOW_SCLK_HF_SWITCHING_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 12 - RCOSC_LF_TRIMMED"]
            #[inline(always)]
            pub fn rcosc_lf_trimmed(&self) -> RCOSC_LF_TRIMMED_R {
                RCOSC_LF_TRIMMED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - XOSC_HF_POWER_MODE"]
            #[inline(always)]
            pub fn xosc_hf_power_mode(&self) -> XOSC_HF_POWER_MODE_R {
                XOSC_HF_POWER_MODE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - XOSC_LF_DIG_BYPASS"]
            #[inline(always)]
            pub fn xosc_lf_dig_bypass(&self) -> XOSC_LF_DIG_BYPASS_R {
                XOSC_LF_DIG_BYPASS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CLK_LOSS_EN"]
            #[inline(always)]
            pub fn clk_loss_en(&self) -> CLK_LOSS_EN_R {
                CLK_LOSS_EN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bits 7:8 - ACLK_TDC_SRC_SEL"]
            #[inline(always)]
            pub fn aclk_tdc_src_sel(&self) -> ACLK_TDC_SRC_SEL_R {
                ACLK_TDC_SRC_SEL_R::new(((self.bits >> 7) & 0x03) as u8)
            }
            #[doc = "Bits 5:6 - ACLK_REF_SRC_SEL"]
            #[inline(always)]
            pub fn aclk_ref_src_sel(&self) -> ACLK_REF_SRC_SEL_R {
                ACLK_REF_SRC_SEL_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - SCLK_LF_SRC_SEL"]
            #[inline(always)]
            pub fn sclk_lf_src_sel(&self) -> SCLK_LF_SRC_SEL_R {
                SCLK_LF_SRC_SEL_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - SCLK_MF_SRC_SEL"]
            #[inline(always)]
            pub fn sclk_mf_src_sel(&self) -> SCLK_MF_SRC_SEL_R {
                SCLK_MF_SRC_SEL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SCLK_HF_SRC_SEL"]
            #[inline(always)]
            pub fn sclk_hf_src_sel(&self) -> SCLK_HF_SRC_SEL_R {
                SCLK_HF_SRC_SEL_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - XTAL_IS_24M"]
            #[inline(always)]
            pub fn xtal_is_24m(&mut self) -> XTAL_IS_24M_W {
                XTAL_IS_24M_W { w: self }
            }
            #[doc = "Bit 29 - BYPASS_XOSC_LF_CLK_QUAL"]
            #[inline(always)]
            pub fn bypass_xosc_lf_clk_qual(&mut self) -> BYPASS_XOSC_LF_CLK_QUAL_W {
                BYPASS_XOSC_LF_CLK_QUAL_W { w: self }
            }
            #[doc = "Bit 28 - BYPASS_RCOSC_LF_CLK_QUAL"]
            #[inline(always)]
            pub fn bypass_rcosc_lf_clk_qual(&mut self) -> BYPASS_RCOSC_LF_CLK_QUAL_W {
                BYPASS_RCOSC_LF_CLK_QUAL_W { w: self }
            }
            #[doc = "Bits 26:27 - DOUBLER_START_DURATION"]
            #[inline(always)]
            pub fn doubler_start_duration(&mut self) -> DOUBLER_START_DURATION_W {
                DOUBLER_START_DURATION_W { w: self }
            }
            #[doc = "Bit 25 - DOUBLER_RESET_DURATION"]
            #[inline(always)]
            pub fn doubler_reset_duration(&mut self) -> DOUBLER_RESET_DURATION_W {
                DOUBLER_RESET_DURATION_W { w: self }
            }
            #[doc = "Bit 22 - FORCE_KICKSTART_EN"]
            #[inline(always)]
            pub fn force_kickstart_en(&mut self) -> FORCE_KICKSTART_EN_W {
                FORCE_KICKSTART_EN_W { w: self }
            }
            #[doc = "Bit 16 - ALLOW_SCLK_HF_SWITCHING"]
            #[inline(always)]
            pub fn allow_sclk_hf_switching(&mut self) -> ALLOW_SCLK_HF_SWITCHING_W {
                ALLOW_SCLK_HF_SWITCHING_W { w: self }
            }
            #[doc = "Bit 12 - RCOSC_LF_TRIMMED"]
            #[inline(always)]
            pub fn rcosc_lf_trimmed(&mut self) -> RCOSC_LF_TRIMMED_W {
                RCOSC_LF_TRIMMED_W { w: self }
            }
            #[doc = "Bit 11 - XOSC_HF_POWER_MODE"]
            #[inline(always)]
            pub fn xosc_hf_power_mode(&mut self) -> XOSC_HF_POWER_MODE_W {
                XOSC_HF_POWER_MODE_W { w: self }
            }
            #[doc = "Bit 10 - XOSC_LF_DIG_BYPASS"]
            #[inline(always)]
            pub fn xosc_lf_dig_bypass(&mut self) -> XOSC_LF_DIG_BYPASS_W {
                XOSC_LF_DIG_BYPASS_W { w: self }
            }
            #[doc = "Bit 9 - CLK_LOSS_EN"]
            #[inline(always)]
            pub fn clk_loss_en(&mut self) -> CLK_LOSS_EN_W {
                CLK_LOSS_EN_W { w: self }
            }
            #[doc = "Bits 7:8 - ACLK_TDC_SRC_SEL"]
            #[inline(always)]
            pub fn aclk_tdc_src_sel(&mut self) -> ACLK_TDC_SRC_SEL_W {
                ACLK_TDC_SRC_SEL_W { w: self }
            }
            #[doc = "Bits 5:6 - ACLK_REF_SRC_SEL"]
            #[inline(always)]
            pub fn aclk_ref_src_sel(&mut self) -> ACLK_REF_SRC_SEL_W {
                ACLK_REF_SRC_SEL_W { w: self }
            }
            #[doc = "Bits 2:3 - SCLK_LF_SRC_SEL"]
            #[inline(always)]
            pub fn sclk_lf_src_sel(&mut self) -> SCLK_LF_SRC_SEL_W {
                SCLK_LF_SRC_SEL_W { w: self }
            }
            #[doc = "Bit 1 - SCLK_MF_SRC_SEL"]
            #[inline(always)]
            pub fn sclk_mf_src_sel(&mut self) -> SCLK_MF_SRC_SEL_W {
                SCLK_MF_SRC_SEL_W { w: self }
            }
            #[doc = "Bit 0 - SCLK_HF_SRC_SEL"]
            #[inline(always)]
            pub fn sclk_hf_src_sel(&mut self) -> SCLK_HF_SRC_SEL_W {
                SCLK_HF_SRC_SEL_W { w: self }
            }
        }
    }
    #[doc = "Control 1 This register contains various OSC_DIG configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl1](ctl1) module"]
    pub type CTL1 = crate::Reg<u32, _CTL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL1;
    #[doc = "`read()` method returns [ctl1::R](ctl1::R) reader structure"]
    impl crate::Readable for CTL1 {}
    #[doc = "`write(|w| ..)` method takes [ctl1::W](ctl1::W) writer structure"]
    impl crate::Writable for CTL1 {}
    #[doc = "Control 1 This register contains various OSC_DIG configuration"]
    pub mod ctl1 {
        #[doc = "Reader of register CTL1"]
        pub type R = crate::R<u32, super::CTL1>;
        #[doc = "Writer for register CTL1"]
        pub type W = crate::W<u32, super::CTL1>;
        #[doc = "Register CTL1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RCOSCHFCTRIMFRACT`"]
        pub type RCOSCHFCTRIMFRACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RCOSCHFCTRIMFRACT`"]
        pub struct RCOSCHFCTRIMFRACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSCHFCTRIMFRACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 18)) | (((value as u32) & 0x1f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RCOSCHFCTRIMFRACT_EN`"]
        pub type RCOSCHFCTRIMFRACT_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RCOSCHFCTRIMFRACT_EN`"]
        pub struct RCOSCHFCTRIMFRACT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSCHFCTRIMFRACT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `XOSC_HF_FAST_START`"]
        pub type XOSC_HF_FAST_START_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `XOSC_HF_FAST_START`"]
        pub struct XOSC_HF_FAST_START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSC_HF_FAST_START_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 18:22 - RCOSCHFCTRIMFRACT"]
            #[inline(always)]
            pub fn rcoschfctrimfract(&self) -> RCOSCHFCTRIMFRACT_R {
                RCOSCHFCTRIMFRACT_R::new(((self.bits >> 18) & 0x1f) as u8)
            }
            #[doc = "Bit 17 - RCOSCHFCTRIMFRACT_EN"]
            #[inline(always)]
            pub fn rcoschfctrimfract_en(&self) -> RCOSCHFCTRIMFRACT_EN_R {
                RCOSCHFCTRIMFRACT_EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - XOSC_HF_FAST_START"]
            #[inline(always)]
            pub fn xosc_hf_fast_start(&self) -> XOSC_HF_FAST_START_R {
                XOSC_HF_FAST_START_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 18:22 - RCOSCHFCTRIMFRACT"]
            #[inline(always)]
            pub fn rcoschfctrimfract(&mut self) -> RCOSCHFCTRIMFRACT_W {
                RCOSCHFCTRIMFRACT_W { w: self }
            }
            #[doc = "Bit 17 - RCOSCHFCTRIMFRACT_EN"]
            #[inline(always)]
            pub fn rcoschfctrimfract_en(&mut self) -> RCOSCHFCTRIMFRACT_EN_W {
                RCOSCHFCTRIMFRACT_EN_W { w: self }
            }
            #[doc = "Bits 0:1 - XOSC_HF_FAST_START"]
            #[inline(always)]
            pub fn xosc_hf_fast_start(&mut self) -> XOSC_HF_FAST_START_W {
                XOSC_HF_FAST_START_W { w: self }
            }
        }
    }
    #[doc = "RADC External Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [radcextcfg](radcextcfg) module"]
    pub type RADCEXTCFG = crate::Reg<u32, _RADCEXTCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RADCEXTCFG;
    #[doc = "`read()` method returns [radcextcfg::R](radcextcfg::R) reader structure"]
    impl crate::Readable for RADCEXTCFG {}
    #[doc = "`write(|w| ..)` method takes [radcextcfg::W](radcextcfg::W) writer structure"]
    impl crate::Writable for RADCEXTCFG {}
    #[doc = "RADC External Configuration"]
    pub mod radcextcfg {
        #[doc = "Reader of register RADCEXTCFG"]
        pub type R = crate::R<u32, super::RADCEXTCFG>;
        #[doc = "Writer for register RADCEXTCFG"]
        pub type W = crate::W<u32, super::RADCEXTCFG>;
        #[doc = "Register RADCEXTCFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::RADCEXTCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `HPM_IBIAS_WAIT_CNT`"]
        pub type HPM_IBIAS_WAIT_CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HPM_IBIAS_WAIT_CNT`"]
        pub struct HPM_IBIAS_WAIT_CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPM_IBIAS_WAIT_CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03ff << 22)) | (((value as u32) & 0x03ff) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `LPM_IBIAS_WAIT_CNT`"]
        pub type LPM_IBIAS_WAIT_CNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPM_IBIAS_WAIT_CNT`"]
        pub struct LPM_IBIAS_WAIT_CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPM_IBIAS_WAIT_CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 16)) | (((value as u32) & 0x3f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `IDAC_STEP`"]
        pub type IDAC_STEP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IDAC_STEP`"]
        pub struct IDAC_STEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDAC_STEP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `RADC_DAC_TH`"]
        pub type RADC_DAC_TH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RADC_DAC_TH`"]
        pub struct RADC_DAC_TH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RADC_DAC_TH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 6)) | (((value as u32) & 0x3f) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RADC_MODE_IS_SAR`"]
        pub type RADC_MODE_IS_SAR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RADC_MODE_IS_SAR`"]
        pub struct RADC_MODE_IS_SAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RADC_MODE_IS_SAR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 22:31 - HPM_IBIAS_WAIT_CNT"]
            #[inline(always)]
            pub fn hpm_ibias_wait_cnt(&self) -> HPM_IBIAS_WAIT_CNT_R {
                HPM_IBIAS_WAIT_CNT_R::new(((self.bits >> 22) & 0x03ff) as u16)
            }
            #[doc = "Bits 16:21 - LPM_IBIAS_WAIT_CNT"]
            #[inline(always)]
            pub fn lpm_ibias_wait_cnt(&self) -> LPM_IBIAS_WAIT_CNT_R {
                LPM_IBIAS_WAIT_CNT_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bits 12:15 - IDAC_STEP"]
            #[inline(always)]
            pub fn idac_step(&self) -> IDAC_STEP_R {
                IDAC_STEP_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 6:11 - RADC_DAC_TH"]
            #[inline(always)]
            pub fn radc_dac_th(&self) -> RADC_DAC_TH_R {
                RADC_DAC_TH_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bit 5 - RADC_MODE_IS_SAR"]
            #[inline(always)]
            pub fn radc_mode_is_sar(&self) -> RADC_MODE_IS_SAR_R {
                RADC_MODE_IS_SAR_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 22:31 - HPM_IBIAS_WAIT_CNT"]
            #[inline(always)]
            pub fn hpm_ibias_wait_cnt(&mut self) -> HPM_IBIAS_WAIT_CNT_W {
                HPM_IBIAS_WAIT_CNT_W { w: self }
            }
            #[doc = "Bits 16:21 - LPM_IBIAS_WAIT_CNT"]
            #[inline(always)]
            pub fn lpm_ibias_wait_cnt(&mut self) -> LPM_IBIAS_WAIT_CNT_W {
                LPM_IBIAS_WAIT_CNT_W { w: self }
            }
            #[doc = "Bits 12:15 - IDAC_STEP"]
            #[inline(always)]
            pub fn idac_step(&mut self) -> IDAC_STEP_W {
                IDAC_STEP_W { w: self }
            }
            #[doc = "Bits 6:11 - RADC_DAC_TH"]
            #[inline(always)]
            pub fn radc_dac_th(&mut self) -> RADC_DAC_TH_W {
                RADC_DAC_TH_W { w: self }
            }
            #[doc = "Bit 5 - RADC_MODE_IS_SAR"]
            #[inline(always)]
            pub fn radc_mode_is_sar(&mut self) -> RADC_MODE_IS_SAR_W {
                RADC_MODE_IS_SAR_W { w: self }
            }
        }
    }
    #[doc = "Amplitude Compensation Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ampcompctl](ampcompctl) module"]
    pub type AMPCOMPCTL = crate::Reg<u32, _AMPCOMPCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AMPCOMPCTL;
    #[doc = "`read()` method returns [ampcompctl::R](ampcompctl::R) reader structure"]
    impl crate::Readable for AMPCOMPCTL {}
    #[doc = "`write(|w| ..)` method takes [ampcompctl::W](ampcompctl::W) writer structure"]
    impl crate::Writable for AMPCOMPCTL {}
    #[doc = "Amplitude Compensation Control"]
    pub mod ampcompctl {
        #[doc = "Reader of register AMPCOMPCTL"]
        pub type R = crate::R<u32, super::AMPCOMPCTL>;
        #[doc = "Writer for register AMPCOMPCTL"]
        pub type W = crate::W<u32, super::AMPCOMPCTL>;
        #[doc = "Register AMPCOMPCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AMPCOMPCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AMPCOMP_REQ_MODE`"]
        pub type AMPCOMP_REQ_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AMPCOMP_REQ_MODE`"]
        pub struct AMPCOMP_REQ_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AMPCOMP_REQ_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `AMPCOMP_FSM_UPDATE_RATE`"]
        pub type AMPCOMP_FSM_UPDATE_RATE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AMPCOMP_FSM_UPDATE_RATE`"]
        pub struct AMPCOMP_FSM_UPDATE_RATE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AMPCOMP_FSM_UPDATE_RATE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `AMPCOMP_SW_CTRL`"]
        pub type AMPCOMP_SW_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AMPCOMP_SW_CTRL`"]
        pub struct AMPCOMP_SW_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AMPCOMP_SW_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `AMPCOMP_SW_EN`"]
        pub type AMPCOMP_SW_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AMPCOMP_SW_EN`"]
        pub struct AMPCOMP_SW_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AMPCOMP_SW_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `IBIAS_OFFSET`"]
        pub type IBIAS_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IBIAS_OFFSET`"]
        pub struct IBIAS_OFFSET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IBIAS_OFFSET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `IBIAS_INIT`"]
        pub type IBIAS_INIT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IBIAS_INIT`"]
        pub struct IBIAS_INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IBIAS_INIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LPM_IBIAS_WAIT_CNT_FINAL`"]
        pub type LPM_IBIAS_WAIT_CNT_FINAL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPM_IBIAS_WAIT_CNT_FINAL`"]
        pub struct LPM_IBIAS_WAIT_CNT_FINAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPM_IBIAS_WAIT_CNT_FINAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CAP_STEP`"]
        pub type CAP_STEP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CAP_STEP`"]
        pub struct CAP_STEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAP_STEP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IBIASCAP_HPTOLP_OL_CNT`"]
        pub type IBIASCAP_HPTOLP_OL_CNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IBIASCAP_HPTOLP_OL_CNT`"]
        pub struct IBIASCAP_HPTOLP_OL_CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IBIASCAP_HPTOLP_OL_CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - AMPCOMP_REQ_MODE"]
            #[inline(always)]
            pub fn ampcomp_req_mode(&self) -> AMPCOMP_REQ_MODE_R {
                AMPCOMP_REQ_MODE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - AMPCOMP_FSM_UPDATE_RATE"]
            #[inline(always)]
            pub fn ampcomp_fsm_update_rate(&self) -> AMPCOMP_FSM_UPDATE_RATE_R {
                AMPCOMP_FSM_UPDATE_RATE_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bit 27 - AMPCOMP_SW_CTRL"]
            #[inline(always)]
            pub fn ampcomp_sw_ctrl(&self) -> AMPCOMP_SW_CTRL_R {
                AMPCOMP_SW_CTRL_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - AMPCOMP_SW_EN"]
            #[inline(always)]
            pub fn ampcomp_sw_en(&self) -> AMPCOMP_SW_EN_R {
                AMPCOMP_SW_EN_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bits 20:23 - IBIAS_OFFSET"]
            #[inline(always)]
            pub fn ibias_offset(&self) -> IBIAS_OFFSET_R {
                IBIAS_OFFSET_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - IBIAS_INIT"]
            #[inline(always)]
            pub fn ibias_init(&self) -> IBIAS_INIT_R {
                IBIAS_INIT_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - LPM_IBIAS_WAIT_CNT_FINAL"]
            #[inline(always)]
            pub fn lpm_ibias_wait_cnt_final(&self) -> LPM_IBIAS_WAIT_CNT_FINAL_R {
                LPM_IBIAS_WAIT_CNT_FINAL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 4:7 - CAP_STEP"]
            #[inline(always)]
            pub fn cap_step(&self) -> CAP_STEP_R {
                CAP_STEP_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - IBIASCAP_HPTOLP_OL_CNT"]
            #[inline(always)]
            pub fn ibiascap_hptolp_ol_cnt(&self) -> IBIASCAP_HPTOLP_OL_CNT_R {
                IBIASCAP_HPTOLP_OL_CNT_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - AMPCOMP_REQ_MODE"]
            #[inline(always)]
            pub fn ampcomp_req_mode(&mut self) -> AMPCOMP_REQ_MODE_W {
                AMPCOMP_REQ_MODE_W { w: self }
            }
            #[doc = "Bits 28:29 - AMPCOMP_FSM_UPDATE_RATE"]
            #[inline(always)]
            pub fn ampcomp_fsm_update_rate(&mut self) -> AMPCOMP_FSM_UPDATE_RATE_W {
                AMPCOMP_FSM_UPDATE_RATE_W { w: self }
            }
            #[doc = "Bit 27 - AMPCOMP_SW_CTRL"]
            #[inline(always)]
            pub fn ampcomp_sw_ctrl(&mut self) -> AMPCOMP_SW_CTRL_W {
                AMPCOMP_SW_CTRL_W { w: self }
            }
            #[doc = "Bit 26 - AMPCOMP_SW_EN"]
            #[inline(always)]
            pub fn ampcomp_sw_en(&mut self) -> AMPCOMP_SW_EN_W {
                AMPCOMP_SW_EN_W { w: self }
            }
            #[doc = "Bits 20:23 - IBIAS_OFFSET"]
            #[inline(always)]
            pub fn ibias_offset(&mut self) -> IBIAS_OFFSET_W {
                IBIAS_OFFSET_W { w: self }
            }
            #[doc = "Bits 16:19 - IBIAS_INIT"]
            #[inline(always)]
            pub fn ibias_init(&mut self) -> IBIAS_INIT_W {
                IBIAS_INIT_W { w: self }
            }
            #[doc = "Bits 8:15 - LPM_IBIAS_WAIT_CNT_FINAL"]
            #[inline(always)]
            pub fn lpm_ibias_wait_cnt_final(&mut self) -> LPM_IBIAS_WAIT_CNT_FINAL_W {
                LPM_IBIAS_WAIT_CNT_FINAL_W { w: self }
            }
            #[doc = "Bits 4:7 - CAP_STEP"]
            #[inline(always)]
            pub fn cap_step(&mut self) -> CAP_STEP_W {
                CAP_STEP_W { w: self }
            }
            #[doc = "Bits 0:3 - IBIASCAP_HPTOLP_OL_CNT"]
            #[inline(always)]
            pub fn ibiascap_hptolp_ol_cnt(&mut self) -> IBIASCAP_HPTOLP_OL_CNT_W {
                IBIASCAP_HPTOLP_OL_CNT_W { w: self }
            }
        }
    }
    #[doc = "Amplitude Compensation Threashold 1 This register contains various threshhold values for amplitude compensation algorithm\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ampcompth1](ampcompth1) module"]
    pub type AMPCOMPTH1 = crate::Reg<u32, _AMPCOMPTH1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AMPCOMPTH1;
    #[doc = "`read()` method returns [ampcompth1::R](ampcompth1::R) reader structure"]
    impl crate::Readable for AMPCOMPTH1 {}
    #[doc = "`write(|w| ..)` method takes [ampcompth1::W](ampcompth1::W) writer structure"]
    impl crate::Writable for AMPCOMPTH1 {}
    #[doc = "Amplitude Compensation Threashold 1 This register contains various threshhold values for amplitude compensation algorithm"]
    pub mod ampcompth1 {
        #[doc = "Reader of register AMPCOMPTH1"]
        pub type R = crate::R<u32, super::AMPCOMPTH1>;
        #[doc = "Writer for register AMPCOMPTH1"]
        pub type W = crate::W<u32, super::AMPCOMPTH1>;
        #[doc = "Register AMPCOMPTH1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AMPCOMPTH1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `HPMRAMP3_LTH`"]
        pub type HPMRAMP3_LTH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HPMRAMP3_LTH`"]
        pub struct HPMRAMP3_LTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPMRAMP3_LTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 18)) | (((value as u32) & 0x3f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `HPMRAMP3_HTH`"]
        pub type HPMRAMP3_HTH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HPMRAMP3_HTH`"]
        pub struct HPMRAMP3_HTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPMRAMP3_HTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 10)) | (((value as u32) & 0x3f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IBIASCAP_LPTOHP_OL_CNT`"]
        pub type IBIASCAP_LPTOHP_OL_CNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IBIASCAP_LPTOHP_OL_CNT`"]
        pub struct IBIASCAP_LPTOHP_OL_CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IBIASCAP_LPTOHP_OL_CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 6)) | (((value as u32) & 0x0f) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `HPMRAMP1_TH`"]
        pub type HPMRAMP1_TH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HPMRAMP1_TH`"]
        pub struct HPMRAMP1_TH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPMRAMP1_TH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 18:23 - HPMRAMP3_LTH"]
            #[inline(always)]
            pub fn hpmramp3_lth(&self) -> HPMRAMP3_LTH_R {
                HPMRAMP3_LTH_R::new(((self.bits >> 18) & 0x3f) as u8)
            }
            #[doc = "Bits 10:15 - HPMRAMP3_HTH"]
            #[inline(always)]
            pub fn hpmramp3_hth(&self) -> HPMRAMP3_HTH_R {
                HPMRAMP3_HTH_R::new(((self.bits >> 10) & 0x3f) as u8)
            }
            #[doc = "Bits 6:9 - IBIASCAP_LPTOHP_OL_CNT"]
            #[inline(always)]
            pub fn ibiascap_lptohp_ol_cnt(&self) -> IBIASCAP_LPTOHP_OL_CNT_R {
                IBIASCAP_LPTOHP_OL_CNT_R::new(((self.bits >> 6) & 0x0f) as u8)
            }
            #[doc = "Bits 0:5 - HPMRAMP1_TH"]
            #[inline(always)]
            pub fn hpmramp1_th(&self) -> HPMRAMP1_TH_R {
                HPMRAMP1_TH_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 18:23 - HPMRAMP3_LTH"]
            #[inline(always)]
            pub fn hpmramp3_lth(&mut self) -> HPMRAMP3_LTH_W {
                HPMRAMP3_LTH_W { w: self }
            }
            #[doc = "Bits 10:15 - HPMRAMP3_HTH"]
            #[inline(always)]
            pub fn hpmramp3_hth(&mut self) -> HPMRAMP3_HTH_W {
                HPMRAMP3_HTH_W { w: self }
            }
            #[doc = "Bits 6:9 - IBIASCAP_LPTOHP_OL_CNT"]
            #[inline(always)]
            pub fn ibiascap_lptohp_ol_cnt(&mut self) -> IBIASCAP_LPTOHP_OL_CNT_W {
                IBIASCAP_LPTOHP_OL_CNT_W { w: self }
            }
            #[doc = "Bits 0:5 - HPMRAMP1_TH"]
            #[inline(always)]
            pub fn hpmramp1_th(&mut self) -> HPMRAMP1_TH_W {
                HPMRAMP1_TH_W { w: self }
            }
        }
    }
    #[doc = "Amplitude Compensation Threashold 2 This register contains various threshhold values for amplitude compensation algorithm.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ampcompth2](ampcompth2) module"]
    pub type AMPCOMPTH2 = crate::Reg<u32, _AMPCOMPTH2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AMPCOMPTH2;
    #[doc = "`read()` method returns [ampcompth2::R](ampcompth2::R) reader structure"]
    impl crate::Readable for AMPCOMPTH2 {}
    #[doc = "`write(|w| ..)` method takes [ampcompth2::W](ampcompth2::W) writer structure"]
    impl crate::Writable for AMPCOMPTH2 {}
    #[doc = "Amplitude Compensation Threashold 2 This register contains various threshhold values for amplitude compensation algorithm."]
    pub mod ampcompth2 {
        #[doc = "Reader of register AMPCOMPTH2"]
        pub type R = crate::R<u32, super::AMPCOMPTH2>;
        #[doc = "Writer for register AMPCOMPTH2"]
        pub type W = crate::W<u32, super::AMPCOMPTH2>;
        #[doc = "Register AMPCOMPTH2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AMPCOMPTH2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LPMUPDATE_LTH`"]
        pub type LPMUPDATE_LTH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPMUPDATE_LTH`"]
        pub struct LPMUPDATE_LTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMUPDATE_LTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 26)) | (((value as u32) & 0x3f) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `LPMUPDATE_HTH`"]
        pub type LPMUPDATE_HTH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPMUPDATE_HTH`"]
        pub struct LPMUPDATE_HTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMUPDATE_HTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 18)) | (((value as u32) & 0x3f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_COMP_AMPTH_LPM`"]
        pub type ADC_COMP_AMPTH_LPM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADC_COMP_AMPTH_LPM`"]
        pub struct ADC_COMP_AMPTH_LPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_COMP_AMPTH_LPM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 10)) | (((value as u32) & 0x3f) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_COMP_AMPTH_HPM`"]
        pub type ADC_COMP_AMPTH_HPM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADC_COMP_AMPTH_HPM`"]
        pub struct ADC_COMP_AMPTH_HPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_COMP_AMPTH_HPM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 2)) | (((value as u32) & 0x3f) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 26:31 - LPMUPDATE_LTH"]
            #[inline(always)]
            pub fn lpmupdate_lth(&self) -> LPMUPDATE_LTH_R {
                LPMUPDATE_LTH_R::new(((self.bits >> 26) & 0x3f) as u8)
            }
            #[doc = "Bits 18:23 - LPMUPDATE_HTH"]
            #[inline(always)]
            pub fn lpmupdate_hth(&self) -> LPMUPDATE_HTH_R {
                LPMUPDATE_HTH_R::new(((self.bits >> 18) & 0x3f) as u8)
            }
            #[doc = "Bits 10:15 - ADC_COMP_AMPTH_LPM"]
            #[inline(always)]
            pub fn adc_comp_ampth_lpm(&self) -> ADC_COMP_AMPTH_LPM_R {
                ADC_COMP_AMPTH_LPM_R::new(((self.bits >> 10) & 0x3f) as u8)
            }
            #[doc = "Bits 2:7 - ADC_COMP_AMPTH_HPM"]
            #[inline(always)]
            pub fn adc_comp_ampth_hpm(&self) -> ADC_COMP_AMPTH_HPM_R {
                ADC_COMP_AMPTH_HPM_R::new(((self.bits >> 2) & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 26:31 - LPMUPDATE_LTH"]
            #[inline(always)]
            pub fn lpmupdate_lth(&mut self) -> LPMUPDATE_LTH_W {
                LPMUPDATE_LTH_W { w: self }
            }
            #[doc = "Bits 18:23 - LPMUPDATE_HTH"]
            #[inline(always)]
            pub fn lpmupdate_hth(&mut self) -> LPMUPDATE_HTH_W {
                LPMUPDATE_HTH_W { w: self }
            }
            #[doc = "Bits 10:15 - ADC_COMP_AMPTH_LPM"]
            #[inline(always)]
            pub fn adc_comp_ampth_lpm(&mut self) -> ADC_COMP_AMPTH_LPM_W {
                ADC_COMP_AMPTH_LPM_W { w: self }
            }
            #[doc = "Bits 2:7 - ADC_COMP_AMPTH_HPM"]
            #[inline(always)]
            pub fn adc_comp_ampth_hpm(&mut self) -> ADC_COMP_AMPTH_HPM_W {
                ADC_COMP_AMPTH_HPM_W { w: self }
            }
        }
    }
    #[doc = "Analog Bypass Values 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [anabypassval1](anabypassval1) module"]
    pub type ANABYPASSVAL1 = crate::Reg<u32, _ANABYPASSVAL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANABYPASSVAL1;
    #[doc = "`read()` method returns [anabypassval1::R](anabypassval1::R) reader structure"]
    impl crate::Readable for ANABYPASSVAL1 {}
    #[doc = "`write(|w| ..)` method takes [anabypassval1::W](anabypassval1::W) writer structure"]
    impl crate::Writable for ANABYPASSVAL1 {}
    #[doc = "Analog Bypass Values 1"]
    pub mod anabypassval1 {
        #[doc = "Reader of register ANABYPASSVAL1"]
        pub type R = crate::R<u32, super::ANABYPASSVAL1>;
        #[doc = "Writer for register ANABYPASSVAL1"]
        pub type W = crate::W<u32, super::ANABYPASSVAL1>;
        #[doc = "Register ANABYPASSVAL1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ANABYPASSVAL1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `XOSC_HF_ROW_Q12`"]
        pub type XOSC_HF_ROW_Q12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `XOSC_HF_ROW_Q12`"]
        pub struct XOSC_HF_ROW_Q12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSC_HF_ROW_Q12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `XOSC_HF_COLUMN_Q12`"]
        pub type XOSC_HF_COLUMN_Q12_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `XOSC_HF_COLUMN_Q12`"]
        pub struct XOSC_HF_COLUMN_Q12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSC_HF_COLUMN_Q12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:19 - XOSC_HF_ROW_Q12"]
            #[inline(always)]
            pub fn xosc_hf_row_q12(&self) -> XOSC_HF_ROW_Q12_R {
                XOSC_HF_ROW_Q12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 0:15 - XOSC_HF_COLUMN_Q12"]
            #[inline(always)]
            pub fn xosc_hf_column_q12(&self) -> XOSC_HF_COLUMN_Q12_R {
                XOSC_HF_COLUMN_Q12_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:19 - XOSC_HF_ROW_Q12"]
            #[inline(always)]
            pub fn xosc_hf_row_q12(&mut self) -> XOSC_HF_ROW_Q12_W {
                XOSC_HF_ROW_Q12_W { w: self }
            }
            #[doc = "Bits 0:15 - XOSC_HF_COLUMN_Q12"]
            #[inline(always)]
            pub fn xosc_hf_column_q12(&mut self) -> XOSC_HF_COLUMN_Q12_W {
                XOSC_HF_COLUMN_Q12_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [anabypassval2](anabypassval2) module"]
    pub type ANABYPASSVAL2 = crate::Reg<u32, _ANABYPASSVAL2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANABYPASSVAL2;
    #[doc = "`read()` method returns [anabypassval2::R](anabypassval2::R) reader structure"]
    impl crate::Readable for ANABYPASSVAL2 {}
    #[doc = "`write(|w| ..)` method takes [anabypassval2::W](anabypassval2::W) writer structure"]
    impl crate::Writable for ANABYPASSVAL2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod anabypassval2 {
        #[doc = "Reader of register ANABYPASSVAL2"]
        pub type R = crate::R<u32, super::ANABYPASSVAL2>;
        #[doc = "Writer for register ANABYPASSVAL2"]
        pub type W = crate::W<u32, super::ANABYPASSVAL2>;
        #[doc = "Register ANABYPASSVAL2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::ANABYPASSVAL2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `XOSC_HF_IBIASTHERM`"]
        pub type XOSC_HF_IBIASTHERM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `XOSC_HF_IBIASTHERM`"]
        pub struct XOSC_HF_IBIASTHERM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSC_HF_IBIASTHERM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3fff) | ((value as u32) & 0x3fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:13 - XOSC_HF_IBIASTHERM"]
            #[inline(always)]
            pub fn xosc_hf_ibiastherm(&self) -> XOSC_HF_IBIASTHERM_R {
                XOSC_HF_IBIASTHERM_R::new((self.bits & 0x3fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:13 - XOSC_HF_IBIASTHERM"]
            #[inline(always)]
            pub fn xosc_hf_ibiastherm(&mut self) -> XOSC_HF_IBIASTHERM_W {
                XOSC_HF_IBIASTHERM_W { w: self }
            }
        }
    }
    #[doc = "Analog Test Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [atestctl](atestctl) module"]
    pub type ATESTCTL = crate::Reg<u32, _ATESTCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ATESTCTL;
    #[doc = "`read()` method returns [atestctl::R](atestctl::R) reader structure"]
    impl crate::Readable for ATESTCTL {}
    #[doc = "`write(|w| ..)` method takes [atestctl::W](atestctl::W) writer structure"]
    impl crate::Writable for ATESTCTL {}
    #[doc = "Analog Test Control"]
    pub mod atestctl {
        #[doc = "Reader of register ATESTCTL"]
        pub type R = crate::R<u32, super::ATESTCTL>;
        #[doc = "Writer for register ATESTCTL"]
        pub type W = crate::W<u32, super::ATESTCTL>;
        #[doc = "Register ATESTCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ATESTCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCLK_LF_AUX_EN`"]
        pub type SCLK_LF_AUX_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCLK_LF_AUX_EN`"]
        pub struct SCLK_LF_AUX_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLK_LF_AUX_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 29 - SCLK_LF_AUX_EN"]
            #[inline(always)]
            pub fn sclk_lf_aux_en(&self) -> SCLK_LF_AUX_EN_R {
                SCLK_LF_AUX_EN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 29 - SCLK_LF_AUX_EN"]
            #[inline(always)]
            pub fn sclk_lf_aux_en(&mut self) -> SCLK_LF_AUX_EN_W {
                SCLK_LF_AUX_EN_W { w: self }
            }
        }
    }
    #[doc = "ADC Doubler Nanoamp Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcdoublernanoampctl](adcdoublernanoampctl) module"]
    pub type ADCDOUBLERNANOAMPCTL = crate::Reg<u32, _ADCDOUBLERNANOAMPCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCDOUBLERNANOAMPCTL;
    #[doc = "`read()` method returns [adcdoublernanoampctl::R](adcdoublernanoampctl::R) reader structure"]
    impl crate::Readable for ADCDOUBLERNANOAMPCTL {}
    #[doc = "`write(|w| ..)` method takes [adcdoublernanoampctl::W](adcdoublernanoampctl::W) writer structure"]
    impl crate::Writable for ADCDOUBLERNANOAMPCTL {}
    #[doc = "ADC Doubler Nanoamp Control"]
    pub mod adcdoublernanoampctl {
        #[doc = "Reader of register ADCDOUBLERNANOAMPCTL"]
        pub type R = crate::R<u32, super::ADCDOUBLERNANOAMPCTL>;
        #[doc = "Writer for register ADCDOUBLERNANOAMPCTL"]
        pub type W = crate::W<u32, super::ADCDOUBLERNANOAMPCTL>;
        #[doc = "Register ADCDOUBLERNANOAMPCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCDOUBLERNANOAMPCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `NANOAMP_BIAS_ENABLE`"]
        pub type NANOAMP_BIAS_ENABLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NANOAMP_BIAS_ENABLE`"]
        pub struct NANOAMP_BIAS_ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NANOAMP_BIAS_ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SPARE23`"]
        pub type SPARE23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPARE23`"]
        pub struct SPARE23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPARE23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_SH_MODE_EN`"]
        pub type ADC_SH_MODE_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_SH_MODE_EN`"]
        pub struct ADC_SH_MODE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_SH_MODE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_SH_VBUF_EN`"]
        pub type ADC_SH_VBUF_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_SH_VBUF_EN`"]
        pub struct ADC_SH_VBUF_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_SH_VBUF_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_IREF_CTRL`"]
        pub type ADC_IREF_CTRL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADC_IREF_CTRL`"]
        pub struct ADC_IREF_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_IREF_CTRL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - NANOAMP_BIAS_ENABLE"]
            #[inline(always)]
            pub fn nanoamp_bias_enable(&self) -> NANOAMP_BIAS_ENABLE_R {
                NANOAMP_BIAS_ENABLE_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - SPARE23"]
            #[inline(always)]
            pub fn spare23(&self) -> SPARE23_R {
                SPARE23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ADC_SH_MODE_EN"]
            #[inline(always)]
            pub fn adc_sh_mode_en(&self) -> ADC_SH_MODE_EN_R {
                ADC_SH_MODE_EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC_SH_VBUF_EN"]
            #[inline(always)]
            pub fn adc_sh_vbuf_en(&self) -> ADC_SH_VBUF_EN_R {
                ADC_SH_VBUF_EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - ADC_IREF_CTRL"]
            #[inline(always)]
            pub fn adc_iref_ctrl(&self) -> ADC_IREF_CTRL_R {
                ADC_IREF_CTRL_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 24 - NANOAMP_BIAS_ENABLE"]
            #[inline(always)]
            pub fn nanoamp_bias_enable(&mut self) -> NANOAMP_BIAS_ENABLE_W {
                NANOAMP_BIAS_ENABLE_W { w: self }
            }
            #[doc = "Bit 23 - SPARE23"]
            #[inline(always)]
            pub fn spare23(&mut self) -> SPARE23_W {
                SPARE23_W { w: self }
            }
            #[doc = "Bit 5 - ADC_SH_MODE_EN"]
            #[inline(always)]
            pub fn adc_sh_mode_en(&mut self) -> ADC_SH_MODE_EN_W {
                ADC_SH_MODE_EN_W { w: self }
            }
            #[doc = "Bit 4 - ADC_SH_VBUF_EN"]
            #[inline(always)]
            pub fn adc_sh_vbuf_en(&mut self) -> ADC_SH_VBUF_EN_W {
                ADC_SH_VBUF_EN_W { w: self }
            }
            #[doc = "Bits 0:1 - ADC_IREF_CTRL"]
            #[inline(always)]
            pub fn adc_iref_ctrl(&mut self) -> ADC_IREF_CTRL_W {
                ADC_IREF_CTRL_W { w: self }
            }
        }
    }
    #[doc = "XOSCHF Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [xoschfctl](xoschfctl) module"]
    pub type XOSCHFCTL = crate::Reg<u32, _XOSCHFCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _XOSCHFCTL;
    #[doc = "`read()` method returns [xoschfctl::R](xoschfctl::R) reader structure"]
    impl crate::Readable for XOSCHFCTL {}
    #[doc = "`write(|w| ..)` method takes [xoschfctl::W](xoschfctl::W) writer structure"]
    impl crate::Writable for XOSCHFCTL {}
    #[doc = "XOSCHF Control"]
    pub mod xoschfctl {
        #[doc = "Reader of register XOSCHFCTL"]
        pub type R = crate::R<u32, super::XOSCHFCTL>;
        #[doc = "Writer for register XOSCHFCTL"]
        pub type W = crate::W<u32, super::XOSCHFCTL>;
        #[doc = "Register XOSCHFCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::XOSCHFCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PEAK_DET_ITRIM`"]
        pub type PEAK_DET_ITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PEAK_DET_ITRIM`"]
        pub struct PEAK_DET_ITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEAK_DET_ITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BYPASS`"]
        pub type BYPASS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPASS`"]
        pub struct BYPASS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPASS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `HP_BUF_ITRIM`"]
        pub type HP_BUF_ITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HP_BUF_ITRIM`"]
        pub struct HP_BUF_ITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HP_BUF_ITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 2)) | (((value as u32) & 0x07) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LP_BUF_ITRIM`"]
        pub type LP_BUF_ITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LP_BUF_ITRIM`"]
        pub struct LP_BUF_ITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LP_BUF_ITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - PEAK_DET_ITRIM"]
            #[inline(always)]
            pub fn peak_det_itrim(&self) -> PEAK_DET_ITRIM_R {
                PEAK_DET_ITRIM_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 6 - BYPASS"]
            #[inline(always)]
            pub fn bypass(&self) -> BYPASS_R {
                BYPASS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 2:4 - HP_BUF_ITRIM"]
            #[inline(always)]
            pub fn hp_buf_itrim(&self) -> HP_BUF_ITRIM_R {
                HP_BUF_ITRIM_R::new(((self.bits >> 2) & 0x07) as u8)
            }
            #[doc = "Bits 0:1 - LP_BUF_ITRIM"]
            #[inline(always)]
            pub fn lp_buf_itrim(&self) -> LP_BUF_ITRIM_R {
                LP_BUF_ITRIM_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - PEAK_DET_ITRIM"]
            #[inline(always)]
            pub fn peak_det_itrim(&mut self) -> PEAK_DET_ITRIM_W {
                PEAK_DET_ITRIM_W { w: self }
            }
            #[doc = "Bit 6 - BYPASS"]
            #[inline(always)]
            pub fn bypass(&mut self) -> BYPASS_W {
                BYPASS_W { w: self }
            }
            #[doc = "Bits 2:4 - HP_BUF_ITRIM"]
            #[inline(always)]
            pub fn hp_buf_itrim(&mut self) -> HP_BUF_ITRIM_W {
                HP_BUF_ITRIM_W { w: self }
            }
            #[doc = "Bits 0:1 - LP_BUF_ITRIM"]
            #[inline(always)]
            pub fn lp_buf_itrim(&mut self) -> LP_BUF_ITRIM_W {
                LP_BUF_ITRIM_W { w: self }
            }
        }
    }
    #[doc = "Low Frequency Oscillator Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lfoscctl](lfoscctl) module"]
    pub type LFOSCCTL = crate::Reg<u32, _LFOSCCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LFOSCCTL;
    #[doc = "`read()` method returns [lfoscctl::R](lfoscctl::R) reader structure"]
    impl crate::Readable for LFOSCCTL {}
    #[doc = "`write(|w| ..)` method takes [lfoscctl::W](lfoscctl::W) writer structure"]
    impl crate::Writable for LFOSCCTL {}
    #[doc = "Low Frequency Oscillator Control"]
    pub mod lfoscctl {
        #[doc = "Reader of register LFOSCCTL"]
        pub type R = crate::R<u32, super::LFOSCCTL>;
        #[doc = "Writer for register LFOSCCTL"]
        pub type W = crate::W<u32, super::LFOSCCTL>;
        #[doc = "Register LFOSCCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::LFOSCCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `XOSCLF_REGULATOR_TRIM`"]
        pub type XOSCLF_REGULATOR_TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `XOSCLF_REGULATOR_TRIM`"]
        pub struct XOSCLF_REGULATOR_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSCLF_REGULATOR_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `XOSCLF_CMIRRWR_RATIO`"]
        pub type XOSCLF_CMIRRWR_RATIO_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `XOSCLF_CMIRRWR_RATIO`"]
        pub struct XOSCLF_CMIRRWR_RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XOSCLF_CMIRRWR_RATIO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 18)) | (((value as u32) & 0x0f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RCOSCLF_RTUNE_TRIM`"]
        pub type RCOSCLF_RTUNE_TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RCOSCLF_RTUNE_TRIM`"]
        pub struct RCOSCLF_RTUNE_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSCLF_RTUNE_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `RCOSCLF_CTUNE_TRIM`"]
        pub type RCOSCLF_CTUNE_TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RCOSCLF_CTUNE_TRIM`"]
        pub struct RCOSCLF_CTUNE_TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSCLF_CTUNE_TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 22:23 - XOSCLF_REGULATOR_TRIM"]
            #[inline(always)]
            pub fn xosclf_regulator_trim(&self) -> XOSCLF_REGULATOR_TRIM_R {
                XOSCLF_REGULATOR_TRIM_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 18:21 - XOSCLF_CMIRRWR_RATIO"]
            #[inline(always)]
            pub fn xosclf_cmirrwr_ratio(&self) -> XOSCLF_CMIRRWR_RATIO_R {
                XOSCLF_CMIRRWR_RATIO_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bits 8:9 - RCOSCLF_RTUNE_TRIM"]
            #[inline(always)]
            pub fn rcosclf_rtune_trim(&self) -> RCOSCLF_RTUNE_TRIM_R {
                RCOSCLF_RTUNE_TRIM_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:7 - RCOSCLF_CTUNE_TRIM"]
            #[inline(always)]
            pub fn rcosclf_ctune_trim(&self) -> RCOSCLF_CTUNE_TRIM_R {
                RCOSCLF_CTUNE_TRIM_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 22:23 - XOSCLF_REGULATOR_TRIM"]
            #[inline(always)]
            pub fn xosclf_regulator_trim(&mut self) -> XOSCLF_REGULATOR_TRIM_W {
                XOSCLF_REGULATOR_TRIM_W { w: self }
            }
            #[doc = "Bits 18:21 - XOSCLF_CMIRRWR_RATIO"]
            #[inline(always)]
            pub fn xosclf_cmirrwr_ratio(&mut self) -> XOSCLF_CMIRRWR_RATIO_W {
                XOSCLF_CMIRRWR_RATIO_W { w: self }
            }
            #[doc = "Bits 8:9 - RCOSCLF_RTUNE_TRIM"]
            #[inline(always)]
            pub fn rcosclf_rtune_trim(&mut self) -> RCOSCLF_RTUNE_TRIM_W {
                RCOSCLF_RTUNE_TRIM_W { w: self }
            }
            #[doc = "Bits 0:7 - RCOSCLF_CTUNE_TRIM"]
            #[inline(always)]
            pub fn rcosclf_ctune_trim(&mut self) -> RCOSCLF_CTUNE_TRIM_W {
                RCOSCLF_CTUNE_TRIM_W { w: self }
            }
        }
    }
    #[doc = "RCOSCHF Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcoschfctl](rcoschfctl) module"]
    pub type RCOSCHFCTL = crate::Reg<u32, _RCOSCHFCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCOSCHFCTL;
    #[doc = "`read()` method returns [rcoschfctl::R](rcoschfctl::R) reader structure"]
    impl crate::Readable for RCOSCHFCTL {}
    #[doc = "`write(|w| ..)` method takes [rcoschfctl::W](rcoschfctl::W) writer structure"]
    impl crate::Writable for RCOSCHFCTL {}
    #[doc = "RCOSCHF Control"]
    pub mod rcoschfctl {
        #[doc = "Reader of register RCOSCHFCTL"]
        pub type R = crate::R<u32, super::RCOSCHFCTL>;
        #[doc = "Writer for register RCOSCHFCTL"]
        pub type W = crate::W<u32, super::RCOSCHFCTL>;
        #[doc = "Register RCOSCHFCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RCOSCHFCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RCOSCHF_CTRIM`"]
        pub type RCOSCHF_CTRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RCOSCHF_CTRIM`"]
        pub struct RCOSCHF_CTRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RCOSCHF_CTRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - RCOSCHF_CTRIM"]
            #[inline(always)]
            pub fn rcoschf_ctrim(&self) -> RCOSCHF_CTRIM_R {
                RCOSCHF_CTRIM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - RCOSCHF_CTRIM"]
            #[inline(always)]
            pub fn rcoschf_ctrim(&mut self) -> RCOSCHF_CTRIM_W {
                RCOSCHF_CTRIM_W { w: self }
            }
        }
    }
    #[doc = "Status 0 This register contains status signals from OSC_DIG\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat0](stat0) module"]
    pub type STAT0 = crate::Reg<u32, _STAT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STAT0;
    #[doc = "`read()` method returns [stat0::R](stat0::R) reader structure"]
    impl crate::Readable for STAT0 {}
    #[doc = "Status 0 This register contains status signals from OSC_DIG"]
    pub mod stat0 {
        #[doc = "Reader of register STAT0"]
        pub type R = crate::R<u32, super::STAT0>;
        #[doc = "Reader of field `SCLK_LF_SRC`"]
        pub type SCLK_LF_SRC_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SCLK_HF_SRC`"]
        pub type SCLK_HF_SRC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RCOSC_HF_EN`"]
        pub type RCOSC_HF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RCOSC_LF_EN`"]
        pub type RCOSC_LF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_LF_EN`"]
        pub type XOSC_LF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CLK_DCDC_RDY`"]
        pub type CLK_DCDC_RDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CLK_DCDC_RDY_ACK`"]
        pub type CLK_DCDC_RDY_ACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_HF_LOSS`"]
        pub type SCLK_HF_LOSS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_LF_LOSS`"]
        pub type SCLK_LF_LOSS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_HF_EN`"]
        pub type XOSC_HF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XB_48M_CLK_EN`"]
        pub type XB_48M_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_HF_LP_BUF_EN`"]
        pub type XOSC_HF_LP_BUF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_HF_HP_BUF_EN`"]
        pub type XOSC_HF_HP_BUF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADC_THMET`"]
        pub type ADC_THMET_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADC_DATA_READY`"]
        pub type ADC_DATA_READY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADC_DATA`"]
        pub type ADC_DATA_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PENDINGSCLKHFSWITCHING`"]
        pub type PENDINGSCLKHFSWITCHING_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 29:30 - SCLK_LF_SRC"]
            #[inline(always)]
            pub fn sclk_lf_src(&self) -> SCLK_LF_SRC_R {
                SCLK_LF_SRC_R::new(((self.bits >> 29) & 0x03) as u8)
            }
            #[doc = "Bit 28 - SCLK_HF_SRC"]
            #[inline(always)]
            pub fn sclk_hf_src(&self) -> SCLK_HF_SRC_R {
                SCLK_HF_SRC_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 22 - RCOSC_HF_EN"]
            #[inline(always)]
            pub fn rcosc_hf_en(&self) -> RCOSC_HF_EN_R {
                RCOSC_HF_EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - RCOSC_LF_EN"]
            #[inline(always)]
            pub fn rcosc_lf_en(&self) -> RCOSC_LF_EN_R {
                RCOSC_LF_EN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - XOSC_LF_EN"]
            #[inline(always)]
            pub fn xosc_lf_en(&self) -> XOSC_LF_EN_R {
                XOSC_LF_EN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - CLK_DCDC_RDY"]
            #[inline(always)]
            pub fn clk_dcdc_rdy(&self) -> CLK_DCDC_RDY_R {
                CLK_DCDC_RDY_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - CLK_DCDC_RDY_ACK"]
            #[inline(always)]
            pub fn clk_dcdc_rdy_ack(&self) -> CLK_DCDC_RDY_ACK_R {
                CLK_DCDC_RDY_ACK_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - SCLK_HF_LOSS"]
            #[inline(always)]
            pub fn sclk_hf_loss(&self) -> SCLK_HF_LOSS_R {
                SCLK_HF_LOSS_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - SCLK_LF_LOSS"]
            #[inline(always)]
            pub fn sclk_lf_loss(&self) -> SCLK_LF_LOSS_R {
                SCLK_LF_LOSS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - XOSC_HF_EN"]
            #[inline(always)]
            pub fn xosc_hf_en(&self) -> XOSC_HF_EN_R {
                XOSC_HF_EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - XB_48M_CLK_EN"]
            #[inline(always)]
            pub fn xb_48m_clk_en(&self) -> XB_48M_CLK_EN_R {
                XB_48M_CLK_EN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - XOSC_HF_LP_BUF_EN"]
            #[inline(always)]
            pub fn xosc_hf_lp_buf_en(&self) -> XOSC_HF_LP_BUF_EN_R {
                XOSC_HF_LP_BUF_EN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - XOSC_HF_HP_BUF_EN"]
            #[inline(always)]
            pub fn xosc_hf_hp_buf_en(&self) -> XOSC_HF_HP_BUF_EN_R {
                XOSC_HF_HP_BUF_EN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC_THMET"]
            #[inline(always)]
            pub fn adc_thmet(&self) -> ADC_THMET_R {
                ADC_THMET_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC_DATA_READY"]
            #[inline(always)]
            pub fn adc_data_ready(&self) -> ADC_DATA_READY_R {
                ADC_DATA_READY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 1:6 - ADC_DATA"]
            #[inline(always)]
            pub fn adc_data(&self) -> ADC_DATA_R {
                ADC_DATA_R::new(((self.bits >> 1) & 0x3f) as u8)
            }
            #[doc = "Bit 0 - PENDINGSCLKHFSWITCHING"]
            #[inline(always)]
            pub fn pendingsclkhfswitching(&self) -> PENDINGSCLKHFSWITCHING_R {
                PENDINGSCLKHFSWITCHING_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Status 1 This register contains status signals from OSC_DIG\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat1](stat1) module"]
    pub type STAT1 = crate::Reg<u32, _STAT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STAT1;
    #[doc = "`read()` method returns [stat1::R](stat1::R) reader structure"]
    impl crate::Readable for STAT1 {}
    #[doc = "Status 1 This register contains status signals from OSC_DIG"]
    pub mod stat1 {
        #[doc = "Reader of register STAT1"]
        pub type R = crate::R<u32, super::STAT1>;
        #[doc = "Reader of field `RAMPSTATE`"]
        pub type RAMPSTATE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HMP_UPDATE_AMP`"]
        pub type HMP_UPDATE_AMP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LPM_UPDATE_AMP`"]
        pub type LPM_UPDATE_AMP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `FORCE_RCOSC_HF`"]
        pub type FORCE_RCOSC_HF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_HF_EN`"]
        pub type SCLK_HF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_MF_EN`"]
        pub type SCLK_MF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_ADC_EN`"]
        pub type ACLK_ADC_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_TDC_EN`"]
        pub type ACLK_TDC_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_REF_EN`"]
        pub type ACLK_REF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CLK_CHP_EN`"]
        pub type CLK_CHP_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CLK_DCDC_EN`"]
        pub type CLK_DCDC_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_HF_GOOD`"]
        pub type SCLK_HF_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_MF_GOOD`"]
        pub type SCLK_MF_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_LF_GOOD`"]
        pub type SCLK_LF_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_ADC_GOOD`"]
        pub type ACLK_ADC_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_TDC_GOOD`"]
        pub type ACLK_TDC_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_REF_GOOD`"]
        pub type ACLK_REF_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CLK_CHP_GOOD`"]
        pub type CLK_CHP_GOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CLK_DCDC_GOOD`"]
        pub type CLK_DCDC_GOOD_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 28:31 - RAMPSTATE"]
            #[inline(always)]
            pub fn rampstate(&self) -> RAMPSTATE_R {
                RAMPSTATE_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 22:27 - HMP_UPDATE_AMP"]
            #[inline(always)]
            pub fn hmp_update_amp(&self) -> HMP_UPDATE_AMP_R {
                HMP_UPDATE_AMP_R::new(((self.bits >> 22) & 0x3f) as u8)
            }
            #[doc = "Bits 16:21 - LPM_UPDATE_AMP"]
            #[inline(always)]
            pub fn lpm_update_amp(&self) -> LPM_UPDATE_AMP_R {
                LPM_UPDATE_AMP_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bit 15 - FORCE_RCOSC_HF"]
            #[inline(always)]
            pub fn force_rcosc_hf(&self) -> FORCE_RCOSC_HF_R {
                FORCE_RCOSC_HF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SCLK_HF_EN"]
            #[inline(always)]
            pub fn sclk_hf_en(&self) -> SCLK_HF_EN_R {
                SCLK_HF_EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SCLK_MF_EN"]
            #[inline(always)]
            pub fn sclk_mf_en(&self) -> SCLK_MF_EN_R {
                SCLK_MF_EN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - ACLK_ADC_EN"]
            #[inline(always)]
            pub fn aclk_adc_en(&self) -> ACLK_ADC_EN_R {
                ACLK_ADC_EN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - ACLK_TDC_EN"]
            #[inline(always)]
            pub fn aclk_tdc_en(&self) -> ACLK_TDC_EN_R {
                ACLK_TDC_EN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - ACLK_REF_EN"]
            #[inline(always)]
            pub fn aclk_ref_en(&self) -> ACLK_REF_EN_R {
                ACLK_REF_EN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CLK_CHP_EN"]
            #[inline(always)]
            pub fn clk_chp_en(&self) -> CLK_CHP_EN_R {
                CLK_CHP_EN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CLK_DCDC_EN"]
            #[inline(always)]
            pub fn clk_dcdc_en(&self) -> CLK_DCDC_EN_R {
                CLK_DCDC_EN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - SCLK_HF_GOOD"]
            #[inline(always)]
            pub fn sclk_hf_good(&self) -> SCLK_HF_GOOD_R {
                SCLK_HF_GOOD_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SCLK_MF_GOOD"]
            #[inline(always)]
            pub fn sclk_mf_good(&self) -> SCLK_MF_GOOD_R {
                SCLK_MF_GOOD_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - SCLK_LF_GOOD"]
            #[inline(always)]
            pub fn sclk_lf_good(&self) -> SCLK_LF_GOOD_R {
                SCLK_LF_GOOD_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ACLK_ADC_GOOD"]
            #[inline(always)]
            pub fn aclk_adc_good(&self) -> ACLK_ADC_GOOD_R {
                ACLK_ADC_GOOD_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ACLK_TDC_GOOD"]
            #[inline(always)]
            pub fn aclk_tdc_good(&self) -> ACLK_TDC_GOOD_R {
                ACLK_TDC_GOOD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ACLK_REF_GOOD"]
            #[inline(always)]
            pub fn aclk_ref_good(&self) -> ACLK_REF_GOOD_R {
                ACLK_REF_GOOD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CLK_CHP_GOOD"]
            #[inline(always)]
            pub fn clk_chp_good(&self) -> CLK_CHP_GOOD_R {
                CLK_CHP_GOOD_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CLK_DCDC_GOOD"]
            #[inline(always)]
            pub fn clk_dcdc_good(&self) -> CLK_DCDC_GOOD_R {
                CLK_DCDC_GOOD_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Status 2 This register contains status signals from AMPCOMP FSM\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat2](stat2) module"]
    pub type STAT2 = crate::Reg<u32, _STAT2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STAT2;
    #[doc = "`read()` method returns [stat2::R](stat2::R) reader structure"]
    impl crate::Readable for STAT2 {}
    #[doc = "Status 2 This register contains status signals from AMPCOMP FSM"]
    pub mod stat2 {
        #[doc = "Reader of register STAT2"]
        pub type R = crate::R<u32, super::STAT2>;
        #[doc = "Reader of field `ADC_DCBIAS`"]
        pub type ADC_DCBIAS_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HPM_RAMP1_THMET`"]
        pub type HPM_RAMP1_THMET_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HPM_RAMP2_THMET`"]
        pub type HPM_RAMP2_THMET_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HPM_RAMP3_THMET`"]
        pub type HPM_RAMP3_THMET_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RAMPSTATE`"]
        pub type RAMPSTATE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `AMPCOMP_REQ`"]
        pub type AMPCOMP_REQ_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_HF_AMPGOOD`"]
        pub type XOSC_HF_AMPGOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_HF_FREQGOOD`"]
        pub type XOSC_HF_FREQGOOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_HF_RF_FREQGOOD`"]
        pub type XOSC_HF_RF_FREQGOOD_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 26:31 - ADC_DCBIAS"]
            #[inline(always)]
            pub fn adc_dcbias(&self) -> ADC_DCBIAS_R {
                ADC_DCBIAS_R::new(((self.bits >> 26) & 0x3f) as u8)
            }
            #[doc = "Bit 25 - HPM_RAMP1_THMET"]
            #[inline(always)]
            pub fn hpm_ramp1_thmet(&self) -> HPM_RAMP1_THMET_R {
                HPM_RAMP1_THMET_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - HPM_RAMP2_THMET"]
            #[inline(always)]
            pub fn hpm_ramp2_thmet(&self) -> HPM_RAMP2_THMET_R {
                HPM_RAMP2_THMET_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - HPM_RAMP3_THMET"]
            #[inline(always)]
            pub fn hpm_ramp3_thmet(&self) -> HPM_RAMP3_THMET_R {
                HPM_RAMP3_THMET_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 12:15 - RAMPSTATE"]
            #[inline(always)]
            pub fn rampstate(&self) -> RAMPSTATE_R {
                RAMPSTATE_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bit 3 - AMPCOMP_REQ"]
            #[inline(always)]
            pub fn ampcomp_req(&self) -> AMPCOMP_REQ_R {
                AMPCOMP_REQ_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - XOSC_HF_AMPGOOD"]
            #[inline(always)]
            pub fn xosc_hf_ampgood(&self) -> XOSC_HF_AMPGOOD_R {
                XOSC_HF_AMPGOOD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - XOSC_HF_FREQGOOD"]
            #[inline(always)]
            pub fn xosc_hf_freqgood(&self) -> XOSC_HF_FREQGOOD_R {
                XOSC_HF_FREQGOOD_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - XOSC_HF_RF_FREQGOOD"]
            #[inline(always)]
            pub fn xosc_hf_rf_freqgood(&self) -> XOSC_HF_RF_FREQGOOD_R {
                XOSC_HF_RF_FREQGOOD_R::new((self.bits & 0x01) != 0)
            }
        }
    }
}
#[doc = "AUX Event Controller"]
pub struct AUX_EVCTL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_EVCTL {}
impl AUX_EVCTL {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_evctl::RegisterBlock {
        0x400c_5000 as *const _
    }
}
impl Deref for AUX_EVCTL {
    type Target = aux_evctl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_EVCTL::ptr() }
    }
}
#[doc = "AUX Event Controller"]
pub mod aux_evctl {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Vector Configuration 0 AUX_SCE event vectors 0 and 1 configuration"]
        pub veccfg0: VECCFG0,
        #[doc = "0x04 - Vector Configuration 1 AUX_SCE event vectors 2 and 3 configuration"]
        pub veccfg1: VECCFG1,
        #[doc = "0x08 - Sensor Controller Engine Wait Event Selection Event selection for the AUX_SCE WEV0, WEV1, BEV0 and BEV1 instructions"]
        pub scewevsel: SCEWEVSEL,
        #[doc = "0x0c - Events To AON Domain Flags AUX event flags going to/through the AON domain These events may be used to wake up the MCU domain. The flags may be cleared by writing 0 to these bits or writing 1 to the corresponding bits in EVTOAONFLAGSCLR."]
        pub evtoaonflags: EVTOAONFLAGS,
        #[doc = "0x10 - Events To AON Domain Polarity AUX event source polarity for the event flags going to/through the AON domain Note the inverse polarity (0 = high, 1 = low)."]
        pub evtoaonpol: EVTOAONPOL,
        #[doc = "0x14 - Direct Memory Access Control"]
        pub dmactl: DMACTL,
        #[doc = "0x18 - Software Event Set Strobes for setting software events from the AUX domain to the AON/MCU Domains The use of these events is software-defined."]
        pub swevset: SWEVSET,
        #[doc = "0x1c - Event Status 0 Current event source levels, 15:0"]
        pub evstat0: EVSTAT0,
        #[doc = "0x20 - Event Status 1 Current event source levels, 31:16"]
        pub evstat1: EVSTAT1,
        #[doc = "0x24 - Event To MCU Domain Polarity AUX event source polarity for the event flags to the MCU domain Note the inverse polarity (0 = high, 1 = low)."]
        pub evtomcupol: EVTOMCUPOL,
        #[doc = "0x28 - Events to MCU Domain Flags AUX event flags going to the MCU domain The flags may be cleared by writing 0 to these bits or writing 1 to the corresponding bits in EVTOMCUFLAGSCLR."]
        pub evtomcuflags: EVTOMCUFLAGS,
        #[doc = "0x2c - Combined Event To MCU Domain Mask Selects which of the flags In EVTOMCUFLAGS that contribute to the AUX_COMB event to the MCU domain The AUX_COMB event is asserted as long as one or more of the included event flags are set."]
        pub combevtomcumask: COMBEVTOMCUMASK,
        _reserved12: [u8; 4usize],
        #[doc = "0x34 - Vector Flags If a vector flag has been set and AUX_SCE is sleeping, it will wake up and execute the vector. If multiple vectors have been set, the one with the lowest index will execute first, and the next after returning to sleep. During execution of a vector, the flag must be cleared, by writing a 1 to the corresponding bit in VECFLAGSCLR."]
        pub vecflags: VECFLAGS,
        #[doc = "0x38 - Events To MCU Domain Flags Clear Strobes for clearing flags in EVTOMCUFLAGS."]
        pub evtomcuflagsclr: EVTOMCUFLAGSCLR,
        #[doc = "0x3c - Events To AON Domain Clear Strobes for clearing flags in EVTOAONFLAGS."]
        pub evtoaonflagsclr: EVTOAONFLAGSCLR,
        #[doc = "0x40 - Vector Flags Clear Strobes for clearing flags in VECFLAGS."]
        pub vecflagsclr: VECFLAGSCLR,
    }
    #[doc = "Vector Configuration 0 AUX_SCE event vectors 0 and 1 configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [veccfg0](veccfg0) module"]
    pub type VECCFG0 = crate::Reg<u32, _VECCFG0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VECCFG0;
    #[doc = "`read()` method returns [veccfg0::R](veccfg0::R) reader structure"]
    impl crate::Readable for VECCFG0 {}
    #[doc = "`write(|w| ..)` method takes [veccfg0::W](veccfg0::W) writer structure"]
    impl crate::Writable for VECCFG0 {}
    #[doc = "Vector Configuration 0 AUX_SCE event vectors 0 and 1 configuration"]
    pub mod veccfg0 {
        #[doc = "Reader of register VECCFG0"]
        pub type R = crate::R<u32, super::VECCFG0>;
        #[doc = "Writer for register VECCFG0"]
        pub type W = crate::W<u32, super::VECCFG0>;
        #[doc = "Register VECCFG0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::VECCFG0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VEC1_POL`"]
        pub type VEC1_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC1_POL`"]
        pub struct VEC1_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC1_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `VEC1_EN`"]
        pub type VEC1_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC1_EN`"]
        pub struct VEC1_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC1_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `VEC1_EV`"]
        pub type VEC1_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VEC1_EV`"]
        pub struct VEC1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC1_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `VEC0_POL`"]
        pub type VEC0_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC0_POL`"]
        pub struct VEC0_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC0_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `VEC0_EN`"]
        pub type VEC0_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC0_EN`"]
        pub struct VEC0_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC0_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `VEC0_EV`"]
        pub type VEC0_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VEC0_EV`"]
        pub struct VEC0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC0_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - VEC1_POL"]
            #[inline(always)]
            pub fn vec1_pol(&self) -> VEC1_POL_R {
                VEC1_POL_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - VEC1_EN"]
            #[inline(always)]
            pub fn vec1_en(&self) -> VEC1_EN_R {
                VEC1_EN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - VEC1_EV"]
            #[inline(always)]
            pub fn vec1_ev(&self) -> VEC1_EV_R {
                VEC1_EV_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bit 6 - VEC0_POL"]
            #[inline(always)]
            pub fn vec0_pol(&self) -> VEC0_POL_R {
                VEC0_POL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - VEC0_EN"]
            #[inline(always)]
            pub fn vec0_en(&self) -> VEC0_EN_R {
                VEC0_EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - VEC0_EV"]
            #[inline(always)]
            pub fn vec0_ev(&self) -> VEC0_EV_R {
                VEC0_EV_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - VEC1_POL"]
            #[inline(always)]
            pub fn vec1_pol(&mut self) -> VEC1_POL_W {
                VEC1_POL_W { w: self }
            }
            #[doc = "Bit 13 - VEC1_EN"]
            #[inline(always)]
            pub fn vec1_en(&mut self) -> VEC1_EN_W {
                VEC1_EN_W { w: self }
            }
            #[doc = "Bits 8:12 - VEC1_EV"]
            #[inline(always)]
            pub fn vec1_ev(&mut self) -> VEC1_EV_W {
                VEC1_EV_W { w: self }
            }
            #[doc = "Bit 6 - VEC0_POL"]
            #[inline(always)]
            pub fn vec0_pol(&mut self) -> VEC0_POL_W {
                VEC0_POL_W { w: self }
            }
            #[doc = "Bit 5 - VEC0_EN"]
            #[inline(always)]
            pub fn vec0_en(&mut self) -> VEC0_EN_W {
                VEC0_EN_W { w: self }
            }
            #[doc = "Bits 0:4 - VEC0_EV"]
            #[inline(always)]
            pub fn vec0_ev(&mut self) -> VEC0_EV_W {
                VEC0_EV_W { w: self }
            }
        }
    }
    #[doc = "Vector Configuration 1 AUX_SCE event vectors 2 and 3 configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [veccfg1](veccfg1) module"]
    pub type VECCFG1 = crate::Reg<u32, _VECCFG1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VECCFG1;
    #[doc = "`read()` method returns [veccfg1::R](veccfg1::R) reader structure"]
    impl crate::Readable for VECCFG1 {}
    #[doc = "`write(|w| ..)` method takes [veccfg1::W](veccfg1::W) writer structure"]
    impl crate::Writable for VECCFG1 {}
    #[doc = "Vector Configuration 1 AUX_SCE event vectors 2 and 3 configuration"]
    pub mod veccfg1 {
        #[doc = "Reader of register VECCFG1"]
        pub type R = crate::R<u32, super::VECCFG1>;
        #[doc = "Writer for register VECCFG1"]
        pub type W = crate::W<u32, super::VECCFG1>;
        #[doc = "Register VECCFG1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::VECCFG1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VEC3_POL`"]
        pub type VEC3_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC3_POL`"]
        pub struct VEC3_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC3_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `VEC3_EN`"]
        pub type VEC3_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC3_EN`"]
        pub struct VEC3_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC3_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `VEC3_EV`"]
        pub type VEC3_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VEC3_EV`"]
        pub struct VEC3_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC3_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `VEC2_POL`"]
        pub type VEC2_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC2_POL`"]
        pub struct VEC2_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC2_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `VEC2_EN`"]
        pub type VEC2_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC2_EN`"]
        pub struct VEC2_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC2_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `VEC2_EV`"]
        pub type VEC2_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VEC2_EV`"]
        pub struct VEC2_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC2_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - VEC3_POL"]
            #[inline(always)]
            pub fn vec3_pol(&self) -> VEC3_POL_R {
                VEC3_POL_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - VEC3_EN"]
            #[inline(always)]
            pub fn vec3_en(&self) -> VEC3_EN_R {
                VEC3_EN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - VEC3_EV"]
            #[inline(always)]
            pub fn vec3_ev(&self) -> VEC3_EV_R {
                VEC3_EV_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bit 6 - VEC2_POL"]
            #[inline(always)]
            pub fn vec2_pol(&self) -> VEC2_POL_R {
                VEC2_POL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - VEC2_EN"]
            #[inline(always)]
            pub fn vec2_en(&self) -> VEC2_EN_R {
                VEC2_EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - VEC2_EV"]
            #[inline(always)]
            pub fn vec2_ev(&self) -> VEC2_EV_R {
                VEC2_EV_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - VEC3_POL"]
            #[inline(always)]
            pub fn vec3_pol(&mut self) -> VEC3_POL_W {
                VEC3_POL_W { w: self }
            }
            #[doc = "Bit 13 - VEC3_EN"]
            #[inline(always)]
            pub fn vec3_en(&mut self) -> VEC3_EN_W {
                VEC3_EN_W { w: self }
            }
            #[doc = "Bits 8:12 - VEC3_EV"]
            #[inline(always)]
            pub fn vec3_ev(&mut self) -> VEC3_EV_W {
                VEC3_EV_W { w: self }
            }
            #[doc = "Bit 6 - VEC2_POL"]
            #[inline(always)]
            pub fn vec2_pol(&mut self) -> VEC2_POL_W {
                VEC2_POL_W { w: self }
            }
            #[doc = "Bit 5 - VEC2_EN"]
            #[inline(always)]
            pub fn vec2_en(&mut self) -> VEC2_EN_W {
                VEC2_EN_W { w: self }
            }
            #[doc = "Bits 0:4 - VEC2_EV"]
            #[inline(always)]
            pub fn vec2_ev(&mut self) -> VEC2_EV_W {
                VEC2_EV_W { w: self }
            }
        }
    }
    #[doc = "Sensor Controller Engine Wait Event Selection Event selection for the AUX_SCE WEV0, WEV1, BEV0 and BEV1 instructions\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scewevsel](scewevsel) module"]
    pub type SCEWEVSEL = crate::Reg<u32, _SCEWEVSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SCEWEVSEL;
    #[doc = "`read()` method returns [scewevsel::R](scewevsel::R) reader structure"]
    impl crate::Readable for SCEWEVSEL {}
    #[doc = "`write(|w| ..)` method takes [scewevsel::W](scewevsel::W) writer structure"]
    impl crate::Writable for SCEWEVSEL {}
    #[doc = "Sensor Controller Engine Wait Event Selection Event selection for the AUX_SCE WEV0, WEV1, BEV0 and BEV1 instructions"]
    pub mod scewevsel {
        #[doc = "Reader of register SCEWEVSEL"]
        pub type R = crate::R<u32, super::SCEWEVSEL>;
        #[doc = "Writer for register SCEWEVSEL"]
        pub type W = crate::W<u32, super::SCEWEVSEL>;
        #[doc = "Register SCEWEVSEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SCEWEVSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WEV7_EV`"]
        pub type WEV7_EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WEV7_EV`"]
        pub struct WEV7_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WEV7_EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - WEV7_EV"]
            #[inline(always)]
            pub fn wev7_ev(&self) -> WEV7_EV_R {
                WEV7_EV_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - WEV7_EV"]
            #[inline(always)]
            pub fn wev7_ev(&mut self) -> WEV7_EV_W {
                WEV7_EV_W { w: self }
            }
        }
    }
    #[doc = "Events To AON Domain Flags AUX event flags going to/through the AON domain These events may be used to wake up the MCU domain. The flags may be cleared by writing 0 to these bits or writing 1 to the corresponding bits in EVTOAONFLAGSCLR.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtoaonflags](evtoaonflags) module"]
    pub type EVTOAONFLAGS = crate::Reg<u32, _EVTOAONFLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOAONFLAGS;
    #[doc = "`read()` method returns [evtoaonflags::R](evtoaonflags::R) reader structure"]
    impl crate::Readable for EVTOAONFLAGS {}
    #[doc = "`write(|w| ..)` method takes [evtoaonflags::W](evtoaonflags::W) writer structure"]
    impl crate::Writable for EVTOAONFLAGS {}
    #[doc = "Events To AON Domain Flags AUX event flags going to/through the AON domain These events may be used to wake up the MCU domain. The flags may be cleared by writing 0 to these bits or writing 1 to the corresponding bits in EVTOAONFLAGSCLR."]
    pub mod evtoaonflags {
        #[doc = "Reader of register EVTOAONFLAGS"]
        pub type R = crate::R<u32, super::EVTOAONFLAGS>;
        #[doc = "Writer for register EVTOAONFLAGS"]
        pub type W = crate::W<u32, super::EVTOAONFLAGS>;
        #[doc = "Register EVTOAONFLAGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVTOAONFLAGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV2`"]
        pub type SWEV2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV2`"]
        pub struct SWEV2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV1`"]
        pub type SWEV1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV1`"]
        pub struct SWEV1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV0`"]
        pub type SWEV0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV0`"]
        pub struct SWEV0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&self) -> SWEV2_R {
                SWEV2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&self) -> SWEV1_R {
                SWEV1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&self) -> SWEV0_R {
                SWEV0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 7 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 6 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 5 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 4 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 3 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
            #[doc = "Bit 2 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&mut self) -> SWEV2_W {
                SWEV2_W { w: self }
            }
            #[doc = "Bit 1 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&mut self) -> SWEV1_W {
                SWEV1_W { w: self }
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&mut self) -> SWEV0_W {
                SWEV0_W { w: self }
            }
        }
    }
    #[doc = "Events To AON Domain Polarity AUX event source polarity for the event flags going to/through the AON domain Note the inverse polarity (0 = high, 1 = low).\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtoaonpol](evtoaonpol) module"]
    pub type EVTOAONPOL = crate::Reg<u32, _EVTOAONPOL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOAONPOL;
    #[doc = "`read()` method returns [evtoaonpol::R](evtoaonpol::R) reader structure"]
    impl crate::Readable for EVTOAONPOL {}
    #[doc = "`write(|w| ..)` method takes [evtoaonpol::W](evtoaonpol::W) writer structure"]
    impl crate::Writable for EVTOAONPOL {}
    #[doc = "Events To AON Domain Polarity AUX event source polarity for the event flags going to/through the AON domain Note the inverse polarity (0 = high, 1 = low)."]
    pub mod evtoaonpol {
        #[doc = "Reader of register EVTOAONPOL"]
        pub type R = crate::R<u32, super::EVTOAONPOL>;
        #[doc = "Writer for register EVTOAONPOL"]
        pub type W = crate::W<u32, super::EVTOAONPOL>;
        #[doc = "Register EVTOAONPOL `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVTOAONPOL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 7 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 6 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 5 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 4 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 3 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
        }
    }
    #[doc = "Direct Memory Access Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmactl](dmactl) module"]
    pub type DMACTL = crate::Reg<u32, _DMACTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACTL;
    #[doc = "`read()` method returns [dmactl::R](dmactl::R) reader structure"]
    impl crate::Readable for DMACTL {}
    #[doc = "`write(|w| ..)` method takes [dmactl::W](dmactl::W) writer structure"]
    impl crate::Writable for DMACTL {}
    #[doc = "Direct Memory Access Control"]
    pub mod dmactl {
        #[doc = "Reader of register DMACTL"]
        pub type R = crate::R<u32, super::DMACTL>;
        #[doc = "Writer for register DMACTL"]
        pub type W = crate::W<u32, super::DMACTL>;
        #[doc = "Register DMACTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REQ_MODE`"]
        pub type REQ_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ_MODE`"]
        pub struct REQ_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SEL`"]
        pub type SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SEL`"]
        pub struct SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - REQ_MODE"]
            #[inline(always)]
            pub fn req_mode(&self) -> REQ_MODE_R {
                REQ_MODE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SEL"]
            #[inline(always)]
            pub fn sel(&self) -> SEL_R {
                SEL_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - REQ_MODE"]
            #[inline(always)]
            pub fn req_mode(&mut self) -> REQ_MODE_W {
                REQ_MODE_W { w: self }
            }
            #[doc = "Bit 1 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
            #[doc = "Bit 0 - SEL"]
            #[inline(always)]
            pub fn sel(&mut self) -> SEL_W {
                SEL_W { w: self }
            }
        }
    }
    #[doc = "Software Event Set Strobes for setting software events from the AUX domain to the AON/MCU Domains The use of these events is software-defined.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swevset](swevset) module"]
    pub type SWEVSET = crate::Reg<u32, _SWEVSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWEVSET;
    #[doc = "`read()` method returns [swevset::R](swevset::R) reader structure"]
    impl crate::Readable for SWEVSET {}
    #[doc = "`write(|w| ..)` method takes [swevset::W](swevset::W) writer structure"]
    impl crate::Writable for SWEVSET {}
    #[doc = "Software Event Set Strobes for setting software events from the AUX domain to the AON/MCU Domains The use of these events is software-defined."]
    pub mod swevset {
        #[doc = "Reader of register SWEVSET"]
        pub type R = crate::R<u32, super::SWEVSET>;
        #[doc = "Writer for register SWEVSET"]
        pub type W = crate::W<u32, super::SWEVSET>;
        #[doc = "Register SWEVSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWEVSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SWEV2`"]
        pub type SWEV2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV2`"]
        pub struct SWEV2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV1`"]
        pub type SWEV1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV1`"]
        pub struct SWEV1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV0`"]
        pub type SWEV0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV0`"]
        pub struct SWEV0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&self) -> SWEV2_R {
                SWEV2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&self) -> SWEV1_R {
                SWEV1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&self) -> SWEV0_R {
                SWEV0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&mut self) -> SWEV2_W {
                SWEV2_W { w: self }
            }
            #[doc = "Bit 1 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&mut self) -> SWEV1_W {
                SWEV1_W { w: self }
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&mut self) -> SWEV0_W {
                SWEV0_W { w: self }
            }
        }
    }
    #[doc = "Event Status 0 Current event source levels, 15:0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evstat0](evstat0) module"]
    pub type EVSTAT0 = crate::Reg<u32, _EVSTAT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVSTAT0;
    #[doc = "`read()` method returns [evstat0::R](evstat0::R) reader structure"]
    impl crate::Readable for EVSTAT0 {}
    #[doc = "Event Status 0 Current event source levels, 15:0"]
    pub mod evstat0 {
        #[doc = "Reader of register EVSTAT0"]
        pub type R = crate::R<u32, super::EVSTAT0>;
        #[doc = "Reader of field `AUXIO2`"]
        pub type AUXIO2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO1`"]
        pub type AUXIO1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO0`"]
        pub type AUXIO0_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AON_PROG_WU`"]
        pub type AON_PROG_WU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AON_SW`"]
        pub type AON_SW_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OBSMUX1`"]
        pub type OBSMUX1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OBSMUX0`"]
        pub type OBSMUX0_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADC_FIFO_ALMOST_FULL`"]
        pub type ADC_FIFO_ALMOST_FULL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SMPH_AUTOTAKE_DONE`"]
        pub type SMPH_AUTOTAKE_DONE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AON_RTC_CH2`"]
        pub type AON_RTC_CH2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 15 - AUXIO2"]
            #[inline(always)]
            pub fn auxio2(&self) -> AUXIO2_R {
                AUXIO2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - AUXIO1"]
            #[inline(always)]
            pub fn auxio1(&self) -> AUXIO1_R {
                AUXIO1_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - AUXIO0"]
            #[inline(always)]
            pub fn auxio0(&self) -> AUXIO0_R {
                AUXIO0_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - AON_PROG_WU"]
            #[inline(always)]
            pub fn aon_prog_wu(&self) -> AON_PROG_WU_R {
                AON_PROG_WU_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - AON_SW"]
            #[inline(always)]
            pub fn aon_sw(&self) -> AON_SW_R {
                AON_SW_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - OBSMUX1"]
            #[inline(always)]
            pub fn obsmux1(&self) -> OBSMUX1_R {
                OBSMUX1_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&self) -> OBSMUX0_R {
                OBSMUX0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&self) -> ADC_FIFO_ALMOST_FULL_R {
                ADC_FIFO_ALMOST_FULL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&self) -> SMPH_AUTOTAKE_DONE_R {
                SMPH_AUTOTAKE_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_RTC_CH2"]
            #[inline(always)]
            pub fn aon_rtc_ch2(&self) -> AON_RTC_CH2_R {
                AON_RTC_CH2_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Event Status 1 Current event source levels, 31:16\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evstat1](evstat1) module"]
    pub type EVSTAT1 = crate::Reg<u32, _EVSTAT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVSTAT1;
    #[doc = "`read()` method returns [evstat1::R](evstat1::R) reader structure"]
    impl crate::Readable for EVSTAT1 {}
    #[doc = "Event Status 1 Current event source levels, 31:16"]
    pub mod evstat1 {
        #[doc = "Reader of register EVSTAT1"]
        pub type R = crate::R<u32, super::EVSTAT1>;
        #[doc = "Reader of field `ADC_IRQ`"]
        pub type ADC_IRQ_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MCU_EV`"]
        pub type MCU_EV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ACLK_REF`"]
        pub type ACLK_REF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO15`"]
        pub type AUXIO15_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO14`"]
        pub type AUXIO14_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO13`"]
        pub type AUXIO13_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO12`"]
        pub type AUXIO12_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO11`"]
        pub type AUXIO11_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO10`"]
        pub type AUXIO10_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO9`"]
        pub type AUXIO9_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO8`"]
        pub type AUXIO8_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO7`"]
        pub type AUXIO7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO6`"]
        pub type AUXIO6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO5`"]
        pub type AUXIO5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO4`"]
        pub type AUXIO4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUXIO3`"]
        pub type AUXIO3_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 15 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&self) -> ADC_IRQ_R {
                ADC_IRQ_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - MCU_EV"]
            #[inline(always)]
            pub fn mcu_ev(&self) -> MCU_EV_R {
                MCU_EV_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - ACLK_REF"]
            #[inline(always)]
            pub fn aclk_ref(&self) -> ACLK_REF_R {
                ACLK_REF_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - AUXIO15"]
            #[inline(always)]
            pub fn auxio15(&self) -> AUXIO15_R {
                AUXIO15_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - AUXIO14"]
            #[inline(always)]
            pub fn auxio14(&self) -> AUXIO14_R {
                AUXIO14_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - AUXIO13"]
            #[inline(always)]
            pub fn auxio13(&self) -> AUXIO13_R {
                AUXIO13_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - AUXIO12"]
            #[inline(always)]
            pub fn auxio12(&self) -> AUXIO12_R {
                AUXIO12_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - AUXIO11"]
            #[inline(always)]
            pub fn auxio11(&self) -> AUXIO11_R {
                AUXIO11_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - AUXIO10"]
            #[inline(always)]
            pub fn auxio10(&self) -> AUXIO10_R {
                AUXIO10_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - AUXIO9"]
            #[inline(always)]
            pub fn auxio9(&self) -> AUXIO9_R {
                AUXIO9_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - AUXIO8"]
            #[inline(always)]
            pub fn auxio8(&self) -> AUXIO8_R {
                AUXIO8_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - AUXIO7"]
            #[inline(always)]
            pub fn auxio7(&self) -> AUXIO7_R {
                AUXIO7_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - AUXIO6"]
            #[inline(always)]
            pub fn auxio6(&self) -> AUXIO6_R {
                AUXIO6_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUXIO5"]
            #[inline(always)]
            pub fn auxio5(&self) -> AUXIO5_R {
                AUXIO5_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUXIO4"]
            #[inline(always)]
            pub fn auxio4(&self) -> AUXIO4_R {
                AUXIO4_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AUXIO3"]
            #[inline(always)]
            pub fn auxio3(&self) -> AUXIO3_R {
                AUXIO3_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Event To MCU Domain Polarity AUX event source polarity for the event flags to the MCU domain Note the inverse polarity (0 = high, 1 = low).\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtomcupol](evtomcupol) module"]
    pub type EVTOMCUPOL = crate::Reg<u32, _EVTOMCUPOL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOMCUPOL;
    #[doc = "`read()` method returns [evtomcupol::R](evtomcupol::R) reader structure"]
    impl crate::Readable for EVTOMCUPOL {}
    #[doc = "`write(|w| ..)` method takes [evtomcupol::W](evtomcupol::W) writer structure"]
    impl crate::Writable for EVTOMCUPOL {}
    #[doc = "Event To MCU Domain Polarity AUX event source polarity for the event flags to the MCU domain Note the inverse polarity (0 = high, 1 = low)."]
    pub mod evtomcupol {
        #[doc = "Reader of register EVTOMCUPOL"]
        pub type R = crate::R<u32, super::EVTOMCUPOL>;
        #[doc = "Writer for register EVTOMCUPOL"]
        pub type W = crate::W<u32, super::EVTOMCUPOL>;
        #[doc = "Register EVTOMCUPOL `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVTOMCUPOL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADC_IRQ`"]
        pub type ADC_IRQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_IRQ`"]
        pub struct ADC_IRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_IRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OBSMUX0`"]
        pub type OBSMUX0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBSMUX0`"]
        pub struct OBSMUX0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBSMUX0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_FIFO_ALMOST_FULL`"]
        pub type ADC_FIFO_ALMOST_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_FIFO_ALMOST_FULL`"]
        pub struct ADC_FIFO_ALMOST_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_FIFO_ALMOST_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SMPH_AUTOTAKE_DONE`"]
        pub type SMPH_AUTOTAKE_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPH_AUTOTAKE_DONE`"]
        pub struct SMPH_AUTOTAKE_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_AUTOTAKE_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AON_WU_EV`"]
        pub type AON_WU_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_WU_EV`"]
        pub struct AON_WU_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_WU_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&self) -> ADC_IRQ_R {
                ADC_IRQ_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&self) -> OBSMUX0_R {
                OBSMUX0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&self) -> ADC_FIFO_ALMOST_FULL_R {
                ADC_FIFO_ALMOST_FULL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&self) -> SMPH_AUTOTAKE_DONE_R {
                SMPH_AUTOTAKE_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&self) -> AON_WU_EV_R {
                AON_WU_EV_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&mut self) -> ADC_IRQ_W {
                ADC_IRQ_W { w: self }
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&mut self) -> OBSMUX0_W {
                OBSMUX0_W { w: self }
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&mut self) -> ADC_FIFO_ALMOST_FULL_W {
                ADC_FIFO_ALMOST_FULL_W { w: self }
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&mut self) -> SMPH_AUTOTAKE_DONE_W {
                SMPH_AUTOTAKE_DONE_W { w: self }
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&mut self) -> AON_WU_EV_W {
                AON_WU_EV_W { w: self }
            }
        }
    }
    #[doc = "Events to MCU Domain Flags AUX event flags going to the MCU domain The flags may be cleared by writing 0 to these bits or writing 1 to the corresponding bits in EVTOMCUFLAGSCLR.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtomcuflags](evtomcuflags) module"]
    pub type EVTOMCUFLAGS = crate::Reg<u32, _EVTOMCUFLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOMCUFLAGS;
    #[doc = "`read()` method returns [evtomcuflags::R](evtomcuflags::R) reader structure"]
    impl crate::Readable for EVTOMCUFLAGS {}
    #[doc = "`write(|w| ..)` method takes [evtomcuflags::W](evtomcuflags::W) writer structure"]
    impl crate::Writable for EVTOMCUFLAGS {}
    #[doc = "Events to MCU Domain Flags AUX event flags going to the MCU domain The flags may be cleared by writing 0 to these bits or writing 1 to the corresponding bits in EVTOMCUFLAGSCLR."]
    pub mod evtomcuflags {
        #[doc = "Reader of register EVTOMCUFLAGS"]
        pub type R = crate::R<u32, super::EVTOMCUFLAGS>;
        #[doc = "Writer for register EVTOMCUFLAGS"]
        pub type W = crate::W<u32, super::EVTOMCUFLAGS>;
        #[doc = "Register EVTOMCUFLAGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVTOMCUFLAGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADC_IRQ`"]
        pub type ADC_IRQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_IRQ`"]
        pub struct ADC_IRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_IRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OBSMUX0`"]
        pub type OBSMUX0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBSMUX0`"]
        pub struct OBSMUX0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBSMUX0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_FIFO_ALMOST_FULL`"]
        pub type ADC_FIFO_ALMOST_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_FIFO_ALMOST_FULL`"]
        pub struct ADC_FIFO_ALMOST_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_FIFO_ALMOST_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SMPH_AUTOTAKE_DONE`"]
        pub type SMPH_AUTOTAKE_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPH_AUTOTAKE_DONE`"]
        pub struct SMPH_AUTOTAKE_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_AUTOTAKE_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AON_WU_EV`"]
        pub type AON_WU_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_WU_EV`"]
        pub struct AON_WU_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_WU_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&self) -> ADC_IRQ_R {
                ADC_IRQ_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&self) -> OBSMUX0_R {
                OBSMUX0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&self) -> ADC_FIFO_ALMOST_FULL_R {
                ADC_FIFO_ALMOST_FULL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&self) -> SMPH_AUTOTAKE_DONE_R {
                SMPH_AUTOTAKE_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&self) -> AON_WU_EV_R {
                AON_WU_EV_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&mut self) -> ADC_IRQ_W {
                ADC_IRQ_W { w: self }
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&mut self) -> OBSMUX0_W {
                OBSMUX0_W { w: self }
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&mut self) -> ADC_FIFO_ALMOST_FULL_W {
                ADC_FIFO_ALMOST_FULL_W { w: self }
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&mut self) -> SMPH_AUTOTAKE_DONE_W {
                SMPH_AUTOTAKE_DONE_W { w: self }
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&mut self) -> AON_WU_EV_W {
                AON_WU_EV_W { w: self }
            }
        }
    }
    #[doc = "Combined Event To MCU Domain Mask Selects which of the flags In EVTOMCUFLAGS that contribute to the AUX_COMB event to the MCU domain The AUX_COMB event is asserted as long as one or more of the included event flags are set.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [combevtomcumask](combevtomcumask) module"]
    pub type COMBEVTOMCUMASK = crate::Reg<u32, _COMBEVTOMCUMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _COMBEVTOMCUMASK;
    #[doc = "`read()` method returns [combevtomcumask::R](combevtomcumask::R) reader structure"]
    impl crate::Readable for COMBEVTOMCUMASK {}
    #[doc = "`write(|w| ..)` method takes [combevtomcumask::W](combevtomcumask::W) writer structure"]
    impl crate::Writable for COMBEVTOMCUMASK {}
    #[doc = "Combined Event To MCU Domain Mask Selects which of the flags In EVTOMCUFLAGS that contribute to the AUX_COMB event to the MCU domain The AUX_COMB event is asserted as long as one or more of the included event flags are set."]
    pub mod combevtomcumask {
        #[doc = "Reader of register COMBEVTOMCUMASK"]
        pub type R = crate::R<u32, super::COMBEVTOMCUMASK>;
        #[doc = "Writer for register COMBEVTOMCUMASK"]
        pub type W = crate::W<u32, super::COMBEVTOMCUMASK>;
        #[doc = "Register COMBEVTOMCUMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::COMBEVTOMCUMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADC_IRQ`"]
        pub type ADC_IRQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_IRQ`"]
        pub struct ADC_IRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_IRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OBSMUX0`"]
        pub type OBSMUX0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBSMUX0`"]
        pub struct OBSMUX0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBSMUX0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_FIFO_ALMOST_FULL`"]
        pub type ADC_FIFO_ALMOST_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_FIFO_ALMOST_FULL`"]
        pub struct ADC_FIFO_ALMOST_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_FIFO_ALMOST_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SMPH_AUTOTAKE_DONE`"]
        pub type SMPH_AUTOTAKE_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPH_AUTOTAKE_DONE`"]
        pub struct SMPH_AUTOTAKE_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_AUTOTAKE_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AON_WU_EV`"]
        pub type AON_WU_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_WU_EV`"]
        pub struct AON_WU_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_WU_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&self) -> ADC_IRQ_R {
                ADC_IRQ_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&self) -> OBSMUX0_R {
                OBSMUX0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&self) -> ADC_FIFO_ALMOST_FULL_R {
                ADC_FIFO_ALMOST_FULL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&self) -> SMPH_AUTOTAKE_DONE_R {
                SMPH_AUTOTAKE_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&self) -> AON_WU_EV_R {
                AON_WU_EV_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&mut self) -> ADC_IRQ_W {
                ADC_IRQ_W { w: self }
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&mut self) -> OBSMUX0_W {
                OBSMUX0_W { w: self }
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&mut self) -> ADC_FIFO_ALMOST_FULL_W {
                ADC_FIFO_ALMOST_FULL_W { w: self }
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&mut self) -> SMPH_AUTOTAKE_DONE_W {
                SMPH_AUTOTAKE_DONE_W { w: self }
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&mut self) -> AON_WU_EV_W {
                AON_WU_EV_W { w: self }
            }
        }
    }
    #[doc = "Vector Flags If a vector flag has been set and AUX_SCE is sleeping, it will wake up and execute the vector. If multiple vectors have been set, the one with the lowest index will execute first, and the next after returning to sleep. During execution of a vector, the flag must be cleared, by writing a 1 to the corresponding bit in VECFLAGSCLR.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vecflags](vecflags) module"]
    pub type VECFLAGS = crate::Reg<u32, _VECFLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VECFLAGS;
    #[doc = "`read()` method returns [vecflags::R](vecflags::R) reader structure"]
    impl crate::Readable for VECFLAGS {}
    #[doc = "`write(|w| ..)` method takes [vecflags::W](vecflags::W) writer structure"]
    impl crate::Writable for VECFLAGS {}
    #[doc = "Vector Flags If a vector flag has been set and AUX_SCE is sleeping, it will wake up and execute the vector. If multiple vectors have been set, the one with the lowest index will execute first, and the next after returning to sleep. During execution of a vector, the flag must be cleared, by writing a 1 to the corresponding bit in VECFLAGSCLR."]
    pub mod vecflags {
        #[doc = "Reader of register VECFLAGS"]
        pub type R = crate::R<u32, super::VECFLAGS>;
        #[doc = "Writer for register VECFLAGS"]
        pub type W = crate::W<u32, super::VECFLAGS>;
        #[doc = "Register VECFLAGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::VECFLAGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VEC3`"]
        pub type VEC3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC3`"]
        pub struct VEC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `VEC2`"]
        pub type VEC2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC2`"]
        pub struct VEC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `VEC1`"]
        pub type VEC1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC1`"]
        pub struct VEC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `VEC0`"]
        pub type VEC0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC0`"]
        pub struct VEC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - VEC3"]
            #[inline(always)]
            pub fn vec3(&self) -> VEC3_R {
                VEC3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - VEC2"]
            #[inline(always)]
            pub fn vec2(&self) -> VEC2_R {
                VEC2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - VEC1"]
            #[inline(always)]
            pub fn vec1(&self) -> VEC1_R {
                VEC1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - VEC0"]
            #[inline(always)]
            pub fn vec0(&self) -> VEC0_R {
                VEC0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - VEC3"]
            #[inline(always)]
            pub fn vec3(&mut self) -> VEC3_W {
                VEC3_W { w: self }
            }
            #[doc = "Bit 2 - VEC2"]
            #[inline(always)]
            pub fn vec2(&mut self) -> VEC2_W {
                VEC2_W { w: self }
            }
            #[doc = "Bit 1 - VEC1"]
            #[inline(always)]
            pub fn vec1(&mut self) -> VEC1_W {
                VEC1_W { w: self }
            }
            #[doc = "Bit 0 - VEC0"]
            #[inline(always)]
            pub fn vec0(&mut self) -> VEC0_W {
                VEC0_W { w: self }
            }
        }
    }
    #[doc = "Events To MCU Domain Flags Clear Strobes for clearing flags in EVTOMCUFLAGS.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtomcuflagsclr](evtomcuflagsclr) module"]
    pub type EVTOMCUFLAGSCLR = crate::Reg<u32, _EVTOMCUFLAGSCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOMCUFLAGSCLR;
    #[doc = "`read()` method returns [evtomcuflagsclr::R](evtomcuflagsclr::R) reader structure"]
    impl crate::Readable for EVTOMCUFLAGSCLR {}
    #[doc = "`write(|w| ..)` method takes [evtomcuflagsclr::W](evtomcuflagsclr::W) writer structure"]
    impl crate::Writable for EVTOMCUFLAGSCLR {}
    #[doc = "Events To MCU Domain Flags Clear Strobes for clearing flags in EVTOMCUFLAGS."]
    pub mod evtomcuflagsclr {
        #[doc = "Reader of register EVTOMCUFLAGSCLR"]
        pub type R = crate::R<u32, super::EVTOMCUFLAGSCLR>;
        #[doc = "Writer for register EVTOMCUFLAGSCLR"]
        pub type W = crate::W<u32, super::EVTOMCUFLAGSCLR>;
        #[doc = "Register EVTOMCUFLAGSCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVTOMCUFLAGSCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADC_IRQ`"]
        pub type ADC_IRQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_IRQ`"]
        pub struct ADC_IRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_IRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OBSMUX0`"]
        pub type OBSMUX0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBSMUX0`"]
        pub struct OBSMUX0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBSMUX0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_FIFO_ALMOST_FULL`"]
        pub type ADC_FIFO_ALMOST_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_FIFO_ALMOST_FULL`"]
        pub struct ADC_FIFO_ALMOST_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_FIFO_ALMOST_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SMPH_AUTOTAKE_DONE`"]
        pub type SMPH_AUTOTAKE_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPH_AUTOTAKE_DONE`"]
        pub struct SMPH_AUTOTAKE_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_AUTOTAKE_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AON_WU_EV`"]
        pub type AON_WU_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_WU_EV`"]
        pub struct AON_WU_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_WU_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&self) -> ADC_IRQ_R {
                ADC_IRQ_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&self) -> OBSMUX0_R {
                OBSMUX0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&self) -> ADC_FIFO_ALMOST_FULL_R {
                ADC_FIFO_ALMOST_FULL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&self) -> SMPH_AUTOTAKE_DONE_R {
                SMPH_AUTOTAKE_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&self) -> AON_WU_EV_R {
                AON_WU_EV_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - ADC_IRQ"]
            #[inline(always)]
            pub fn adc_irq(&mut self) -> ADC_IRQ_W {
                ADC_IRQ_W { w: self }
            }
            #[doc = "Bit 9 - OBSMUX0"]
            #[inline(always)]
            pub fn obsmux0(&mut self) -> OBSMUX0_W {
                OBSMUX0_W { w: self }
            }
            #[doc = "Bit 8 - ADC_FIFO_ALMOST_FULL"]
            #[inline(always)]
            pub fn adc_fifo_almost_full(&mut self) -> ADC_FIFO_ALMOST_FULL_W {
                ADC_FIFO_ALMOST_FULL_W { w: self }
            }
            #[doc = "Bit 7 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 6 - SMPH_AUTOTAKE_DONE"]
            #[inline(always)]
            pub fn smph_autotake_done(&mut self) -> SMPH_AUTOTAKE_DONE_W {
                SMPH_AUTOTAKE_DONE_W { w: self }
            }
            #[doc = "Bit 5 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 4 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 3 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 2 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 1 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
            #[doc = "Bit 0 - AON_WU_EV"]
            #[inline(always)]
            pub fn aon_wu_ev(&mut self) -> AON_WU_EV_W {
                AON_WU_EV_W { w: self }
            }
        }
    }
    #[doc = "Events To AON Domain Clear Strobes for clearing flags in EVTOAONFLAGS.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evtoaonflagsclr](evtoaonflagsclr) module"]
    pub type EVTOAONFLAGSCLR = crate::Reg<u32, _EVTOAONFLAGSCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVTOAONFLAGSCLR;
    #[doc = "`read()` method returns [evtoaonflagsclr::R](evtoaonflagsclr::R) reader structure"]
    impl crate::Readable for EVTOAONFLAGSCLR {}
    #[doc = "`write(|w| ..)` method takes [evtoaonflagsclr::W](evtoaonflagsclr::W) writer structure"]
    impl crate::Writable for EVTOAONFLAGSCLR {}
    #[doc = "Events To AON Domain Clear Strobes for clearing flags in EVTOAONFLAGS."]
    pub mod evtoaonflagsclr {
        #[doc = "Reader of register EVTOAONFLAGSCLR"]
        pub type R = crate::R<u32, super::EVTOAONFLAGSCLR>;
        #[doc = "Writer for register EVTOAONFLAGSCLR"]
        pub type W = crate::W<u32, super::EVTOAONFLAGSCLR>;
        #[doc = "Register EVTOAONFLAGSCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVTOAONFLAGSCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIMER1_EV`"]
        pub type TIMER1_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER1_EV`"]
        pub struct TIMER1_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER1_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER0_EV`"]
        pub type TIMER0_EV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER0_EV`"]
        pub struct TIMER0_EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER0_EV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TDC_DONE`"]
        pub type TDC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC_DONE`"]
        pub struct TDC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ADC_DONE`"]
        pub type ADC_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADC_DONE`"]
        pub struct ADC_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPB`"]
        pub type AUX_COMPB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPB`"]
        pub struct AUX_COMPB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_COMPA`"]
        pub type AUX_COMPA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_COMPA`"]
        pub struct AUX_COMPA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_COMPA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV2`"]
        pub type SWEV2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV2`"]
        pub struct SWEV2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV1`"]
        pub type SWEV1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV1`"]
        pub struct SWEV1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV0`"]
        pub type SWEV0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV0`"]
        pub struct SWEV0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&self) -> TIMER1_EV_R {
                TIMER1_EV_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&self) -> TIMER0_EV_R {
                TIMER0_EV_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&self) -> TDC_DONE_R {
                TDC_DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&self) -> ADC_DONE_R {
                ADC_DONE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&self) -> AUX_COMPB_R {
                AUX_COMPB_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&self) -> AUX_COMPA_R {
                AUX_COMPA_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&self) -> SWEV2_R {
                SWEV2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&self) -> SWEV1_R {
                SWEV1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&self) -> SWEV0_R {
                SWEV0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - TIMER1_EV"]
            #[inline(always)]
            pub fn timer1_ev(&mut self) -> TIMER1_EV_W {
                TIMER1_EV_W { w: self }
            }
            #[doc = "Bit 7 - TIMER0_EV"]
            #[inline(always)]
            pub fn timer0_ev(&mut self) -> TIMER0_EV_W {
                TIMER0_EV_W { w: self }
            }
            #[doc = "Bit 6 - TDC_DONE"]
            #[inline(always)]
            pub fn tdc_done(&mut self) -> TDC_DONE_W {
                TDC_DONE_W { w: self }
            }
            #[doc = "Bit 5 - ADC_DONE"]
            #[inline(always)]
            pub fn adc_done(&mut self) -> ADC_DONE_W {
                ADC_DONE_W { w: self }
            }
            #[doc = "Bit 4 - AUX_COMPB"]
            #[inline(always)]
            pub fn aux_compb(&mut self) -> AUX_COMPB_W {
                AUX_COMPB_W { w: self }
            }
            #[doc = "Bit 3 - AUX_COMPA"]
            #[inline(always)]
            pub fn aux_compa(&mut self) -> AUX_COMPA_W {
                AUX_COMPA_W { w: self }
            }
            #[doc = "Bit 2 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&mut self) -> SWEV2_W {
                SWEV2_W { w: self }
            }
            #[doc = "Bit 1 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&mut self) -> SWEV1_W {
                SWEV1_W { w: self }
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&mut self) -> SWEV0_W {
                SWEV0_W { w: self }
            }
        }
    }
    #[doc = "Vector Flags Clear Strobes for clearing flags in VECFLAGS.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vecflagsclr](vecflagsclr) module"]
    pub type VECFLAGSCLR = crate::Reg<u32, _VECFLAGSCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VECFLAGSCLR;
    #[doc = "`read()` method returns [vecflagsclr::R](vecflagsclr::R) reader structure"]
    impl crate::Readable for VECFLAGSCLR {}
    #[doc = "`write(|w| ..)` method takes [vecflagsclr::W](vecflagsclr::W) writer structure"]
    impl crate::Writable for VECFLAGSCLR {}
    #[doc = "Vector Flags Clear Strobes for clearing flags in VECFLAGS."]
    pub mod vecflagsclr {
        #[doc = "Reader of register VECFLAGSCLR"]
        pub type R = crate::R<u32, super::VECFLAGSCLR>;
        #[doc = "Writer for register VECFLAGSCLR"]
        pub type W = crate::W<u32, super::VECFLAGSCLR>;
        #[doc = "Register VECFLAGSCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::VECFLAGSCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VEC3`"]
        pub type VEC3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC3`"]
        pub struct VEC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `VEC2`"]
        pub type VEC2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC2`"]
        pub struct VEC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `VEC1`"]
        pub type VEC1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC1`"]
        pub struct VEC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `VEC0`"]
        pub type VEC0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VEC0`"]
        pub struct VEC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VEC0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - VEC3"]
            #[inline(always)]
            pub fn vec3(&self) -> VEC3_R {
                VEC3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - VEC2"]
            #[inline(always)]
            pub fn vec2(&self) -> VEC2_R {
                VEC2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - VEC1"]
            #[inline(always)]
            pub fn vec1(&self) -> VEC1_R {
                VEC1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - VEC0"]
            #[inline(always)]
            pub fn vec0(&self) -> VEC0_R {
                VEC0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - VEC3"]
            #[inline(always)]
            pub fn vec3(&mut self) -> VEC3_W {
                VEC3_W { w: self }
            }
            #[doc = "Bit 2 - VEC2"]
            #[inline(always)]
            pub fn vec2(&mut self) -> VEC2_W {
                VEC2_W { w: self }
            }
            #[doc = "Bit 1 - VEC1"]
            #[inline(always)]
            pub fn vec1(&mut self) -> VEC1_W {
                VEC1_W { w: self }
            }
            #[doc = "Bit 0 - VEC0"]
            #[inline(always)]
            pub fn vec0(&mut self) -> VEC0_W {
                VEC0_W { w: self }
            }
        }
    }
}
#[doc = "AUX Sensor Control Engine Control Module"]
pub struct AUX_SCE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_SCE {}
impl AUX_SCE {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_sce::RegisterBlock {
        0x400e_1000 as *const _
    }
}
impl Deref for AUX_SCE {
    type Target = aux_sce::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_SCE::ptr() }
    }
}
#[doc = "AUX Sensor Control Engine Control Module"]
pub mod aux_sce {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Internal. Only to be used through TI provided API."]
        pub ctl: CTL,
        #[doc = "0x04 - Internal. Only to be used through TI provided API."]
        pub fetchstat: FETCHSTAT,
        #[doc = "0x08 - Internal. Only to be used through TI provided API."]
        pub cpustat: CPUSTAT,
        #[doc = "0x0c - Internal. Only to be used through TI provided API."]
        pub wustat: WUSTAT,
        #[doc = "0x10 - Internal. Only to be used through TI provided API."]
        pub reg1_0: REG1_0,
        #[doc = "0x14 - Internal. Only to be used through TI provided API."]
        pub reg3_2: REG3_2,
        #[doc = "0x18 - Internal. Only to be used through TI provided API."]
        pub reg5_4: REG5_4,
        #[doc = "0x1c - Internal. Only to be used through TI provided API."]
        pub reg7_6: REG7_6,
        #[doc = "0x20 - Internal. Only to be used through TI provided API."]
        pub loopaddr: LOOPADDR,
        #[doc = "0x24 - Internal. Only to be used through TI provided API."]
        pub loopcnt: LOOPCNT,
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FORCE_EV_LOW`"]
        pub type FORCE_EV_LOW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FORCE_EV_LOW`"]
        pub struct FORCE_EV_LOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FORCE_EV_LOW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `FORCE_EV_HIGH`"]
        pub type FORCE_EV_HIGH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FORCE_EV_HIGH`"]
        pub struct FORCE_EV_HIGH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FORCE_EV_HIGH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `RESET_VECTOR`"]
        pub type RESET_VECTOR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RESET_VECTOR`"]
        pub struct RESET_VECTOR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_VECTOR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_FREEZE_EN`"]
        pub type DBG_FREEZE_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_FREEZE_EN`"]
        pub struct DBG_FREEZE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_FREEZE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `FORCE_WU_LOW`"]
        pub type FORCE_WU_LOW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FORCE_WU_LOW`"]
        pub struct FORCE_WU_LOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FORCE_WU_LOW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `FORCE_WU_HIGH`"]
        pub type FORCE_WU_HIGH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FORCE_WU_HIGH`"]
        pub struct FORCE_WU_HIGH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FORCE_WU_HIGH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RESTART`"]
        pub type RESTART_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESTART`"]
        pub struct RESTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SINGLE_STEP`"]
        pub type SINGLE_STEP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SINGLE_STEP`"]
        pub struct SINGLE_STEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SINGLE_STEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SUSPEND`"]
        pub type SUSPEND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SUSPEND`"]
        pub struct SUSPEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSPEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:31 - FORCE_EV_LOW"]
            #[inline(always)]
            pub fn force_ev_low(&self) -> FORCE_EV_LOW_R {
                FORCE_EV_LOW_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - FORCE_EV_HIGH"]
            #[inline(always)]
            pub fn force_ev_high(&self) -> FORCE_EV_HIGH_R {
                FORCE_EV_HIGH_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:11 - RESET_VECTOR"]
            #[inline(always)]
            pub fn reset_vector(&self) -> RESET_VECTOR_R {
                RESET_VECTOR_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 6 - DBG_FREEZE_EN"]
            #[inline(always)]
            pub fn dbg_freeze_en(&self) -> DBG_FREEZE_EN_R {
                DBG_FREEZE_EN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - FORCE_WU_LOW"]
            #[inline(always)]
            pub fn force_wu_low(&self) -> FORCE_WU_LOW_R {
                FORCE_WU_LOW_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - FORCE_WU_HIGH"]
            #[inline(always)]
            pub fn force_wu_high(&self) -> FORCE_WU_HIGH_R {
                FORCE_WU_HIGH_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RESTART"]
            #[inline(always)]
            pub fn restart(&self) -> RESTART_R {
                RESTART_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SINGLE_STEP"]
            #[inline(always)]
            pub fn single_step(&self) -> SINGLE_STEP_R {
                SINGLE_STEP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SUSPEND"]
            #[inline(always)]
            pub fn suspend(&self) -> SUSPEND_R {
                SUSPEND_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - FORCE_EV_LOW"]
            #[inline(always)]
            pub fn force_ev_low(&mut self) -> FORCE_EV_LOW_W {
                FORCE_EV_LOW_W { w: self }
            }
            #[doc = "Bits 16:23 - FORCE_EV_HIGH"]
            #[inline(always)]
            pub fn force_ev_high(&mut self) -> FORCE_EV_HIGH_W {
                FORCE_EV_HIGH_W { w: self }
            }
            #[doc = "Bits 8:11 - RESET_VECTOR"]
            #[inline(always)]
            pub fn reset_vector(&mut self) -> RESET_VECTOR_W {
                RESET_VECTOR_W { w: self }
            }
            #[doc = "Bit 6 - DBG_FREEZE_EN"]
            #[inline(always)]
            pub fn dbg_freeze_en(&mut self) -> DBG_FREEZE_EN_W {
                DBG_FREEZE_EN_W { w: self }
            }
            #[doc = "Bit 5 - FORCE_WU_LOW"]
            #[inline(always)]
            pub fn force_wu_low(&mut self) -> FORCE_WU_LOW_W {
                FORCE_WU_LOW_W { w: self }
            }
            #[doc = "Bit 4 - FORCE_WU_HIGH"]
            #[inline(always)]
            pub fn force_wu_high(&mut self) -> FORCE_WU_HIGH_W {
                FORCE_WU_HIGH_W { w: self }
            }
            #[doc = "Bit 3 - RESTART"]
            #[inline(always)]
            pub fn restart(&mut self) -> RESTART_W {
                RESTART_W { w: self }
            }
            #[doc = "Bit 2 - SINGLE_STEP"]
            #[inline(always)]
            pub fn single_step(&mut self) -> SINGLE_STEP_W {
                SINGLE_STEP_W { w: self }
            }
            #[doc = "Bit 1 - SUSPEND"]
            #[inline(always)]
            pub fn suspend(&mut self) -> SUSPEND_W {
                SUSPEND_W { w: self }
            }
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fetchstat](fetchstat) module"]
    pub type FETCHSTAT = crate::Reg<u32, _FETCHSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FETCHSTAT;
    #[doc = "`read()` method returns [fetchstat::R](fetchstat::R) reader structure"]
    impl crate::Readable for FETCHSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fetchstat {
        #[doc = "Reader of register FETCHSTAT"]
        pub type R = crate::R<u32, super::FETCHSTAT>;
        #[doc = "Reader of field `OPCODE`"]
        pub type OPCODE_R = crate::R<u16, u16>;
        #[doc = "Reader of field `PC`"]
        pub type PC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - OPCODE"]
            #[inline(always)]
            pub fn opcode(&self) -> OPCODE_R {
                OPCODE_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - PC"]
            #[inline(always)]
            pub fn pc(&self) -> PC_R {
                PC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpustat](cpustat) module"]
    pub type CPUSTAT = crate::Reg<u32, _CPUSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUSTAT;
    #[doc = "`read()` method returns [cpustat::R](cpustat::R) reader structure"]
    impl crate::Readable for CPUSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod cpustat {
        #[doc = "Reader of register CPUSTAT"]
        pub type R = crate::R<u32, super::CPUSTAT>;
        #[doc = "Reader of field `BUS_ERROR`"]
        pub type BUS_ERROR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SLEEP`"]
        pub type SLEEP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WEV`"]
        pub type WEV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SELF_STOP`"]
        pub type SELF_STOP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `V_FLAG`"]
        pub type V_FLAG_R = crate::R<bool, bool>;
        #[doc = "Reader of field `C_FLAG`"]
        pub type C_FLAG_R = crate::R<bool, bool>;
        #[doc = "Reader of field `N_FLAG`"]
        pub type N_FLAG_R = crate::R<bool, bool>;
        #[doc = "Reader of field `Z_FLAG`"]
        pub type Z_FLAG_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 11 - BUS_ERROR"]
            #[inline(always)]
            pub fn bus_error(&self) -> BUS_ERROR_R {
                BUS_ERROR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - SLEEP"]
            #[inline(always)]
            pub fn sleep(&self) -> SLEEP_R {
                SLEEP_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WEV"]
            #[inline(always)]
            pub fn wev(&self) -> WEV_R {
                WEV_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - SELF_STOP"]
            #[inline(always)]
            pub fn self_stop(&self) -> SELF_STOP_R {
                SELF_STOP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 3 - V_FLAG"]
            #[inline(always)]
            pub fn v_flag(&self) -> V_FLAG_R {
                V_FLAG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - C_FLAG"]
            #[inline(always)]
            pub fn c_flag(&self) -> C_FLAG_R {
                C_FLAG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - N_FLAG"]
            #[inline(always)]
            pub fn n_flag(&self) -> N_FLAG_R {
                N_FLAG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Z_FLAG"]
            #[inline(always)]
            pub fn z_flag(&self) -> Z_FLAG_R {
                Z_FLAG_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wustat](wustat) module"]
    pub type WUSTAT = crate::Reg<u32, _WUSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WUSTAT;
    #[doc = "`read()` method returns [wustat::R](wustat::R) reader structure"]
    impl crate::Readable for WUSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod wustat {
        #[doc = "Reader of register WUSTAT"]
        pub type R = crate::R<u32, super::WUSTAT>;
        #[doc = "Reader of field `EXC_VECTOR`"]
        pub type EXC_VECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `WU_SIGNAL`"]
        pub type WU_SIGNAL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EV_SIGNALS`"]
        pub type EV_SIGNALS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:17 - EXC_VECTOR"]
            #[inline(always)]
            pub fn exc_vector(&self) -> EXC_VECTOR_R {
                EXC_VECTOR_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bit 8 - WU_SIGNAL"]
            #[inline(always)]
            pub fn wu_signal(&self) -> WU_SIGNAL_R {
                WU_SIGNAL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - EV_SIGNALS"]
            #[inline(always)]
            pub fn ev_signals(&self) -> EV_SIGNALS_R {
                EV_SIGNALS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reg1_0](reg1_0) module"]
    pub type REG1_0 = crate::Reg<u32, _REG1_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _REG1_0;
    #[doc = "`read()` method returns [reg1_0::R](reg1_0::R) reader structure"]
    impl crate::Readable for REG1_0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod reg1_0 {
        #[doc = "Reader of register REG1_0"]
        pub type R = crate::R<u32, super::REG1_0>;
        #[doc = "Reader of field `REG1`"]
        pub type REG1_R = crate::R<u16, u16>;
        #[doc = "Reader of field `REG0`"]
        pub type REG0_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - REG1"]
            #[inline(always)]
            pub fn reg1(&self) -> REG1_R {
                REG1_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - REG0"]
            #[inline(always)]
            pub fn reg0(&self) -> REG0_R {
                REG0_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reg3_2](reg3_2) module"]
    pub type REG3_2 = crate::Reg<u32, _REG3_2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _REG3_2;
    #[doc = "`read()` method returns [reg3_2::R](reg3_2::R) reader structure"]
    impl crate::Readable for REG3_2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod reg3_2 {
        #[doc = "Reader of register REG3_2"]
        pub type R = crate::R<u32, super::REG3_2>;
        #[doc = "Reader of field `REG3`"]
        pub type REG3_R = crate::R<u16, u16>;
        #[doc = "Reader of field `REG2`"]
        pub type REG2_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - REG3"]
            #[inline(always)]
            pub fn reg3(&self) -> REG3_R {
                REG3_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - REG2"]
            #[inline(always)]
            pub fn reg2(&self) -> REG2_R {
                REG2_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reg5_4](reg5_4) module"]
    pub type REG5_4 = crate::Reg<u32, _REG5_4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _REG5_4;
    #[doc = "`read()` method returns [reg5_4::R](reg5_4::R) reader structure"]
    impl crate::Readable for REG5_4 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod reg5_4 {
        #[doc = "Reader of register REG5_4"]
        pub type R = crate::R<u32, super::REG5_4>;
        #[doc = "Reader of field `REG5`"]
        pub type REG5_R = crate::R<u16, u16>;
        #[doc = "Reader of field `REG4`"]
        pub type REG4_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - REG5"]
            #[inline(always)]
            pub fn reg5(&self) -> REG5_R {
                REG5_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - REG4"]
            #[inline(always)]
            pub fn reg4(&self) -> REG4_R {
                REG4_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reg7_6](reg7_6) module"]
    pub type REG7_6 = crate::Reg<u32, _REG7_6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _REG7_6;
    #[doc = "`read()` method returns [reg7_6::R](reg7_6::R) reader structure"]
    impl crate::Readable for REG7_6 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod reg7_6 {
        #[doc = "Reader of register REG7_6"]
        pub type R = crate::R<u32, super::REG7_6>;
        #[doc = "Reader of field `REG7`"]
        pub type REG7_R = crate::R<u16, u16>;
        #[doc = "Reader of field `REG6`"]
        pub type REG6_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - REG7"]
            #[inline(always)]
            pub fn reg7(&self) -> REG7_R {
                REG7_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - REG6"]
            #[inline(always)]
            pub fn reg6(&self) -> REG6_R {
                REG6_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [loopaddr](loopaddr) module"]
    pub type LOOPADDR = crate::Reg<u32, _LOOPADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LOOPADDR;
    #[doc = "`read()` method returns [loopaddr::R](loopaddr::R) reader structure"]
    impl crate::Readable for LOOPADDR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod loopaddr {
        #[doc = "Reader of register LOOPADDR"]
        pub type R = crate::R<u32, super::LOOPADDR>;
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<u16, u16>;
        #[doc = "Reader of field `START`"]
        pub type START_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - STOP"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - START"]
            #[inline(always)]
            pub fn start(&self) -> START_R {
                START_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [loopcnt](loopcnt) module"]
    pub type LOOPCNT = crate::Reg<u32, _LOOPCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LOOPCNT;
    #[doc = "`read()` method returns [loopcnt::R](loopcnt::R) reader structure"]
    impl crate::Readable for LOOPCNT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod loopcnt {
        #[doc = "Reader of register LOOPCNT"]
        pub type R = crate::R<u32, super::LOOPCNT>;
        #[doc = "Reader of field `ITER_LEFT`"]
        pub type ITER_LEFT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - ITER_LEFT"]
            #[inline(always)]
            pub fn iter_left(&self) -> ITER_LEFT_R {
                ITER_LEFT_R::new((self.bits & 0xff) as u8)
            }
        }
    }
}
#[doc = "AUX Semaphore Controller"]
pub struct AUX_SMPH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_SMPH {}
impl AUX_SMPH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_smph::RegisterBlock {
        0x400c_8000 as *const _
    }
}
impl Deref for AUX_SMPH {
    type Target = aux_smph::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_SMPH::ptr() }
    }
}
#[doc = "AUX Semaphore Controller"]
pub mod aux_smph {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Semaphore 0"]
        pub smph0: SMPH0,
        #[doc = "0x04 - Semaphore 1"]
        pub smph1: SMPH1,
        #[doc = "0x08 - Semaphore 2"]
        pub smph2: SMPH2,
        #[doc = "0x0c - Semaphore 3"]
        pub smph3: SMPH3,
        #[doc = "0x10 - Semaphore 4"]
        pub smph4: SMPH4,
        #[doc = "0x14 - Semaphore 5"]
        pub smph5: SMPH5,
        #[doc = "0x18 - Semaphore 6"]
        pub smph6: SMPH6,
        #[doc = "0x1c - Semaphore 7"]
        pub smph7: SMPH7,
        #[doc = "0x20 - Sticky Request For Single Semaphore"]
        pub autotake: AUTOTAKE,
    }
    #[doc = "Semaphore 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph0](smph0) module"]
    pub type SMPH0 = crate::Reg<u32, _SMPH0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH0;
    #[doc = "`read()` method returns [smph0::R](smph0::R) reader structure"]
    impl crate::Readable for SMPH0 {}
    #[doc = "`write(|w| ..)` method takes [smph0::W](smph0::W) writer structure"]
    impl crate::Writable for SMPH0 {}
    #[doc = "Semaphore 0"]
    pub mod smph0 {
        #[doc = "Reader of register SMPH0"]
        pub type R = crate::R<u32, super::SMPH0>;
        #[doc = "Writer for register SMPH0"]
        pub type W = crate::W<u32, super::SMPH0>;
        #[doc = "Register SMPH0 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph1](smph1) module"]
    pub type SMPH1 = crate::Reg<u32, _SMPH1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH1;
    #[doc = "`read()` method returns [smph1::R](smph1::R) reader structure"]
    impl crate::Readable for SMPH1 {}
    #[doc = "`write(|w| ..)` method takes [smph1::W](smph1::W) writer structure"]
    impl crate::Writable for SMPH1 {}
    #[doc = "Semaphore 1"]
    pub mod smph1 {
        #[doc = "Reader of register SMPH1"]
        pub type R = crate::R<u32, super::SMPH1>;
        #[doc = "Writer for register SMPH1"]
        pub type W = crate::W<u32, super::SMPH1>;
        #[doc = "Register SMPH1 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph2](smph2) module"]
    pub type SMPH2 = crate::Reg<u32, _SMPH2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH2;
    #[doc = "`read()` method returns [smph2::R](smph2::R) reader structure"]
    impl crate::Readable for SMPH2 {}
    #[doc = "`write(|w| ..)` method takes [smph2::W](smph2::W) writer structure"]
    impl crate::Writable for SMPH2 {}
    #[doc = "Semaphore 2"]
    pub mod smph2 {
        #[doc = "Reader of register SMPH2"]
        pub type R = crate::R<u32, super::SMPH2>;
        #[doc = "Writer for register SMPH2"]
        pub type W = crate::W<u32, super::SMPH2>;
        #[doc = "Register SMPH2 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph3](smph3) module"]
    pub type SMPH3 = crate::Reg<u32, _SMPH3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH3;
    #[doc = "`read()` method returns [smph3::R](smph3::R) reader structure"]
    impl crate::Readable for SMPH3 {}
    #[doc = "`write(|w| ..)` method takes [smph3::W](smph3::W) writer structure"]
    impl crate::Writable for SMPH3 {}
    #[doc = "Semaphore 3"]
    pub mod smph3 {
        #[doc = "Reader of register SMPH3"]
        pub type R = crate::R<u32, super::SMPH3>;
        #[doc = "Writer for register SMPH3"]
        pub type W = crate::W<u32, super::SMPH3>;
        #[doc = "Register SMPH3 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph4](smph4) module"]
    pub type SMPH4 = crate::Reg<u32, _SMPH4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH4;
    #[doc = "`read()` method returns [smph4::R](smph4::R) reader structure"]
    impl crate::Readable for SMPH4 {}
    #[doc = "`write(|w| ..)` method takes [smph4::W](smph4::W) writer structure"]
    impl crate::Writable for SMPH4 {}
    #[doc = "Semaphore 4"]
    pub mod smph4 {
        #[doc = "Reader of register SMPH4"]
        pub type R = crate::R<u32, super::SMPH4>;
        #[doc = "Writer for register SMPH4"]
        pub type W = crate::W<u32, super::SMPH4>;
        #[doc = "Register SMPH4 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 5\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph5](smph5) module"]
    pub type SMPH5 = crate::Reg<u32, _SMPH5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH5;
    #[doc = "`read()` method returns [smph5::R](smph5::R) reader structure"]
    impl crate::Readable for SMPH5 {}
    #[doc = "`write(|w| ..)` method takes [smph5::W](smph5::W) writer structure"]
    impl crate::Writable for SMPH5 {}
    #[doc = "Semaphore 5"]
    pub mod smph5 {
        #[doc = "Reader of register SMPH5"]
        pub type R = crate::R<u32, super::SMPH5>;
        #[doc = "Writer for register SMPH5"]
        pub type W = crate::W<u32, super::SMPH5>;
        #[doc = "Register SMPH5 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 6\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph6](smph6) module"]
    pub type SMPH6 = crate::Reg<u32, _SMPH6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH6;
    #[doc = "`read()` method returns [smph6::R](smph6::R) reader structure"]
    impl crate::Readable for SMPH6 {}
    #[doc = "`write(|w| ..)` method takes [smph6::W](smph6::W) writer structure"]
    impl crate::Writable for SMPH6 {}
    #[doc = "Semaphore 6"]
    pub mod smph6 {
        #[doc = "Reader of register SMPH6"]
        pub type R = crate::R<u32, super::SMPH6>;
        #[doc = "Writer for register SMPH6"]
        pub type W = crate::W<u32, super::SMPH6>;
        #[doc = "Register SMPH6 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Semaphore 7\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph7](smph7) module"]
    pub type SMPH7 = crate::Reg<u32, _SMPH7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH7;
    #[doc = "`read()` method returns [smph7::R](smph7::R) reader structure"]
    impl crate::Readable for SMPH7 {}
    #[doc = "`write(|w| ..)` method takes [smph7::W](smph7::W) writer structure"]
    impl crate::Writable for SMPH7 {}
    #[doc = "Semaphore 7"]
    pub mod smph7 {
        #[doc = "Reader of register SMPH7"]
        pub type R = crate::R<u32, super::SMPH7>;
        #[doc = "Writer for register SMPH7"]
        pub type W = crate::W<u32, super::SMPH7>;
        #[doc = "Register SMPH7 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "Sticky Request For Single Semaphore\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [autotake](autotake) module"]
    pub type AUTOTAKE = crate::Reg<u32, _AUTOTAKE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUTOTAKE;
    #[doc = "`read()` method returns [autotake::R](autotake::R) reader structure"]
    impl crate::Readable for AUTOTAKE {}
    #[doc = "`write(|w| ..)` method takes [autotake::W](autotake::W) writer structure"]
    impl crate::Writable for AUTOTAKE {}
    #[doc = "Sticky Request For Single Semaphore"]
    pub mod autotake {
        #[doc = "Reader of register AUTOTAKE"]
        pub type R = crate::R<u32, super::AUTOTAKE>;
        #[doc = "Writer for register AUTOTAKE"]
        pub type W = crate::W<u32, super::AUTOTAKE>;
        #[doc = "Register AUTOTAKE `reset()`'s with value 0"]
        impl crate::ResetValue for super::AUTOTAKE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMPH_ID`"]
        pub type SMPH_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMPH_ID`"]
        pub struct SMPH_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - SMPH_ID"]
            #[inline(always)]
            pub fn smph_id(&self) -> SMPH_ID_R {
                SMPH_ID_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - SMPH_ID"]
            #[inline(always)]
            pub fn smph_id(&mut self) -> SMPH_ID_W {
                SMPH_ID_W { w: self }
            }
        }
    }
}
#[doc = "AUX Time To Digital Converter"]
pub struct AUX_TDCIF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_TDCIF {}
impl AUX_TDCIF {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_tdcif::RegisterBlock {
        0x400c_4000 as *const _
    }
}
impl Deref for AUX_TDCIF {
    type Target = aux_tdcif::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_TDCIF::ptr() }
    }
}
#[doc = "AUX Time To Digital Converter"]
pub mod aux_tdcif {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control"]
        pub ctl: CTL,
        #[doc = "0x04 - Status"]
        pub stat: STAT,
        #[doc = "0x08 - Result Result of last TDC conversion"]
        pub result: RESULT,
        #[doc = "0x0c - Saturation Configuration"]
        pub satcfg: SATCFG,
        #[doc = "0x10 - Trigger Source TDC start/stop trigger source selection"]
        pub trigsrc: TRIGSRC,
        #[doc = "0x14 - Trigger Counter Stop counter status/control of TDC"]
        pub trigcnt: TRIGCNT,
        #[doc = "0x18 - Trigger Counter Load Stop counter control of TDC"]
        pub trigcntload: TRIGCNTLOAD,
        #[doc = "0x1c - Trigger Counter Configuration"]
        pub trigcntcfg: TRIGCNTCFG,
        #[doc = "0x20 - Prescaler Control The prescaler can be used to count events that are faster than the AUX clock speed. It can be used standalone or as a start/stop source for the TDC by configuring TRIGSRC.START_SRC and TRIGSRC.STOP_SRC to TDC_PRE. When counting fast signals with the TDC that are faster than 1/10th of the clock frequency of AUX it is recommended to use the prescaler."]
        pub prectl: PRECTL,
        #[doc = "0x24 - Prescaler Counter Value of prescaler counter"]
        pub precnt: PRECNT,
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CMD`"]
        pub type CMD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CMD`"]
        pub struct CMD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - CMD"]
            #[inline(always)]
            pub fn cmd(&self) -> CMD_R {
                CMD_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - CMD"]
            #[inline(always)]
            pub fn cmd(&mut self) -> CMD_W {
                CMD_W { w: self }
            }
        }
    }
    #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat](stat) module"]
    pub type STAT = crate::Reg<u32, _STAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STAT;
    #[doc = "`read()` method returns [stat::R](stat::R) reader structure"]
    impl crate::Readable for STAT {}
    #[doc = "Status"]
    pub mod stat {
        #[doc = "Reader of register STAT"]
        pub type R = crate::R<u32, super::STAT>;
        #[doc = "Reader of field `SAT`"]
        pub type SAT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DONE`"]
        pub type DONE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STATE`"]
        pub type STATE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 7 - SAT"]
            #[inline(always)]
            pub fn sat(&self) -> SAT_R {
                SAT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DONE"]
            #[inline(always)]
            pub fn done(&self) -> DONE_R {
                DONE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 0:5 - STATE"]
            #[inline(always)]
            pub fn state(&self) -> STATE_R {
                STATE_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Result Result of last TDC conversion\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [result](result) module"]
    pub type RESULT = crate::Reg<u32, _RESULT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RESULT;
    #[doc = "`read()` method returns [result::R](result::R) reader structure"]
    impl crate::Readable for RESULT {}
    #[doc = "Result Result of last TDC conversion"]
    pub mod result {
        #[doc = "Reader of register RESULT"]
        pub type R = crate::R<u32, super::RESULT>;
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:24 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0x01ff_ffff) as u32)
            }
        }
    }
    #[doc = "Saturation Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [satcfg](satcfg) module"]
    pub type SATCFG = crate::Reg<u32, _SATCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SATCFG;
    #[doc = "`read()` method returns [satcfg::R](satcfg::R) reader structure"]
    impl crate::Readable for SATCFG {}
    #[doc = "`write(|w| ..)` method takes [satcfg::W](satcfg::W) writer structure"]
    impl crate::Writable for SATCFG {}
    #[doc = "Saturation Configuration"]
    pub mod satcfg {
        #[doc = "Reader of register SATCFG"]
        pub type R = crate::R<u32, super::SATCFG>;
        #[doc = "Writer for register SATCFG"]
        pub type W = crate::W<u32, super::SATCFG>;
        #[doc = "Register SATCFG `reset()`'s with value 0x0f"]
        impl crate::ResetValue for super::SATCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0f
            }
        }
        #[doc = "Reader of field `LIMIT`"]
        pub type LIMIT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LIMIT`"]
        pub struct LIMIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LIMIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - LIMIT"]
            #[inline(always)]
            pub fn limit(&self) -> LIMIT_R {
                LIMIT_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - LIMIT"]
            #[inline(always)]
            pub fn limit(&mut self) -> LIMIT_W {
                LIMIT_W { w: self }
            }
        }
    }
    #[doc = "Trigger Source TDC start/stop trigger source selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [trigsrc](trigsrc) module"]
    pub type TRIGSRC = crate::Reg<u32, _TRIGSRC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TRIGSRC;
    #[doc = "`read()` method returns [trigsrc::R](trigsrc::R) reader structure"]
    impl crate::Readable for TRIGSRC {}
    #[doc = "`write(|w| ..)` method takes [trigsrc::W](trigsrc::W) writer structure"]
    impl crate::Writable for TRIGSRC {}
    #[doc = "Trigger Source TDC start/stop trigger source selection"]
    pub mod trigsrc {
        #[doc = "Reader of register TRIGSRC"]
        pub type R = crate::R<u32, super::TRIGSRC>;
        #[doc = "Writer for register TRIGSRC"]
        pub type W = crate::W<u32, super::TRIGSRC>;
        #[doc = "Register TRIGSRC `reset()`'s with value 0"]
        impl crate::ResetValue for super::TRIGSRC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STOP_POL`"]
        pub type STOP_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STOP_POL`"]
        pub struct STOP_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `STOP_SRC`"]
        pub type STOP_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `STOP_SRC`"]
        pub struct STOP_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `START_POL`"]
        pub type START_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `START_POL`"]
        pub struct START_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `START_SRC`"]
        pub type START_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `START_SRC`"]
        pub struct START_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - STOP_POL"]
            #[inline(always)]
            pub fn stop_pol(&self) -> STOP_POL_R {
                STOP_POL_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - STOP_SRC"]
            #[inline(always)]
            pub fn stop_src(&self) -> STOP_SRC_R {
                STOP_SRC_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bit 5 - START_POL"]
            #[inline(always)]
            pub fn start_pol(&self) -> START_POL_R {
                START_POL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - START_SRC"]
            #[inline(always)]
            pub fn start_src(&self) -> START_SRC_R {
                START_SRC_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 13 - STOP_POL"]
            #[inline(always)]
            pub fn stop_pol(&mut self) -> STOP_POL_W {
                STOP_POL_W { w: self }
            }
            #[doc = "Bits 8:12 - STOP_SRC"]
            #[inline(always)]
            pub fn stop_src(&mut self) -> STOP_SRC_W {
                STOP_SRC_W { w: self }
            }
            #[doc = "Bit 5 - START_POL"]
            #[inline(always)]
            pub fn start_pol(&mut self) -> START_POL_W {
                START_POL_W { w: self }
            }
            #[doc = "Bits 0:4 - START_SRC"]
            #[inline(always)]
            pub fn start_src(&mut self) -> START_SRC_W {
                START_SRC_W { w: self }
            }
        }
    }
    #[doc = "Trigger Counter Stop counter status/control of TDC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [trigcnt](trigcnt) module"]
    pub type TRIGCNT = crate::Reg<u32, _TRIGCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TRIGCNT;
    #[doc = "`read()` method returns [trigcnt::R](trigcnt::R) reader structure"]
    impl crate::Readable for TRIGCNT {}
    #[doc = "`write(|w| ..)` method takes [trigcnt::W](trigcnt::W) writer structure"]
    impl crate::Writable for TRIGCNT {}
    #[doc = "Trigger Counter Stop counter status/control of TDC"]
    pub mod trigcnt {
        #[doc = "Reader of register TRIGCNT"]
        pub type R = crate::R<u32, super::TRIGCNT>;
        #[doc = "Writer for register TRIGCNT"]
        pub type W = crate::W<u32, super::TRIGCNT>;
        #[doc = "Register TRIGCNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::TRIGCNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "Trigger Counter Load Stop counter control of TDC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [trigcntload](trigcntload) module"]
    pub type TRIGCNTLOAD = crate::Reg<u32, _TRIGCNTLOAD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TRIGCNTLOAD;
    #[doc = "`read()` method returns [trigcntload::R](trigcntload::R) reader structure"]
    impl crate::Readable for TRIGCNTLOAD {}
    #[doc = "`write(|w| ..)` method takes [trigcntload::W](trigcntload::W) writer structure"]
    impl crate::Writable for TRIGCNTLOAD {}
    #[doc = "Trigger Counter Load Stop counter control of TDC"]
    pub mod trigcntload {
        #[doc = "Reader of register TRIGCNTLOAD"]
        pub type R = crate::R<u32, super::TRIGCNTLOAD>;
        #[doc = "Writer for register TRIGCNTLOAD"]
        pub type W = crate::W<u32, super::TRIGCNTLOAD>;
        #[doc = "Register TRIGCNTLOAD `reset()`'s with value 0"]
        impl crate::ResetValue for super::TRIGCNTLOAD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "Trigger Counter Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [trigcntcfg](trigcntcfg) module"]
    pub type TRIGCNTCFG = crate::Reg<u32, _TRIGCNTCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TRIGCNTCFG;
    #[doc = "`read()` method returns [trigcntcfg::R](trigcntcfg::R) reader structure"]
    impl crate::Readable for TRIGCNTCFG {}
    #[doc = "`write(|w| ..)` method takes [trigcntcfg::W](trigcntcfg::W) writer structure"]
    impl crate::Writable for TRIGCNTCFG {}
    #[doc = "Trigger Counter Configuration"]
    pub mod trigcntcfg {
        #[doc = "Reader of register TRIGCNTCFG"]
        pub type R = crate::R<u32, super::TRIGCNTCFG>;
        #[doc = "Writer for register TRIGCNTCFG"]
        pub type W = crate::W<u32, super::TRIGCNTCFG>;
        #[doc = "Register TRIGCNTCFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::TRIGCNTCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Prescaler Control The prescaler can be used to count events that are faster than the AUX clock speed. It can be used standalone or as a start/stop source for the TDC by configuring TRIGSRC.START_SRC and TRIGSRC.STOP_SRC to TDC_PRE. When counting fast signals with the TDC that are faster than 1/10th of the clock frequency of AUX it is recommended to use the prescaler.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [prectl](prectl) module"]
    pub type PRECTL = crate::Reg<u32, _PRECTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRECTL;
    #[doc = "`read()` method returns [prectl::R](prectl::R) reader structure"]
    impl crate::Readable for PRECTL {}
    #[doc = "`write(|w| ..)` method takes [prectl::W](prectl::W) writer structure"]
    impl crate::Writable for PRECTL {}
    #[doc = "Prescaler Control The prescaler can be used to count events that are faster than the AUX clock speed. It can be used standalone or as a start/stop source for the TDC by configuring TRIGSRC.START_SRC and TRIGSRC.STOP_SRC to TDC_PRE. When counting fast signals with the TDC that are faster than 1/10th of the clock frequency of AUX it is recommended to use the prescaler."]
    pub mod prectl {
        #[doc = "Reader of register PRECTL"]
        pub type R = crate::R<u32, super::PRECTL>;
        #[doc = "Writer for register PRECTL"]
        pub type W = crate::W<u32, super::PRECTL>;
        #[doc = "Register PRECTL `reset()`'s with value 0x1f"]
        impl crate::ResetValue for super::PRECTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1f
            }
        }
        #[doc = "Reader of field `RESET_N`"]
        pub type RESET_N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET_N`"]
        pub struct RESET_N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RATIO`"]
        pub type RATIO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATIO`"]
        pub struct RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATIO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SRC`"]
        pub type SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SRC`"]
        pub struct SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - RESET_N"]
            #[inline(always)]
            pub fn reset_n(&self) -> RESET_N_R {
                RESET_N_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RATIO"]
            #[inline(always)]
            pub fn ratio(&self) -> RATIO_R {
                RATIO_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - SRC"]
            #[inline(always)]
            pub fn src(&self) -> SRC_R {
                SRC_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - RESET_N"]
            #[inline(always)]
            pub fn reset_n(&mut self) -> RESET_N_W {
                RESET_N_W { w: self }
            }
            #[doc = "Bit 6 - RATIO"]
            #[inline(always)]
            pub fn ratio(&mut self) -> RATIO_W {
                RATIO_W { w: self }
            }
            #[doc = "Bits 0:4 - SRC"]
            #[inline(always)]
            pub fn src(&mut self) -> SRC_W {
                SRC_W { w: self }
            }
        }
    }
    #[doc = "Prescaler Counter Value of prescaler counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [precnt](precnt) module"]
    pub type PRECNT = crate::Reg<u32, _PRECNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRECNT;
    #[doc = "`read()` method returns [precnt::R](precnt::R) reader structure"]
    impl crate::Readable for PRECNT {}
    #[doc = "`write(|w| ..)` method takes [precnt::W](precnt::W) writer structure"]
    impl crate::Writable for PRECNT {}
    #[doc = "Prescaler Counter Value of prescaler counter"]
    pub mod precnt {
        #[doc = "Reader of register PRECNT"]
        pub type R = crate::R<u32, super::PRECNT>;
        #[doc = "Writer for register PRECNT"]
        pub type W = crate::W<u32, super::PRECNT>;
        #[doc = "Register PRECNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::PRECNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CNT"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
}
#[doc = "AUX Timer"]
pub struct AUX_TIMER {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_TIMER {}
impl AUX_TIMER {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_timer::RegisterBlock {
        0x400c_7000 as *const _
    }
}
impl Deref for AUX_TIMER {
    type Target = aux_timer::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_TIMER::ptr() }
    }
}
#[doc = "AUX Timer"]
pub mod aux_timer {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Timer 0 Configuration"]
        pub t0cfg: T0CFG,
        #[doc = "0x04 - Timer 1 Configuration"]
        pub t1cfg: T1CFG,
        #[doc = "0x08 - Timer 0 Control Run control/status for timer 0"]
        pub t0ctl: T0CTL,
        #[doc = "0x0c - Timer 0 Target Target counter value for timer 0"]
        pub t0target: T0TARGET,
        #[doc = "0x10 - Timer 1 Target Target Counter Value Timer 1"]
        pub t1target: T1TARGET,
        #[doc = "0x14 - Timer 1 Control Run Control/Status For Timer 1"]
        pub t1ctl: T1CTL,
    }
    #[doc = "Timer 0 Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [t0cfg](t0cfg) module"]
    pub type T0CFG = crate::Reg<u32, _T0CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _T0CFG;
    #[doc = "`read()` method returns [t0cfg::R](t0cfg::R) reader structure"]
    impl crate::Readable for T0CFG {}
    #[doc = "`write(|w| ..)` method takes [t0cfg::W](t0cfg::W) writer structure"]
    impl crate::Writable for T0CFG {}
    #[doc = "Timer 0 Configuration"]
    pub mod t0cfg {
        #[doc = "Reader of register T0CFG"]
        pub type R = crate::R<u32, super::T0CFG>;
        #[doc = "Writer for register T0CFG"]
        pub type W = crate::W<u32, super::T0CFG>;
        #[doc = "Register T0CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::T0CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TICK_SRC_POL`"]
        pub type TICK_SRC_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TICK_SRC_POL`"]
        pub struct TICK_SRC_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICK_SRC_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TICK_SRC`"]
        pub type TICK_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TICK_SRC`"]
        pub struct TICK_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICK_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PRE`"]
        pub type PRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRE`"]
        pub struct PRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MODE`"]
        pub struct MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - TICK_SRC_POL"]
            #[inline(always)]
            pub fn tick_src_pol(&self) -> TICK_SRC_POL_R {
                TICK_SRC_POL_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - TICK_SRC"]
            #[inline(always)]
            pub fn tick_src(&self) -> TICK_SRC_R {
                TICK_SRC_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 4:7 - PRE"]
            #[inline(always)]
            pub fn pre(&self) -> PRE_R {
                PRE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bit 1 - MODE"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RELOAD"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - TICK_SRC_POL"]
            #[inline(always)]
            pub fn tick_src_pol(&mut self) -> TICK_SRC_POL_W {
                TICK_SRC_POL_W { w: self }
            }
            #[doc = "Bits 8:12 - TICK_SRC"]
            #[inline(always)]
            pub fn tick_src(&mut self) -> TICK_SRC_W {
                TICK_SRC_W { w: self }
            }
            #[doc = "Bits 4:7 - PRE"]
            #[inline(always)]
            pub fn pre(&mut self) -> PRE_W {
                PRE_W { w: self }
            }
            #[doc = "Bit 1 - MODE"]
            #[inline(always)]
            pub fn mode(&mut self) -> MODE_W {
                MODE_W { w: self }
            }
            #[doc = "Bit 0 - RELOAD"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
        }
    }
    #[doc = "Timer 1 Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [t1cfg](t1cfg) module"]
    pub type T1CFG = crate::Reg<u32, _T1CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _T1CFG;
    #[doc = "`read()` method returns [t1cfg::R](t1cfg::R) reader structure"]
    impl crate::Readable for T1CFG {}
    #[doc = "`write(|w| ..)` method takes [t1cfg::W](t1cfg::W) writer structure"]
    impl crate::Writable for T1CFG {}
    #[doc = "Timer 1 Configuration"]
    pub mod t1cfg {
        #[doc = "Reader of register T1CFG"]
        pub type R = crate::R<u32, super::T1CFG>;
        #[doc = "Writer for register T1CFG"]
        pub type W = crate::W<u32, super::T1CFG>;
        #[doc = "Register T1CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::T1CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TICK_SRC_POL`"]
        pub type TICK_SRC_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TICK_SRC_POL`"]
        pub struct TICK_SRC_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICK_SRC_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TICK_SRC`"]
        pub type TICK_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TICK_SRC`"]
        pub struct TICK_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICK_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PRE`"]
        pub type PRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRE`"]
        pub struct PRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MODE`"]
        pub struct MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - TICK_SRC_POL"]
            #[inline(always)]
            pub fn tick_src_pol(&self) -> TICK_SRC_POL_R {
                TICK_SRC_POL_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - TICK_SRC"]
            #[inline(always)]
            pub fn tick_src(&self) -> TICK_SRC_R {
                TICK_SRC_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 4:7 - PRE"]
            #[inline(always)]
            pub fn pre(&self) -> PRE_R {
                PRE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bit 1 - MODE"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RELOAD"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - TICK_SRC_POL"]
            #[inline(always)]
            pub fn tick_src_pol(&mut self) -> TICK_SRC_POL_W {
                TICK_SRC_POL_W { w: self }
            }
            #[doc = "Bits 8:12 - TICK_SRC"]
            #[inline(always)]
            pub fn tick_src(&mut self) -> TICK_SRC_W {
                TICK_SRC_W { w: self }
            }
            #[doc = "Bits 4:7 - PRE"]
            #[inline(always)]
            pub fn pre(&mut self) -> PRE_W {
                PRE_W { w: self }
            }
            #[doc = "Bit 1 - MODE"]
            #[inline(always)]
            pub fn mode(&mut self) -> MODE_W {
                MODE_W { w: self }
            }
            #[doc = "Bit 0 - RELOAD"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
        }
    }
    #[doc = "Timer 0 Control Run control/status for timer 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [t0ctl](t0ctl) module"]
    pub type T0CTL = crate::Reg<u32, _T0CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _T0CTL;
    #[doc = "`read()` method returns [t0ctl::R](t0ctl::R) reader structure"]
    impl crate::Readable for T0CTL {}
    #[doc = "`write(|w| ..)` method takes [t0ctl::W](t0ctl::W) writer structure"]
    impl crate::Writable for T0CTL {}
    #[doc = "Timer 0 Control Run control/status for timer 0"]
    pub mod t0ctl {
        #[doc = "Reader of register T0CTL"]
        pub type R = crate::R<u32, super::T0CTL>;
        #[doc = "Writer for register T0CTL"]
        pub type W = crate::W<u32, super::T0CTL>;
        #[doc = "Register T0CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::T0CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Timer 0 Target Target counter value for timer 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [t0target](t0target) module"]
    pub type T0TARGET = crate::Reg<u32, _T0TARGET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _T0TARGET;
    #[doc = "`read()` method returns [t0target::R](t0target::R) reader structure"]
    impl crate::Readable for T0TARGET {}
    #[doc = "`write(|w| ..)` method takes [t0target::W](t0target::W) writer structure"]
    impl crate::Writable for T0TARGET {}
    #[doc = "Timer 0 Target Target counter value for timer 0"]
    pub mod t0target {
        #[doc = "Reader of register T0TARGET"]
        pub type R = crate::R<u32, super::T0TARGET>;
        #[doc = "Writer for register T0TARGET"]
        pub type W = crate::W<u32, super::T0TARGET>;
        #[doc = "Register T0TARGET `reset()`'s with value 0"]
        impl crate::ResetValue for super::T0TARGET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Timer 1 Target Target Counter Value Timer 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [t1target](t1target) module"]
    pub type T1TARGET = crate::Reg<u32, _T1TARGET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _T1TARGET;
    #[doc = "`read()` method returns [t1target::R](t1target::R) reader structure"]
    impl crate::Readable for T1TARGET {}
    #[doc = "`write(|w| ..)` method takes [t1target::W](t1target::W) writer structure"]
    impl crate::Writable for T1TARGET {}
    #[doc = "Timer 1 Target Target Counter Value Timer 1"]
    pub mod t1target {
        #[doc = "Reader of register T1TARGET"]
        pub type R = crate::R<u32, super::T1TARGET>;
        #[doc = "Writer for register T1TARGET"]
        pub type W = crate::W<u32, super::T1TARGET>;
        #[doc = "Register T1TARGET `reset()`'s with value 0"]
        impl crate::ResetValue for super::T1TARGET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Timer 1 Control Run Control/Status For Timer 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [t1ctl](t1ctl) module"]
    pub type T1CTL = crate::Reg<u32, _T1CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _T1CTL;
    #[doc = "`read()` method returns [t1ctl::R](t1ctl::R) reader structure"]
    impl crate::Readable for T1CTL {}
    #[doc = "`write(|w| ..)` method takes [t1ctl::W](t1ctl::W) writer structure"]
    impl crate::Writable for T1CTL {}
    #[doc = "Timer 1 Control Run Control/Status For Timer 1"]
    pub mod t1ctl {
        #[doc = "Reader of register T1CTL"]
        pub type R = crate::R<u32, super::T1CTL>;
        #[doc = "Writer for register T1CTL"]
        pub type W = crate::W<u32, super::T1CTL>;
        #[doc = "Register T1CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::T1CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
}
#[doc = "AUX Wake-up controller"]
pub struct AUX_WUC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AUX_WUC {}
impl AUX_WUC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aux_wuc::RegisterBlock {
        0x400c_6000 as *const _
    }
}
impl Deref for AUX_WUC {
    type Target = aux_wuc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*AUX_WUC::ptr() }
    }
}
#[doc = "AUX Wake-up controller"]
pub mod aux_wuc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Module Clock Enable Clock enable for each module in the AUX domain For use by the system CPU The settings in this register are OR'ed with the corresponding settings in MODCLKEN1. This allows the system CPU and AUX_SCE to request clocks independently. Settings take effect immediately."]
        pub modclken0: MODCLKEN0,
        #[doc = "0x04 - Power Off Request Requests power off request for the AUX domain. When powered of the power supply and clock is disabled. This may only be used when taking the entire device into shutdown mode (i.e. with full device reset when resuming operation). Power off is prevented if AON_WUC:AUXCTL.AUX_FORCE_ON has been set, or if MCUBUSCTL.DISCONNECT_REQ has been cleared."]
        pub pwroffreq: PWROFFREQ,
        #[doc = "0x08 - Power Down Request Request from AUX for system to enter power down. When system is in power down there is limited current supply available and the clock source is set by AON_WUC:AUXCLK.PWR_DWN_SRC"]
        pub pwrdwnreq: PWRDWNREQ,
        #[doc = "0x0c - Power Down Acknowledgment"]
        pub pwrdwnack: PWRDWNACK,
        #[doc = "0x10 - Low Frequency Clock Request"]
        pub clklfreq: CLKLFREQ,
        #[doc = "0x14 - Low Frequency Clock Acknowledgment"]
        pub clklfack: CLKLFACK,
        _reserved6: [u8; 16usize],
        #[doc = "0x28 - Wake-up Event Flags Status of wake-up events from the AON domain The event flags are cleared by setting the corresponding bits in WUEVCLR"]
        pub wuevflags: WUEVFLAGS,
        #[doc = "0x2c - Wake-up Event Clear Clears wake-up events from the AON domain"]
        pub wuevclr: WUEVCLR,
        #[doc = "0x30 - ADC Clock Control Controls the ADC internal clock Note that the ADC command and data interface requires MODCLKEN0.ANAIF or MODCLKEN1.ANAIF also to be set"]
        pub adcclkctl: ADCCLKCTL,
        #[doc = "0x34 - TDC Clock Control Controls the TDC counter clock source, which steps the TDC counter value The source of this clock is controlled by OSC_DIG:CTL0.ACLK_TDC_SRC_SEL."]
        pub tdcclkctl: TDCCLKCTL,
        #[doc = "0x38 - Reference Clock Control Controls the TDC reference clock source, which is to be compared against the TDC counter clock. The source of this clock is controlled by OSC_DIG:CTL0.ACLK_REF_SRC_SEL."]
        pub refclkctl: REFCLKCTL,
        #[doc = "0x3c - Real Time Counter Sub Second Increment 0 New value for the real-time counter (AON_RTC) sub-second increment value, part corresponding to AON_RTC:SUBSECINC bits 15:0. After setting INC15_0 and RTCSUBSECINC1.INC23_16, the value is loaded into AON_RTC:SUBSECINC.VALUEINC by setting RTCSUBSECINCCTL.UPD_REQ."]
        pub rtcsubsecinc0: RTCSUBSECINC0,
        #[doc = "0x40 - Real Time Counter Sub Second Increment 1 New value for the real-time counter (AON_RTC) sub-second increment value, part corresponding to AON_RTC:SUBSECINC bits 23:16. After setting RTCSUBSECINC0.INC15_0 and INC23_16, the value is loaded into AON_RTC:SUBSECINC.VALUEINC by setting RTCSUBSECINCCTL.UPD_REQ."]
        pub rtcsubsecinc1: RTCSUBSECINC1,
        #[doc = "0x44 - Real Time Counter Sub Second Increment Control"]
        pub rtcsubsecincctl: RTCSUBSECINCCTL,
        #[doc = "0x48 - MCU Bus Control Controls the connection between the AUX domain bus and the MCU domain bus. The buses must be disconnected to allow power-down or power-off of the AUX domain."]
        pub mcubusctl: MCUBUSCTL,
        #[doc = "0x4c - MCU Bus Status Indicates the connection state of the AUX domain and MCU domain buses. Note that this register cannot be read from the MCU domain while disconnected, and is therefore only useful for the AUX_SCE."]
        pub mcubusstat: MCUBUSSTAT,
        #[doc = "0x50 - AON Domain Control Status Status of AUX domain control from AON_WUC."]
        pub aonctlstat: AONCTLSTAT,
        #[doc = "0x54 - AUX Input Output Latch Controls latching of signals between AUX_AIODIO0/AUX_AIODIO1 and AON_IOC."]
        pub auxiolatch: AUXIOLATCH,
        _reserved18: [u8; 4usize],
        #[doc = "0x5c - Module Clock Enable 1 Clock enable for each module in the AUX domain, for use by the AUX_SCE. Settings take effect immediately. The settings in this register are OR'ed with the corresponding settings in MODCLKEN0. This allows system CPU and AUX_SCE to request clocks independently."]
        pub modclken1: MODCLKEN1,
    }
    #[doc = "Module Clock Enable Clock enable for each module in the AUX domain For use by the system CPU The settings in this register are OR'ed with the corresponding settings in MODCLKEN1. This allows the system CPU and AUX_SCE to request clocks independently. Settings take effect immediately.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [modclken0](modclken0) module"]
    pub type MODCLKEN0 = crate::Reg<u32, _MODCLKEN0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODCLKEN0;
    #[doc = "`read()` method returns [modclken0::R](modclken0::R) reader structure"]
    impl crate::Readable for MODCLKEN0 {}
    #[doc = "`write(|w| ..)` method takes [modclken0::W](modclken0::W) writer structure"]
    impl crate::Writable for MODCLKEN0 {}
    #[doc = "Module Clock Enable Clock enable for each module in the AUX domain For use by the system CPU The settings in this register are OR'ed with the corresponding settings in MODCLKEN1. This allows the system CPU and AUX_SCE to request clocks independently. Settings take effect immediately."]
    pub mod modclken0 {
        #[doc = "Reader of register MODCLKEN0"]
        pub type R = crate::R<u32, super::MODCLKEN0>;
        #[doc = "Writer for register MODCLKEN0"]
        pub type W = crate::W<u32, super::MODCLKEN0>;
        #[doc = "Register MODCLKEN0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MODCLKEN0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AUX_ADI4`"]
        pub type AUX_ADI4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_ADI4`"]
        pub struct AUX_ADI4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_ADI4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_DDI0_OSC`"]
        pub type AUX_DDI0_OSC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_DDI0_OSC`"]
        pub struct AUX_DDI0_OSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_DDI0_OSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TDC`"]
        pub type TDC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDC`"]
        pub struct TDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ANAIF`"]
        pub type ANAIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ANAIF`"]
        pub struct ANAIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANAIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER`"]
        pub type TIMER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER`"]
        pub struct TIMER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `AIODIO1`"]
        pub type AIODIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AIODIO1`"]
        pub struct AIODIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIODIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AIODIO0`"]
        pub type AIODIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AIODIO0`"]
        pub struct AIODIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIODIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SMPH`"]
        pub type SMPH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPH`"]
        pub struct SMPH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - AUX_ADI4"]
            #[inline(always)]
            pub fn aux_adi4(&self) -> AUX_ADI4_R {
                AUX_ADI4_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - AUX_DDI0_OSC"]
            #[inline(always)]
            pub fn aux_ddi0_osc(&self) -> AUX_DDI0_OSC_R {
                AUX_DDI0_OSC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TDC"]
            #[inline(always)]
            pub fn tdc(&self) -> TDC_R {
                TDC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ANAIF"]
            #[inline(always)]
            pub fn anaif(&self) -> ANAIF_R {
                ANAIF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIMER"]
            #[inline(always)]
            pub fn timer(&self) -> TIMER_R {
                TIMER_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AIODIO1"]
            #[inline(always)]
            pub fn aiodio1(&self) -> AIODIO1_R {
                AIODIO1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AIODIO0"]
            #[inline(always)]
            pub fn aiodio0(&self) -> AIODIO0_R {
                AIODIO0_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SMPH"]
            #[inline(always)]
            pub fn smph(&self) -> SMPH_R {
                SMPH_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - AUX_ADI4"]
            #[inline(always)]
            pub fn aux_adi4(&mut self) -> AUX_ADI4_W {
                AUX_ADI4_W { w: self }
            }
            #[doc = "Bit 6 - AUX_DDI0_OSC"]
            #[inline(always)]
            pub fn aux_ddi0_osc(&mut self) -> AUX_DDI0_OSC_W {
                AUX_DDI0_OSC_W { w: self }
            }
            #[doc = "Bit 5 - TDC"]
            #[inline(always)]
            pub fn tdc(&mut self) -> TDC_W {
                TDC_W { w: self }
            }
            #[doc = "Bit 4 - ANAIF"]
            #[inline(always)]
            pub fn anaif(&mut self) -> ANAIF_W {
                ANAIF_W { w: self }
            }
            #[doc = "Bit 3 - TIMER"]
            #[inline(always)]
            pub fn timer(&mut self) -> TIMER_W {
                TIMER_W { w: self }
            }
            #[doc = "Bit 2 - AIODIO1"]
            #[inline(always)]
            pub fn aiodio1(&mut self) -> AIODIO1_W {
                AIODIO1_W { w: self }
            }
            #[doc = "Bit 1 - AIODIO0"]
            #[inline(always)]
            pub fn aiodio0(&mut self) -> AIODIO0_W {
                AIODIO0_W { w: self }
            }
            #[doc = "Bit 0 - SMPH"]
            #[inline(always)]
            pub fn smph(&mut self) -> SMPH_W {
                SMPH_W { w: self }
            }
        }
    }
    #[doc = "Power Off Request Requests power off request for the AUX domain. When powered of the power supply and clock is disabled. This may only be used when taking the entire device into shutdown mode (i.e. with full device reset when resuming operation). Power off is prevented if AON_WUC:AUXCTL.AUX_FORCE_ON has been set, or if MCUBUSCTL.DISCONNECT_REQ has been cleared.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwroffreq](pwroffreq) module"]
    pub type PWROFFREQ = crate::Reg<u32, _PWROFFREQ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWROFFREQ;
    #[doc = "`read()` method returns [pwroffreq::R](pwroffreq::R) reader structure"]
    impl crate::Readable for PWROFFREQ {}
    #[doc = "`write(|w| ..)` method takes [pwroffreq::W](pwroffreq::W) writer structure"]
    impl crate::Writable for PWROFFREQ {}
    #[doc = "Power Off Request Requests power off request for the AUX domain. When powered of the power supply and clock is disabled. This may only be used when taking the entire device into shutdown mode (i.e. with full device reset when resuming operation). Power off is prevented if AON_WUC:AUXCTL.AUX_FORCE_ON has been set, or if MCUBUSCTL.DISCONNECT_REQ has been cleared."]
    pub mod pwroffreq {
        #[doc = "Reader of register PWROFFREQ"]
        pub type R = crate::R<u32, super::PWROFFREQ>;
        #[doc = "Writer for register PWROFFREQ"]
        pub type W = crate::W<u32, super::PWROFFREQ>;
        #[doc = "Register PWROFFREQ `reset()`'s with value 0"]
        impl crate::ResetValue for super::PWROFFREQ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REQ`"]
        pub type REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ`"]
        pub struct REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&self) -> REQ_R {
                REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&mut self) -> REQ_W {
                REQ_W { w: self }
            }
        }
    }
    #[doc = "Power Down Request Request from AUX for system to enter power down. When system is in power down there is limited current supply available and the clock source is set by AON_WUC:AUXCLK.PWR_DWN_SRC\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwrdwnreq](pwrdwnreq) module"]
    pub type PWRDWNREQ = crate::Reg<u32, _PWRDWNREQ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWRDWNREQ;
    #[doc = "`read()` method returns [pwrdwnreq::R](pwrdwnreq::R) reader structure"]
    impl crate::Readable for PWRDWNREQ {}
    #[doc = "`write(|w| ..)` method takes [pwrdwnreq::W](pwrdwnreq::W) writer structure"]
    impl crate::Writable for PWRDWNREQ {}
    #[doc = "Power Down Request Request from AUX for system to enter power down. When system is in power down there is limited current supply available and the clock source is set by AON_WUC:AUXCLK.PWR_DWN_SRC"]
    pub mod pwrdwnreq {
        #[doc = "Reader of register PWRDWNREQ"]
        pub type R = crate::R<u32, super::PWRDWNREQ>;
        #[doc = "Writer for register PWRDWNREQ"]
        pub type W = crate::W<u32, super::PWRDWNREQ>;
        #[doc = "Register PWRDWNREQ `reset()`'s with value 0"]
        impl crate::ResetValue for super::PWRDWNREQ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REQ`"]
        pub type REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ`"]
        pub struct REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&self) -> REQ_R {
                REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&mut self) -> REQ_W {
                REQ_W { w: self }
            }
        }
    }
    #[doc = "Power Down Acknowledgment\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwrdwnack](pwrdwnack) module"]
    pub type PWRDWNACK = crate::Reg<u32, _PWRDWNACK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWRDWNACK;
    #[doc = "`read()` method returns [pwrdwnack::R](pwrdwnack::R) reader structure"]
    impl crate::Readable for PWRDWNACK {}
    #[doc = "Power Down Acknowledgment"]
    pub mod pwrdwnack {
        #[doc = "Reader of register PWRDWNACK"]
        pub type R = crate::R<u32, super::PWRDWNACK>;
        #[doc = "Reader of field `ACK`"]
        pub type ACK_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ACK"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Low Frequency Clock Request\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clklfreq](clklfreq) module"]
    pub type CLKLFREQ = crate::Reg<u32, _CLKLFREQ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLKLFREQ;
    #[doc = "`read()` method returns [clklfreq::R](clklfreq::R) reader structure"]
    impl crate::Readable for CLKLFREQ {}
    #[doc = "`write(|w| ..)` method takes [clklfreq::W](clklfreq::W) writer structure"]
    impl crate::Writable for CLKLFREQ {}
    #[doc = "Low Frequency Clock Request"]
    pub mod clklfreq {
        #[doc = "Reader of register CLKLFREQ"]
        pub type R = crate::R<u32, super::CLKLFREQ>;
        #[doc = "Writer for register CLKLFREQ"]
        pub type W = crate::W<u32, super::CLKLFREQ>;
        #[doc = "Register CLKLFREQ `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLKLFREQ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REQ`"]
        pub type REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ`"]
        pub struct REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&self) -> REQ_R {
                REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&mut self) -> REQ_W {
                REQ_W { w: self }
            }
        }
    }
    #[doc = "Low Frequency Clock Acknowledgment\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clklfack](clklfack) module"]
    pub type CLKLFACK = crate::Reg<u32, _CLKLFACK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLKLFACK;
    #[doc = "`read()` method returns [clklfack::R](clklfack::R) reader structure"]
    impl crate::Readable for CLKLFACK {}
    #[doc = "Low Frequency Clock Acknowledgment"]
    pub mod clklfack {
        #[doc = "Reader of register CLKLFACK"]
        pub type R = crate::R<u32, super::CLKLFACK>;
        #[doc = "Reader of field `ACK`"]
        pub type ACK_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ACK"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Wake-up Event Flags Status of wake-up events from the AON domain The event flags are cleared by setting the corresponding bits in WUEVCLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wuevflags](wuevflags) module"]
    pub type WUEVFLAGS = crate::Reg<u32, _WUEVFLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WUEVFLAGS;
    #[doc = "`read()` method returns [wuevflags::R](wuevflags::R) reader structure"]
    impl crate::Readable for WUEVFLAGS {}
    #[doc = "Wake-up Event Flags Status of wake-up events from the AON domain The event flags are cleared by setting the corresponding bits in WUEVCLR"]
    pub mod wuevflags {
        #[doc = "Reader of register WUEVFLAGS"]
        pub type R = crate::R<u32, super::WUEVFLAGS>;
        #[doc = "Reader of field `AON_RTC_CH2`"]
        pub type AON_RTC_CH2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AON_SW`"]
        pub type AON_SW_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AON_PROG_WU`"]
        pub type AON_PROG_WU_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - AON_RTC_CH2"]
            #[inline(always)]
            pub fn aon_rtc_ch2(&self) -> AON_RTC_CH2_R {
                AON_RTC_CH2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AON_SW"]
            #[inline(always)]
            pub fn aon_sw(&self) -> AON_SW_R {
                AON_SW_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_PROG_WU"]
            #[inline(always)]
            pub fn aon_prog_wu(&self) -> AON_PROG_WU_R {
                AON_PROG_WU_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Wake-up Event Clear Clears wake-up events from the AON domain\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wuevclr](wuevclr) module"]
    pub type WUEVCLR = crate::Reg<u32, _WUEVCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WUEVCLR;
    #[doc = "`read()` method returns [wuevclr::R](wuevclr::R) reader structure"]
    impl crate::Readable for WUEVCLR {}
    #[doc = "`write(|w| ..)` method takes [wuevclr::W](wuevclr::W) writer structure"]
    impl crate::Writable for WUEVCLR {}
    #[doc = "Wake-up Event Clear Clears wake-up events from the AON domain"]
    pub mod wuevclr {
        #[doc = "Reader of register WUEVCLR"]
        pub type R = crate::R<u32, super::WUEVCLR>;
        #[doc = "Writer for register WUEVCLR"]
        pub type W = crate::W<u32, super::WUEVCLR>;
        #[doc = "Register WUEVCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::WUEVCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AON_RTC_CH2`"]
        pub type AON_RTC_CH2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_RTC_CH2`"]
        pub struct AON_RTC_CH2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_RTC_CH2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AON_SW`"]
        pub type AON_SW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_SW`"]
        pub struct AON_SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_SW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `AON_PROG_WU`"]
        pub type AON_PROG_WU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AON_PROG_WU`"]
        pub struct AON_PROG_WU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AON_PROG_WU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - AON_RTC_CH2"]
            #[inline(always)]
            pub fn aon_rtc_ch2(&self) -> AON_RTC_CH2_R {
                AON_RTC_CH2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AON_SW"]
            #[inline(always)]
            pub fn aon_sw(&self) -> AON_SW_R {
                AON_SW_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - AON_PROG_WU"]
            #[inline(always)]
            pub fn aon_prog_wu(&self) -> AON_PROG_WU_R {
                AON_PROG_WU_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - AON_RTC_CH2"]
            #[inline(always)]
            pub fn aon_rtc_ch2(&mut self) -> AON_RTC_CH2_W {
                AON_RTC_CH2_W { w: self }
            }
            #[doc = "Bit 1 - AON_SW"]
            #[inline(always)]
            pub fn aon_sw(&mut self) -> AON_SW_W {
                AON_SW_W { w: self }
            }
            #[doc = "Bit 0 - AON_PROG_WU"]
            #[inline(always)]
            pub fn aon_prog_wu(&mut self) -> AON_PROG_WU_W {
                AON_PROG_WU_W { w: self }
            }
        }
    }
    #[doc = "ADC Clock Control Controls the ADC internal clock Note that the ADC command and data interface requires MODCLKEN0.ANAIF or MODCLKEN1.ANAIF also to be set\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adcclkctl](adcclkctl) module"]
    pub type ADCCLKCTL = crate::Reg<u32, _ADCCLKCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ADCCLKCTL;
    #[doc = "`read()` method returns [adcclkctl::R](adcclkctl::R) reader structure"]
    impl crate::Readable for ADCCLKCTL {}
    #[doc = "`write(|w| ..)` method takes [adcclkctl::W](adcclkctl::W) writer structure"]
    impl crate::Writable for ADCCLKCTL {}
    #[doc = "ADC Clock Control Controls the ADC internal clock Note that the ADC command and data interface requires MODCLKEN0.ANAIF or MODCLKEN1.ANAIF also to be set"]
    pub mod adcclkctl {
        #[doc = "Reader of register ADCCLKCTL"]
        pub type R = crate::R<u32, super::ADCCLKCTL>;
        #[doc = "Writer for register ADCCLKCTL"]
        pub type W = crate::W<u32, super::ADCCLKCTL>;
        #[doc = "Register ADCCLKCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ADCCLKCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ACK`"]
        pub type ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACK`"]
        pub struct ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `REQ`"]
        pub type REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ`"]
        pub struct REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - ACK"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&self) -> REQ_R {
                REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - ACK"]
            #[inline(always)]
            pub fn ack(&mut self) -> ACK_W {
                ACK_W { w: self }
            }
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&mut self) -> REQ_W {
                REQ_W { w: self }
            }
        }
    }
    #[doc = "TDC Clock Control Controls the TDC counter clock source, which steps the TDC counter value The source of this clock is controlled by OSC_DIG:CTL0.ACLK_TDC_SRC_SEL.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tdcclkctl](tdcclkctl) module"]
    pub type TDCCLKCTL = crate::Reg<u32, _TDCCLKCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TDCCLKCTL;
    #[doc = "`read()` method returns [tdcclkctl::R](tdcclkctl::R) reader structure"]
    impl crate::Readable for TDCCLKCTL {}
    #[doc = "`write(|w| ..)` method takes [tdcclkctl::W](tdcclkctl::W) writer structure"]
    impl crate::Writable for TDCCLKCTL {}
    #[doc = "TDC Clock Control Controls the TDC counter clock source, which steps the TDC counter value The source of this clock is controlled by OSC_DIG:CTL0.ACLK_TDC_SRC_SEL."]
    pub mod tdcclkctl {
        #[doc = "Reader of register TDCCLKCTL"]
        pub type R = crate::R<u32, super::TDCCLKCTL>;
        #[doc = "Writer for register TDCCLKCTL"]
        pub type W = crate::W<u32, super::TDCCLKCTL>;
        #[doc = "Register TDCCLKCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::TDCCLKCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ACK`"]
        pub type ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACK`"]
        pub struct ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `REQ`"]
        pub type REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ`"]
        pub struct REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - ACK"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&self) -> REQ_R {
                REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - ACK"]
            #[inline(always)]
            pub fn ack(&mut self) -> ACK_W {
                ACK_W { w: self }
            }
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&mut self) -> REQ_W {
                REQ_W { w: self }
            }
        }
    }
    #[doc = "Reference Clock Control Controls the TDC reference clock source, which is to be compared against the TDC counter clock. The source of this clock is controlled by OSC_DIG:CTL0.ACLK_REF_SRC_SEL.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [refclkctl](refclkctl) module"]
    pub type REFCLKCTL = crate::Reg<u32, _REFCLKCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _REFCLKCTL;
    #[doc = "`read()` method returns [refclkctl::R](refclkctl::R) reader structure"]
    impl crate::Readable for REFCLKCTL {}
    #[doc = "`write(|w| ..)` method takes [refclkctl::W](refclkctl::W) writer structure"]
    impl crate::Writable for REFCLKCTL {}
    #[doc = "Reference Clock Control Controls the TDC reference clock source, which is to be compared against the TDC counter clock. The source of this clock is controlled by OSC_DIG:CTL0.ACLK_REF_SRC_SEL."]
    pub mod refclkctl {
        #[doc = "Reader of register REFCLKCTL"]
        pub type R = crate::R<u32, super::REFCLKCTL>;
        #[doc = "Writer for register REFCLKCTL"]
        pub type W = crate::W<u32, super::REFCLKCTL>;
        #[doc = "Register REFCLKCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::REFCLKCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ACK`"]
        pub type ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACK`"]
        pub struct ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `REQ`"]
        pub type REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REQ`"]
        pub struct REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - ACK"]
            #[inline(always)]
            pub fn ack(&self) -> ACK_R {
                ACK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&self) -> REQ_R {
                REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - ACK"]
            #[inline(always)]
            pub fn ack(&mut self) -> ACK_W {
                ACK_W { w: self }
            }
            #[doc = "Bit 0 - REQ"]
            #[inline(always)]
            pub fn req(&mut self) -> REQ_W {
                REQ_W { w: self }
            }
        }
    }
    #[doc = "Real Time Counter Sub Second Increment 0 New value for the real-time counter (AON_RTC) sub-second increment value, part corresponding to AON_RTC:SUBSECINC bits 15:0. After setting INC15_0 and RTCSUBSECINC1.INC23_16, the value is loaded into AON_RTC:SUBSECINC.VALUEINC by setting RTCSUBSECINCCTL.UPD_REQ.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcsubsecinc0](rtcsubsecinc0) module"]
    pub type RTCSUBSECINC0 = crate::Reg<u32, _RTCSUBSECINC0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCSUBSECINC0;
    #[doc = "`read()` method returns [rtcsubsecinc0::R](rtcsubsecinc0::R) reader structure"]
    impl crate::Readable for RTCSUBSECINC0 {}
    #[doc = "`write(|w| ..)` method takes [rtcsubsecinc0::W](rtcsubsecinc0::W) writer structure"]
    impl crate::Writable for RTCSUBSECINC0 {}
    #[doc = "Real Time Counter Sub Second Increment 0 New value for the real-time counter (AON_RTC) sub-second increment value, part corresponding to AON_RTC:SUBSECINC bits 15:0. After setting INC15_0 and RTCSUBSECINC1.INC23_16, the value is loaded into AON_RTC:SUBSECINC.VALUEINC by setting RTCSUBSECINCCTL.UPD_REQ."]
    pub mod rtcsubsecinc0 {
        #[doc = "Reader of register RTCSUBSECINC0"]
        pub type R = crate::R<u32, super::RTCSUBSECINC0>;
        #[doc = "Writer for register RTCSUBSECINC0"]
        pub type W = crate::W<u32, super::RTCSUBSECINC0>;
        #[doc = "Register RTCSUBSECINC0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTCSUBSECINC0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INC15_0`"]
        pub type INC15_0_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `INC15_0`"]
        pub struct INC15_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INC15_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - INC15_0"]
            #[inline(always)]
            pub fn inc15_0(&self) -> INC15_0_R {
                INC15_0_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - INC15_0"]
            #[inline(always)]
            pub fn inc15_0(&mut self) -> INC15_0_W {
                INC15_0_W { w: self }
            }
        }
    }
    #[doc = "Real Time Counter Sub Second Increment 1 New value for the real-time counter (AON_RTC) sub-second increment value, part corresponding to AON_RTC:SUBSECINC bits 23:16. After setting RTCSUBSECINC0.INC15_0 and INC23_16, the value is loaded into AON_RTC:SUBSECINC.VALUEINC by setting RTCSUBSECINCCTL.UPD_REQ.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcsubsecinc1](rtcsubsecinc1) module"]
    pub type RTCSUBSECINC1 = crate::Reg<u32, _RTCSUBSECINC1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCSUBSECINC1;
    #[doc = "`read()` method returns [rtcsubsecinc1::R](rtcsubsecinc1::R) reader structure"]
    impl crate::Readable for RTCSUBSECINC1 {}
    #[doc = "`write(|w| ..)` method takes [rtcsubsecinc1::W](rtcsubsecinc1::W) writer structure"]
    impl crate::Writable for RTCSUBSECINC1 {}
    #[doc = "Real Time Counter Sub Second Increment 1 New value for the real-time counter (AON_RTC) sub-second increment value, part corresponding to AON_RTC:SUBSECINC bits 23:16. After setting RTCSUBSECINC0.INC15_0 and INC23_16, the value is loaded into AON_RTC:SUBSECINC.VALUEINC by setting RTCSUBSECINCCTL.UPD_REQ."]
    pub mod rtcsubsecinc1 {
        #[doc = "Reader of register RTCSUBSECINC1"]
        pub type R = crate::R<u32, super::RTCSUBSECINC1>;
        #[doc = "Writer for register RTCSUBSECINC1"]
        pub type W = crate::W<u32, super::RTCSUBSECINC1>;
        #[doc = "Register RTCSUBSECINC1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTCSUBSECINC1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INC23_16`"]
        pub type INC23_16_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `INC23_16`"]
        pub struct INC23_16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INC23_16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - INC23_16"]
            #[inline(always)]
            pub fn inc23_16(&self) -> INC23_16_R {
                INC23_16_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - INC23_16"]
            #[inline(always)]
            pub fn inc23_16(&mut self) -> INC23_16_W {
                INC23_16_W { w: self }
            }
        }
    }
    #[doc = "Real Time Counter Sub Second Increment Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcsubsecincctl](rtcsubsecincctl) module"]
    pub type RTCSUBSECINCCTL = crate::Reg<u32, _RTCSUBSECINCCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCSUBSECINCCTL;
    #[doc = "`read()` method returns [rtcsubsecincctl::R](rtcsubsecincctl::R) reader structure"]
    impl crate::Readable for RTCSUBSECINCCTL {}
    #[doc = "`write(|w| ..)` method takes [rtcsubsecincctl::W](rtcsubsecincctl::W) writer structure"]
    impl crate::Writable for RTCSUBSECINCCTL {}
    #[doc = "Real Time Counter Sub Second Increment Control"]
    pub mod rtcsubsecincctl {
        #[doc = "Reader of register RTCSUBSECINCCTL"]
        pub type R = crate::R<u32, super::RTCSUBSECINCCTL>;
        #[doc = "Writer for register RTCSUBSECINCCTL"]
        pub type W = crate::W<u32, super::RTCSUBSECINCCTL>;
        #[doc = "Register RTCSUBSECINCCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTCSUBSECINCCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `UPD_ACK`"]
        pub type UPD_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UPD_ACK`"]
        pub struct UPD_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UPD_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UPD_REQ`"]
        pub type UPD_REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UPD_REQ`"]
        pub struct UPD_REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UPD_REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - UPD_ACK"]
            #[inline(always)]
            pub fn upd_ack(&self) -> UPD_ACK_R {
                UPD_ACK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - UPD_REQ"]
            #[inline(always)]
            pub fn upd_req(&self) -> UPD_REQ_R {
                UPD_REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - UPD_ACK"]
            #[inline(always)]
            pub fn upd_ack(&mut self) -> UPD_ACK_W {
                UPD_ACK_W { w: self }
            }
            #[doc = "Bit 0 - UPD_REQ"]
            #[inline(always)]
            pub fn upd_req(&mut self) -> UPD_REQ_W {
                UPD_REQ_W { w: self }
            }
        }
    }
    #[doc = "MCU Bus Control Controls the connection between the AUX domain bus and the MCU domain bus. The buses must be disconnected to allow power-down or power-off of the AUX domain.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcubusctl](mcubusctl) module"]
    pub type MCUBUSCTL = crate::Reg<u32, _MCUBUSCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCUBUSCTL;
    #[doc = "`read()` method returns [mcubusctl::R](mcubusctl::R) reader structure"]
    impl crate::Readable for MCUBUSCTL {}
    #[doc = "`write(|w| ..)` method takes [mcubusctl::W](mcubusctl::W) writer structure"]
    impl crate::Writable for MCUBUSCTL {}
    #[doc = "MCU Bus Control Controls the connection between the AUX domain bus and the MCU domain bus. The buses must be disconnected to allow power-down or power-off of the AUX domain."]
    pub mod mcubusctl {
        #[doc = "Reader of register MCUBUSCTL"]
        pub type R = crate::R<u32, super::MCUBUSCTL>;
        #[doc = "Writer for register MCUBUSCTL"]
        pub type W = crate::W<u32, super::MCUBUSCTL>;
        #[doc = "Register MCUBUSCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::MCUBUSCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DISCONNECT_REQ`"]
        pub type DISCONNECT_REQ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISCONNECT_REQ`"]
        pub struct DISCONNECT_REQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCONNECT_REQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DISCONNECT_REQ"]
            #[inline(always)]
            pub fn disconnect_req(&self) -> DISCONNECT_REQ_R {
                DISCONNECT_REQ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DISCONNECT_REQ"]
            #[inline(always)]
            pub fn disconnect_req(&mut self) -> DISCONNECT_REQ_W {
                DISCONNECT_REQ_W { w: self }
            }
        }
    }
    #[doc = "MCU Bus Status Indicates the connection state of the AUX domain and MCU domain buses. Note that this register cannot be read from the MCU domain while disconnected, and is therefore only useful for the AUX_SCE.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcubusstat](mcubusstat) module"]
    pub type MCUBUSSTAT = crate::Reg<u32, _MCUBUSSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCUBUSSTAT;
    #[doc = "`read()` method returns [mcubusstat::R](mcubusstat::R) reader structure"]
    impl crate::Readable for MCUBUSSTAT {}
    #[doc = "MCU Bus Status Indicates the connection state of the AUX domain and MCU domain buses. Note that this register cannot be read from the MCU domain while disconnected, and is therefore only useful for the AUX_SCE."]
    pub mod mcubusstat {
        #[doc = "Reader of register MCUBUSSTAT"]
        pub type R = crate::R<u32, super::MCUBUSSTAT>;
        #[doc = "Reader of field `DISCONNECTED`"]
        pub type DISCONNECTED_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DISCONNECT_ACK`"]
        pub type DISCONNECT_ACK_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 1 - DISCONNECTED"]
            #[inline(always)]
            pub fn disconnected(&self) -> DISCONNECTED_R {
                DISCONNECTED_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DISCONNECT_ACK"]
            #[inline(always)]
            pub fn disconnect_ack(&self) -> DISCONNECT_ACK_R {
                DISCONNECT_ACK_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "AON Domain Control Status Status of AUX domain control from AON_WUC.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aonctlstat](aonctlstat) module"]
    pub type AONCTLSTAT = crate::Reg<u32, _AONCTLSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AONCTLSTAT;
    #[doc = "`read()` method returns [aonctlstat::R](aonctlstat::R) reader structure"]
    impl crate::Readable for AONCTLSTAT {}
    #[doc = "AON Domain Control Status Status of AUX domain control from AON_WUC."]
    pub mod aonctlstat {
        #[doc = "Reader of register AONCTLSTAT"]
        pub type R = crate::R<u32, super::AONCTLSTAT>;
        #[doc = "Reader of field `AUX_FORCE_ON`"]
        pub type AUX_FORCE_ON_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCE_RUN_EN`"]
        pub type SCE_RUN_EN_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 1 - AUX_FORCE_ON"]
            #[inline(always)]
            pub fn aux_force_on(&self) -> AUX_FORCE_ON_R {
                AUX_FORCE_ON_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SCE_RUN_EN"]
            #[inline(always)]
            pub fn sce_run_en(&self) -> SCE_RUN_EN_R {
                SCE_RUN_EN_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "AUX Input Output Latch Controls latching of signals between AUX_AIODIO0/AUX_AIODIO1 and AON_IOC.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [auxiolatch](auxiolatch) module"]
    pub type AUXIOLATCH = crate::Reg<u32, _AUXIOLATCH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUXIOLATCH;
    #[doc = "`read()` method returns [auxiolatch::R](auxiolatch::R) reader structure"]
    impl crate::Readable for AUXIOLATCH {}
    #[doc = "`write(|w| ..)` method takes [auxiolatch::W](auxiolatch::W) writer structure"]
    impl crate::Writable for AUXIOLATCH {}
    #[doc = "AUX Input Output Latch Controls latching of signals between AUX_AIODIO0/AUX_AIODIO1 and AON_IOC."]
    pub mod auxiolatch {
        #[doc = "Reader of register AUXIOLATCH"]
        pub type R = crate::R<u32, super::AUXIOLATCH>;
        #[doc = "Writer for register AUXIOLATCH"]
        pub type W = crate::W<u32, super::AUXIOLATCH>;
        #[doc = "Register AUXIOLATCH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AUXIOLATCH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Module Clock Enable 1 Clock enable for each module in the AUX domain, for use by the AUX_SCE. Settings take effect immediately. The settings in this register are OR'ed with the corresponding settings in MODCLKEN0. This allows system CPU and AUX_SCE to request clocks independently.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [modclken1](modclken1) module"]
    pub type MODCLKEN1 = crate::Reg<u32, _MODCLKEN1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODCLKEN1;
    #[doc = "`read()` method returns [modclken1::R](modclken1::R) reader structure"]
    impl crate::Readable for MODCLKEN1 {}
    #[doc = "`write(|w| ..)` method takes [modclken1::W](modclken1::W) writer structure"]
    impl crate::Writable for MODCLKEN1 {}
    #[doc = "Module Clock Enable 1 Clock enable for each module in the AUX domain, for use by the AUX_SCE. Settings take effect immediately. The settings in this register are OR'ed with the corresponding settings in MODCLKEN0. This allows system CPU and AUX_SCE to request clocks independently."]
    pub mod modclken1 {
        #[doc = "Reader of register MODCLKEN1"]
        pub type R = crate::R<u32, super::MODCLKEN1>;
        #[doc = "Writer for register MODCLKEN1"]
        pub type W = crate::W<u32, super::MODCLKEN1>;
        #[doc = "Register MODCLKEN1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::MODCLKEN1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AUX_ADI4`"]
        pub type AUX_ADI4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_ADI4`"]
        pub struct AUX_ADI4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_ADI4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `AUX_DDI0_OSC`"]
        pub type AUX_DDI0_OSC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUX_DDI0_OSC`"]
        pub struct AUX_DDI0_OSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUX_DDI0_OSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ANAIF`"]
        pub type ANAIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ANAIF`"]
        pub struct ANAIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANAIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TIMER`"]
        pub type TIMER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMER`"]
        pub struct TIMER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `AIODIO1`"]
        pub type AIODIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AIODIO1`"]
        pub struct AIODIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIODIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `AIODIO0`"]
        pub type AIODIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AIODIO0`"]
        pub struct AIODIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIODIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SMPH`"]
        pub type SMPH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPH`"]
        pub struct SMPH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - AUX_ADI4"]
            #[inline(always)]
            pub fn aux_adi4(&self) -> AUX_ADI4_R {
                AUX_ADI4_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - AUX_DDI0_OSC"]
            #[inline(always)]
            pub fn aux_ddi0_osc(&self) -> AUX_DDI0_OSC_R {
                AUX_DDI0_OSC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ANAIF"]
            #[inline(always)]
            pub fn anaif(&self) -> ANAIF_R {
                ANAIF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIMER"]
            #[inline(always)]
            pub fn timer(&self) -> TIMER_R {
                TIMER_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - AIODIO1"]
            #[inline(always)]
            pub fn aiodio1(&self) -> AIODIO1_R {
                AIODIO1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AIODIO0"]
            #[inline(always)]
            pub fn aiodio0(&self) -> AIODIO0_R {
                AIODIO0_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SMPH"]
            #[inline(always)]
            pub fn smph(&self) -> SMPH_R {
                SMPH_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - AUX_ADI4"]
            #[inline(always)]
            pub fn aux_adi4(&mut self) -> AUX_ADI4_W {
                AUX_ADI4_W { w: self }
            }
            #[doc = "Bit 6 - AUX_DDI0_OSC"]
            #[inline(always)]
            pub fn aux_ddi0_osc(&mut self) -> AUX_DDI0_OSC_W {
                AUX_DDI0_OSC_W { w: self }
            }
            #[doc = "Bit 4 - ANAIF"]
            #[inline(always)]
            pub fn anaif(&mut self) -> ANAIF_W {
                ANAIF_W { w: self }
            }
            #[doc = "Bit 3 - TIMER"]
            #[inline(always)]
            pub fn timer(&mut self) -> TIMER_W {
                TIMER_W { w: self }
            }
            #[doc = "Bit 2 - AIODIO1"]
            #[inline(always)]
            pub fn aiodio1(&mut self) -> AIODIO1_W {
                AIODIO1_W { w: self }
            }
            #[doc = "Bit 1 - AIODIO0"]
            #[inline(always)]
            pub fn aiodio0(&mut self) -> AIODIO0_W {
                AIODIO0_W { w: self }
            }
            #[doc = "Bit 0 - SMPH"]
            #[inline(always)]
            pub fn smph(&mut self) -> SMPH_W {
                SMPH_W { w: self }
            }
        }
    }
}
#[doc = "Customer configuration area (CCFG)"]
pub struct CCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CCFG {}
impl CCFG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ccfg::RegisterBlock {
        0x5000_3000 as *const _
    }
}
impl Deref for CCFG {
    type Target = ccfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CCFG::ptr() }
    }
}
#[doc = "Customer configuration area (CCFG)"]
pub mod ccfg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 4008usize],
        #[doc = "0xfa8 - Extern LF clock configuration"]
        pub ext_lf_clk: EXT_LF_CLK,
        #[doc = "0xfac - Mode Configuration 1"]
        pub mode_conf_1: MODE_CONF_1,
        #[doc = "0xfb0 - CCFG Size and Disable Flags"]
        pub size_and_dis_flags: SIZE_AND_DIS_FLAGS,
        #[doc = "0xfb4 - Mode Configuration 0"]
        pub mode_conf: MODE_CONF,
        #[doc = "0xfb8 - Voltage Load 0 Enabled by MODE_CONF.VDDR_EXT_LOAD."]
        pub volt_load_0: VOLT_LOAD_0,
        #[doc = "0xfbc - Voltage Load 1 Enabled by MODE_CONF.VDDR_EXT_LOAD."]
        pub volt_load_1: VOLT_LOAD_1,
        #[doc = "0xfc0 - Real Time Clock Offset Enabled by MODE_CONF.RTC_COMP."]
        pub rtc_offset: RTC_OFFSET,
        #[doc = "0xfc4 - Frequency Offset"]
        pub freq_offset: FREQ_OFFSET,
        #[doc = "0xfc8 - IEEE MAC Address 0"]
        pub ieee_mac_0: IEEE_MAC_0,
        #[doc = "0xfcc - IEEE MAC Address 1"]
        pub ieee_mac_1: IEEE_MAC_1,
        #[doc = "0xfd0 - IEEE BLE Address 0"]
        pub ieee_ble_0: IEEE_BLE_0,
        #[doc = "0xfd4 - IEEE BLE Address 1"]
        pub ieee_ble_1: IEEE_BLE_1,
        #[doc = "0xfd8 - Bootloader Configuration Configures the functionality of the ROM boot loader. If both the boot loader is enabled by the BOOTLOADER_ENABLE field and the boot loader backdoor is enabled by the BL_ENABLE field it is possible to force entry of the ROM boot loader even if a valid image is present in flash."]
        pub bl_config: BL_CONFIG,
        #[doc = "0xfdc - Erase Configuration"]
        pub erase_conf: ERASE_CONF,
        #[doc = "0xfe0 - TI Options"]
        pub ccfg_ti_options: CCFG_TI_OPTIONS,
        #[doc = "0xfe4 - Test Access Points Enable 0"]
        pub ccfg_tap_dap_0: CCFG_TAP_DAP_0,
        #[doc = "0xfe8 - Test Access Points Enable 1"]
        pub ccfg_tap_dap_1: CCFG_TAP_DAP_1,
        #[doc = "0xfec - Image Valid"]
        pub image_valid_conf: IMAGE_VALID_CONF,
        #[doc = "0xff0 - Protect Sectors 0-31 Each bit write protects one 4KB flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect."]
        pub ccfg_prot_31_0: CCFG_PROT_31_0,
        #[doc = "0xff4 - Protect Sectors 32-63 Each bit write protects one 4KB flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx."]
        pub ccfg_prot_63_32: CCFG_PROT_63_32,
        #[doc = "0xff8 - Protect Sectors 64-95 Each bit write protects one flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx."]
        pub ccfg_prot_95_64: CCFG_PROT_95_64,
        #[doc = "0xffc - Protect Sectors 96-127 Each bit write protects one flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx."]
        pub ccfg_prot_127_96: CCFG_PROT_127_96,
    }
    #[doc = "Extern LF clock configuration\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ext_lf_clk](ext_lf_clk) module"]
    pub type EXT_LF_CLK = crate::Reg<u32, _EXT_LF_CLK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXT_LF_CLK;
    #[doc = "`read()` method returns [ext_lf_clk::R](ext_lf_clk::R) reader structure"]
    impl crate::Readable for EXT_LF_CLK {}
    #[doc = "Extern LF clock configuration"]
    pub mod ext_lf_clk {
        #[doc = "Reader of register EXT_LF_CLK"]
        pub type R = crate::R<u32, super::EXT_LF_CLK>;
        #[doc = "Reader of field `DIO`"]
        pub type DIO_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RTC_INCREMENT`"]
        pub type RTC_INCREMENT_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 24:31 - DIO"]
            #[inline(always)]
            pub fn dio(&self) -> DIO_R {
                DIO_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 0:23 - RTC_INCREMENT"]
            #[inline(always)]
            pub fn rtc_increment(&self) -> RTC_INCREMENT_R {
                RTC_INCREMENT_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Mode Configuration 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mode_conf_1](mode_conf_1) module"]
    pub type MODE_CONF_1 = crate::Reg<u32, _MODE_CONF_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODE_CONF_1;
    #[doc = "`read()` method returns [mode_conf_1::R](mode_conf_1::R) reader structure"]
    impl crate::Readable for MODE_CONF_1 {}
    #[doc = "Mode Configuration 1"]
    pub mod mode_conf_1 {
        #[doc = "Reader of register MODE_CONF_1"]
        pub type R = crate::R<u32, super::MODE_CONF_1>;
        #[doc = "Reader of field `ALT_DCDC_VMIN`"]
        pub type ALT_DCDC_VMIN_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ALT_DCDC_DITHER_EN`"]
        pub type ALT_DCDC_DITHER_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALT_DCDC_IPEAK`"]
        pub type ALT_DCDC_IPEAK_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_IBIAS_INIT`"]
        pub type DELTA_IBIAS_INIT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_IBIAS_OFFSET`"]
        pub type DELTA_IBIAS_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `XOSC_MAX_START`"]
        pub type XOSC_MAX_START_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 20:23 - ALT_DCDC_VMIN"]
            #[inline(always)]
            pub fn alt_dcdc_vmin(&self) -> ALT_DCDC_VMIN_R {
                ALT_DCDC_VMIN_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bit 19 - ALT_DCDC_DITHER_EN"]
            #[inline(always)]
            pub fn alt_dcdc_dither_en(&self) -> ALT_DCDC_DITHER_EN_R {
                ALT_DCDC_DITHER_EN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bits 16:18 - ALT_DCDC_IPEAK"]
            #[inline(always)]
            pub fn alt_dcdc_ipeak(&self) -> ALT_DCDC_IPEAK_R {
                ALT_DCDC_IPEAK_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bits 12:15 - DELTA_IBIAS_INIT"]
            #[inline(always)]
            pub fn delta_ibias_init(&self) -> DELTA_IBIAS_INIT_R {
                DELTA_IBIAS_INIT_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - DELTA_IBIAS_OFFSET"]
            #[inline(always)]
            pub fn delta_ibias_offset(&self) -> DELTA_IBIAS_OFFSET_R {
                DELTA_IBIAS_OFFSET_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 0:7 - XOSC_MAX_START"]
            #[inline(always)]
            pub fn xosc_max_start(&self) -> XOSC_MAX_START_R {
                XOSC_MAX_START_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "CCFG Size and Disable Flags\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [size_and_dis_flags](size_and_dis_flags) module"]
    pub type SIZE_AND_DIS_FLAGS = crate::Reg<u32, _SIZE_AND_DIS_FLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SIZE_AND_DIS_FLAGS;
    #[doc = "`read()` method returns [size_and_dis_flags::R](size_and_dis_flags::R) reader structure"]
    impl crate::Readable for SIZE_AND_DIS_FLAGS {}
    #[doc = "CCFG Size and Disable Flags"]
    pub mod size_and_dis_flags {
        #[doc = "Reader of register SIZE_AND_DIS_FLAGS"]
        pub type R = crate::R<u32, super::SIZE_AND_DIS_FLAGS>;
        #[doc = "Reader of field `SIZE_OF_CCFG`"]
        pub type SIZE_OF_CCFG_R = crate::R<u16, u16>;
        #[doc = "Reader of field `DISABLE_FLAGS`"]
        pub type DISABLE_FLAGS_R = crate::R<u16, u16>;
        #[doc = "Reader of field `DIS_GPRAM`"]
        pub type DIS_GPRAM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIS_ALT_DCDC_SETTING`"]
        pub type DIS_ALT_DCDC_SETTING_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIS_XOSC_OVR`"]
        pub type DIS_XOSC_OVR_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 16:31 - SIZE_OF_CCFG"]
            #[inline(always)]
            pub fn size_of_ccfg(&self) -> SIZE_OF_CCFG_R {
                SIZE_OF_CCFG_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 3:15 - DISABLE_FLAGS"]
            #[inline(always)]
            pub fn disable_flags(&self) -> DISABLE_FLAGS_R {
                DISABLE_FLAGS_R::new(((self.bits >> 3) & 0x1fff) as u16)
            }
            #[doc = "Bit 2 - DIS_GPRAM"]
            #[inline(always)]
            pub fn dis_gpram(&self) -> DIS_GPRAM_R {
                DIS_GPRAM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIS_ALT_DCDC_SETTING"]
            #[inline(always)]
            pub fn dis_alt_dcdc_setting(&self) -> DIS_ALT_DCDC_SETTING_R {
                DIS_ALT_DCDC_SETTING_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIS_XOSC_OVR"]
            #[inline(always)]
            pub fn dis_xosc_ovr(&self) -> DIS_XOSC_OVR_R {
                DIS_XOSC_OVR_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Mode Configuration 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mode_conf](mode_conf) module"]
    pub type MODE_CONF = crate::Reg<u32, _MODE_CONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODE_CONF;
    #[doc = "`read()` method returns [mode_conf::R](mode_conf::R) reader structure"]
    impl crate::Readable for MODE_CONF {}
    #[doc = "Mode Configuration 0"]
    pub mod mode_conf {
        #[doc = "Reader of register MODE_CONF"]
        pub type R = crate::R<u32, super::MODE_CONF>;
        #[doc = "Reader of field `VDDR_TRIM_SLEEP_DELTA`"]
        pub type VDDR_TRIM_SLEEP_DELTA_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DCDC_RECHARGE`"]
        pub type DCDC_RECHARGE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DCDC_ACTIVE`"]
        pub type DCDC_ACTIVE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VDDR_EXT_LOAD`"]
        pub type VDDR_EXT_LOAD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VDDS_BOD_LEVEL`"]
        pub type VDDS_BOD_LEVEL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SCLK_LF_OPTION`"]
        pub type SCLK_LF_OPTION_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_TRIM_SLEEP_TC`"]
        pub type VDDR_TRIM_SLEEP_TC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTC_COMP`"]
        pub type RTC_COMP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_FREQ`"]
        pub type XOSC_FREQ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `XOSC_CAP_MOD`"]
        pub type XOSC_CAP_MOD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HF_COMP`"]
        pub type HF_COMP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSC_CAPARRAY_DELTA`"]
        pub type XOSC_CAPARRAY_DELTA_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_CAP`"]
        pub type VDDR_CAP_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - VDDR_TRIM_SLEEP_DELTA"]
            #[inline(always)]
            pub fn vddr_trim_sleep_delta(&self) -> VDDR_TRIM_SLEEP_DELTA_R {
                VDDR_TRIM_SLEEP_DELTA_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bit 27 - DCDC_RECHARGE"]
            #[inline(always)]
            pub fn dcdc_recharge(&self) -> DCDC_RECHARGE_R {
                DCDC_RECHARGE_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DCDC_ACTIVE"]
            #[inline(always)]
            pub fn dcdc_active(&self) -> DCDC_ACTIVE_R {
                DCDC_ACTIVE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - VDDR_EXT_LOAD"]
            #[inline(always)]
            pub fn vddr_ext_load(&self) -> VDDR_EXT_LOAD_R {
                VDDR_EXT_LOAD_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - VDDS_BOD_LEVEL"]
            #[inline(always)]
            pub fn vdds_bod_level(&self) -> VDDS_BOD_LEVEL_R {
                VDDS_BOD_LEVEL_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 22:23 - SCLK_LF_OPTION"]
            #[inline(always)]
            pub fn sclk_lf_option(&self) -> SCLK_LF_OPTION_R {
                SCLK_LF_OPTION_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bit 21 - VDDR_TRIM_SLEEP_TC"]
            #[inline(always)]
            pub fn vddr_trim_sleep_tc(&self) -> VDDR_TRIM_SLEEP_TC_R {
                VDDR_TRIM_SLEEP_TC_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - RTC_COMP"]
            #[inline(always)]
            pub fn rtc_comp(&self) -> RTC_COMP_R {
                RTC_COMP_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bits 18:19 - XOSC_FREQ"]
            #[inline(always)]
            pub fn xosc_freq(&self) -> XOSC_FREQ_R {
                XOSC_FREQ_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bit 17 - XOSC_CAP_MOD"]
            #[inline(always)]
            pub fn xosc_cap_mod(&self) -> XOSC_CAP_MOD_R {
                XOSC_CAP_MOD_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - HF_COMP"]
            #[inline(always)]
            pub fn hf_comp(&self) -> HF_COMP_R {
                HF_COMP_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - XOSC_CAPARRAY_DELTA"]
            #[inline(always)]
            pub fn xosc_caparray_delta(&self) -> XOSC_CAPARRAY_DELTA_R {
                XOSC_CAPARRAY_DELTA_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VDDR_CAP"]
            #[inline(always)]
            pub fn vddr_cap(&self) -> VDDR_CAP_R {
                VDDR_CAP_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Voltage Load 0 Enabled by MODE_CONF.VDDR_EXT_LOAD.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [volt_load_0](volt_load_0) module"]
    pub type VOLT_LOAD_0 = crate::Reg<u32, _VOLT_LOAD_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VOLT_LOAD_0;
    #[doc = "`read()` method returns [volt_load_0::R](volt_load_0::R) reader structure"]
    impl crate::Readable for VOLT_LOAD_0 {}
    #[doc = "Voltage Load 0 Enabled by MODE_CONF.VDDR_EXT_LOAD."]
    pub mod volt_load_0 {
        #[doc = "Reader of register VOLT_LOAD_0"]
        pub type R = crate::R<u32, super::VOLT_LOAD_0>;
        #[doc = "Reader of field `VDDR_EXT_TP45`"]
        pub type VDDR_EXT_TP45_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_EXT_TP25`"]
        pub type VDDR_EXT_TP25_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_EXT_TP5`"]
        pub type VDDR_EXT_TP5_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_EXT_TM15`"]
        pub type VDDR_EXT_TM15_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - VDDR_EXT_TP45"]
            #[inline(always)]
            pub fn vddr_ext_tp45(&self) -> VDDR_EXT_TP45_R {
                VDDR_EXT_TP45_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - VDDR_EXT_TP25"]
            #[inline(always)]
            pub fn vddr_ext_tp25(&self) -> VDDR_EXT_TP25_R {
                VDDR_EXT_TP25_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - VDDR_EXT_TP5"]
            #[inline(always)]
            pub fn vddr_ext_tp5(&self) -> VDDR_EXT_TP5_R {
                VDDR_EXT_TP5_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VDDR_EXT_TM15"]
            #[inline(always)]
            pub fn vddr_ext_tm15(&self) -> VDDR_EXT_TM15_R {
                VDDR_EXT_TM15_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Voltage Load 1 Enabled by MODE_CONF.VDDR_EXT_LOAD.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [volt_load_1](volt_load_1) module"]
    pub type VOLT_LOAD_1 = crate::Reg<u32, _VOLT_LOAD_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VOLT_LOAD_1;
    #[doc = "`read()` method returns [volt_load_1::R](volt_load_1::R) reader structure"]
    impl crate::Readable for VOLT_LOAD_1 {}
    #[doc = "Voltage Load 1 Enabled by MODE_CONF.VDDR_EXT_LOAD."]
    pub mod volt_load_1 {
        #[doc = "Reader of register VOLT_LOAD_1"]
        pub type R = crate::R<u32, super::VOLT_LOAD_1>;
        #[doc = "Reader of field `VDDR_EXT_TP125`"]
        pub type VDDR_EXT_TP125_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_EXT_TP105`"]
        pub type VDDR_EXT_TP105_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_EXT_TP85`"]
        pub type VDDR_EXT_TP85_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_EXT_TP65`"]
        pub type VDDR_EXT_TP65_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - VDDR_EXT_TP125"]
            #[inline(always)]
            pub fn vddr_ext_tp125(&self) -> VDDR_EXT_TP125_R {
                VDDR_EXT_TP125_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - VDDR_EXT_TP105"]
            #[inline(always)]
            pub fn vddr_ext_tp105(&self) -> VDDR_EXT_TP105_R {
                VDDR_EXT_TP105_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - VDDR_EXT_TP85"]
            #[inline(always)]
            pub fn vddr_ext_tp85(&self) -> VDDR_EXT_TP85_R {
                VDDR_EXT_TP85_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VDDR_EXT_TP65"]
            #[inline(always)]
            pub fn vddr_ext_tp65(&self) -> VDDR_EXT_TP65_R {
                VDDR_EXT_TP65_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Real Time Clock Offset Enabled by MODE_CONF.RTC_COMP.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtc_offset](rtc_offset) module"]
    pub type RTC_OFFSET = crate::Reg<u32, _RTC_OFFSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTC_OFFSET;
    #[doc = "`read()` method returns [rtc_offset::R](rtc_offset::R) reader structure"]
    impl crate::Readable for RTC_OFFSET {}
    #[doc = "Real Time Clock Offset Enabled by MODE_CONF.RTC_COMP."]
    pub mod rtc_offset {
        #[doc = "Reader of register RTC_OFFSET"]
        pub type R = crate::R<u32, super::RTC_OFFSET>;
        #[doc = "Reader of field `RTC_COMP_P0`"]
        pub type RTC_COMP_P0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `RTC_COMP_P1`"]
        pub type RTC_COMP_P1_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RTC_COMP_P2`"]
        pub type RTC_COMP_P2_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - RTC_COMP_P0"]
            #[inline(always)]
            pub fn rtc_comp_p0(&self) -> RTC_COMP_P0_R {
                RTC_COMP_P0_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - RTC_COMP_P1"]
            #[inline(always)]
            pub fn rtc_comp_p1(&self) -> RTC_COMP_P1_R {
                RTC_COMP_P1_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - RTC_COMP_P2"]
            #[inline(always)]
            pub fn rtc_comp_p2(&self) -> RTC_COMP_P2_R {
                RTC_COMP_P2_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Frequency Offset\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [freq_offset](freq_offset) module"]
    pub type FREQ_OFFSET = crate::Reg<u32, _FREQ_OFFSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FREQ_OFFSET;
    #[doc = "`read()` method returns [freq_offset::R](freq_offset::R) reader structure"]
    impl crate::Readable for FREQ_OFFSET {}
    #[doc = "Frequency Offset"]
    pub mod freq_offset {
        #[doc = "Reader of register FREQ_OFFSET"]
        pub type R = crate::R<u32, super::FREQ_OFFSET>;
        #[doc = "Reader of field `HF_COMP_P0`"]
        pub type HF_COMP_P0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `HF_COMP_P1`"]
        pub type HF_COMP_P1_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HF_COMP_P2`"]
        pub type HF_COMP_P2_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - HF_COMP_P0"]
            #[inline(always)]
            pub fn hf_comp_p0(&self) -> HF_COMP_P0_R {
                HF_COMP_P0_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - HF_COMP_P1"]
            #[inline(always)]
            pub fn hf_comp_p1(&self) -> HF_COMP_P1_R {
                HF_COMP_P1_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - HF_COMP_P2"]
            #[inline(always)]
            pub fn hf_comp_p2(&self) -> HF_COMP_P2_R {
                HF_COMP_P2_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "IEEE MAC Address 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ieee_mac_0](ieee_mac_0) module"]
    pub type IEEE_MAC_0 = crate::Reg<u32, _IEEE_MAC_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IEEE_MAC_0;
    #[doc = "`read()` method returns [ieee_mac_0::R](ieee_mac_0::R) reader structure"]
    impl crate::Readable for IEEE_MAC_0 {}
    #[doc = "IEEE MAC Address 0"]
    pub mod ieee_mac_0 {
        #[doc = "Reader of register IEEE_MAC_0"]
        pub type R = crate::R<u32, super::IEEE_MAC_0>;
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "IEEE MAC Address 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ieee_mac_1](ieee_mac_1) module"]
    pub type IEEE_MAC_1 = crate::Reg<u32, _IEEE_MAC_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IEEE_MAC_1;
    #[doc = "`read()` method returns [ieee_mac_1::R](ieee_mac_1::R) reader structure"]
    impl crate::Readable for IEEE_MAC_1 {}
    #[doc = "IEEE MAC Address 1"]
    pub mod ieee_mac_1 {
        #[doc = "Reader of register IEEE_MAC_1"]
        pub type R = crate::R<u32, super::IEEE_MAC_1>;
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "IEEE BLE Address 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ieee_ble_0](ieee_ble_0) module"]
    pub type IEEE_BLE_0 = crate::Reg<u32, _IEEE_BLE_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IEEE_BLE_0;
    #[doc = "`read()` method returns [ieee_ble_0::R](ieee_ble_0::R) reader structure"]
    impl crate::Readable for IEEE_BLE_0 {}
    #[doc = "IEEE BLE Address 0"]
    pub mod ieee_ble_0 {
        #[doc = "Reader of register IEEE_BLE_0"]
        pub type R = crate::R<u32, super::IEEE_BLE_0>;
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "IEEE BLE Address 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ieee_ble_1](ieee_ble_1) module"]
    pub type IEEE_BLE_1 = crate::Reg<u32, _IEEE_BLE_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IEEE_BLE_1;
    #[doc = "`read()` method returns [ieee_ble_1::R](ieee_ble_1::R) reader structure"]
    impl crate::Readable for IEEE_BLE_1 {}
    #[doc = "IEEE BLE Address 1"]
    pub mod ieee_ble_1 {
        #[doc = "Reader of register IEEE_BLE_1"]
        pub type R = crate::R<u32, super::IEEE_BLE_1>;
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Bootloader Configuration Configures the functionality of the ROM boot loader. If both the boot loader is enabled by the BOOTLOADER_ENABLE field and the boot loader backdoor is enabled by the BL_ENABLE field it is possible to force entry of the ROM boot loader even if a valid image is present in flash.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bl_config](bl_config) module"]
    pub type BL_CONFIG = crate::Reg<u32, _BL_CONFIG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BL_CONFIG;
    #[doc = "`read()` method returns [bl_config::R](bl_config::R) reader structure"]
    impl crate::Readable for BL_CONFIG {}
    #[doc = "Bootloader Configuration Configures the functionality of the ROM boot loader. If both the boot loader is enabled by the BOOTLOADER_ENABLE field and the boot loader backdoor is enabled by the BL_ENABLE field it is possible to force entry of the ROM boot loader even if a valid image is present in flash."]
    pub mod bl_config {
        #[doc = "Reader of register BL_CONFIG"]
        pub type R = crate::R<u32, super::BL_CONFIG>;
        #[doc = "Reader of field `BOOTLOADER_ENABLE`"]
        pub type BOOTLOADER_ENABLE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BL_LEVEL`"]
        pub type BL_LEVEL_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BL_PIN_NUMBER`"]
        pub type BL_PIN_NUMBER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BL_ENABLE`"]
        pub type BL_ENABLE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - BOOTLOADER_ENABLE"]
            #[inline(always)]
            pub fn bootloader_enable(&self) -> BOOTLOADER_ENABLE_R {
                BOOTLOADER_ENABLE_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bit 16 - BL_LEVEL"]
            #[inline(always)]
            pub fn bl_level(&self) -> BL_LEVEL_R {
                BL_LEVEL_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - BL_PIN_NUMBER"]
            #[inline(always)]
            pub fn bl_pin_number(&self) -> BL_PIN_NUMBER_R {
                BL_PIN_NUMBER_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BL_ENABLE"]
            #[inline(always)]
            pub fn bl_enable(&self) -> BL_ENABLE_R {
                BL_ENABLE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Erase Configuration\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [erase_conf](erase_conf) module"]
    pub type ERASE_CONF = crate::Reg<u32, _ERASE_CONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ERASE_CONF;
    #[doc = "`read()` method returns [erase_conf::R](erase_conf::R) reader structure"]
    impl crate::Readable for ERASE_CONF {}
    #[doc = "Erase Configuration"]
    pub mod erase_conf {
        #[doc = "Reader of register ERASE_CONF"]
        pub type R = crate::R<u32, super::ERASE_CONF>;
        #[doc = "Reader of field `CHIP_ERASE_DIS_N`"]
        pub type CHIP_ERASE_DIS_N_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BANK_ERASE_DIS_N`"]
        pub type BANK_ERASE_DIS_N_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 8 - CHIP_ERASE_DIS_N"]
            #[inline(always)]
            pub fn chip_erase_dis_n(&self) -> CHIP_ERASE_DIS_N_R {
                CHIP_ERASE_DIS_N_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - BANK_ERASE_DIS_N"]
            #[inline(always)]
            pub fn bank_erase_dis_n(&self) -> BANK_ERASE_DIS_N_R {
                BANK_ERASE_DIS_N_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "TI Options\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_ti_options](ccfg_ti_options) module"]
    pub type CCFG_TI_OPTIONS = crate::Reg<u32, _CCFG_TI_OPTIONS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_TI_OPTIONS;
    #[doc = "`read()` method returns [ccfg_ti_options::R](ccfg_ti_options::R) reader structure"]
    impl crate::Readable for CCFG_TI_OPTIONS {}
    #[doc = "TI Options"]
    pub mod ccfg_ti_options {
        #[doc = "Reader of register CCFG_TI_OPTIONS"]
        pub type R = crate::R<u32, super::CCFG_TI_OPTIONS>;
        #[doc = "Reader of field `TI_FA_ENABLE`"]
        pub type TI_FA_ENABLE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - TI_FA_ENABLE"]
            #[inline(always)]
            pub fn ti_fa_enable(&self) -> TI_FA_ENABLE_R {
                TI_FA_ENABLE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Test Access Points Enable 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_tap_dap_0](ccfg_tap_dap_0) module"]
    pub type CCFG_TAP_DAP_0 = crate::Reg<u32, _CCFG_TAP_DAP_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_TAP_DAP_0;
    #[doc = "`read()` method returns [ccfg_tap_dap_0::R](ccfg_tap_dap_0::R) reader structure"]
    impl crate::Readable for CCFG_TAP_DAP_0 {}
    #[doc = "Test Access Points Enable 0"]
    pub mod ccfg_tap_dap_0 {
        #[doc = "Reader of register CCFG_TAP_DAP_0"]
        pub type R = crate::R<u32, super::CCFG_TAP_DAP_0>;
        #[doc = "Reader of field `CPU_DAP_ENABLE`"]
        pub type CPU_DAP_ENABLE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PRCM_TAP_ENABLE`"]
        pub type PRCM_TAP_ENABLE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TEST_TAP_ENABLE`"]
        pub type TEST_TAP_ENABLE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:23 - CPU_DAP_ENABLE"]
            #[inline(always)]
            pub fn cpu_dap_enable(&self) -> CPU_DAP_ENABLE_R {
                CPU_DAP_ENABLE_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - PRCM_TAP_ENABLE"]
            #[inline(always)]
            pub fn prcm_tap_enable(&self) -> PRCM_TAP_ENABLE_R {
                PRCM_TAP_ENABLE_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - TEST_TAP_ENABLE"]
            #[inline(always)]
            pub fn test_tap_enable(&self) -> TEST_TAP_ENABLE_R {
                TEST_TAP_ENABLE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Test Access Points Enable 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_tap_dap_1](ccfg_tap_dap_1) module"]
    pub type CCFG_TAP_DAP_1 = crate::Reg<u32, _CCFG_TAP_DAP_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_TAP_DAP_1;
    #[doc = "`read()` method returns [ccfg_tap_dap_1::R](ccfg_tap_dap_1::R) reader structure"]
    impl crate::Readable for CCFG_TAP_DAP_1 {}
    #[doc = "Test Access Points Enable 1"]
    pub mod ccfg_tap_dap_1 {
        #[doc = "Reader of register CCFG_TAP_DAP_1"]
        pub type R = crate::R<u32, super::CCFG_TAP_DAP_1>;
        #[doc = "Reader of field `PBIST2_TAP_ENABLE`"]
        pub type PBIST2_TAP_ENABLE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PBIST1_TAP_ENABLE`"]
        pub type PBIST1_TAP_ENABLE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `WUC_TAP_ENABLE`"]
        pub type WUC_TAP_ENABLE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:23 - PBIST2_TAP_ENABLE"]
            #[inline(always)]
            pub fn pbist2_tap_enable(&self) -> PBIST2_TAP_ENABLE_R {
                PBIST2_TAP_ENABLE_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - PBIST1_TAP_ENABLE"]
            #[inline(always)]
            pub fn pbist1_tap_enable(&self) -> PBIST1_TAP_ENABLE_R {
                PBIST1_TAP_ENABLE_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - WUC_TAP_ENABLE"]
            #[inline(always)]
            pub fn wuc_tap_enable(&self) -> WUC_TAP_ENABLE_R {
                WUC_TAP_ENABLE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Image Valid\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [image_valid_conf](image_valid_conf) module"]
    pub type IMAGE_VALID_CONF = crate::Reg<u32, _IMAGE_VALID_CONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMAGE_VALID_CONF;
    #[doc = "`read()` method returns [image_valid_conf::R](image_valid_conf::R) reader structure"]
    impl crate::Readable for IMAGE_VALID_CONF {}
    #[doc = "Image Valid"]
    pub mod image_valid_conf {
        #[doc = "Reader of register IMAGE_VALID_CONF"]
        pub type R = crate::R<u32, super::IMAGE_VALID_CONF>;
        #[doc = "Reader of field `IMAGE_VALID`"]
        pub type IMAGE_VALID_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - IMAGE_VALID"]
            #[inline(always)]
            pub fn image_valid(&self) -> IMAGE_VALID_R {
                IMAGE_VALID_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Protect Sectors 0-31 Each bit write protects one 4KB flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_prot_31_0](ccfg_prot_31_0) module"]
    pub type CCFG_PROT_31_0 = crate::Reg<u32, _CCFG_PROT_31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_PROT_31_0;
    #[doc = "`read()` method returns [ccfg_prot_31_0::R](ccfg_prot_31_0::R) reader structure"]
    impl crate::Readable for CCFG_PROT_31_0 {}
    #[doc = "Protect Sectors 0-31 Each bit write protects one 4KB flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect."]
    pub mod ccfg_prot_31_0 {
        #[doc = "Reader of register CCFG_PROT_31_0"]
        pub type R = crate::R<u32, super::CCFG_PROT_31_0>;
        #[doc = "Reader of field `WRT_PROT_SEC_31`"]
        pub type WRT_PROT_SEC_31_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_30`"]
        pub type WRT_PROT_SEC_30_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_29`"]
        pub type WRT_PROT_SEC_29_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_28`"]
        pub type WRT_PROT_SEC_28_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_27`"]
        pub type WRT_PROT_SEC_27_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_26`"]
        pub type WRT_PROT_SEC_26_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_25`"]
        pub type WRT_PROT_SEC_25_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_24`"]
        pub type WRT_PROT_SEC_24_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_23`"]
        pub type WRT_PROT_SEC_23_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_22`"]
        pub type WRT_PROT_SEC_22_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_21`"]
        pub type WRT_PROT_SEC_21_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_20`"]
        pub type WRT_PROT_SEC_20_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_19`"]
        pub type WRT_PROT_SEC_19_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_18`"]
        pub type WRT_PROT_SEC_18_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_17`"]
        pub type WRT_PROT_SEC_17_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_16`"]
        pub type WRT_PROT_SEC_16_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_15`"]
        pub type WRT_PROT_SEC_15_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_14`"]
        pub type WRT_PROT_SEC_14_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_13`"]
        pub type WRT_PROT_SEC_13_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_12`"]
        pub type WRT_PROT_SEC_12_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_11`"]
        pub type WRT_PROT_SEC_11_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_10`"]
        pub type WRT_PROT_SEC_10_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_9`"]
        pub type WRT_PROT_SEC_9_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_8`"]
        pub type WRT_PROT_SEC_8_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_7`"]
        pub type WRT_PROT_SEC_7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_6`"]
        pub type WRT_PROT_SEC_6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_5`"]
        pub type WRT_PROT_SEC_5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_4`"]
        pub type WRT_PROT_SEC_4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_3`"]
        pub type WRT_PROT_SEC_3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_2`"]
        pub type WRT_PROT_SEC_2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_1`"]
        pub type WRT_PROT_SEC_1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_0`"]
        pub type WRT_PROT_SEC_0_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - WRT_PROT_SEC_31"]
            #[inline(always)]
            pub fn wrt_prot_sec_31(&self) -> WRT_PROT_SEC_31_R {
                WRT_PROT_SEC_31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - WRT_PROT_SEC_30"]
            #[inline(always)]
            pub fn wrt_prot_sec_30(&self) -> WRT_PROT_SEC_30_R {
                WRT_PROT_SEC_30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - WRT_PROT_SEC_29"]
            #[inline(always)]
            pub fn wrt_prot_sec_29(&self) -> WRT_PROT_SEC_29_R {
                WRT_PROT_SEC_29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - WRT_PROT_SEC_28"]
            #[inline(always)]
            pub fn wrt_prot_sec_28(&self) -> WRT_PROT_SEC_28_R {
                WRT_PROT_SEC_28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - WRT_PROT_SEC_27"]
            #[inline(always)]
            pub fn wrt_prot_sec_27(&self) -> WRT_PROT_SEC_27_R {
                WRT_PROT_SEC_27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - WRT_PROT_SEC_26"]
            #[inline(always)]
            pub fn wrt_prot_sec_26(&self) -> WRT_PROT_SEC_26_R {
                WRT_PROT_SEC_26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - WRT_PROT_SEC_25"]
            #[inline(always)]
            pub fn wrt_prot_sec_25(&self) -> WRT_PROT_SEC_25_R {
                WRT_PROT_SEC_25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - WRT_PROT_SEC_24"]
            #[inline(always)]
            pub fn wrt_prot_sec_24(&self) -> WRT_PROT_SEC_24_R {
                WRT_PROT_SEC_24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - WRT_PROT_SEC_23"]
            #[inline(always)]
            pub fn wrt_prot_sec_23(&self) -> WRT_PROT_SEC_23_R {
                WRT_PROT_SEC_23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - WRT_PROT_SEC_22"]
            #[inline(always)]
            pub fn wrt_prot_sec_22(&self) -> WRT_PROT_SEC_22_R {
                WRT_PROT_SEC_22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - WRT_PROT_SEC_21"]
            #[inline(always)]
            pub fn wrt_prot_sec_21(&self) -> WRT_PROT_SEC_21_R {
                WRT_PROT_SEC_21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - WRT_PROT_SEC_20"]
            #[inline(always)]
            pub fn wrt_prot_sec_20(&self) -> WRT_PROT_SEC_20_R {
                WRT_PROT_SEC_20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - WRT_PROT_SEC_19"]
            #[inline(always)]
            pub fn wrt_prot_sec_19(&self) -> WRT_PROT_SEC_19_R {
                WRT_PROT_SEC_19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - WRT_PROT_SEC_18"]
            #[inline(always)]
            pub fn wrt_prot_sec_18(&self) -> WRT_PROT_SEC_18_R {
                WRT_PROT_SEC_18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - WRT_PROT_SEC_17"]
            #[inline(always)]
            pub fn wrt_prot_sec_17(&self) -> WRT_PROT_SEC_17_R {
                WRT_PROT_SEC_17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - WRT_PROT_SEC_16"]
            #[inline(always)]
            pub fn wrt_prot_sec_16(&self) -> WRT_PROT_SEC_16_R {
                WRT_PROT_SEC_16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - WRT_PROT_SEC_15"]
            #[inline(always)]
            pub fn wrt_prot_sec_15(&self) -> WRT_PROT_SEC_15_R {
                WRT_PROT_SEC_15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - WRT_PROT_SEC_14"]
            #[inline(always)]
            pub fn wrt_prot_sec_14(&self) -> WRT_PROT_SEC_14_R {
                WRT_PROT_SEC_14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - WRT_PROT_SEC_13"]
            #[inline(always)]
            pub fn wrt_prot_sec_13(&self) -> WRT_PROT_SEC_13_R {
                WRT_PROT_SEC_13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - WRT_PROT_SEC_12"]
            #[inline(always)]
            pub fn wrt_prot_sec_12(&self) -> WRT_PROT_SEC_12_R {
                WRT_PROT_SEC_12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WRT_PROT_SEC_11"]
            #[inline(always)]
            pub fn wrt_prot_sec_11(&self) -> WRT_PROT_SEC_11_R {
                WRT_PROT_SEC_11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WRT_PROT_SEC_10"]
            #[inline(always)]
            pub fn wrt_prot_sec_10(&self) -> WRT_PROT_SEC_10_R {
                WRT_PROT_SEC_10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WRT_PROT_SEC_9"]
            #[inline(always)]
            pub fn wrt_prot_sec_9(&self) -> WRT_PROT_SEC_9_R {
                WRT_PROT_SEC_9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - WRT_PROT_SEC_8"]
            #[inline(always)]
            pub fn wrt_prot_sec_8(&self) -> WRT_PROT_SEC_8_R {
                WRT_PROT_SEC_8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - WRT_PROT_SEC_7"]
            #[inline(always)]
            pub fn wrt_prot_sec_7(&self) -> WRT_PROT_SEC_7_R {
                WRT_PROT_SEC_7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - WRT_PROT_SEC_6"]
            #[inline(always)]
            pub fn wrt_prot_sec_6(&self) -> WRT_PROT_SEC_6_R {
                WRT_PROT_SEC_6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - WRT_PROT_SEC_5"]
            #[inline(always)]
            pub fn wrt_prot_sec_5(&self) -> WRT_PROT_SEC_5_R {
                WRT_PROT_SEC_5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - WRT_PROT_SEC_4"]
            #[inline(always)]
            pub fn wrt_prot_sec_4(&self) -> WRT_PROT_SEC_4_R {
                WRT_PROT_SEC_4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WRT_PROT_SEC_3"]
            #[inline(always)]
            pub fn wrt_prot_sec_3(&self) -> WRT_PROT_SEC_3_R {
                WRT_PROT_SEC_3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - WRT_PROT_SEC_2"]
            #[inline(always)]
            pub fn wrt_prot_sec_2(&self) -> WRT_PROT_SEC_2_R {
                WRT_PROT_SEC_2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - WRT_PROT_SEC_1"]
            #[inline(always)]
            pub fn wrt_prot_sec_1(&self) -> WRT_PROT_SEC_1_R {
                WRT_PROT_SEC_1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - WRT_PROT_SEC_0"]
            #[inline(always)]
            pub fn wrt_prot_sec_0(&self) -> WRT_PROT_SEC_0_R {
                WRT_PROT_SEC_0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Protect Sectors 32-63 Each bit write protects one 4KB flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_prot_63_32](ccfg_prot_63_32) module"]
    pub type CCFG_PROT_63_32 = crate::Reg<u32, _CCFG_PROT_63_32>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_PROT_63_32;
    #[doc = "`read()` method returns [ccfg_prot_63_32::R](ccfg_prot_63_32::R) reader structure"]
    impl crate::Readable for CCFG_PROT_63_32 {}
    #[doc = "Protect Sectors 32-63 Each bit write protects one 4KB flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx."]
    pub mod ccfg_prot_63_32 {
        #[doc = "Reader of register CCFG_PROT_63_32"]
        pub type R = crate::R<u32, super::CCFG_PROT_63_32>;
        #[doc = "Reader of field `WRT_PROT_SEC_63`"]
        pub type WRT_PROT_SEC_63_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_62`"]
        pub type WRT_PROT_SEC_62_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_61`"]
        pub type WRT_PROT_SEC_61_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_60`"]
        pub type WRT_PROT_SEC_60_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_59`"]
        pub type WRT_PROT_SEC_59_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_58`"]
        pub type WRT_PROT_SEC_58_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_57`"]
        pub type WRT_PROT_SEC_57_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_56`"]
        pub type WRT_PROT_SEC_56_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_55`"]
        pub type WRT_PROT_SEC_55_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_54`"]
        pub type WRT_PROT_SEC_54_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_53`"]
        pub type WRT_PROT_SEC_53_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_52`"]
        pub type WRT_PROT_SEC_52_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_51`"]
        pub type WRT_PROT_SEC_51_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_50`"]
        pub type WRT_PROT_SEC_50_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_49`"]
        pub type WRT_PROT_SEC_49_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_48`"]
        pub type WRT_PROT_SEC_48_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_47`"]
        pub type WRT_PROT_SEC_47_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_46`"]
        pub type WRT_PROT_SEC_46_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_45`"]
        pub type WRT_PROT_SEC_45_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_44`"]
        pub type WRT_PROT_SEC_44_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_43`"]
        pub type WRT_PROT_SEC_43_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_42`"]
        pub type WRT_PROT_SEC_42_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_41`"]
        pub type WRT_PROT_SEC_41_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_40`"]
        pub type WRT_PROT_SEC_40_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_39`"]
        pub type WRT_PROT_SEC_39_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_38`"]
        pub type WRT_PROT_SEC_38_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_37`"]
        pub type WRT_PROT_SEC_37_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_36`"]
        pub type WRT_PROT_SEC_36_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_35`"]
        pub type WRT_PROT_SEC_35_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_34`"]
        pub type WRT_PROT_SEC_34_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_33`"]
        pub type WRT_PROT_SEC_33_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_32`"]
        pub type WRT_PROT_SEC_32_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - WRT_PROT_SEC_63"]
            #[inline(always)]
            pub fn wrt_prot_sec_63(&self) -> WRT_PROT_SEC_63_R {
                WRT_PROT_SEC_63_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - WRT_PROT_SEC_62"]
            #[inline(always)]
            pub fn wrt_prot_sec_62(&self) -> WRT_PROT_SEC_62_R {
                WRT_PROT_SEC_62_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - WRT_PROT_SEC_61"]
            #[inline(always)]
            pub fn wrt_prot_sec_61(&self) -> WRT_PROT_SEC_61_R {
                WRT_PROT_SEC_61_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - WRT_PROT_SEC_60"]
            #[inline(always)]
            pub fn wrt_prot_sec_60(&self) -> WRT_PROT_SEC_60_R {
                WRT_PROT_SEC_60_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - WRT_PROT_SEC_59"]
            #[inline(always)]
            pub fn wrt_prot_sec_59(&self) -> WRT_PROT_SEC_59_R {
                WRT_PROT_SEC_59_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - WRT_PROT_SEC_58"]
            #[inline(always)]
            pub fn wrt_prot_sec_58(&self) -> WRT_PROT_SEC_58_R {
                WRT_PROT_SEC_58_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - WRT_PROT_SEC_57"]
            #[inline(always)]
            pub fn wrt_prot_sec_57(&self) -> WRT_PROT_SEC_57_R {
                WRT_PROT_SEC_57_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - WRT_PROT_SEC_56"]
            #[inline(always)]
            pub fn wrt_prot_sec_56(&self) -> WRT_PROT_SEC_56_R {
                WRT_PROT_SEC_56_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - WRT_PROT_SEC_55"]
            #[inline(always)]
            pub fn wrt_prot_sec_55(&self) -> WRT_PROT_SEC_55_R {
                WRT_PROT_SEC_55_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - WRT_PROT_SEC_54"]
            #[inline(always)]
            pub fn wrt_prot_sec_54(&self) -> WRT_PROT_SEC_54_R {
                WRT_PROT_SEC_54_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - WRT_PROT_SEC_53"]
            #[inline(always)]
            pub fn wrt_prot_sec_53(&self) -> WRT_PROT_SEC_53_R {
                WRT_PROT_SEC_53_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - WRT_PROT_SEC_52"]
            #[inline(always)]
            pub fn wrt_prot_sec_52(&self) -> WRT_PROT_SEC_52_R {
                WRT_PROT_SEC_52_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - WRT_PROT_SEC_51"]
            #[inline(always)]
            pub fn wrt_prot_sec_51(&self) -> WRT_PROT_SEC_51_R {
                WRT_PROT_SEC_51_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - WRT_PROT_SEC_50"]
            #[inline(always)]
            pub fn wrt_prot_sec_50(&self) -> WRT_PROT_SEC_50_R {
                WRT_PROT_SEC_50_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - WRT_PROT_SEC_49"]
            #[inline(always)]
            pub fn wrt_prot_sec_49(&self) -> WRT_PROT_SEC_49_R {
                WRT_PROT_SEC_49_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - WRT_PROT_SEC_48"]
            #[inline(always)]
            pub fn wrt_prot_sec_48(&self) -> WRT_PROT_SEC_48_R {
                WRT_PROT_SEC_48_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - WRT_PROT_SEC_47"]
            #[inline(always)]
            pub fn wrt_prot_sec_47(&self) -> WRT_PROT_SEC_47_R {
                WRT_PROT_SEC_47_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - WRT_PROT_SEC_46"]
            #[inline(always)]
            pub fn wrt_prot_sec_46(&self) -> WRT_PROT_SEC_46_R {
                WRT_PROT_SEC_46_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - WRT_PROT_SEC_45"]
            #[inline(always)]
            pub fn wrt_prot_sec_45(&self) -> WRT_PROT_SEC_45_R {
                WRT_PROT_SEC_45_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - WRT_PROT_SEC_44"]
            #[inline(always)]
            pub fn wrt_prot_sec_44(&self) -> WRT_PROT_SEC_44_R {
                WRT_PROT_SEC_44_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WRT_PROT_SEC_43"]
            #[inline(always)]
            pub fn wrt_prot_sec_43(&self) -> WRT_PROT_SEC_43_R {
                WRT_PROT_SEC_43_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WRT_PROT_SEC_42"]
            #[inline(always)]
            pub fn wrt_prot_sec_42(&self) -> WRT_PROT_SEC_42_R {
                WRT_PROT_SEC_42_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WRT_PROT_SEC_41"]
            #[inline(always)]
            pub fn wrt_prot_sec_41(&self) -> WRT_PROT_SEC_41_R {
                WRT_PROT_SEC_41_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - WRT_PROT_SEC_40"]
            #[inline(always)]
            pub fn wrt_prot_sec_40(&self) -> WRT_PROT_SEC_40_R {
                WRT_PROT_SEC_40_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - WRT_PROT_SEC_39"]
            #[inline(always)]
            pub fn wrt_prot_sec_39(&self) -> WRT_PROT_SEC_39_R {
                WRT_PROT_SEC_39_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - WRT_PROT_SEC_38"]
            #[inline(always)]
            pub fn wrt_prot_sec_38(&self) -> WRT_PROT_SEC_38_R {
                WRT_PROT_SEC_38_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - WRT_PROT_SEC_37"]
            #[inline(always)]
            pub fn wrt_prot_sec_37(&self) -> WRT_PROT_SEC_37_R {
                WRT_PROT_SEC_37_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - WRT_PROT_SEC_36"]
            #[inline(always)]
            pub fn wrt_prot_sec_36(&self) -> WRT_PROT_SEC_36_R {
                WRT_PROT_SEC_36_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WRT_PROT_SEC_35"]
            #[inline(always)]
            pub fn wrt_prot_sec_35(&self) -> WRT_PROT_SEC_35_R {
                WRT_PROT_SEC_35_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - WRT_PROT_SEC_34"]
            #[inline(always)]
            pub fn wrt_prot_sec_34(&self) -> WRT_PROT_SEC_34_R {
                WRT_PROT_SEC_34_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - WRT_PROT_SEC_33"]
            #[inline(always)]
            pub fn wrt_prot_sec_33(&self) -> WRT_PROT_SEC_33_R {
                WRT_PROT_SEC_33_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - WRT_PROT_SEC_32"]
            #[inline(always)]
            pub fn wrt_prot_sec_32(&self) -> WRT_PROT_SEC_32_R {
                WRT_PROT_SEC_32_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Protect Sectors 64-95 Each bit write protects one flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_prot_95_64](ccfg_prot_95_64) module"]
    pub type CCFG_PROT_95_64 = crate::Reg<u32, _CCFG_PROT_95_64>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_PROT_95_64;
    #[doc = "`read()` method returns [ccfg_prot_95_64::R](ccfg_prot_95_64::R) reader structure"]
    impl crate::Readable for CCFG_PROT_95_64 {}
    #[doc = "Protect Sectors 64-95 Each bit write protects one flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx."]
    pub mod ccfg_prot_95_64 {
        #[doc = "Reader of register CCFG_PROT_95_64"]
        pub type R = crate::R<u32, super::CCFG_PROT_95_64>;
        #[doc = "Reader of field `WRT_PROT_SEC_95`"]
        pub type WRT_PROT_SEC_95_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_94`"]
        pub type WRT_PROT_SEC_94_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_93`"]
        pub type WRT_PROT_SEC_93_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_92`"]
        pub type WRT_PROT_SEC_92_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_91`"]
        pub type WRT_PROT_SEC_91_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_90`"]
        pub type WRT_PROT_SEC_90_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_89`"]
        pub type WRT_PROT_SEC_89_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_88`"]
        pub type WRT_PROT_SEC_88_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_87`"]
        pub type WRT_PROT_SEC_87_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_86`"]
        pub type WRT_PROT_SEC_86_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_85`"]
        pub type WRT_PROT_SEC_85_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_84`"]
        pub type WRT_PROT_SEC_84_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_83`"]
        pub type WRT_PROT_SEC_83_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_82`"]
        pub type WRT_PROT_SEC_82_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_81`"]
        pub type WRT_PROT_SEC_81_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_80`"]
        pub type WRT_PROT_SEC_80_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_79`"]
        pub type WRT_PROT_SEC_79_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_78`"]
        pub type WRT_PROT_SEC_78_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_77`"]
        pub type WRT_PROT_SEC_77_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_76`"]
        pub type WRT_PROT_SEC_76_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_75`"]
        pub type WRT_PROT_SEC_75_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_74`"]
        pub type WRT_PROT_SEC_74_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_73`"]
        pub type WRT_PROT_SEC_73_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_72`"]
        pub type WRT_PROT_SEC_72_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_71`"]
        pub type WRT_PROT_SEC_71_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_70`"]
        pub type WRT_PROT_SEC_70_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_69`"]
        pub type WRT_PROT_SEC_69_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_68`"]
        pub type WRT_PROT_SEC_68_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_67`"]
        pub type WRT_PROT_SEC_67_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_66`"]
        pub type WRT_PROT_SEC_66_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_65`"]
        pub type WRT_PROT_SEC_65_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_64`"]
        pub type WRT_PROT_SEC_64_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - WRT_PROT_SEC_95"]
            #[inline(always)]
            pub fn wrt_prot_sec_95(&self) -> WRT_PROT_SEC_95_R {
                WRT_PROT_SEC_95_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - WRT_PROT_SEC_94"]
            #[inline(always)]
            pub fn wrt_prot_sec_94(&self) -> WRT_PROT_SEC_94_R {
                WRT_PROT_SEC_94_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - WRT_PROT_SEC_93"]
            #[inline(always)]
            pub fn wrt_prot_sec_93(&self) -> WRT_PROT_SEC_93_R {
                WRT_PROT_SEC_93_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - WRT_PROT_SEC_92"]
            #[inline(always)]
            pub fn wrt_prot_sec_92(&self) -> WRT_PROT_SEC_92_R {
                WRT_PROT_SEC_92_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - WRT_PROT_SEC_91"]
            #[inline(always)]
            pub fn wrt_prot_sec_91(&self) -> WRT_PROT_SEC_91_R {
                WRT_PROT_SEC_91_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - WRT_PROT_SEC_90"]
            #[inline(always)]
            pub fn wrt_prot_sec_90(&self) -> WRT_PROT_SEC_90_R {
                WRT_PROT_SEC_90_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - WRT_PROT_SEC_89"]
            #[inline(always)]
            pub fn wrt_prot_sec_89(&self) -> WRT_PROT_SEC_89_R {
                WRT_PROT_SEC_89_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - WRT_PROT_SEC_88"]
            #[inline(always)]
            pub fn wrt_prot_sec_88(&self) -> WRT_PROT_SEC_88_R {
                WRT_PROT_SEC_88_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - WRT_PROT_SEC_87"]
            #[inline(always)]
            pub fn wrt_prot_sec_87(&self) -> WRT_PROT_SEC_87_R {
                WRT_PROT_SEC_87_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - WRT_PROT_SEC_86"]
            #[inline(always)]
            pub fn wrt_prot_sec_86(&self) -> WRT_PROT_SEC_86_R {
                WRT_PROT_SEC_86_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - WRT_PROT_SEC_85"]
            #[inline(always)]
            pub fn wrt_prot_sec_85(&self) -> WRT_PROT_SEC_85_R {
                WRT_PROT_SEC_85_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - WRT_PROT_SEC_84"]
            #[inline(always)]
            pub fn wrt_prot_sec_84(&self) -> WRT_PROT_SEC_84_R {
                WRT_PROT_SEC_84_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - WRT_PROT_SEC_83"]
            #[inline(always)]
            pub fn wrt_prot_sec_83(&self) -> WRT_PROT_SEC_83_R {
                WRT_PROT_SEC_83_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - WRT_PROT_SEC_82"]
            #[inline(always)]
            pub fn wrt_prot_sec_82(&self) -> WRT_PROT_SEC_82_R {
                WRT_PROT_SEC_82_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - WRT_PROT_SEC_81"]
            #[inline(always)]
            pub fn wrt_prot_sec_81(&self) -> WRT_PROT_SEC_81_R {
                WRT_PROT_SEC_81_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - WRT_PROT_SEC_80"]
            #[inline(always)]
            pub fn wrt_prot_sec_80(&self) -> WRT_PROT_SEC_80_R {
                WRT_PROT_SEC_80_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - WRT_PROT_SEC_79"]
            #[inline(always)]
            pub fn wrt_prot_sec_79(&self) -> WRT_PROT_SEC_79_R {
                WRT_PROT_SEC_79_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - WRT_PROT_SEC_78"]
            #[inline(always)]
            pub fn wrt_prot_sec_78(&self) -> WRT_PROT_SEC_78_R {
                WRT_PROT_SEC_78_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - WRT_PROT_SEC_77"]
            #[inline(always)]
            pub fn wrt_prot_sec_77(&self) -> WRT_PROT_SEC_77_R {
                WRT_PROT_SEC_77_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - WRT_PROT_SEC_76"]
            #[inline(always)]
            pub fn wrt_prot_sec_76(&self) -> WRT_PROT_SEC_76_R {
                WRT_PROT_SEC_76_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WRT_PROT_SEC_75"]
            #[inline(always)]
            pub fn wrt_prot_sec_75(&self) -> WRT_PROT_SEC_75_R {
                WRT_PROT_SEC_75_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WRT_PROT_SEC_74"]
            #[inline(always)]
            pub fn wrt_prot_sec_74(&self) -> WRT_PROT_SEC_74_R {
                WRT_PROT_SEC_74_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WRT_PROT_SEC_73"]
            #[inline(always)]
            pub fn wrt_prot_sec_73(&self) -> WRT_PROT_SEC_73_R {
                WRT_PROT_SEC_73_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - WRT_PROT_SEC_72"]
            #[inline(always)]
            pub fn wrt_prot_sec_72(&self) -> WRT_PROT_SEC_72_R {
                WRT_PROT_SEC_72_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - WRT_PROT_SEC_71"]
            #[inline(always)]
            pub fn wrt_prot_sec_71(&self) -> WRT_PROT_SEC_71_R {
                WRT_PROT_SEC_71_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - WRT_PROT_SEC_70"]
            #[inline(always)]
            pub fn wrt_prot_sec_70(&self) -> WRT_PROT_SEC_70_R {
                WRT_PROT_SEC_70_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - WRT_PROT_SEC_69"]
            #[inline(always)]
            pub fn wrt_prot_sec_69(&self) -> WRT_PROT_SEC_69_R {
                WRT_PROT_SEC_69_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - WRT_PROT_SEC_68"]
            #[inline(always)]
            pub fn wrt_prot_sec_68(&self) -> WRT_PROT_SEC_68_R {
                WRT_PROT_SEC_68_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WRT_PROT_SEC_67"]
            #[inline(always)]
            pub fn wrt_prot_sec_67(&self) -> WRT_PROT_SEC_67_R {
                WRT_PROT_SEC_67_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - WRT_PROT_SEC_66"]
            #[inline(always)]
            pub fn wrt_prot_sec_66(&self) -> WRT_PROT_SEC_66_R {
                WRT_PROT_SEC_66_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - WRT_PROT_SEC_65"]
            #[inline(always)]
            pub fn wrt_prot_sec_65(&self) -> WRT_PROT_SEC_65_R {
                WRT_PROT_SEC_65_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - WRT_PROT_SEC_64"]
            #[inline(always)]
            pub fn wrt_prot_sec_64(&self) -> WRT_PROT_SEC_64_R {
                WRT_PROT_SEC_64_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Protect Sectors 96-127 Each bit write protects one flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccfg_prot_127_96](ccfg_prot_127_96) module"]
    pub type CCFG_PROT_127_96 = crate::Reg<u32, _CCFG_PROT_127_96>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCFG_PROT_127_96;
    #[doc = "`read()` method returns [ccfg_prot_127_96::R](ccfg_prot_127_96::R) reader structure"]
    impl crate::Readable for CCFG_PROT_127_96 {}
    #[doc = "Protect Sectors 96-127 Each bit write protects one flash sector from being both programmed and erased. Bit must be set to 0 in order to enable sector write protect. Not in use by CC26xx and CC13xx."]
    pub mod ccfg_prot_127_96 {
        #[doc = "Reader of register CCFG_PROT_127_96"]
        pub type R = crate::R<u32, super::CCFG_PROT_127_96>;
        #[doc = "Reader of field `WRT_PROT_SEC_127`"]
        pub type WRT_PROT_SEC_127_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_126`"]
        pub type WRT_PROT_SEC_126_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_125`"]
        pub type WRT_PROT_SEC_125_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_124`"]
        pub type WRT_PROT_SEC_124_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_123`"]
        pub type WRT_PROT_SEC_123_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_122`"]
        pub type WRT_PROT_SEC_122_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_121`"]
        pub type WRT_PROT_SEC_121_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_120`"]
        pub type WRT_PROT_SEC_120_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_119`"]
        pub type WRT_PROT_SEC_119_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_118`"]
        pub type WRT_PROT_SEC_118_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_117`"]
        pub type WRT_PROT_SEC_117_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_116`"]
        pub type WRT_PROT_SEC_116_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_115`"]
        pub type WRT_PROT_SEC_115_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_114`"]
        pub type WRT_PROT_SEC_114_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_113`"]
        pub type WRT_PROT_SEC_113_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_112`"]
        pub type WRT_PROT_SEC_112_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_111`"]
        pub type WRT_PROT_SEC_111_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_110`"]
        pub type WRT_PROT_SEC_110_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_109`"]
        pub type WRT_PROT_SEC_109_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_108`"]
        pub type WRT_PROT_SEC_108_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_107`"]
        pub type WRT_PROT_SEC_107_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_106`"]
        pub type WRT_PROT_SEC_106_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_105`"]
        pub type WRT_PROT_SEC_105_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_104`"]
        pub type WRT_PROT_SEC_104_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_103`"]
        pub type WRT_PROT_SEC_103_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_102`"]
        pub type WRT_PROT_SEC_102_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_101`"]
        pub type WRT_PROT_SEC_101_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_100`"]
        pub type WRT_PROT_SEC_100_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_99`"]
        pub type WRT_PROT_SEC_99_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_98`"]
        pub type WRT_PROT_SEC_98_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_97`"]
        pub type WRT_PROT_SEC_97_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WRT_PROT_SEC_96`"]
        pub type WRT_PROT_SEC_96_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - WRT_PROT_SEC_127"]
            #[inline(always)]
            pub fn wrt_prot_sec_127(&self) -> WRT_PROT_SEC_127_R {
                WRT_PROT_SEC_127_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - WRT_PROT_SEC_126"]
            #[inline(always)]
            pub fn wrt_prot_sec_126(&self) -> WRT_PROT_SEC_126_R {
                WRT_PROT_SEC_126_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - WRT_PROT_SEC_125"]
            #[inline(always)]
            pub fn wrt_prot_sec_125(&self) -> WRT_PROT_SEC_125_R {
                WRT_PROT_SEC_125_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - WRT_PROT_SEC_124"]
            #[inline(always)]
            pub fn wrt_prot_sec_124(&self) -> WRT_PROT_SEC_124_R {
                WRT_PROT_SEC_124_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - WRT_PROT_SEC_123"]
            #[inline(always)]
            pub fn wrt_prot_sec_123(&self) -> WRT_PROT_SEC_123_R {
                WRT_PROT_SEC_123_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - WRT_PROT_SEC_122"]
            #[inline(always)]
            pub fn wrt_prot_sec_122(&self) -> WRT_PROT_SEC_122_R {
                WRT_PROT_SEC_122_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - WRT_PROT_SEC_121"]
            #[inline(always)]
            pub fn wrt_prot_sec_121(&self) -> WRT_PROT_SEC_121_R {
                WRT_PROT_SEC_121_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - WRT_PROT_SEC_120"]
            #[inline(always)]
            pub fn wrt_prot_sec_120(&self) -> WRT_PROT_SEC_120_R {
                WRT_PROT_SEC_120_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - WRT_PROT_SEC_119"]
            #[inline(always)]
            pub fn wrt_prot_sec_119(&self) -> WRT_PROT_SEC_119_R {
                WRT_PROT_SEC_119_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - WRT_PROT_SEC_118"]
            #[inline(always)]
            pub fn wrt_prot_sec_118(&self) -> WRT_PROT_SEC_118_R {
                WRT_PROT_SEC_118_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - WRT_PROT_SEC_117"]
            #[inline(always)]
            pub fn wrt_prot_sec_117(&self) -> WRT_PROT_SEC_117_R {
                WRT_PROT_SEC_117_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - WRT_PROT_SEC_116"]
            #[inline(always)]
            pub fn wrt_prot_sec_116(&self) -> WRT_PROT_SEC_116_R {
                WRT_PROT_SEC_116_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - WRT_PROT_SEC_115"]
            #[inline(always)]
            pub fn wrt_prot_sec_115(&self) -> WRT_PROT_SEC_115_R {
                WRT_PROT_SEC_115_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - WRT_PROT_SEC_114"]
            #[inline(always)]
            pub fn wrt_prot_sec_114(&self) -> WRT_PROT_SEC_114_R {
                WRT_PROT_SEC_114_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - WRT_PROT_SEC_113"]
            #[inline(always)]
            pub fn wrt_prot_sec_113(&self) -> WRT_PROT_SEC_113_R {
                WRT_PROT_SEC_113_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - WRT_PROT_SEC_112"]
            #[inline(always)]
            pub fn wrt_prot_sec_112(&self) -> WRT_PROT_SEC_112_R {
                WRT_PROT_SEC_112_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - WRT_PROT_SEC_111"]
            #[inline(always)]
            pub fn wrt_prot_sec_111(&self) -> WRT_PROT_SEC_111_R {
                WRT_PROT_SEC_111_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - WRT_PROT_SEC_110"]
            #[inline(always)]
            pub fn wrt_prot_sec_110(&self) -> WRT_PROT_SEC_110_R {
                WRT_PROT_SEC_110_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - WRT_PROT_SEC_109"]
            #[inline(always)]
            pub fn wrt_prot_sec_109(&self) -> WRT_PROT_SEC_109_R {
                WRT_PROT_SEC_109_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - WRT_PROT_SEC_108"]
            #[inline(always)]
            pub fn wrt_prot_sec_108(&self) -> WRT_PROT_SEC_108_R {
                WRT_PROT_SEC_108_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WRT_PROT_SEC_107"]
            #[inline(always)]
            pub fn wrt_prot_sec_107(&self) -> WRT_PROT_SEC_107_R {
                WRT_PROT_SEC_107_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WRT_PROT_SEC_106"]
            #[inline(always)]
            pub fn wrt_prot_sec_106(&self) -> WRT_PROT_SEC_106_R {
                WRT_PROT_SEC_106_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - WRT_PROT_SEC_105"]
            #[inline(always)]
            pub fn wrt_prot_sec_105(&self) -> WRT_PROT_SEC_105_R {
                WRT_PROT_SEC_105_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - WRT_PROT_SEC_104"]
            #[inline(always)]
            pub fn wrt_prot_sec_104(&self) -> WRT_PROT_SEC_104_R {
                WRT_PROT_SEC_104_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - WRT_PROT_SEC_103"]
            #[inline(always)]
            pub fn wrt_prot_sec_103(&self) -> WRT_PROT_SEC_103_R {
                WRT_PROT_SEC_103_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - WRT_PROT_SEC_102"]
            #[inline(always)]
            pub fn wrt_prot_sec_102(&self) -> WRT_PROT_SEC_102_R {
                WRT_PROT_SEC_102_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - WRT_PROT_SEC_101"]
            #[inline(always)]
            pub fn wrt_prot_sec_101(&self) -> WRT_PROT_SEC_101_R {
                WRT_PROT_SEC_101_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - WRT_PROT_SEC_100"]
            #[inline(always)]
            pub fn wrt_prot_sec_100(&self) -> WRT_PROT_SEC_100_R {
                WRT_PROT_SEC_100_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WRT_PROT_SEC_99"]
            #[inline(always)]
            pub fn wrt_prot_sec_99(&self) -> WRT_PROT_SEC_99_R {
                WRT_PROT_SEC_99_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - WRT_PROT_SEC_98"]
            #[inline(always)]
            pub fn wrt_prot_sec_98(&self) -> WRT_PROT_SEC_98_R {
                WRT_PROT_SEC_98_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - WRT_PROT_SEC_97"]
            #[inline(always)]
            pub fn wrt_prot_sec_97(&self) -> WRT_PROT_SEC_97_R {
                WRT_PROT_SEC_97_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - WRT_PROT_SEC_96"]
            #[inline(always)]
            pub fn wrt_prot_sec_96(&self) -> WRT_PROT_SEC_96_R {
                WRT_PROT_SEC_96_R::new((self.bits & 0x01) != 0)
            }
        }
    }
}
#[doc = "Cortex-M's TI proprietary registers"]
pub struct CPU_TIPROP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CPU_TIPROP {}
impl CPU_TIPROP {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cpu_tiprop::RegisterBlock {
        0xe00f_e000 as *const _
    }
}
impl Deref for CPU_TIPROP {
    type Target = cpu_tiprop::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CPU_TIPROP::ptr() }
    }
}
#[doc = "Cortex-M's TI proprietary registers"]
pub mod cpu_tiprop {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 4088usize],
        #[doc = "0xff8 - Internal. Only to be used through TI provided API."]
        pub traceclkmux: TRACECLKMUX,
        #[doc = "0xffc - Internal. Only to be used through TI provided API."]
        pub dyn_cg: DYN_CG,
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [traceclkmux](traceclkmux) module"]
    pub type TRACECLKMUX = crate::Reg<u32, _TRACECLKMUX>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TRACECLKMUX;
    #[doc = "`read()` method returns [traceclkmux::R](traceclkmux::R) reader structure"]
    impl crate::Readable for TRACECLKMUX {}
    #[doc = "`write(|w| ..)` method takes [traceclkmux::W](traceclkmux::W) writer structure"]
    impl crate::Writable for TRACECLKMUX {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod traceclkmux {
        #[doc = "Reader of register TRACECLKMUX"]
        pub type R = crate::R<u32, super::TRACECLKMUX>;
        #[doc = "Writer for register TRACECLKMUX"]
        pub type W = crate::W<u32, super::TRACECLKMUX>;
        #[doc = "Register TRACECLKMUX `reset()`'s with value 0"]
        impl crate::ResetValue for super::TRACECLKMUX {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TRACECLK_N_SWV`"]
        pub type TRACECLK_N_SWV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRACECLK_N_SWV`"]
        pub struct TRACECLK_N_SWV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRACECLK_N_SWV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TRACECLK_N_SWV"]
            #[inline(always)]
            pub fn traceclk_n_swv(&self) -> TRACECLK_N_SWV_R {
                TRACECLK_N_SWV_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TRACECLK_N_SWV"]
            #[inline(always)]
            pub fn traceclk_n_swv(&mut self) -> TRACECLK_N_SWV_W {
                TRACECLK_N_SWV_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dyn_cg](dyn_cg) module"]
    pub type DYN_CG = crate::Reg<u32, _DYN_CG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DYN_CG;
    #[doc = "`read()` method returns [dyn_cg::R](dyn_cg::R) reader structure"]
    impl crate::Readable for DYN_CG {}
    #[doc = "`write(|w| ..)` method takes [dyn_cg::W](dyn_cg::W) writer structure"]
    impl crate::Writable for DYN_CG {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod dyn_cg {
        #[doc = "Reader of register DYN_CG"]
        pub type R = crate::R<u32, super::DYN_CG>;
        #[doc = "Writer for register DYN_CG"]
        pub type W = crate::W<u32, super::DYN_CG>;
        #[doc = "Register DYN_CG `reset()`'s with value 0"]
        impl crate::ResetValue for super::DYN_CG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DYN_CG`"]
        pub type DYN_CG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DYN_CG`"]
        pub struct DYN_CG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DYN_CG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - DYN_CG"]
            #[inline(always)]
            pub fn dyn_cg(&self) -> DYN_CG_R {
                DYN_CG_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - DYN_CG"]
            #[inline(always)]
            pub fn dyn_cg(&mut self) -> DYN_CG_W {
                DYN_CG_W { w: self }
            }
        }
    }
}
#[doc = "Crypto core with DMA capability and local key storage"]
pub struct CRYPTO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTO {}
impl CRYPTO {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crypto::RegisterBlock {
        0x4002_4000 as *const _
    }
}
impl Deref for CRYPTO {
    type Target = crypto::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CRYPTO::ptr() }
    }
}
#[doc = "Crypto core with DMA capability and local key storage"]
pub mod crypto {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DMA Channel 0 Control"]
        pub dmach0ctl: DMACH0CTL,
        #[doc = "0x04 - DMA Channel 0 External Address"]
        pub dmach0extaddr: DMACH0EXTADDR,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - DMA Channel 0 Length"]
        pub dmach0len: DMACH0LEN,
        _reserved3: [u8; 8usize],
        #[doc = "0x18 - DMA Controller Status"]
        pub dmastat: DMASTAT,
        #[doc = "0x1c - DMA Controller Software Reset"]
        pub dmaswreset: DMASWRESET,
        #[doc = "0x20 - DMA Channel 1 Control"]
        pub dmach1ctl: DMACH1CTL,
        #[doc = "0x24 - DMA Channel 1 External Address"]
        pub dmach1extaddr: DMACH1EXTADDR,
        _reserved7: [u8; 4usize],
        #[doc = "0x2c - DMA Channel 1 Length"]
        pub dmach1len: DMACH1LEN,
        _reserved8: [u8; 72usize],
        #[doc = "0x78 - DMA Controller Master Configuration"]
        pub dmabuscfg: DMABUSCFG,
        #[doc = "0x7c - DMA Controller Port Error"]
        pub dmaporterr: DMAPORTERR,
        _reserved10: [u8; 124usize],
        #[doc = "0xfc - DMA Controller Version"]
        pub dmahwver: DMAHWVER,
        _reserved11: [u8; 768usize],
        #[doc = "0x400 - Key Write Area"]
        pub keywritearea: KEYWRITEAREA,
        #[doc = "0x404 - Key Written Area Status This register shows which areas of the key store RAM contain valid written keys. When a new key needs to be written to the key store, on a location that is already occupied by a valid key, this key area must be cleared first. This can be done by writing this register before the new key is written to the key store memory. Attempting to write to a key area that already contains a valid key is not allowed and will result in an error."]
        pub keywrittenarea: KEYWRITTENAREA,
        #[doc = "0x408 - Key Size This register defines the size of the keys that are written with DMA."]
        pub keysize: KEYSIZE,
        #[doc = "0x40c - Key Read Area"]
        pub keyreadarea: KEYREADAREA,
        _reserved15: [u8; 240usize],
        #[doc = "0x500 - Clear AES_KEY2/GHASH Key"]
        pub aeskey2: [AESKEY2; 4],
        #[doc = "0x510 - Clear AES_KEY3"]
        pub aeskey3: [AESKEY3; 4],
        _reserved17: [u8; 32usize],
        #[doc = "0x540 - AES Initialization Vector"]
        pub aesiv: [AESIV; 4],
        #[doc = "0x550 - AES Input/Output Buffer Control"]
        pub aesctl: AESCTL,
        #[doc = "0x554 - Crypto Data Length LSW"]
        pub aesdatalen0: AESDATALEN0,
        #[doc = "0x558 - Crypto Data Length MSW"]
        pub aesdatalen1: AESDATALEN1,
        #[doc = "0x55c - AES Authentication Length"]
        pub aesauthlen: AESAUTHLEN,
        _reserved_22_aesdatain0: [u8; 4usize],
        _reserved_23_aesdatain1: [u8; 4usize],
        _reserved_24_aesdatain2: [u8; 4usize],
        _reserved_25_aesdatain3: [u8; 4usize],
        #[doc = "0x570 - AES Tag Output"]
        pub aestagout: [AESTAGOUT; 4],
        _reserved27: [u8; 384usize],
        #[doc = "0x700 - Master Algorithm Select This register configures the internal destination of the DMA controller."]
        pub algsel: ALGSEL,
        #[doc = "0x704 - Master Protection Control"]
        pub dmaprotctl: DMAPROTCTL,
        _reserved29: [u8; 56usize],
        #[doc = "0x740 - Software Reset"]
        pub swreset: SWRESET,
        _reserved30: [u8; 60usize],
        #[doc = "0x780 - Interrupt Configuration"]
        pub irqtype: IRQTYPE,
        #[doc = "0x784 - Interrupt Enable"]
        pub irqen: IRQEN,
        #[doc = "0x788 - Interrupt Clear"]
        pub irqclr: IRQCLR,
        #[doc = "0x78c - Interrupt Set"]
        pub irqset: IRQSET,
        #[doc = "0x790 - Interrupt Status"]
        pub irqstat: IRQSTAT,
        _reserved35: [u8; 104usize],
        #[doc = "0x7fc - CTRL Module Version"]
        pub hwver: HWVER,
    }
    impl RegisterBlock {
        #[doc = "0x560 - AES Data Input/Output 0"]
        #[inline(always)]
        pub fn aesdatain0(&self) -> &AESDATAIN0 {
            unsafe { &*(((self as *const Self) as *const u8).add(1376usize) as *const AESDATAIN0) }
        }
        #[doc = "0x560 - AES Data Input/Output 0"]
        #[inline(always)]
        pub fn aesdatain0_mut(&self) -> &mut AESDATAIN0 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1376usize) as *mut AESDATAIN0) }
        }
        #[doc = "0x560 - Data Input/Output"]
        #[inline(always)]
        pub fn aesdataout0(&self) -> &AESDATAOUT0 {
            unsafe { &*(((self as *const Self) as *const u8).add(1376usize) as *const AESDATAOUT0) }
        }
        #[doc = "0x560 - Data Input/Output"]
        #[inline(always)]
        pub fn aesdataout0_mut(&self) -> &mut AESDATAOUT0 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1376usize) as *mut AESDATAOUT0) }
        }
        #[doc = "0x564 - AES Data Input/Output 1"]
        #[inline(always)]
        pub fn aesdatain1(&self) -> &AESDATAIN1 {
            unsafe { &*(((self as *const Self) as *const u8).add(1380usize) as *const AESDATAIN1) }
        }
        #[doc = "0x564 - AES Data Input/Output 1"]
        #[inline(always)]
        pub fn aesdatain1_mut(&self) -> &mut AESDATAIN1 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1380usize) as *mut AESDATAIN1) }
        }
        #[doc = "0x564 - AES Data Input/Output 3"]
        #[inline(always)]
        pub fn aesdataout1(&self) -> &AESDATAOUT1 {
            unsafe { &*(((self as *const Self) as *const u8).add(1380usize) as *const AESDATAOUT1) }
        }
        #[doc = "0x564 - AES Data Input/Output 3"]
        #[inline(always)]
        pub fn aesdataout1_mut(&self) -> &mut AESDATAOUT1 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1380usize) as *mut AESDATAOUT1) }
        }
        #[doc = "0x568 - AES Data Input/Output 2"]
        #[inline(always)]
        pub fn aesdatain2(&self) -> &AESDATAIN2 {
            unsafe { &*(((self as *const Self) as *const u8).add(1384usize) as *const AESDATAIN2) }
        }
        #[doc = "0x568 - AES Data Input/Output 2"]
        #[inline(always)]
        pub fn aesdatain2_mut(&self) -> &mut AESDATAIN2 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1384usize) as *mut AESDATAIN2) }
        }
        #[doc = "0x568 - AES Data Input/Output 2"]
        #[inline(always)]
        pub fn aesdataout2(&self) -> &AESDATAOUT2 {
            unsafe { &*(((self as *const Self) as *const u8).add(1384usize) as *const AESDATAOUT2) }
        }
        #[doc = "0x568 - AES Data Input/Output 2"]
        #[inline(always)]
        pub fn aesdataout2_mut(&self) -> &mut AESDATAOUT2 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1384usize) as *mut AESDATAOUT2) }
        }
        #[doc = "0x56c - Data Input/Output"]
        #[inline(always)]
        pub fn aesdatain3(&self) -> &AESDATAIN3 {
            unsafe { &*(((self as *const Self) as *const u8).add(1388usize) as *const AESDATAIN3) }
        }
        #[doc = "0x56c - Data Input/Output"]
        #[inline(always)]
        pub fn aesdatain3_mut(&self) -> &mut AESDATAIN3 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1388usize) as *mut AESDATAIN3) }
        }
        #[doc = "0x56c - AES Data Input/Output 3"]
        #[inline(always)]
        pub fn aesdataout3(&self) -> &AESDATAOUT3 {
            unsafe { &*(((self as *const Self) as *const u8).add(1388usize) as *const AESDATAOUT3) }
        }
        #[doc = "0x56c - AES Data Input/Output 3"]
        #[inline(always)]
        pub fn aesdataout3_mut(&self) -> &mut AESDATAOUT3 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(1388usize) as *mut AESDATAOUT3) }
        }
    }
    #[doc = "DMA Channel 0 Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmach0ctl](dmach0ctl) module"]
    pub type DMACH0CTL = crate::Reg<u32, _DMACH0CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACH0CTL;
    #[doc = "`read()` method returns [dmach0ctl::R](dmach0ctl::R) reader structure"]
    impl crate::Readable for DMACH0CTL {}
    #[doc = "`write(|w| ..)` method takes [dmach0ctl::W](dmach0ctl::W) writer structure"]
    impl crate::Writable for DMACH0CTL {}
    #[doc = "DMA Channel 0 Control"]
    pub mod dmach0ctl {
        #[doc = "Reader of register DMACH0CTL"]
        pub type R = crate::R<u32, super::DMACH0CTL>;
        #[doc = "Writer for register DMACH0CTL"]
        pub type W = crate::W<u32, super::DMACH0CTL>;
        #[doc = "Register DMACH0CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACH0CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PRIO`"]
        pub type PRIO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRIO`"]
        pub struct PRIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRIO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - PRIO"]
            #[inline(always)]
            pub fn prio(&self) -> PRIO_R {
                PRIO_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - PRIO"]
            #[inline(always)]
            pub fn prio(&mut self) -> PRIO_W {
                PRIO_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "DMA Channel 0 External Address\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmach0extaddr](dmach0extaddr) module"]
    pub type DMACH0EXTADDR = crate::Reg<u32, _DMACH0EXTADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACH0EXTADDR;
    #[doc = "`read()` method returns [dmach0extaddr::R](dmach0extaddr::R) reader structure"]
    impl crate::Readable for DMACH0EXTADDR {}
    #[doc = "`write(|w| ..)` method takes [dmach0extaddr::W](dmach0extaddr::W) writer structure"]
    impl crate::Writable for DMACH0EXTADDR {}
    #[doc = "DMA Channel 0 External Address"]
    pub mod dmach0extaddr {
        #[doc = "Reader of register DMACH0EXTADDR"]
        pub type R = crate::R<u32, super::DMACH0EXTADDR>;
        #[doc = "Writer for register DMACH0EXTADDR"]
        pub type W = crate::W<u32, super::DMACH0EXTADDR>;
        #[doc = "Register DMACH0EXTADDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACH0EXTADDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `ADDR`"]
        pub struct ADDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&mut self) -> ADDR_W {
                ADDR_W { w: self }
            }
        }
    }
    #[doc = "DMA Channel 0 Length\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmach0len](dmach0len) module"]
    pub type DMACH0LEN = crate::Reg<u32, _DMACH0LEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACH0LEN;
    #[doc = "`read()` method returns [dmach0len::R](dmach0len::R) reader structure"]
    impl crate::Readable for DMACH0LEN {}
    #[doc = "`write(|w| ..)` method takes [dmach0len::W](dmach0len::W) writer structure"]
    impl crate::Writable for DMACH0LEN {}
    #[doc = "DMA Channel 0 Length"]
    pub mod dmach0len {
        #[doc = "Reader of register DMACH0LEN"]
        pub type R = crate::R<u32, super::DMACH0LEN>;
        #[doc = "Writer for register DMACH0LEN"]
        pub type W = crate::W<u32, super::DMACH0LEN>;
        #[doc = "Register DMACH0LEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACH0LEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LEN`"]
        pub type LEN_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LEN`"]
        pub struct LEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - LEN"]
            #[inline(always)]
            pub fn len(&self) -> LEN_R {
                LEN_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - LEN"]
            #[inline(always)]
            pub fn len(&mut self) -> LEN_W {
                LEN_W { w: self }
            }
        }
    }
    #[doc = "DMA Controller Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmastat](dmastat) module"]
    pub type DMASTAT = crate::Reg<u32, _DMASTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMASTAT;
    #[doc = "`read()` method returns [dmastat::R](dmastat::R) reader structure"]
    impl crate::Readable for DMASTAT {}
    #[doc = "DMA Controller Status"]
    pub mod dmastat {
        #[doc = "Reader of register DMASTAT"]
        pub type R = crate::R<u32, super::DMASTAT>;
        #[doc = "Reader of field `PORT_ERR`"]
        pub type PORT_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CH1_ACTIVE`"]
        pub type CH1_ACTIVE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CH0_ACTIVE`"]
        pub type CH0_ACTIVE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 17 - PORT_ERR"]
            #[inline(always)]
            pub fn port_err(&self) -> PORT_ERR_R {
                PORT_ERR_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CH1_ACTIVE"]
            #[inline(always)]
            pub fn ch1_active(&self) -> CH1_ACTIVE_R {
                CH1_ACTIVE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CH0_ACTIVE"]
            #[inline(always)]
            pub fn ch0_active(&self) -> CH0_ACTIVE_R {
                CH0_ACTIVE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "DMA Controller Software Reset\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaswreset](dmaswreset) module"]
    pub type DMASWRESET = crate::Reg<u32, _DMASWRESET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMASWRESET;
    #[doc = "`write(|w| ..)` method takes [dmaswreset::W](dmaswreset::W) writer structure"]
    impl crate::Writable for DMASWRESET {}
    #[doc = "DMA Controller Software Reset"]
    pub mod dmaswreset {
        #[doc = "Writer for register DMASWRESET"]
        pub type W = crate::W<u32, super::DMASWRESET>;
        #[doc = "Register DMASWRESET `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMASWRESET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - RESET"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
        }
    }
    #[doc = "DMA Channel 1 Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmach1ctl](dmach1ctl) module"]
    pub type DMACH1CTL = crate::Reg<u32, _DMACH1CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACH1CTL;
    #[doc = "`read()` method returns [dmach1ctl::R](dmach1ctl::R) reader structure"]
    impl crate::Readable for DMACH1CTL {}
    #[doc = "`write(|w| ..)` method takes [dmach1ctl::W](dmach1ctl::W) writer structure"]
    impl crate::Writable for DMACH1CTL {}
    #[doc = "DMA Channel 1 Control"]
    pub mod dmach1ctl {
        #[doc = "Reader of register DMACH1CTL"]
        pub type R = crate::R<u32, super::DMACH1CTL>;
        #[doc = "Writer for register DMACH1CTL"]
        pub type W = crate::W<u32, super::DMACH1CTL>;
        #[doc = "Register DMACH1CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACH1CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PRIO`"]
        pub type PRIO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRIO`"]
        pub struct PRIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRIO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - PRIO"]
            #[inline(always)]
            pub fn prio(&self) -> PRIO_R {
                PRIO_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - PRIO"]
            #[inline(always)]
            pub fn prio(&mut self) -> PRIO_W {
                PRIO_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "DMA Channel 1 External Address\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmach1extaddr](dmach1extaddr) module"]
    pub type DMACH1EXTADDR = crate::Reg<u32, _DMACH1EXTADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACH1EXTADDR;
    #[doc = "`read()` method returns [dmach1extaddr::R](dmach1extaddr::R) reader structure"]
    impl crate::Readable for DMACH1EXTADDR {}
    #[doc = "`write(|w| ..)` method takes [dmach1extaddr::W](dmach1extaddr::W) writer structure"]
    impl crate::Writable for DMACH1EXTADDR {}
    #[doc = "DMA Channel 1 External Address"]
    pub mod dmach1extaddr {
        #[doc = "Reader of register DMACH1EXTADDR"]
        pub type R = crate::R<u32, super::DMACH1EXTADDR>;
        #[doc = "Writer for register DMACH1EXTADDR"]
        pub type W = crate::W<u32, super::DMACH1EXTADDR>;
        #[doc = "Register DMACH1EXTADDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACH1EXTADDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `ADDR`"]
        pub struct ADDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - ADDR"]
            #[inline(always)]
            pub fn addr(&mut self) -> ADDR_W {
                ADDR_W { w: self }
            }
        }
    }
    #[doc = "DMA Channel 1 Length\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmach1len](dmach1len) module"]
    pub type DMACH1LEN = crate::Reg<u32, _DMACH1LEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACH1LEN;
    #[doc = "`read()` method returns [dmach1len::R](dmach1len::R) reader structure"]
    impl crate::Readable for DMACH1LEN {}
    #[doc = "`write(|w| ..)` method takes [dmach1len::W](dmach1len::W) writer structure"]
    impl crate::Writable for DMACH1LEN {}
    #[doc = "DMA Channel 1 Length"]
    pub mod dmach1len {
        #[doc = "Reader of register DMACH1LEN"]
        pub type R = crate::R<u32, super::DMACH1LEN>;
        #[doc = "Writer for register DMACH1LEN"]
        pub type W = crate::W<u32, super::DMACH1LEN>;
        #[doc = "Register DMACH1LEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACH1LEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LEN`"]
        pub type LEN_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LEN`"]
        pub struct LEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - LEN"]
            #[inline(always)]
            pub fn len(&self) -> LEN_R {
                LEN_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - LEN"]
            #[inline(always)]
            pub fn len(&mut self) -> LEN_W {
                LEN_W { w: self }
            }
        }
    }
    #[doc = "DMA Controller Master Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmabuscfg](dmabuscfg) module"]
    pub type DMABUSCFG = crate::Reg<u32, _DMABUSCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMABUSCFG;
    #[doc = "`read()` method returns [dmabuscfg::R](dmabuscfg::R) reader structure"]
    impl crate::Readable for DMABUSCFG {}
    #[doc = "`write(|w| ..)` method takes [dmabuscfg::W](dmabuscfg::W) writer structure"]
    impl crate::Writable for DMABUSCFG {}
    #[doc = "DMA Controller Master Configuration"]
    pub mod dmabuscfg {
        #[doc = "Reader of register DMABUSCFG"]
        pub type R = crate::R<u32, super::DMABUSCFG>;
        #[doc = "Writer for register DMABUSCFG"]
        pub type W = crate::W<u32, super::DMABUSCFG>;
        #[doc = "Register DMABUSCFG `reset()`'s with value 0x2400"]
        impl crate::ResetValue for super::DMABUSCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2400
            }
        }
        #[doc = "Reader of field `AHB_MST1_BURST_SIZE`"]
        pub type AHB_MST1_BURST_SIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AHB_MST1_BURST_SIZE`"]
        pub struct AHB_MST1_BURST_SIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AHB_MST1_BURST_SIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `AHB_MST1_IDLE_EN`"]
        pub type AHB_MST1_IDLE_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AHB_MST1_IDLE_EN`"]
        pub struct AHB_MST1_IDLE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AHB_MST1_IDLE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `AHB_MST1_INCR_EN`"]
        pub type AHB_MST1_INCR_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AHB_MST1_INCR_EN`"]
        pub struct AHB_MST1_INCR_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AHB_MST1_INCR_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `AHB_MST1_LOCK_EN`"]
        pub type AHB_MST1_LOCK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AHB_MST1_LOCK_EN`"]
        pub struct AHB_MST1_LOCK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AHB_MST1_LOCK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `AHB_MST1_BIGEND`"]
        pub type AHB_MST1_BIGEND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AHB_MST1_BIGEND`"]
        pub struct AHB_MST1_BIGEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AHB_MST1_BIGEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - AHB_MST1_BURST_SIZE"]
            #[inline(always)]
            pub fn ahb_mst1_burst_size(&self) -> AHB_MST1_BURST_SIZE_R {
                AHB_MST1_BURST_SIZE_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bit 11 - AHB_MST1_IDLE_EN"]
            #[inline(always)]
            pub fn ahb_mst1_idle_en(&self) -> AHB_MST1_IDLE_EN_R {
                AHB_MST1_IDLE_EN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - AHB_MST1_INCR_EN"]
            #[inline(always)]
            pub fn ahb_mst1_incr_en(&self) -> AHB_MST1_INCR_EN_R {
                AHB_MST1_INCR_EN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - AHB_MST1_LOCK_EN"]
            #[inline(always)]
            pub fn ahb_mst1_lock_en(&self) -> AHB_MST1_LOCK_EN_R {
                AHB_MST1_LOCK_EN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - AHB_MST1_BIGEND"]
            #[inline(always)]
            pub fn ahb_mst1_bigend(&self) -> AHB_MST1_BIGEND_R {
                AHB_MST1_BIGEND_R::new(((self.bits >> 8) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - AHB_MST1_BURST_SIZE"]
            #[inline(always)]
            pub fn ahb_mst1_burst_size(&mut self) -> AHB_MST1_BURST_SIZE_W {
                AHB_MST1_BURST_SIZE_W { w: self }
            }
            #[doc = "Bit 11 - AHB_MST1_IDLE_EN"]
            #[inline(always)]
            pub fn ahb_mst1_idle_en(&mut self) -> AHB_MST1_IDLE_EN_W {
                AHB_MST1_IDLE_EN_W { w: self }
            }
            #[doc = "Bit 10 - AHB_MST1_INCR_EN"]
            #[inline(always)]
            pub fn ahb_mst1_incr_en(&mut self) -> AHB_MST1_INCR_EN_W {
                AHB_MST1_INCR_EN_W { w: self }
            }
            #[doc = "Bit 9 - AHB_MST1_LOCK_EN"]
            #[inline(always)]
            pub fn ahb_mst1_lock_en(&mut self) -> AHB_MST1_LOCK_EN_W {
                AHB_MST1_LOCK_EN_W { w: self }
            }
            #[doc = "Bit 8 - AHB_MST1_BIGEND"]
            #[inline(always)]
            pub fn ahb_mst1_bigend(&mut self) -> AHB_MST1_BIGEND_W {
                AHB_MST1_BIGEND_W { w: self }
            }
        }
    }
    #[doc = "DMA Controller Port Error\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaporterr](dmaporterr) module"]
    pub type DMAPORTERR = crate::Reg<u32, _DMAPORTERR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAPORTERR;
    #[doc = "`read()` method returns [dmaporterr::R](dmaporterr::R) reader structure"]
    impl crate::Readable for DMAPORTERR {}
    #[doc = "DMA Controller Port Error"]
    pub mod dmaporterr {
        #[doc = "Reader of register DMAPORTERR"]
        pub type R = crate::R<u32, super::DMAPORTERR>;
        #[doc = "Reader of field `AHB_ERR`"]
        pub type AHB_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LAST_CH`"]
        pub type LAST_CH_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 12 - AHB_ERR"]
            #[inline(always)]
            pub fn ahb_err(&self) -> AHB_ERR_R {
                AHB_ERR_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LAST_CH"]
            #[inline(always)]
            pub fn last_ch(&self) -> LAST_CH_R {
                LAST_CH_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
    }
    #[doc = "DMA Controller Version\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmahwver](dmahwver) module"]
    pub type DMAHWVER = crate::Reg<u32, _DMAHWVER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAHWVER;
    #[doc = "`read()` method returns [dmahwver::R](dmahwver::R) reader structure"]
    impl crate::Readable for DMAHWVER {}
    #[doc = "DMA Controller Version"]
    pub mod dmahwver {
        #[doc = "Reader of register DMAHWVER"]
        pub type R = crate::R<u32, super::DMAHWVER>;
        #[doc = "Reader of field `HW_MAJOR_VER`"]
        pub type HW_MAJOR_VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HW_MINOR_VER`"]
        pub type HW_MINOR_VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HW_PATCH_LVL`"]
        pub type HW_PATCH_LVL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VER_NUM_COMPL`"]
        pub type VER_NUM_COMPL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VER_NUM`"]
        pub type VER_NUM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:27 - HW_MAJOR_VER"]
            #[inline(always)]
            pub fn hw_major_ver(&self) -> HW_MAJOR_VER_R {
                HW_MAJOR_VER_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - HW_MINOR_VER"]
            #[inline(always)]
            pub fn hw_minor_ver(&self) -> HW_MINOR_VER_R {
                HW_MINOR_VER_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - HW_PATCH_LVL"]
            #[inline(always)]
            pub fn hw_patch_lvl(&self) -> HW_PATCH_LVL_R {
                HW_PATCH_LVL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - VER_NUM_COMPL"]
            #[inline(always)]
            pub fn ver_num_compl(&self) -> VER_NUM_COMPL_R {
                VER_NUM_COMPL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VER_NUM"]
            #[inline(always)]
            pub fn ver_num(&self) -> VER_NUM_R {
                VER_NUM_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Key Write Area\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keywritearea](keywritearea) module"]
    pub type KEYWRITEAREA = crate::Reg<u32, _KEYWRITEAREA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYWRITEAREA;
    #[doc = "`read()` method returns [keywritearea::R](keywritearea::R) reader structure"]
    impl crate::Readable for KEYWRITEAREA {}
    #[doc = "`write(|w| ..)` method takes [keywritearea::W](keywritearea::W) writer structure"]
    impl crate::Writable for KEYWRITEAREA {}
    #[doc = "Key Write Area"]
    pub mod keywritearea {
        #[doc = "Reader of register KEYWRITEAREA"]
        pub type R = crate::R<u32, super::KEYWRITEAREA>;
        #[doc = "Writer for register KEYWRITEAREA"]
        pub type W = crate::W<u32, super::KEYWRITEAREA>;
        #[doc = "Register KEYWRITEAREA `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYWRITEAREA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RAM_AREA7`"]
        pub type RAM_AREA7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA7`"]
        pub struct RAM_AREA7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA6`"]
        pub type RAM_AREA6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA6`"]
        pub struct RAM_AREA6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA5`"]
        pub type RAM_AREA5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA5`"]
        pub struct RAM_AREA5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA4`"]
        pub type RAM_AREA4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA4`"]
        pub struct RAM_AREA4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA3`"]
        pub type RAM_AREA3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA3`"]
        pub struct RAM_AREA3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA2`"]
        pub type RAM_AREA2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA2`"]
        pub struct RAM_AREA2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA1`"]
        pub type RAM_AREA1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA1`"]
        pub struct RAM_AREA1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA0`"]
        pub type RAM_AREA0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA0`"]
        pub struct RAM_AREA0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - RAM_AREA7"]
            #[inline(always)]
            pub fn ram_area7(&self) -> RAM_AREA7_R {
                RAM_AREA7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RAM_AREA6"]
            #[inline(always)]
            pub fn ram_area6(&self) -> RAM_AREA6_R {
                RAM_AREA6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RAM_AREA5"]
            #[inline(always)]
            pub fn ram_area5(&self) -> RAM_AREA5_R {
                RAM_AREA5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RAM_AREA4"]
            #[inline(always)]
            pub fn ram_area4(&self) -> RAM_AREA4_R {
                RAM_AREA4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RAM_AREA3"]
            #[inline(always)]
            pub fn ram_area3(&self) -> RAM_AREA3_R {
                RAM_AREA3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RAM_AREA2"]
            #[inline(always)]
            pub fn ram_area2(&self) -> RAM_AREA2_R {
                RAM_AREA2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RAM_AREA1"]
            #[inline(always)]
            pub fn ram_area1(&self) -> RAM_AREA1_R {
                RAM_AREA1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RAM_AREA0"]
            #[inline(always)]
            pub fn ram_area0(&self) -> RAM_AREA0_R {
                RAM_AREA0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - RAM_AREA7"]
            #[inline(always)]
            pub fn ram_area7(&mut self) -> RAM_AREA7_W {
                RAM_AREA7_W { w: self }
            }
            #[doc = "Bit 6 - RAM_AREA6"]
            #[inline(always)]
            pub fn ram_area6(&mut self) -> RAM_AREA6_W {
                RAM_AREA6_W { w: self }
            }
            #[doc = "Bit 5 - RAM_AREA5"]
            #[inline(always)]
            pub fn ram_area5(&mut self) -> RAM_AREA5_W {
                RAM_AREA5_W { w: self }
            }
            #[doc = "Bit 4 - RAM_AREA4"]
            #[inline(always)]
            pub fn ram_area4(&mut self) -> RAM_AREA4_W {
                RAM_AREA4_W { w: self }
            }
            #[doc = "Bit 3 - RAM_AREA3"]
            #[inline(always)]
            pub fn ram_area3(&mut self) -> RAM_AREA3_W {
                RAM_AREA3_W { w: self }
            }
            #[doc = "Bit 2 - RAM_AREA2"]
            #[inline(always)]
            pub fn ram_area2(&mut self) -> RAM_AREA2_W {
                RAM_AREA2_W { w: self }
            }
            #[doc = "Bit 1 - RAM_AREA1"]
            #[inline(always)]
            pub fn ram_area1(&mut self) -> RAM_AREA1_W {
                RAM_AREA1_W { w: self }
            }
            #[doc = "Bit 0 - RAM_AREA0"]
            #[inline(always)]
            pub fn ram_area0(&mut self) -> RAM_AREA0_W {
                RAM_AREA0_W { w: self }
            }
        }
    }
    #[doc = "Key Written Area Status This register shows which areas of the key store RAM contain valid written keys. When a new key needs to be written to the key store, on a location that is already occupied by a valid key, this key area must be cleared first. This can be done by writing this register before the new key is written to the key store memory. Attempting to write to a key area that already contains a valid key is not allowed and will result in an error.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keywrittenarea](keywrittenarea) module"]
    pub type KEYWRITTENAREA = crate::Reg<u32, _KEYWRITTENAREA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYWRITTENAREA;
    #[doc = "`read()` method returns [keywrittenarea::R](keywrittenarea::R) reader structure"]
    impl crate::Readable for KEYWRITTENAREA {}
    #[doc = "`write(|w| ..)` method takes [keywrittenarea::W](keywrittenarea::W) writer structure"]
    impl crate::Writable for KEYWRITTENAREA {}
    #[doc = "Key Written Area Status This register shows which areas of the key store RAM contain valid written keys. When a new key needs to be written to the key store, on a location that is already occupied by a valid key, this key area must be cleared first. This can be done by writing this register before the new key is written to the key store memory. Attempting to write to a key area that already contains a valid key is not allowed and will result in an error."]
    pub mod keywrittenarea {
        #[doc = "Reader of register KEYWRITTENAREA"]
        pub type R = crate::R<u32, super::KEYWRITTENAREA>;
        #[doc = "Writer for register KEYWRITTENAREA"]
        pub type W = crate::W<u32, super::KEYWRITTENAREA>;
        #[doc = "Register KEYWRITTENAREA `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYWRITTENAREA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN7`"]
        pub type RAM_AREA_WRITTEN7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN7`"]
        pub struct RAM_AREA_WRITTEN7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN6`"]
        pub type RAM_AREA_WRITTEN6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN6`"]
        pub struct RAM_AREA_WRITTEN6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN5`"]
        pub type RAM_AREA_WRITTEN5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN5`"]
        pub struct RAM_AREA_WRITTEN5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN4`"]
        pub type RAM_AREA_WRITTEN4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN4`"]
        pub struct RAM_AREA_WRITTEN4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN3`"]
        pub type RAM_AREA_WRITTEN3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN3`"]
        pub struct RAM_AREA_WRITTEN3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN2`"]
        pub type RAM_AREA_WRITTEN2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN2`"]
        pub struct RAM_AREA_WRITTEN2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN1`"]
        pub type RAM_AREA_WRITTEN1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN1`"]
        pub struct RAM_AREA_WRITTEN1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA_WRITTEN0`"]
        pub type RAM_AREA_WRITTEN0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_AREA_WRITTEN0`"]
        pub struct RAM_AREA_WRITTEN0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_WRITTEN0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - RAM_AREA_WRITTEN7"]
            #[inline(always)]
            pub fn ram_area_written7(&self) -> RAM_AREA_WRITTEN7_R {
                RAM_AREA_WRITTEN7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RAM_AREA_WRITTEN6"]
            #[inline(always)]
            pub fn ram_area_written6(&self) -> RAM_AREA_WRITTEN6_R {
                RAM_AREA_WRITTEN6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RAM_AREA_WRITTEN5"]
            #[inline(always)]
            pub fn ram_area_written5(&self) -> RAM_AREA_WRITTEN5_R {
                RAM_AREA_WRITTEN5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RAM_AREA_WRITTEN4"]
            #[inline(always)]
            pub fn ram_area_written4(&self) -> RAM_AREA_WRITTEN4_R {
                RAM_AREA_WRITTEN4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RAM_AREA_WRITTEN3"]
            #[inline(always)]
            pub fn ram_area_written3(&self) -> RAM_AREA_WRITTEN3_R {
                RAM_AREA_WRITTEN3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RAM_AREA_WRITTEN2"]
            #[inline(always)]
            pub fn ram_area_written2(&self) -> RAM_AREA_WRITTEN2_R {
                RAM_AREA_WRITTEN2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RAM_AREA_WRITTEN1"]
            #[inline(always)]
            pub fn ram_area_written1(&self) -> RAM_AREA_WRITTEN1_R {
                RAM_AREA_WRITTEN1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RAM_AREA_WRITTEN0"]
            #[inline(always)]
            pub fn ram_area_written0(&self) -> RAM_AREA_WRITTEN0_R {
                RAM_AREA_WRITTEN0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - RAM_AREA_WRITTEN7"]
            #[inline(always)]
            pub fn ram_area_written7(&mut self) -> RAM_AREA_WRITTEN7_W {
                RAM_AREA_WRITTEN7_W { w: self }
            }
            #[doc = "Bit 6 - RAM_AREA_WRITTEN6"]
            #[inline(always)]
            pub fn ram_area_written6(&mut self) -> RAM_AREA_WRITTEN6_W {
                RAM_AREA_WRITTEN6_W { w: self }
            }
            #[doc = "Bit 5 - RAM_AREA_WRITTEN5"]
            #[inline(always)]
            pub fn ram_area_written5(&mut self) -> RAM_AREA_WRITTEN5_W {
                RAM_AREA_WRITTEN5_W { w: self }
            }
            #[doc = "Bit 4 - RAM_AREA_WRITTEN4"]
            #[inline(always)]
            pub fn ram_area_written4(&mut self) -> RAM_AREA_WRITTEN4_W {
                RAM_AREA_WRITTEN4_W { w: self }
            }
            #[doc = "Bit 3 - RAM_AREA_WRITTEN3"]
            #[inline(always)]
            pub fn ram_area_written3(&mut self) -> RAM_AREA_WRITTEN3_W {
                RAM_AREA_WRITTEN3_W { w: self }
            }
            #[doc = "Bit 2 - RAM_AREA_WRITTEN2"]
            #[inline(always)]
            pub fn ram_area_written2(&mut self) -> RAM_AREA_WRITTEN2_W {
                RAM_AREA_WRITTEN2_W { w: self }
            }
            #[doc = "Bit 1 - RAM_AREA_WRITTEN1"]
            #[inline(always)]
            pub fn ram_area_written1(&mut self) -> RAM_AREA_WRITTEN1_W {
                RAM_AREA_WRITTEN1_W { w: self }
            }
            #[doc = "Bit 0 - RAM_AREA_WRITTEN0"]
            #[inline(always)]
            pub fn ram_area_written0(&mut self) -> RAM_AREA_WRITTEN0_W {
                RAM_AREA_WRITTEN0_W { w: self }
            }
        }
    }
    #[doc = "Key Size This register defines the size of the keys that are written with DMA.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keysize](keysize) module"]
    pub type KEYSIZE = crate::Reg<u32, _KEYSIZE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYSIZE;
    #[doc = "`read()` method returns [keysize::R](keysize::R) reader structure"]
    impl crate::Readable for KEYSIZE {}
    #[doc = "`write(|w| ..)` method takes [keysize::W](keysize::W) writer structure"]
    impl crate::Writable for KEYSIZE {}
    #[doc = "Key Size This register defines the size of the keys that are written with DMA."]
    pub mod keysize {
        #[doc = "Reader of register KEYSIZE"]
        pub type R = crate::R<u32, super::KEYSIZE>;
        #[doc = "Writer for register KEYSIZE"]
        pub type W = crate::W<u32, super::KEYSIZE>;
        #[doc = "Register KEYSIZE `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::KEYSIZE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `SIZE`"]
        pub type SIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SIZE`"]
        pub struct SIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - SIZE"]
            #[inline(always)]
            pub fn size(&self) -> SIZE_R {
                SIZE_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - SIZE"]
            #[inline(always)]
            pub fn size(&mut self) -> SIZE_W {
                SIZE_W { w: self }
            }
        }
    }
    #[doc = "Key Read Area\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyreadarea](keyreadarea) module"]
    pub type KEYREADAREA = crate::Reg<u32, _KEYREADAREA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYREADAREA;
    #[doc = "`read()` method returns [keyreadarea::R](keyreadarea::R) reader structure"]
    impl crate::Readable for KEYREADAREA {}
    #[doc = "`write(|w| ..)` method takes [keyreadarea::W](keyreadarea::W) writer structure"]
    impl crate::Writable for KEYREADAREA {}
    #[doc = "Key Read Area"]
    pub mod keyreadarea {
        #[doc = "Reader of register KEYREADAREA"]
        pub type R = crate::R<u32, super::KEYREADAREA>;
        #[doc = "Writer for register KEYREADAREA"]
        pub type W = crate::W<u32, super::KEYREADAREA>;
        #[doc = "Register KEYREADAREA `reset()`'s with value 0x08"]
        impl crate::ResetValue for super::KEYREADAREA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x08
            }
        }
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BUSY`"]
        pub struct BUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_AREA`"]
        pub type RAM_AREA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RAM_AREA`"]
        pub struct RAM_AREA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_AREA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bits 0:3 - RAM_AREA"]
            #[inline(always)]
            pub fn ram_area(&self) -> RAM_AREA_R {
                RAM_AREA_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - BUSY"]
            #[inline(always)]
            pub fn busy(&mut self) -> BUSY_W {
                BUSY_W { w: self }
            }
            #[doc = "Bits 0:3 - RAM_AREA"]
            #[inline(always)]
            pub fn ram_area(&mut self) -> RAM_AREA_W {
                RAM_AREA_W { w: self }
            }
        }
    }
    #[doc = "Clear AES_KEY2/GHASH Key\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aeskey2](aeskey2) module"]
    pub type AESKEY2 = crate::Reg<u32, _AESKEY2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESKEY2;
    #[doc = "`write(|w| ..)` method takes [aeskey2::W](aeskey2::W) writer structure"]
    impl crate::Writable for AESKEY2 {}
    #[doc = "Clear AES_KEY2/GHASH Key"]
    pub mod aeskey2 {
        #[doc = "Writer for register AESKEY2%s"]
        pub type W = crate::W<u32, super::AESKEY2>;
        #[doc = "Register AESKEY2%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESKEY2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY2`"]
        pub struct KEY2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - KEY2"]
            #[inline(always)]
            pub fn key2(&mut self) -> KEY2_W {
                KEY2_W { w: self }
            }
        }
    }
    #[doc = "Clear AES_KEY3\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aeskey3](aeskey3) module"]
    pub type AESKEY3 = crate::Reg<u32, _AESKEY3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESKEY3;
    #[doc = "`write(|w| ..)` method takes [aeskey3::W](aeskey3::W) writer structure"]
    impl crate::Writable for AESKEY3 {}
    #[doc = "Clear AES_KEY3"]
    pub mod aeskey3 {
        #[doc = "Writer for register AESKEY3%s"]
        pub type W = crate::W<u32, super::AESKEY3>;
        #[doc = "Register AESKEY3%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESKEY3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY3`"]
        pub struct KEY3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - KEY3"]
            #[inline(always)]
            pub fn key3(&mut self) -> KEY3_W {
                KEY3_W { w: self }
            }
        }
    }
    #[doc = "AES Initialization Vector\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesiv](aesiv) module"]
    pub type AESIV = crate::Reg<u32, _AESIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESIV;
    #[doc = "`read()` method returns [aesiv::R](aesiv::R) reader structure"]
    impl crate::Readable for AESIV {}
    #[doc = "`write(|w| ..)` method takes [aesiv::W](aesiv::W) writer structure"]
    impl crate::Writable for AESIV {}
    #[doc = "AES Initialization Vector"]
    pub mod aesiv {
        #[doc = "Reader of register AESIV%s"]
        pub type R = crate::R<u32, super::AESIV>;
        #[doc = "Writer for register AESIV%s"]
        pub type W = crate::W<u32, super::AESIV>;
        #[doc = "Register AESIV%s `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IV`"]
        pub type IV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `IV`"]
        pub struct IV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - IV"]
            #[inline(always)]
            pub fn iv(&self) -> IV_R {
                IV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - IV"]
            #[inline(always)]
            pub fn iv(&mut self) -> IV_W {
                IV_W { w: self }
            }
        }
    }
    #[doc = "AES Input/Output Buffer Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesctl](aesctl) module"]
    pub type AESCTL = crate::Reg<u32, _AESCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESCTL;
    #[doc = "`read()` method returns [aesctl::R](aesctl::R) reader structure"]
    impl crate::Readable for AESCTL {}
    #[doc = "`write(|w| ..)` method takes [aesctl::W](aesctl::W) writer structure"]
    impl crate::Writable for AESCTL {}
    #[doc = "AES Input/Output Buffer Control"]
    pub mod aesctl {
        #[doc = "Reader of register AESCTL"]
        pub type R = crate::R<u32, super::AESCTL>;
        #[doc = "Writer for register AESCTL"]
        pub type W = crate::W<u32, super::AESCTL>;
        #[doc = "Register AESCTL `reset()`'s with value 0x8000_0000"]
        impl crate::ResetValue for super::AESCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x8000_0000
            }
        }
        #[doc = "Reader of field `CONTEXT_RDY`"]
        pub type CONTEXT_RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CONTEXT_RDY`"]
        pub struct CONTEXT_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CONTEXT_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `SAVED_CONTEXT_RDY`"]
        pub type SAVED_CONTEXT_RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SAVED_CONTEXT_RDY`"]
        pub struct SAVED_CONTEXT_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SAVED_CONTEXT_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `SAVE_CONTEXT`"]
        pub type SAVE_CONTEXT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SAVE_CONTEXT`"]
        pub struct SAVE_CONTEXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SAVE_CONTEXT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `CCM_M`"]
        pub type CCM_M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CCM_M`"]
        pub struct CCM_M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCM_M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 22)) | (((value as u32) & 0x07) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `CCM_L`"]
        pub type CCM_L_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CCM_L`"]
        pub struct CCM_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCM_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 19)) | (((value as u32) & 0x07) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `CCM`"]
        pub type CCM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCM`"]
        pub struct CCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `CBC_MAC`"]
        pub type CBC_MAC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBC_MAC`"]
        pub struct CBC_MAC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBC_MAC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CTR_WIDTH`"]
        pub type CTR_WIDTH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CTR_WIDTH`"]
        pub struct CTR_WIDTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_WIDTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 7)) | (((value as u32) & 0x03) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CTR`"]
        pub type CTR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTR`"]
        pub struct CTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CBC`"]
        pub type CBC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBC`"]
        pub struct CBC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `KEY_SIZE`"]
        pub type KEY_SIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `KEY_SIZE`"]
        pub struct KEY_SIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_SIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `INPUT_RDY`"]
        pub type INPUT_RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INPUT_RDY`"]
        pub struct INPUT_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INPUT_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OUTPUT_RDY`"]
        pub type OUTPUT_RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OUTPUT_RDY`"]
        pub struct OUTPUT_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTPUT_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - CONTEXT_RDY"]
            #[inline(always)]
            pub fn context_rdy(&self) -> CONTEXT_RDY_R {
                CONTEXT_RDY_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - SAVED_CONTEXT_RDY"]
            #[inline(always)]
            pub fn saved_context_rdy(&self) -> SAVED_CONTEXT_RDY_R {
                SAVED_CONTEXT_RDY_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - SAVE_CONTEXT"]
            #[inline(always)]
            pub fn save_context(&self) -> SAVE_CONTEXT_R {
                SAVE_CONTEXT_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 22:24 - CCM_M"]
            #[inline(always)]
            pub fn ccm_m(&self) -> CCM_M_R {
                CCM_M_R::new(((self.bits >> 22) & 0x07) as u8)
            }
            #[doc = "Bits 19:21 - CCM_L"]
            #[inline(always)]
            pub fn ccm_l(&self) -> CCM_L_R {
                CCM_L_R::new(((self.bits >> 19) & 0x07) as u8)
            }
            #[doc = "Bit 18 - CCM"]
            #[inline(always)]
            pub fn ccm(&self) -> CCM_R {
                CCM_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CBC_MAC"]
            #[inline(always)]
            pub fn cbc_mac(&self) -> CBC_MAC_R {
                CBC_MAC_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 7:8 - CTR_WIDTH"]
            #[inline(always)]
            pub fn ctr_width(&self) -> CTR_WIDTH_R {
                CTR_WIDTH_R::new(((self.bits >> 7) & 0x03) as u8)
            }
            #[doc = "Bit 6 - CTR"]
            #[inline(always)]
            pub fn ctr(&self) -> CTR_R {
                CTR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - CBC"]
            #[inline(always)]
            pub fn cbc(&self) -> CBC_R {
                CBC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - KEY_SIZE"]
            #[inline(always)]
            pub fn key_size(&self) -> KEY_SIZE_R {
                KEY_SIZE_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 2 - DIR"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - INPUT_RDY"]
            #[inline(always)]
            pub fn input_rdy(&self) -> INPUT_RDY_R {
                INPUT_RDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - OUTPUT_RDY"]
            #[inline(always)]
            pub fn output_rdy(&self) -> OUTPUT_RDY_R {
                OUTPUT_RDY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - CONTEXT_RDY"]
            #[inline(always)]
            pub fn context_rdy(&mut self) -> CONTEXT_RDY_W {
                CONTEXT_RDY_W { w: self }
            }
            #[doc = "Bit 30 - SAVED_CONTEXT_RDY"]
            #[inline(always)]
            pub fn saved_context_rdy(&mut self) -> SAVED_CONTEXT_RDY_W {
                SAVED_CONTEXT_RDY_W { w: self }
            }
            #[doc = "Bit 29 - SAVE_CONTEXT"]
            #[inline(always)]
            pub fn save_context(&mut self) -> SAVE_CONTEXT_W {
                SAVE_CONTEXT_W { w: self }
            }
            #[doc = "Bits 22:24 - CCM_M"]
            #[inline(always)]
            pub fn ccm_m(&mut self) -> CCM_M_W {
                CCM_M_W { w: self }
            }
            #[doc = "Bits 19:21 - CCM_L"]
            #[inline(always)]
            pub fn ccm_l(&mut self) -> CCM_L_W {
                CCM_L_W { w: self }
            }
            #[doc = "Bit 18 - CCM"]
            #[inline(always)]
            pub fn ccm(&mut self) -> CCM_W {
                CCM_W { w: self }
            }
            #[doc = "Bit 15 - CBC_MAC"]
            #[inline(always)]
            pub fn cbc_mac(&mut self) -> CBC_MAC_W {
                CBC_MAC_W { w: self }
            }
            #[doc = "Bits 7:8 - CTR_WIDTH"]
            #[inline(always)]
            pub fn ctr_width(&mut self) -> CTR_WIDTH_W {
                CTR_WIDTH_W { w: self }
            }
            #[doc = "Bit 6 - CTR"]
            #[inline(always)]
            pub fn ctr(&mut self) -> CTR_W {
                CTR_W { w: self }
            }
            #[doc = "Bit 5 - CBC"]
            #[inline(always)]
            pub fn cbc(&mut self) -> CBC_W {
                CBC_W { w: self }
            }
            #[doc = "Bits 3:4 - KEY_SIZE"]
            #[inline(always)]
            pub fn key_size(&mut self) -> KEY_SIZE_W {
                KEY_SIZE_W { w: self }
            }
            #[doc = "Bit 2 - DIR"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 1 - INPUT_RDY"]
            #[inline(always)]
            pub fn input_rdy(&mut self) -> INPUT_RDY_W {
                INPUT_RDY_W { w: self }
            }
            #[doc = "Bit 0 - OUTPUT_RDY"]
            #[inline(always)]
            pub fn output_rdy(&mut self) -> OUTPUT_RDY_W {
                OUTPUT_RDY_W { w: self }
            }
        }
    }
    #[doc = "Crypto Data Length LSW\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdatalen0](aesdatalen0) module"]
    pub type AESDATALEN0 = crate::Reg<u32, _AESDATALEN0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATALEN0;
    #[doc = "`write(|w| ..)` method takes [aesdatalen0::W](aesdatalen0::W) writer structure"]
    impl crate::Writable for AESDATALEN0 {}
    #[doc = "Crypto Data Length LSW"]
    pub mod aesdatalen0 {
        #[doc = "Writer for register AESDATALEN0"]
        pub type W = crate::W<u32, super::AESDATALEN0>;
        #[doc = "Register AESDATALEN0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESDATALEN0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `LEN_LSW`"]
        pub struct LEN_LSW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_LSW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - LEN_LSW"]
            #[inline(always)]
            pub fn len_lsw(&mut self) -> LEN_LSW_W {
                LEN_LSW_W { w: self }
            }
        }
    }
    #[doc = "Crypto Data Length MSW\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdatalen1](aesdatalen1) module"]
    pub type AESDATALEN1 = crate::Reg<u32, _AESDATALEN1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATALEN1;
    #[doc = "`write(|w| ..)` method takes [aesdatalen1::W](aesdatalen1::W) writer structure"]
    impl crate::Writable for AESDATALEN1 {}
    #[doc = "Crypto Data Length MSW"]
    pub mod aesdatalen1 {
        #[doc = "Writer for register AESDATALEN1"]
        pub type W = crate::W<u32, super::AESDATALEN1>;
        #[doc = "Register AESDATALEN1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESDATALEN1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `LEN_MSW`"]
        pub struct LEN_MSW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_MSW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1fff_ffff) | ((value as u32) & 0x1fff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:28 - LEN_MSW"]
            #[inline(always)]
            pub fn len_msw(&mut self) -> LEN_MSW_W {
                LEN_MSW_W { w: self }
            }
        }
    }
    #[doc = "AES Authentication Length\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesauthlen](aesauthlen) module"]
    pub type AESAUTHLEN = crate::Reg<u32, _AESAUTHLEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESAUTHLEN;
    #[doc = "`write(|w| ..)` method takes [aesauthlen::W](aesauthlen::W) writer structure"]
    impl crate::Writable for AESAUTHLEN {}
    #[doc = "AES Authentication Length"]
    pub mod aesauthlen {
        #[doc = "Writer for register AESAUTHLEN"]
        pub type W = crate::W<u32, super::AESAUTHLEN>;
        #[doc = "Register AESAUTHLEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESAUTHLEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `LEN`"]
        pub struct LEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - LEN"]
            #[inline(always)]
            pub fn len(&mut self) -> LEN_W {
                LEN_W { w: self }
            }
        }
    }
    #[doc = "Data Input/Output\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdataout0](aesdataout0) module"]
    pub type AESDATAOUT0 = crate::Reg<u32, _AESDATAOUT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAOUT0;
    #[doc = "`read()` method returns [aesdataout0::R](aesdataout0::R) reader structure"]
    impl crate::Readable for AESDATAOUT0 {}
    #[doc = "Data Input/Output"]
    pub mod aesdataout0 {
        #[doc = "Reader of register AESDATAOUT0"]
        pub type R = crate::R<u32, super::AESDATAOUT0>;
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "AES Data Input/Output 0\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdatain0](aesdatain0) module"]
    pub type AESDATAIN0 = crate::Reg<u32, _AESDATAIN0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAIN0;
    #[doc = "`write(|w| ..)` method takes [aesdatain0::W](aesdatain0::W) writer structure"]
    impl crate::Writable for AESDATAIN0 {}
    #[doc = "AES Data Input/Output 0"]
    pub mod aesdatain0 {
        #[doc = "Writer for register AESDATAIN0"]
        pub type W = crate::W<u32, super::AESDATAIN0>;
        #[doc = "Register AESDATAIN0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESDATAIN0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "AES Data Input/Output 3\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdataout1](aesdataout1) module"]
    pub type AESDATAOUT1 = crate::Reg<u32, _AESDATAOUT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAOUT1;
    #[doc = "`read()` method returns [aesdataout1::R](aesdataout1::R) reader structure"]
    impl crate::Readable for AESDATAOUT1 {}
    #[doc = "AES Data Input/Output 3"]
    pub mod aesdataout1 {
        #[doc = "Reader of register AESDATAOUT1"]
        pub type R = crate::R<u32, super::AESDATAOUT1>;
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "AES Data Input/Output 1\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdatain1](aesdatain1) module"]
    pub type AESDATAIN1 = crate::Reg<u32, _AESDATAIN1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAIN1;
    #[doc = "`write(|w| ..)` method takes [aesdatain1::W](aesdatain1::W) writer structure"]
    impl crate::Writable for AESDATAIN1 {}
    #[doc = "AES Data Input/Output 1"]
    pub mod aesdatain1 {
        #[doc = "Writer for register AESDATAIN1"]
        pub type W = crate::W<u32, super::AESDATAIN1>;
        #[doc = "Register AESDATAIN1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESDATAIN1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "AES Data Input/Output 2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdataout2](aesdataout2) module"]
    pub type AESDATAOUT2 = crate::Reg<u32, _AESDATAOUT2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAOUT2;
    #[doc = "`read()` method returns [aesdataout2::R](aesdataout2::R) reader structure"]
    impl crate::Readable for AESDATAOUT2 {}
    #[doc = "AES Data Input/Output 2"]
    pub mod aesdataout2 {
        #[doc = "Reader of register AESDATAOUT2"]
        pub type R = crate::R<u32, super::AESDATAOUT2>;
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "AES Data Input/Output 2\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdatain2](aesdatain2) module"]
    pub type AESDATAIN2 = crate::Reg<u32, _AESDATAIN2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAIN2;
    #[doc = "`write(|w| ..)` method takes [aesdatain2::W](aesdatain2::W) writer structure"]
    impl crate::Writable for AESDATAIN2 {}
    #[doc = "AES Data Input/Output 2"]
    pub mod aesdatain2 {
        #[doc = "Writer for register AESDATAIN2"]
        pub type W = crate::W<u32, super::AESDATAIN2>;
        #[doc = "Register AESDATAIN2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESDATAIN2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "AES Data Input/Output 3\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdataout3](aesdataout3) module"]
    pub type AESDATAOUT3 = crate::Reg<u32, _AESDATAOUT3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAOUT3;
    #[doc = "`read()` method returns [aesdataout3::R](aesdataout3::R) reader structure"]
    impl crate::Readable for AESDATAOUT3 {}
    #[doc = "AES Data Input/Output 3"]
    pub mod aesdataout3 {
        #[doc = "Reader of register AESDATAOUT3"]
        pub type R = crate::R<u32, super::AESDATAOUT3>;
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Data Input/Output\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aesdatain3](aesdatain3) module"]
    pub type AESDATAIN3 = crate::Reg<u32, _AESDATAIN3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESDATAIN3;
    #[doc = "`write(|w| ..)` method takes [aesdatain3::W](aesdatain3::W) writer structure"]
    impl crate::Writable for AESDATAIN3 {}
    #[doc = "Data Input/Output"]
    pub mod aesdatain3 {
        #[doc = "Writer for register AESDATAIN3"]
        pub type W = crate::W<u32, super::AESDATAIN3>;
        #[doc = "Register AESDATAIN3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AESDATAIN3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "AES Tag Output\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aestagout](aestagout) module"]
    pub type AESTAGOUT = crate::Reg<u32, _AESTAGOUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AESTAGOUT;
    #[doc = "`read()` method returns [aestagout::R](aestagout::R) reader structure"]
    impl crate::Readable for AESTAGOUT {}
    #[doc = "AES Tag Output"]
    pub mod aestagout {
        #[doc = "Reader of register AESTAGOUT%s"]
        pub type R = crate::R<u32, super::AESTAGOUT>;
        #[doc = "Reader of field `TAG`"]
        pub type TAG_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TAG"]
            #[inline(always)]
            pub fn tag(&self) -> TAG_R {
                TAG_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Master Algorithm Select This register configures the internal destination of the DMA controller.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [algsel](algsel) module"]
    pub type ALGSEL = crate::Reg<u32, _ALGSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALGSEL;
    #[doc = "`read()` method returns [algsel::R](algsel::R) reader structure"]
    impl crate::Readable for ALGSEL {}
    #[doc = "`write(|w| ..)` method takes [algsel::W](algsel::W) writer structure"]
    impl crate::Writable for ALGSEL {}
    #[doc = "Master Algorithm Select This register configures the internal destination of the DMA controller."]
    pub mod algsel {
        #[doc = "Reader of register ALGSEL"]
        pub type R = crate::R<u32, super::ALGSEL>;
        #[doc = "Writer for register ALGSEL"]
        pub type W = crate::W<u32, super::ALGSEL>;
        #[doc = "Register ALGSEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALGSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAG`"]
        pub type TAG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAG`"]
        pub struct TAG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `AES`"]
        pub type AES_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AES`"]
        pub struct AES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AES_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `KEY_STORE`"]
        pub type KEY_STORE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `KEY_STORE`"]
        pub struct KEY_STORE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_STORE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - TAG"]
            #[inline(always)]
            pub fn tag(&self) -> TAG_R {
                TAG_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 1 - AES"]
            #[inline(always)]
            pub fn aes(&self) -> AES_R {
                AES_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - KEY_STORE"]
            #[inline(always)]
            pub fn key_store(&self) -> KEY_STORE_R {
                KEY_STORE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - TAG"]
            #[inline(always)]
            pub fn tag(&mut self) -> TAG_W {
                TAG_W { w: self }
            }
            #[doc = "Bit 1 - AES"]
            #[inline(always)]
            pub fn aes(&mut self) -> AES_W {
                AES_W { w: self }
            }
            #[doc = "Bit 0 - KEY_STORE"]
            #[inline(always)]
            pub fn key_store(&mut self) -> KEY_STORE_W {
                KEY_STORE_W { w: self }
            }
        }
    }
    #[doc = "Master Protection Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaprotctl](dmaprotctl) module"]
    pub type DMAPROTCTL = crate::Reg<u32, _DMAPROTCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAPROTCTL;
    #[doc = "`read()` method returns [dmaprotctl::R](dmaprotctl::R) reader structure"]
    impl crate::Readable for DMAPROTCTL {}
    #[doc = "`write(|w| ..)` method takes [dmaprotctl::W](dmaprotctl::W) writer structure"]
    impl crate::Writable for DMAPROTCTL {}
    #[doc = "Master Protection Control"]
    pub mod dmaprotctl {
        #[doc = "Reader of register DMAPROTCTL"]
        pub type R = crate::R<u32, super::DMAPROTCTL>;
        #[doc = "Writer for register DMAPROTCTL"]
        pub type W = crate::W<u32, super::DMAPROTCTL>;
        #[doc = "Register DMAPROTCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAPROTCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "Software Reset\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swreset](swreset) module"]
    pub type SWRESET = crate::Reg<u32, _SWRESET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWRESET;
    #[doc = "`read()` method returns [swreset::R](swreset::R) reader structure"]
    impl crate::Readable for SWRESET {}
    #[doc = "`write(|w| ..)` method takes [swreset::W](swreset::W) writer structure"]
    impl crate::Writable for SWRESET {}
    #[doc = "Software Reset"]
    pub mod swreset {
        #[doc = "Reader of register SWRESET"]
        pub type R = crate::R<u32, super::SWRESET>;
        #[doc = "Writer for register SWRESET"]
        pub type W = crate::W<u32, super::SWRESET>;
        #[doc = "Register SWRESET `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWRESET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RESET`"]
        pub type RESET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RESET"]
            #[inline(always)]
            pub fn reset(&self) -> RESET_R {
                RESET_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RESET"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqtype](irqtype) module"]
    pub type IRQTYPE = crate::Reg<u32, _IRQTYPE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQTYPE;
    #[doc = "`read()` method returns [irqtype::R](irqtype::R) reader structure"]
    impl crate::Readable for IRQTYPE {}
    #[doc = "`write(|w| ..)` method takes [irqtype::W](irqtype::W) writer structure"]
    impl crate::Writable for IRQTYPE {}
    #[doc = "Interrupt Configuration"]
    pub mod irqtype {
        #[doc = "Reader of register IRQTYPE"]
        pub type R = crate::R<u32, super::IRQTYPE>;
        #[doc = "Writer for register IRQTYPE"]
        pub type W = crate::W<u32, super::IRQTYPE>;
        #[doc = "Register IRQTYPE `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQTYPE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IEN`"]
        pub type IEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IEN`"]
        pub struct IEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - IEN"]
            #[inline(always)]
            pub fn ien(&self) -> IEN_R {
                IEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - IEN"]
            #[inline(always)]
            pub fn ien(&mut self) -> IEN_W {
                IEN_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqen](irqen) module"]
    pub type IRQEN = crate::Reg<u32, _IRQEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQEN;
    #[doc = "`read()` method returns [irqen::R](irqen::R) reader structure"]
    impl crate::Readable for IRQEN {}
    #[doc = "`write(|w| ..)` method takes [irqen::W](irqen::W) writer structure"]
    impl crate::Writable for IRQEN {}
    #[doc = "Interrupt Enable"]
    pub mod irqen {
        #[doc = "Reader of register IRQEN"]
        pub type R = crate::R<u32, super::IRQEN>;
        #[doc = "Writer for register IRQEN"]
        pub type W = crate::W<u32, super::IRQEN>;
        #[doc = "Register IRQEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMA_IN_DONE`"]
        pub type DMA_IN_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA_IN_DONE`"]
        pub struct DMA_IN_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_IN_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RESULT_AVAIL`"]
        pub type RESULT_AVAIL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESULT_AVAIL`"]
        pub struct RESULT_AVAIL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESULT_AVAIL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - DMA_IN_DONE"]
            #[inline(always)]
            pub fn dma_in_done(&self) -> DMA_IN_DONE_R {
                DMA_IN_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RESULT_AVAIL"]
            #[inline(always)]
            pub fn result_avail(&self) -> RESULT_AVAIL_R {
                RESULT_AVAIL_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - DMA_IN_DONE"]
            #[inline(always)]
            pub fn dma_in_done(&mut self) -> DMA_IN_DONE_W {
                DMA_IN_DONE_W { w: self }
            }
            #[doc = "Bit 0 - RESULT_AVAIL"]
            #[inline(always)]
            pub fn result_avail(&mut self) -> RESULT_AVAIL_W {
                RESULT_AVAIL_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Clear\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqclr](irqclr) module"]
    pub type IRQCLR = crate::Reg<u32, _IRQCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQCLR;
    #[doc = "`write(|w| ..)` method takes [irqclr::W](irqclr::W) writer structure"]
    impl crate::Writable for IRQCLR {}
    #[doc = "Interrupt Clear"]
    pub mod irqclr {
        #[doc = "Writer for register IRQCLR"]
        pub type W = crate::W<u32, super::IRQCLR>;
        #[doc = "Register IRQCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DMA_BUS_ERR`"]
        pub struct DMA_BUS_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_BUS_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `KEY_ST_WR_ERR`"]
        pub struct KEY_ST_WR_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_ST_WR_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Write proxy for field `KEY_ST_RD_ERR`"]
        pub struct KEY_ST_RD_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_ST_RD_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Write proxy for field `DMA_IN_DONE`"]
        pub struct DMA_IN_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_IN_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RESULT_AVAIL`"]
        pub struct RESULT_AVAIL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESULT_AVAIL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - DMA_BUS_ERR"]
            #[inline(always)]
            pub fn dma_bus_err(&mut self) -> DMA_BUS_ERR_W {
                DMA_BUS_ERR_W { w: self }
            }
            #[doc = "Bit 30 - KEY_ST_WR_ERR"]
            #[inline(always)]
            pub fn key_st_wr_err(&mut self) -> KEY_ST_WR_ERR_W {
                KEY_ST_WR_ERR_W { w: self }
            }
            #[doc = "Bit 29 - KEY_ST_RD_ERR"]
            #[inline(always)]
            pub fn key_st_rd_err(&mut self) -> KEY_ST_RD_ERR_W {
                KEY_ST_RD_ERR_W { w: self }
            }
            #[doc = "Bit 1 - DMA_IN_DONE"]
            #[inline(always)]
            pub fn dma_in_done(&mut self) -> DMA_IN_DONE_W {
                DMA_IN_DONE_W { w: self }
            }
            #[doc = "Bit 0 - RESULT_AVAIL"]
            #[inline(always)]
            pub fn result_avail(&mut self) -> RESULT_AVAIL_W {
                RESULT_AVAIL_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Set\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqset](irqset) module"]
    pub type IRQSET = crate::Reg<u32, _IRQSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQSET;
    #[doc = "`write(|w| ..)` method takes [irqset::W](irqset::W) writer structure"]
    impl crate::Writable for IRQSET {}
    #[doc = "Interrupt Set"]
    pub mod irqset {
        #[doc = "Writer for register IRQSET"]
        pub type W = crate::W<u32, super::IRQSET>;
        #[doc = "Register IRQSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DMA_IN_DONE`"]
        pub struct DMA_IN_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_IN_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RESULT_AVAIL`"]
        pub struct RESULT_AVAIL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESULT_AVAIL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - DMA_IN_DONE"]
            #[inline(always)]
            pub fn dma_in_done(&mut self) -> DMA_IN_DONE_W {
                DMA_IN_DONE_W { w: self }
            }
            #[doc = "Bit 0 - RESULT_AVAIL"]
            #[inline(always)]
            pub fn result_avail(&mut self) -> RESULT_AVAIL_W {
                RESULT_AVAIL_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqstat](irqstat) module"]
    pub type IRQSTAT = crate::Reg<u32, _IRQSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQSTAT;
    #[doc = "`read()` method returns [irqstat::R](irqstat::R) reader structure"]
    impl crate::Readable for IRQSTAT {}
    #[doc = "Interrupt Status"]
    pub mod irqstat {
        #[doc = "Reader of register IRQSTAT"]
        pub type R = crate::R<u32, super::IRQSTAT>;
        #[doc = "Reader of field `DMA_BUS_ERR`"]
        pub type DMA_BUS_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `KEY_ST_WR_ERR`"]
        pub type KEY_ST_WR_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `KEY_ST_RD_ERR`"]
        pub type KEY_ST_RD_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMA_IN_DONE`"]
        pub type DMA_IN_DONE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RESULT_AVAIL`"]
        pub type RESULT_AVAIL_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - DMA_BUS_ERR"]
            #[inline(always)]
            pub fn dma_bus_err(&self) -> DMA_BUS_ERR_R {
                DMA_BUS_ERR_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - KEY_ST_WR_ERR"]
            #[inline(always)]
            pub fn key_st_wr_err(&self) -> KEY_ST_WR_ERR_R {
                KEY_ST_WR_ERR_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - KEY_ST_RD_ERR"]
            #[inline(always)]
            pub fn key_st_rd_err(&self) -> KEY_ST_RD_ERR_R {
                KEY_ST_RD_ERR_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DMA_IN_DONE"]
            #[inline(always)]
            pub fn dma_in_done(&self) -> DMA_IN_DONE_R {
                DMA_IN_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RESULT_AVAIL"]
            #[inline(always)]
            pub fn result_avail(&self) -> RESULT_AVAIL_R {
                RESULT_AVAIL_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "CTRL Module Version\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hwver](hwver) module"]
    pub type HWVER = crate::Reg<u32, _HWVER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HWVER;
    #[doc = "`read()` method returns [hwver::R](hwver::R) reader structure"]
    impl crate::Readable for HWVER {}
    #[doc = "CTRL Module Version"]
    pub mod hwver {
        #[doc = "Reader of register HWVER"]
        pub type R = crate::R<u32, super::HWVER>;
        #[doc = "Reader of field `HW_MAJOR_VER`"]
        pub type HW_MAJOR_VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HW_MINOR_VER`"]
        pub type HW_MINOR_VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HW_PATCH_LVL`"]
        pub type HW_PATCH_LVL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VER_NUM_COMPL`"]
        pub type VER_NUM_COMPL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VER_NUM`"]
        pub type VER_NUM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:27 - HW_MAJOR_VER"]
            #[inline(always)]
            pub fn hw_major_ver(&self) -> HW_MAJOR_VER_R {
                HW_MAJOR_VER_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - HW_MINOR_VER"]
            #[inline(always)]
            pub fn hw_minor_ver(&self) -> HW_MINOR_VER_R {
                HW_MINOR_VER_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - HW_PATCH_LVL"]
            #[inline(always)]
            pub fn hw_patch_lvl(&self) -> HW_PATCH_LVL_R {
                HW_PATCH_LVL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - VER_NUM_COMPL"]
            #[inline(always)]
            pub fn ver_num_compl(&self) -> VER_NUM_COMPL_R {
                VER_NUM_COMPL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VER_NUM"]
            #[inline(always)]
            pub fn ver_num(&self) -> VER_NUM_R {
                VER_NUM_R::new((self.bits & 0xff) as u8)
            }
        }
    }
}
#[doc = "Event Fabric Component Definition"]
pub struct EVENT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EVENT {}
impl EVENT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const event::RegisterBlock {
        0x4008_3000 as *const _
    }
}
impl Deref for EVENT {
    type Target = event::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*EVENT::ptr() }
    }
}
#[doc = "Event Fabric Component Definition"]
pub mod event {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Output Selection for CPU Interrupt 0"]
        pub cpuirqsel0: CPUIRQSEL0,
        #[doc = "0x04 - Output Selection for CPU Interrupt 1"]
        pub cpuirqsel1: CPUIRQSEL1,
        #[doc = "0x08 - Output Selection for CPU Interrupt 2"]
        pub cpuirqsel2: CPUIRQSEL2,
        #[doc = "0x0c - Output Selection for CPU Interrupt 3"]
        pub cpuirqsel3: CPUIRQSEL3,
        #[doc = "0x10 - Output Selection for CPU Interrupt 4"]
        pub cpuirqsel4: CPUIRQSEL4,
        #[doc = "0x14 - Output Selection for CPU Interrupt 5"]
        pub cpuirqsel5: CPUIRQSEL5,
        #[doc = "0x18 - Output Selection for CPU Interrupt 6"]
        pub cpuirqsel6: CPUIRQSEL6,
        #[doc = "0x1c - Output Selection for CPU Interrupt 7"]
        pub cpuirqsel7: CPUIRQSEL7,
        #[doc = "0x20 - Output Selection for CPU Interrupt 8"]
        pub cpuirqsel8: CPUIRQSEL8,
        #[doc = "0x24 - Output Selection for CPU Interrupt 9"]
        pub cpuirqsel9: CPUIRQSEL9,
        #[doc = "0x28 - Output Selection for CPU Interrupt 10"]
        pub cpuirqsel10: CPUIRQSEL10,
        #[doc = "0x2c - Output Selection for CPU Interrupt 11"]
        pub cpuirqsel11: CPUIRQSEL11,
        #[doc = "0x30 - Output Selection for CPU Interrupt 12"]
        pub cpuirqsel12: CPUIRQSEL12,
        #[doc = "0x34 - Output Selection for CPU Interrupt 13"]
        pub cpuirqsel13: CPUIRQSEL13,
        #[doc = "0x38 - Output Selection for CPU Interrupt 14"]
        pub cpuirqsel14: CPUIRQSEL14,
        #[doc = "0x3c - Output Selection for CPU Interrupt 15"]
        pub cpuirqsel15: CPUIRQSEL15,
        #[doc = "0x40 - Output Selection for CPU Interrupt 16"]
        pub cpuirqsel16: CPUIRQSEL16,
        #[doc = "0x44 - Output Selection for CPU Interrupt 17"]
        pub cpuirqsel17: CPUIRQSEL17,
        #[doc = "0x48 - Output Selection for CPU Interrupt 18"]
        pub cpuirqsel18: CPUIRQSEL18,
        #[doc = "0x4c - Output Selection for CPU Interrupt 19"]
        pub cpuirqsel19: CPUIRQSEL19,
        #[doc = "0x50 - Output Selection for CPU Interrupt 20"]
        pub cpuirqsel20: CPUIRQSEL20,
        #[doc = "0x54 - Output Selection for CPU Interrupt 21"]
        pub cpuirqsel21: CPUIRQSEL21,
        #[doc = "0x58 - Output Selection for CPU Interrupt 22"]
        pub cpuirqsel22: CPUIRQSEL22,
        #[doc = "0x5c - Output Selection for CPU Interrupt 23"]
        pub cpuirqsel23: CPUIRQSEL23,
        #[doc = "0x60 - Output Selection for CPU Interrupt 24"]
        pub cpuirqsel24: CPUIRQSEL24,
        #[doc = "0x64 - Output Selection for CPU Interrupt 25"]
        pub cpuirqsel25: CPUIRQSEL25,
        #[doc = "0x68 - Output Selection for CPU Interrupt 26"]
        pub cpuirqsel26: CPUIRQSEL26,
        #[doc = "0x6c - Output Selection for CPU Interrupt 27"]
        pub cpuirqsel27: CPUIRQSEL27,
        #[doc = "0x70 - Output Selection for CPU Interrupt 28"]
        pub cpuirqsel28: CPUIRQSEL28,
        #[doc = "0x74 - Output Selection for CPU Interrupt 29"]
        pub cpuirqsel29: CPUIRQSEL29,
        #[doc = "0x78 - Output Selection for CPU Interrupt 30"]
        pub cpuirqsel30: CPUIRQSEL30,
        #[doc = "0x7c - Output Selection for CPU Interrupt 31"]
        pub cpuirqsel31: CPUIRQSEL31,
        #[doc = "0x80 - Output Selection for CPU Interrupt 32"]
        pub cpuirqsel32: CPUIRQSEL32,
        #[doc = "0x84 - Output Selection for CPU Interrupt 33"]
        pub cpuirqsel33: CPUIRQSEL33,
        _reserved34: [u8; 120usize],
        #[doc = "0x100 - Output Selection for RFC Event 0"]
        pub rfcsel0: RFCSEL0,
        #[doc = "0x104 - Output Selection for RFC Event 1"]
        pub rfcsel1: RFCSEL1,
        #[doc = "0x108 - Output Selection for RFC Event 2"]
        pub rfcsel2: RFCSEL2,
        #[doc = "0x10c - Output Selection for RFC Event 3"]
        pub rfcsel3: RFCSEL3,
        #[doc = "0x110 - Output Selection for RFC Event 4"]
        pub rfcsel4: RFCSEL4,
        #[doc = "0x114 - Output Selection for RFC Event 5"]
        pub rfcsel5: RFCSEL5,
        #[doc = "0x118 - Output Selection for RFC Event 6"]
        pub rfcsel6: RFCSEL6,
        #[doc = "0x11c - Output Selection for RFC Event 7"]
        pub rfcsel7: RFCSEL7,
        #[doc = "0x120 - Output Selection for RFC Event 8"]
        pub rfcsel8: RFCSEL8,
        #[doc = "0x124 - Output Selection for RFC Event 9"]
        pub rfcsel9: RFCSEL9,
        _reserved44: [u8; 216usize],
        #[doc = "0x200 - Output Selection for GPT0 0"]
        pub gpt0acaptsel: GPT0ACAPTSEL,
        #[doc = "0x204 - Output Selection for GPT0 1"]
        pub gpt0bcaptsel: GPT0BCAPTSEL,
        _reserved46: [u8; 248usize],
        #[doc = "0x300 - Output Selection for GPT1 0"]
        pub gpt1acaptsel: GPT1ACAPTSEL,
        #[doc = "0x304 - Output Selection for GPT1 1"]
        pub gpt1bcaptsel: GPT1BCAPTSEL,
        _reserved48: [u8; 248usize],
        #[doc = "0x400 - Output Selection for GPT2 0"]
        pub gpt2acaptsel: GPT2ACAPTSEL,
        #[doc = "0x404 - Output Selection for GPT2 1"]
        pub gpt2bcaptsel: GPT2BCAPTSEL,
        _reserved50: [u8; 256usize],
        #[doc = "0x508 - Output Selection for DMA Channel 1 SREQ"]
        pub udmach1ssel: UDMACH1SSEL,
        #[doc = "0x50c - Output Selection for DMA Channel 1 REQ"]
        pub udmach1bsel: UDMACH1BSEL,
        #[doc = "0x510 - Output Selection for DMA Channel 2 SREQ"]
        pub udmach2ssel: UDMACH2SSEL,
        #[doc = "0x514 - Output Selection for DMA Channel 2 REQ"]
        pub udmach2bsel: UDMACH2BSEL,
        #[doc = "0x518 - Output Selection for DMA Channel 3 SREQ"]
        pub udmach3ssel: UDMACH3SSEL,
        #[doc = "0x51c - Output Selection for DMA Channel 3 REQ"]
        pub udmach3bsel: UDMACH3BSEL,
        #[doc = "0x520 - Output Selection for DMA Channel 4 SREQ"]
        pub udmach4ssel: UDMACH4SSEL,
        #[doc = "0x524 - Output Selection for DMA Channel 4 REQ"]
        pub udmach4bsel: UDMACH4BSEL,
        #[doc = "0x528 - Output Selection for DMA Channel 5 SREQ"]
        pub udmach5ssel: UDMACH5SSEL,
        #[doc = "0x52c - Output Selection for DMA Channel 5 REQ"]
        pub udmach5bsel: UDMACH5BSEL,
        #[doc = "0x530 - Output Selection for DMA Channel 6 SREQ"]
        pub udmach6ssel: UDMACH6SSEL,
        #[doc = "0x534 - Output Selection for DMA Channel 6 REQ"]
        pub udmach6bsel: UDMACH6BSEL,
        #[doc = "0x538 - Output Selection for DMA Channel 7 SREQ"]
        pub udmach7ssel: UDMACH7SSEL,
        #[doc = "0x53c - Output Selection for DMA Channel 7 REQ"]
        pub udmach7bsel: UDMACH7BSEL,
        #[doc = "0x540 - Output Selection for DMA Channel 8 SREQ Single request is ignored for this channel"]
        pub udmach8ssel: UDMACH8SSEL,
        #[doc = "0x544 - Output Selection for DMA Channel 8 REQ"]
        pub udmach8bsel: UDMACH8BSEL,
        #[doc = "0x548 - Output Selection for DMA Channel 9 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMAARIS"]
        pub udmach9ssel: UDMACH9SSEL,
        #[doc = "0x54c - Output Selection for DMA Channel 9 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMAARIS"]
        pub udmach9bsel: UDMACH9BSEL,
        #[doc = "0x550 - Output Selection for DMA Channel 10 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMABRIS"]
        pub udmach10ssel: UDMACH10SSEL,
        #[doc = "0x554 - Output Selection for DMA Channel 10 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMABRIS"]
        pub udmach10bsel: UDMACH10BSEL,
        #[doc = "0x558 - Output Selection for DMA Channel 11 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMAARIS"]
        pub udmach11ssel: UDMACH11SSEL,
        #[doc = "0x55c - Output Selection for DMA Channel 11 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMAARIS"]
        pub udmach11bsel: UDMACH11BSEL,
        #[doc = "0x560 - Output Selection for DMA Channel 12 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMABRIS"]
        pub udmach12ssel: UDMACH12SSEL,
        #[doc = "0x564 - Output Selection for DMA Channel 12 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMABRIS"]
        pub udmach12bsel: UDMACH12BSEL,
        _reserved74: [u8; 4usize],
        #[doc = "0x56c - Output Selection for DMA Channel 13 REQ"]
        pub udmach13bsel: UDMACH13BSEL,
        _reserved75: [u8; 4usize],
        #[doc = "0x574 - Output Selection for DMA Channel 14 REQ"]
        pub udmach14bsel: UDMACH14BSEL,
        _reserved76: [u8; 4usize],
        #[doc = "0x57c - Output Selection for DMA Channel 15 REQ"]
        pub udmach15bsel: UDMACH15BSEL,
        #[doc = "0x580 - Output Selection for DMA Channel 16 SREQ"]
        pub udmach16ssel: UDMACH16SSEL,
        #[doc = "0x584 - Output Selection for DMA Channel 16 REQ"]
        pub udmach16bsel: UDMACH16BSEL,
        #[doc = "0x588 - Output Selection for DMA Channel 17 SREQ"]
        pub udmach17ssel: UDMACH17SSEL,
        #[doc = "0x58c - Output Selection for DMA Channel 17 REQ"]
        pub udmach17bsel: UDMACH17BSEL,
        _reserved81: [u8; 24usize],
        #[doc = "0x5a8 - Output Selection for DMA Channel 21 SREQ"]
        pub udmach21ssel: UDMACH21SSEL,
        #[doc = "0x5ac - Output Selection for DMA Channel 21 REQ"]
        pub udmach21bsel: UDMACH21BSEL,
        #[doc = "0x5b0 - Output Selection for DMA Channel 22 SREQ"]
        pub udmach22ssel: UDMACH22SSEL,
        #[doc = "0x5b4 - Output Selection for DMA Channel 22 REQ"]
        pub udmach22bsel: UDMACH22BSEL,
        #[doc = "0x5b8 - Output Selection for DMA Channel 23 SREQ"]
        pub udmach23ssel: UDMACH23SSEL,
        #[doc = "0x5bc - Output Selection for DMA Channel 23 REQ"]
        pub udmach23bsel: UDMACH23BSEL,
        #[doc = "0x5c0 - Output Selection for DMA Channel 24 SREQ"]
        pub udmach24ssel: UDMACH24SSEL,
        #[doc = "0x5c4 - Output Selection for DMA Channel 24 REQ"]
        pub udmach24bsel: UDMACH24BSEL,
        _reserved89: [u8; 56usize],
        #[doc = "0x600 - Output Selection for GPT3 0"]
        pub gpt3acaptsel: GPT3ACAPTSEL,
        #[doc = "0x604 - Output Selection for GPT3 1"]
        pub gpt3bcaptsel: GPT3BCAPTSEL,
        _reserved91: [u8; 248usize],
        #[doc = "0x700 - Output Selection for AUX Subscriber 0"]
        pub auxsel0: AUXSEL0,
        _reserved92: [u8; 252usize],
        #[doc = "0x800 - Output Selection for NMI Subscriber 0"]
        pub cm3nmisel0: CM3NMISEL0,
        _reserved93: [u8; 252usize],
        #[doc = "0x900 - Output Selection for I2S Subscriber 0"]
        pub i2sstmpsel0: I2SSTMPSEL0,
        _reserved94: [u8; 252usize],
        #[doc = "0xa00 - Output Selection for FRZ Subscriber 0"]
        pub frzsel0: FRZSEL0,
        _reserved95: [u8; 1276usize],
        #[doc = "0xf00 - Set or Clear Software Events"]
        pub swev: SWEV,
    }
    #[doc = "Output Selection for CPU Interrupt 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel0](cpuirqsel0) module"]
    pub type CPUIRQSEL0 = crate::Reg<u32, _CPUIRQSEL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL0;
    #[doc = "`read()` method returns [cpuirqsel0::R](cpuirqsel0::R) reader structure"]
    impl crate::Readable for CPUIRQSEL0 {}
    #[doc = "Output Selection for CPU Interrupt 0"]
    pub mod cpuirqsel0 {
        #[doc = "Reader of register CPUIRQSEL0"]
        pub type R = crate::R<u32, super::CPUIRQSEL0>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel1](cpuirqsel1) module"]
    pub type CPUIRQSEL1 = crate::Reg<u32, _CPUIRQSEL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL1;
    #[doc = "`read()` method returns [cpuirqsel1::R](cpuirqsel1::R) reader structure"]
    impl crate::Readable for CPUIRQSEL1 {}
    #[doc = "Output Selection for CPU Interrupt 1"]
    pub mod cpuirqsel1 {
        #[doc = "Reader of register CPUIRQSEL1"]
        pub type R = crate::R<u32, super::CPUIRQSEL1>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel2](cpuirqsel2) module"]
    pub type CPUIRQSEL2 = crate::Reg<u32, _CPUIRQSEL2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL2;
    #[doc = "`read()` method returns [cpuirqsel2::R](cpuirqsel2::R) reader structure"]
    impl crate::Readable for CPUIRQSEL2 {}
    #[doc = "Output Selection for CPU Interrupt 2"]
    pub mod cpuirqsel2 {
        #[doc = "Reader of register CPUIRQSEL2"]
        pub type R = crate::R<u32, super::CPUIRQSEL2>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 3\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel3](cpuirqsel3) module"]
    pub type CPUIRQSEL3 = crate::Reg<u32, _CPUIRQSEL3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL3;
    #[doc = "`read()` method returns [cpuirqsel3::R](cpuirqsel3::R) reader structure"]
    impl crate::Readable for CPUIRQSEL3 {}
    #[doc = "Output Selection for CPU Interrupt 3"]
    pub mod cpuirqsel3 {
        #[doc = "Reader of register CPUIRQSEL3"]
        pub type R = crate::R<u32, super::CPUIRQSEL3>;
        impl R {}
    }
    #[doc = "Output Selection for CPU Interrupt 4\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel4](cpuirqsel4) module"]
    pub type CPUIRQSEL4 = crate::Reg<u32, _CPUIRQSEL4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL4;
    #[doc = "`read()` method returns [cpuirqsel4::R](cpuirqsel4::R) reader structure"]
    impl crate::Readable for CPUIRQSEL4 {}
    #[doc = "Output Selection for CPU Interrupt 4"]
    pub mod cpuirqsel4 {
        #[doc = "Reader of register CPUIRQSEL4"]
        pub type R = crate::R<u32, super::CPUIRQSEL4>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 5\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel5](cpuirqsel5) module"]
    pub type CPUIRQSEL5 = crate::Reg<u32, _CPUIRQSEL5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL5;
    #[doc = "`read()` method returns [cpuirqsel5::R](cpuirqsel5::R) reader structure"]
    impl crate::Readable for CPUIRQSEL5 {}
    #[doc = "Output Selection for CPU Interrupt 5"]
    pub mod cpuirqsel5 {
        #[doc = "Reader of register CPUIRQSEL5"]
        pub type R = crate::R<u32, super::CPUIRQSEL5>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 6\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel6](cpuirqsel6) module"]
    pub type CPUIRQSEL6 = crate::Reg<u32, _CPUIRQSEL6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL6;
    #[doc = "`read()` method returns [cpuirqsel6::R](cpuirqsel6::R) reader structure"]
    impl crate::Readable for CPUIRQSEL6 {}
    #[doc = "Output Selection for CPU Interrupt 6"]
    pub mod cpuirqsel6 {
        #[doc = "Reader of register CPUIRQSEL6"]
        pub type R = crate::R<u32, super::CPUIRQSEL6>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 7\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel7](cpuirqsel7) module"]
    pub type CPUIRQSEL7 = crate::Reg<u32, _CPUIRQSEL7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL7;
    #[doc = "`read()` method returns [cpuirqsel7::R](cpuirqsel7::R) reader structure"]
    impl crate::Readable for CPUIRQSEL7 {}
    #[doc = "Output Selection for CPU Interrupt 7"]
    pub mod cpuirqsel7 {
        #[doc = "Reader of register CPUIRQSEL7"]
        pub type R = crate::R<u32, super::CPUIRQSEL7>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 8\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel8](cpuirqsel8) module"]
    pub type CPUIRQSEL8 = crate::Reg<u32, _CPUIRQSEL8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL8;
    #[doc = "`read()` method returns [cpuirqsel8::R](cpuirqsel8::R) reader structure"]
    impl crate::Readable for CPUIRQSEL8 {}
    #[doc = "Output Selection for CPU Interrupt 8"]
    pub mod cpuirqsel8 {
        #[doc = "Reader of register CPUIRQSEL8"]
        pub type R = crate::R<u32, super::CPUIRQSEL8>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 9\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel9](cpuirqsel9) module"]
    pub type CPUIRQSEL9 = crate::Reg<u32, _CPUIRQSEL9>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL9;
    #[doc = "`read()` method returns [cpuirqsel9::R](cpuirqsel9::R) reader structure"]
    impl crate::Readable for CPUIRQSEL9 {}
    #[doc = "Output Selection for CPU Interrupt 9"]
    pub mod cpuirqsel9 {
        #[doc = "Reader of register CPUIRQSEL9"]
        pub type R = crate::R<u32, super::CPUIRQSEL9>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 10\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel10](cpuirqsel10) module"]
    pub type CPUIRQSEL10 = crate::Reg<u32, _CPUIRQSEL10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL10;
    #[doc = "`read()` method returns [cpuirqsel10::R](cpuirqsel10::R) reader structure"]
    impl crate::Readable for CPUIRQSEL10 {}
    #[doc = "Output Selection for CPU Interrupt 10"]
    pub mod cpuirqsel10 {
        #[doc = "Reader of register CPUIRQSEL10"]
        pub type R = crate::R<u32, super::CPUIRQSEL10>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 11\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel11](cpuirqsel11) module"]
    pub type CPUIRQSEL11 = crate::Reg<u32, _CPUIRQSEL11>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL11;
    #[doc = "`read()` method returns [cpuirqsel11::R](cpuirqsel11::R) reader structure"]
    impl crate::Readable for CPUIRQSEL11 {}
    #[doc = "Output Selection for CPU Interrupt 11"]
    pub mod cpuirqsel11 {
        #[doc = "Reader of register CPUIRQSEL11"]
        pub type R = crate::R<u32, super::CPUIRQSEL11>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 12\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel12](cpuirqsel12) module"]
    pub type CPUIRQSEL12 = crate::Reg<u32, _CPUIRQSEL12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL12;
    #[doc = "`read()` method returns [cpuirqsel12::R](cpuirqsel12::R) reader structure"]
    impl crate::Readable for CPUIRQSEL12 {}
    #[doc = "Output Selection for CPU Interrupt 12"]
    pub mod cpuirqsel12 {
        #[doc = "Reader of register CPUIRQSEL12"]
        pub type R = crate::R<u32, super::CPUIRQSEL12>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 13\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel13](cpuirqsel13) module"]
    pub type CPUIRQSEL13 = crate::Reg<u32, _CPUIRQSEL13>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL13;
    #[doc = "`read()` method returns [cpuirqsel13::R](cpuirqsel13::R) reader structure"]
    impl crate::Readable for CPUIRQSEL13 {}
    #[doc = "Output Selection for CPU Interrupt 13"]
    pub mod cpuirqsel13 {
        #[doc = "Reader of register CPUIRQSEL13"]
        pub type R = crate::R<u32, super::CPUIRQSEL13>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 14\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel14](cpuirqsel14) module"]
    pub type CPUIRQSEL14 = crate::Reg<u32, _CPUIRQSEL14>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL14;
    #[doc = "`read()` method returns [cpuirqsel14::R](cpuirqsel14::R) reader structure"]
    impl crate::Readable for CPUIRQSEL14 {}
    #[doc = "Output Selection for CPU Interrupt 14"]
    pub mod cpuirqsel14 {
        #[doc = "Reader of register CPUIRQSEL14"]
        pub type R = crate::R<u32, super::CPUIRQSEL14>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 15\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel15](cpuirqsel15) module"]
    pub type CPUIRQSEL15 = crate::Reg<u32, _CPUIRQSEL15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL15;
    #[doc = "`read()` method returns [cpuirqsel15::R](cpuirqsel15::R) reader structure"]
    impl crate::Readable for CPUIRQSEL15 {}
    #[doc = "Output Selection for CPU Interrupt 15"]
    pub mod cpuirqsel15 {
        #[doc = "Reader of register CPUIRQSEL15"]
        pub type R = crate::R<u32, super::CPUIRQSEL15>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 16\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel16](cpuirqsel16) module"]
    pub type CPUIRQSEL16 = crate::Reg<u32, _CPUIRQSEL16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL16;
    #[doc = "`read()` method returns [cpuirqsel16::R](cpuirqsel16::R) reader structure"]
    impl crate::Readable for CPUIRQSEL16 {}
    #[doc = "Output Selection for CPU Interrupt 16"]
    pub mod cpuirqsel16 {
        #[doc = "Reader of register CPUIRQSEL16"]
        pub type R = crate::R<u32, super::CPUIRQSEL16>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 17\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel17](cpuirqsel17) module"]
    pub type CPUIRQSEL17 = crate::Reg<u32, _CPUIRQSEL17>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL17;
    #[doc = "`read()` method returns [cpuirqsel17::R](cpuirqsel17::R) reader structure"]
    impl crate::Readable for CPUIRQSEL17 {}
    #[doc = "Output Selection for CPU Interrupt 17"]
    pub mod cpuirqsel17 {
        #[doc = "Reader of register CPUIRQSEL17"]
        pub type R = crate::R<u32, super::CPUIRQSEL17>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 18\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel18](cpuirqsel18) module"]
    pub type CPUIRQSEL18 = crate::Reg<u32, _CPUIRQSEL18>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL18;
    #[doc = "`read()` method returns [cpuirqsel18::R](cpuirqsel18::R) reader structure"]
    impl crate::Readable for CPUIRQSEL18 {}
    #[doc = "Output Selection for CPU Interrupt 18"]
    pub mod cpuirqsel18 {
        #[doc = "Reader of register CPUIRQSEL18"]
        pub type R = crate::R<u32, super::CPUIRQSEL18>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 19\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel19](cpuirqsel19) module"]
    pub type CPUIRQSEL19 = crate::Reg<u32, _CPUIRQSEL19>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL19;
    #[doc = "`read()` method returns [cpuirqsel19::R](cpuirqsel19::R) reader structure"]
    impl crate::Readable for CPUIRQSEL19 {}
    #[doc = "Output Selection for CPU Interrupt 19"]
    pub mod cpuirqsel19 {
        #[doc = "Reader of register CPUIRQSEL19"]
        pub type R = crate::R<u32, super::CPUIRQSEL19>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 20\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel20](cpuirqsel20) module"]
    pub type CPUIRQSEL20 = crate::Reg<u32, _CPUIRQSEL20>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL20;
    #[doc = "`read()` method returns [cpuirqsel20::R](cpuirqsel20::R) reader structure"]
    impl crate::Readable for CPUIRQSEL20 {}
    #[doc = "Output Selection for CPU Interrupt 20"]
    pub mod cpuirqsel20 {
        #[doc = "Reader of register CPUIRQSEL20"]
        pub type R = crate::R<u32, super::CPUIRQSEL20>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 21\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel21](cpuirqsel21) module"]
    pub type CPUIRQSEL21 = crate::Reg<u32, _CPUIRQSEL21>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL21;
    #[doc = "`read()` method returns [cpuirqsel21::R](cpuirqsel21::R) reader structure"]
    impl crate::Readable for CPUIRQSEL21 {}
    #[doc = "Output Selection for CPU Interrupt 21"]
    pub mod cpuirqsel21 {
        #[doc = "Reader of register CPUIRQSEL21"]
        pub type R = crate::R<u32, super::CPUIRQSEL21>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 22\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel22](cpuirqsel22) module"]
    pub type CPUIRQSEL22 = crate::Reg<u32, _CPUIRQSEL22>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL22;
    #[doc = "`read()` method returns [cpuirqsel22::R](cpuirqsel22::R) reader structure"]
    impl crate::Readable for CPUIRQSEL22 {}
    #[doc = "Output Selection for CPU Interrupt 22"]
    pub mod cpuirqsel22 {
        #[doc = "Reader of register CPUIRQSEL22"]
        pub type R = crate::R<u32, super::CPUIRQSEL22>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 23\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel23](cpuirqsel23) module"]
    pub type CPUIRQSEL23 = crate::Reg<u32, _CPUIRQSEL23>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL23;
    #[doc = "`read()` method returns [cpuirqsel23::R](cpuirqsel23::R) reader structure"]
    impl crate::Readable for CPUIRQSEL23 {}
    #[doc = "Output Selection for CPU Interrupt 23"]
    pub mod cpuirqsel23 {
        #[doc = "Reader of register CPUIRQSEL23"]
        pub type R = crate::R<u32, super::CPUIRQSEL23>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 24\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel24](cpuirqsel24) module"]
    pub type CPUIRQSEL24 = crate::Reg<u32, _CPUIRQSEL24>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL24;
    #[doc = "`read()` method returns [cpuirqsel24::R](cpuirqsel24::R) reader structure"]
    impl crate::Readable for CPUIRQSEL24 {}
    #[doc = "Output Selection for CPU Interrupt 24"]
    pub mod cpuirqsel24 {
        #[doc = "Reader of register CPUIRQSEL24"]
        pub type R = crate::R<u32, super::CPUIRQSEL24>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 25\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel25](cpuirqsel25) module"]
    pub type CPUIRQSEL25 = crate::Reg<u32, _CPUIRQSEL25>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL25;
    #[doc = "`read()` method returns [cpuirqsel25::R](cpuirqsel25::R) reader structure"]
    impl crate::Readable for CPUIRQSEL25 {}
    #[doc = "Output Selection for CPU Interrupt 25"]
    pub mod cpuirqsel25 {
        #[doc = "Reader of register CPUIRQSEL25"]
        pub type R = crate::R<u32, super::CPUIRQSEL25>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 26\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel26](cpuirqsel26) module"]
    pub type CPUIRQSEL26 = crate::Reg<u32, _CPUIRQSEL26>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL26;
    #[doc = "`read()` method returns [cpuirqsel26::R](cpuirqsel26::R) reader structure"]
    impl crate::Readable for CPUIRQSEL26 {}
    #[doc = "Output Selection for CPU Interrupt 26"]
    pub mod cpuirqsel26 {
        #[doc = "Reader of register CPUIRQSEL26"]
        pub type R = crate::R<u32, super::CPUIRQSEL26>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 27\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel27](cpuirqsel27) module"]
    pub type CPUIRQSEL27 = crate::Reg<u32, _CPUIRQSEL27>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL27;
    #[doc = "`read()` method returns [cpuirqsel27::R](cpuirqsel27::R) reader structure"]
    impl crate::Readable for CPUIRQSEL27 {}
    #[doc = "Output Selection for CPU Interrupt 27"]
    pub mod cpuirqsel27 {
        #[doc = "Reader of register CPUIRQSEL27"]
        pub type R = crate::R<u32, super::CPUIRQSEL27>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 28\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel28](cpuirqsel28) module"]
    pub type CPUIRQSEL28 = crate::Reg<u32, _CPUIRQSEL28>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL28;
    #[doc = "`read()` method returns [cpuirqsel28::R](cpuirqsel28::R) reader structure"]
    impl crate::Readable for CPUIRQSEL28 {}
    #[doc = "Output Selection for CPU Interrupt 28"]
    pub mod cpuirqsel28 {
        #[doc = "Reader of register CPUIRQSEL28"]
        pub type R = crate::R<u32, super::CPUIRQSEL28>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 29\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel29](cpuirqsel29) module"]
    pub type CPUIRQSEL29 = crate::Reg<u32, _CPUIRQSEL29>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL29;
    #[doc = "`read()` method returns [cpuirqsel29::R](cpuirqsel29::R) reader structure"]
    impl crate::Readable for CPUIRQSEL29 {}
    #[doc = "Output Selection for CPU Interrupt 29"]
    pub mod cpuirqsel29 {
        #[doc = "Reader of register CPUIRQSEL29"]
        pub type R = crate::R<u32, super::CPUIRQSEL29>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 30\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel30](cpuirqsel30) module"]
    pub type CPUIRQSEL30 = crate::Reg<u32, _CPUIRQSEL30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL30;
    #[doc = "`read()` method returns [cpuirqsel30::R](cpuirqsel30::R) reader structure"]
    impl crate::Readable for CPUIRQSEL30 {}
    #[doc = "`write(|w| ..)` method takes [cpuirqsel30::W](cpuirqsel30::W) writer structure"]
    impl crate::Writable for CPUIRQSEL30 {}
    #[doc = "Output Selection for CPU Interrupt 30"]
    pub mod cpuirqsel30 {
        #[doc = "Reader of register CPUIRQSEL30"]
        pub type R = crate::R<u32, super::CPUIRQSEL30>;
        #[doc = "Writer for register CPUIRQSEL30"]
        pub type W = crate::W<u32, super::CPUIRQSEL30>;
        #[doc = "Register CPUIRQSEL30 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPUIRQSEL30 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 31\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel31](cpuirqsel31) module"]
    pub type CPUIRQSEL31 = crate::Reg<u32, _CPUIRQSEL31>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL31;
    #[doc = "`read()` method returns [cpuirqsel31::R](cpuirqsel31::R) reader structure"]
    impl crate::Readable for CPUIRQSEL31 {}
    #[doc = "Output Selection for CPU Interrupt 31"]
    pub mod cpuirqsel31 {
        #[doc = "Reader of register CPUIRQSEL31"]
        pub type R = crate::R<u32, super::CPUIRQSEL31>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 32\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel32](cpuirqsel32) module"]
    pub type CPUIRQSEL32 = crate::Reg<u32, _CPUIRQSEL32>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL32;
    #[doc = "`read()` method returns [cpuirqsel32::R](cpuirqsel32::R) reader structure"]
    impl crate::Readable for CPUIRQSEL32 {}
    #[doc = "Output Selection for CPU Interrupt 32"]
    pub mod cpuirqsel32 {
        #[doc = "Reader of register CPUIRQSEL32"]
        pub type R = crate::R<u32, super::CPUIRQSEL32>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for CPU Interrupt 33\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuirqsel33](cpuirqsel33) module"]
    pub type CPUIRQSEL33 = crate::Reg<u32, _CPUIRQSEL33>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUIRQSEL33;
    #[doc = "`read()` method returns [cpuirqsel33::R](cpuirqsel33::R) reader structure"]
    impl crate::Readable for CPUIRQSEL33 {}
    #[doc = "Output Selection for CPU Interrupt 33"]
    pub mod cpuirqsel33 {
        #[doc = "Reader of register CPUIRQSEL33"]
        pub type R = crate::R<u32, super::CPUIRQSEL33>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel0](rfcsel0) module"]
    pub type RFCSEL0 = crate::Reg<u32, _RFCSEL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL0;
    #[doc = "`read()` method returns [rfcsel0::R](rfcsel0::R) reader structure"]
    impl crate::Readable for RFCSEL0 {}
    #[doc = "Output Selection for RFC Event 0"]
    pub mod rfcsel0 {
        #[doc = "Reader of register RFCSEL0"]
        pub type R = crate::R<u32, super::RFCSEL0>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel1](rfcsel1) module"]
    pub type RFCSEL1 = crate::Reg<u32, _RFCSEL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL1;
    #[doc = "`read()` method returns [rfcsel1::R](rfcsel1::R) reader structure"]
    impl crate::Readable for RFCSEL1 {}
    #[doc = "Output Selection for RFC Event 1"]
    pub mod rfcsel1 {
        #[doc = "Reader of register RFCSEL1"]
        pub type R = crate::R<u32, super::RFCSEL1>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel2](rfcsel2) module"]
    pub type RFCSEL2 = crate::Reg<u32, _RFCSEL2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL2;
    #[doc = "`read()` method returns [rfcsel2::R](rfcsel2::R) reader structure"]
    impl crate::Readable for RFCSEL2 {}
    #[doc = "Output Selection for RFC Event 2"]
    pub mod rfcsel2 {
        #[doc = "Reader of register RFCSEL2"]
        pub type R = crate::R<u32, super::RFCSEL2>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 3\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel3](rfcsel3) module"]
    pub type RFCSEL3 = crate::Reg<u32, _RFCSEL3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL3;
    #[doc = "`read()` method returns [rfcsel3::R](rfcsel3::R) reader structure"]
    impl crate::Readable for RFCSEL3 {}
    #[doc = "Output Selection for RFC Event 3"]
    pub mod rfcsel3 {
        #[doc = "Reader of register RFCSEL3"]
        pub type R = crate::R<u32, super::RFCSEL3>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 4\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel4](rfcsel4) module"]
    pub type RFCSEL4 = crate::Reg<u32, _RFCSEL4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL4;
    #[doc = "`read()` method returns [rfcsel4::R](rfcsel4::R) reader structure"]
    impl crate::Readable for RFCSEL4 {}
    #[doc = "Output Selection for RFC Event 4"]
    pub mod rfcsel4 {
        #[doc = "Reader of register RFCSEL4"]
        pub type R = crate::R<u32, super::RFCSEL4>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 5\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel5](rfcsel5) module"]
    pub type RFCSEL5 = crate::Reg<u32, _RFCSEL5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL5;
    #[doc = "`read()` method returns [rfcsel5::R](rfcsel5::R) reader structure"]
    impl crate::Readable for RFCSEL5 {}
    #[doc = "Output Selection for RFC Event 5"]
    pub mod rfcsel5 {
        #[doc = "Reader of register RFCSEL5"]
        pub type R = crate::R<u32, super::RFCSEL5>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 6\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel6](rfcsel6) module"]
    pub type RFCSEL6 = crate::Reg<u32, _RFCSEL6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL6;
    #[doc = "`read()` method returns [rfcsel6::R](rfcsel6::R) reader structure"]
    impl crate::Readable for RFCSEL6 {}
    #[doc = "Output Selection for RFC Event 6"]
    pub mod rfcsel6 {
        #[doc = "Reader of register RFCSEL6"]
        pub type R = crate::R<u32, super::RFCSEL6>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 7\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel7](rfcsel7) module"]
    pub type RFCSEL7 = crate::Reg<u32, _RFCSEL7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL7;
    #[doc = "`read()` method returns [rfcsel7::R](rfcsel7::R) reader structure"]
    impl crate::Readable for RFCSEL7 {}
    #[doc = "Output Selection for RFC Event 7"]
    pub mod rfcsel7 {
        #[doc = "Reader of register RFCSEL7"]
        pub type R = crate::R<u32, super::RFCSEL7>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 8\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel8](rfcsel8) module"]
    pub type RFCSEL8 = crate::Reg<u32, _RFCSEL8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL8;
    #[doc = "`read()` method returns [rfcsel8::R](rfcsel8::R) reader structure"]
    impl crate::Readable for RFCSEL8 {}
    #[doc = "Output Selection for RFC Event 8"]
    pub mod rfcsel8 {
        #[doc = "Reader of register RFCSEL8"]
        pub type R = crate::R<u32, super::RFCSEL8>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for RFC Event 9\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcsel9](rfcsel9) module"]
    pub type RFCSEL9 = crate::Reg<u32, _RFCSEL9>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCSEL9;
    #[doc = "`read()` method returns [rfcsel9::R](rfcsel9::R) reader structure"]
    impl crate::Readable for RFCSEL9 {}
    #[doc = "`write(|w| ..)` method takes [rfcsel9::W](rfcsel9::W) writer structure"]
    impl crate::Writable for RFCSEL9 {}
    #[doc = "Output Selection for RFC Event 9"]
    pub mod rfcsel9 {
        #[doc = "Reader of register RFCSEL9"]
        pub type R = crate::R<u32, super::RFCSEL9>;
        #[doc = "Writer for register RFCSEL9"]
        pub type W = crate::W<u32, super::RFCSEL9>;
        #[doc = "Register RFCSEL9 `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::RFCSEL9 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT0 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt0acaptsel](gpt0acaptsel) module"]
    pub type GPT0ACAPTSEL = crate::Reg<u32, _GPT0ACAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT0ACAPTSEL;
    #[doc = "`read()` method returns [gpt0acaptsel::R](gpt0acaptsel::R) reader structure"]
    impl crate::Readable for GPT0ACAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt0acaptsel::W](gpt0acaptsel::W) writer structure"]
    impl crate::Writable for GPT0ACAPTSEL {}
    #[doc = "Output Selection for GPT0 0"]
    pub mod gpt0acaptsel {
        #[doc = "Reader of register GPT0ACAPTSEL"]
        pub type R = crate::R<u32, super::GPT0ACAPTSEL>;
        #[doc = "Writer for register GPT0ACAPTSEL"]
        pub type W = crate::W<u32, super::GPT0ACAPTSEL>;
        #[doc = "Register GPT0ACAPTSEL `reset()`'s with value 0x55"]
        impl crate::ResetValue for super::GPT0ACAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x55
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT0 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt0bcaptsel](gpt0bcaptsel) module"]
    pub type GPT0BCAPTSEL = crate::Reg<u32, _GPT0BCAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT0BCAPTSEL;
    #[doc = "`read()` method returns [gpt0bcaptsel::R](gpt0bcaptsel::R) reader structure"]
    impl crate::Readable for GPT0BCAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt0bcaptsel::W](gpt0bcaptsel::W) writer structure"]
    impl crate::Writable for GPT0BCAPTSEL {}
    #[doc = "Output Selection for GPT0 1"]
    pub mod gpt0bcaptsel {
        #[doc = "Reader of register GPT0BCAPTSEL"]
        pub type R = crate::R<u32, super::GPT0BCAPTSEL>;
        #[doc = "Writer for register GPT0BCAPTSEL"]
        pub type W = crate::W<u32, super::GPT0BCAPTSEL>;
        #[doc = "Register GPT0BCAPTSEL `reset()`'s with value 0x56"]
        impl crate::ResetValue for super::GPT0BCAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x56
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT1 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt1acaptsel](gpt1acaptsel) module"]
    pub type GPT1ACAPTSEL = crate::Reg<u32, _GPT1ACAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT1ACAPTSEL;
    #[doc = "`read()` method returns [gpt1acaptsel::R](gpt1acaptsel::R) reader structure"]
    impl crate::Readable for GPT1ACAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt1acaptsel::W](gpt1acaptsel::W) writer structure"]
    impl crate::Writable for GPT1ACAPTSEL {}
    #[doc = "Output Selection for GPT1 0"]
    pub mod gpt1acaptsel {
        #[doc = "Reader of register GPT1ACAPTSEL"]
        pub type R = crate::R<u32, super::GPT1ACAPTSEL>;
        #[doc = "Writer for register GPT1ACAPTSEL"]
        pub type W = crate::W<u32, super::GPT1ACAPTSEL>;
        #[doc = "Register GPT1ACAPTSEL `reset()`'s with value 0x57"]
        impl crate::ResetValue for super::GPT1ACAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x57
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT1 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt1bcaptsel](gpt1bcaptsel) module"]
    pub type GPT1BCAPTSEL = crate::Reg<u32, _GPT1BCAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT1BCAPTSEL;
    #[doc = "`read()` method returns [gpt1bcaptsel::R](gpt1bcaptsel::R) reader structure"]
    impl crate::Readable for GPT1BCAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt1bcaptsel::W](gpt1bcaptsel::W) writer structure"]
    impl crate::Writable for GPT1BCAPTSEL {}
    #[doc = "Output Selection for GPT1 1"]
    pub mod gpt1bcaptsel {
        #[doc = "Reader of register GPT1BCAPTSEL"]
        pub type R = crate::R<u32, super::GPT1BCAPTSEL>;
        #[doc = "Writer for register GPT1BCAPTSEL"]
        pub type W = crate::W<u32, super::GPT1BCAPTSEL>;
        #[doc = "Register GPT1BCAPTSEL `reset()`'s with value 0x58"]
        impl crate::ResetValue for super::GPT1BCAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x58
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT2 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt2acaptsel](gpt2acaptsel) module"]
    pub type GPT2ACAPTSEL = crate::Reg<u32, _GPT2ACAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT2ACAPTSEL;
    #[doc = "`read()` method returns [gpt2acaptsel::R](gpt2acaptsel::R) reader structure"]
    impl crate::Readable for GPT2ACAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt2acaptsel::W](gpt2acaptsel::W) writer structure"]
    impl crate::Writable for GPT2ACAPTSEL {}
    #[doc = "Output Selection for GPT2 0"]
    pub mod gpt2acaptsel {
        #[doc = "Reader of register GPT2ACAPTSEL"]
        pub type R = crate::R<u32, super::GPT2ACAPTSEL>;
        #[doc = "Writer for register GPT2ACAPTSEL"]
        pub type W = crate::W<u32, super::GPT2ACAPTSEL>;
        #[doc = "Register GPT2ACAPTSEL `reset()`'s with value 0x59"]
        impl crate::ResetValue for super::GPT2ACAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x59
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT2 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt2bcaptsel](gpt2bcaptsel) module"]
    pub type GPT2BCAPTSEL = crate::Reg<u32, _GPT2BCAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT2BCAPTSEL;
    #[doc = "`read()` method returns [gpt2bcaptsel::R](gpt2bcaptsel::R) reader structure"]
    impl crate::Readable for GPT2BCAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt2bcaptsel::W](gpt2bcaptsel::W) writer structure"]
    impl crate::Writable for GPT2BCAPTSEL {}
    #[doc = "Output Selection for GPT2 1"]
    pub mod gpt2bcaptsel {
        #[doc = "Reader of register GPT2BCAPTSEL"]
        pub type R = crate::R<u32, super::GPT2BCAPTSEL>;
        #[doc = "Writer for register GPT2BCAPTSEL"]
        pub type W = crate::W<u32, super::GPT2BCAPTSEL>;
        #[doc = "Register GPT2BCAPTSEL `reset()`'s with value 0x5a"]
        impl crate::ResetValue for super::GPT2BCAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x5a
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 1 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach1ssel](udmach1ssel) module"]
    pub type UDMACH1SSEL = crate::Reg<u32, _UDMACH1SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH1SSEL;
    #[doc = "`read()` method returns [udmach1ssel::R](udmach1ssel::R) reader structure"]
    impl crate::Readable for UDMACH1SSEL {}
    #[doc = "Output Selection for DMA Channel 1 SREQ"]
    pub mod udmach1ssel {
        #[doc = "Reader of register UDMACH1SSEL"]
        pub type R = crate::R<u32, super::UDMACH1SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 1 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach1bsel](udmach1bsel) module"]
    pub type UDMACH1BSEL = crate::Reg<u32, _UDMACH1BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH1BSEL;
    #[doc = "`read()` method returns [udmach1bsel::R](udmach1bsel::R) reader structure"]
    impl crate::Readable for UDMACH1BSEL {}
    #[doc = "Output Selection for DMA Channel 1 REQ"]
    pub mod udmach1bsel {
        #[doc = "Reader of register UDMACH1BSEL"]
        pub type R = crate::R<u32, super::UDMACH1BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 2 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach2ssel](udmach2ssel) module"]
    pub type UDMACH2SSEL = crate::Reg<u32, _UDMACH2SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH2SSEL;
    #[doc = "`read()` method returns [udmach2ssel::R](udmach2ssel::R) reader structure"]
    impl crate::Readable for UDMACH2SSEL {}
    #[doc = "Output Selection for DMA Channel 2 SREQ"]
    pub mod udmach2ssel {
        #[doc = "Reader of register UDMACH2SSEL"]
        pub type R = crate::R<u32, super::UDMACH2SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 2 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach2bsel](udmach2bsel) module"]
    pub type UDMACH2BSEL = crate::Reg<u32, _UDMACH2BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH2BSEL;
    #[doc = "`read()` method returns [udmach2bsel::R](udmach2bsel::R) reader structure"]
    impl crate::Readable for UDMACH2BSEL {}
    #[doc = "Output Selection for DMA Channel 2 REQ"]
    pub mod udmach2bsel {
        #[doc = "Reader of register UDMACH2BSEL"]
        pub type R = crate::R<u32, super::UDMACH2BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 3 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach3ssel](udmach3ssel) module"]
    pub type UDMACH3SSEL = crate::Reg<u32, _UDMACH3SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH3SSEL;
    #[doc = "`read()` method returns [udmach3ssel::R](udmach3ssel::R) reader structure"]
    impl crate::Readable for UDMACH3SSEL {}
    #[doc = "Output Selection for DMA Channel 3 SREQ"]
    pub mod udmach3ssel {
        #[doc = "Reader of register UDMACH3SSEL"]
        pub type R = crate::R<u32, super::UDMACH3SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 3 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach3bsel](udmach3bsel) module"]
    pub type UDMACH3BSEL = crate::Reg<u32, _UDMACH3BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH3BSEL;
    #[doc = "`read()` method returns [udmach3bsel::R](udmach3bsel::R) reader structure"]
    impl crate::Readable for UDMACH3BSEL {}
    #[doc = "Output Selection for DMA Channel 3 REQ"]
    pub mod udmach3bsel {
        #[doc = "Reader of register UDMACH3BSEL"]
        pub type R = crate::R<u32, super::UDMACH3BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 4 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach4ssel](udmach4ssel) module"]
    pub type UDMACH4SSEL = crate::Reg<u32, _UDMACH4SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH4SSEL;
    #[doc = "`read()` method returns [udmach4ssel::R](udmach4ssel::R) reader structure"]
    impl crate::Readable for UDMACH4SSEL {}
    #[doc = "Output Selection for DMA Channel 4 SREQ"]
    pub mod udmach4ssel {
        #[doc = "Reader of register UDMACH4SSEL"]
        pub type R = crate::R<u32, super::UDMACH4SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 4 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach4bsel](udmach4bsel) module"]
    pub type UDMACH4BSEL = crate::Reg<u32, _UDMACH4BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH4BSEL;
    #[doc = "`read()` method returns [udmach4bsel::R](udmach4bsel::R) reader structure"]
    impl crate::Readable for UDMACH4BSEL {}
    #[doc = "Output Selection for DMA Channel 4 REQ"]
    pub mod udmach4bsel {
        #[doc = "Reader of register UDMACH4BSEL"]
        pub type R = crate::R<u32, super::UDMACH4BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 5 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach5ssel](udmach5ssel) module"]
    pub type UDMACH5SSEL = crate::Reg<u32, _UDMACH5SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH5SSEL;
    #[doc = "`read()` method returns [udmach5ssel::R](udmach5ssel::R) reader structure"]
    impl crate::Readable for UDMACH5SSEL {}
    #[doc = "Output Selection for DMA Channel 5 SREQ"]
    pub mod udmach5ssel {
        #[doc = "Reader of register UDMACH5SSEL"]
        pub type R = crate::R<u32, super::UDMACH5SSEL>;
        impl R {}
    }
    #[doc = "Output Selection for DMA Channel 5 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach5bsel](udmach5bsel) module"]
    pub type UDMACH5BSEL = crate::Reg<u32, _UDMACH5BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH5BSEL;
    #[doc = "`read()` method returns [udmach5bsel::R](udmach5bsel::R) reader structure"]
    impl crate::Readable for UDMACH5BSEL {}
    #[doc = "Output Selection for DMA Channel 5 REQ"]
    pub mod udmach5bsel {
        #[doc = "Reader of register UDMACH5BSEL"]
        pub type R = crate::R<u32, super::UDMACH5BSEL>;
        impl R {}
    }
    #[doc = "Output Selection for DMA Channel 6 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach6ssel](udmach6ssel) module"]
    pub type UDMACH6SSEL = crate::Reg<u32, _UDMACH6SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH6SSEL;
    #[doc = "`read()` method returns [udmach6ssel::R](udmach6ssel::R) reader structure"]
    impl crate::Readable for UDMACH6SSEL {}
    #[doc = "Output Selection for DMA Channel 6 SREQ"]
    pub mod udmach6ssel {
        #[doc = "Reader of register UDMACH6SSEL"]
        pub type R = crate::R<u32, super::UDMACH6SSEL>;
        impl R {}
    }
    #[doc = "Output Selection for DMA Channel 6 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach6bsel](udmach6bsel) module"]
    pub type UDMACH6BSEL = crate::Reg<u32, _UDMACH6BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH6BSEL;
    #[doc = "`read()` method returns [udmach6bsel::R](udmach6bsel::R) reader structure"]
    impl crate::Readable for UDMACH6BSEL {}
    #[doc = "Output Selection for DMA Channel 6 REQ"]
    pub mod udmach6bsel {
        #[doc = "Reader of register UDMACH6BSEL"]
        pub type R = crate::R<u32, super::UDMACH6BSEL>;
        impl R {}
    }
    #[doc = "Output Selection for DMA Channel 7 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach7ssel](udmach7ssel) module"]
    pub type UDMACH7SSEL = crate::Reg<u32, _UDMACH7SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH7SSEL;
    #[doc = "`read()` method returns [udmach7ssel::R](udmach7ssel::R) reader structure"]
    impl crate::Readable for UDMACH7SSEL {}
    #[doc = "Output Selection for DMA Channel 7 SREQ"]
    pub mod udmach7ssel {
        #[doc = "Reader of register UDMACH7SSEL"]
        pub type R = crate::R<u32, super::UDMACH7SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 7 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach7bsel](udmach7bsel) module"]
    pub type UDMACH7BSEL = crate::Reg<u32, _UDMACH7BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH7BSEL;
    #[doc = "`read()` method returns [udmach7bsel::R](udmach7bsel::R) reader structure"]
    impl crate::Readable for UDMACH7BSEL {}
    #[doc = "Output Selection for DMA Channel 7 REQ"]
    pub mod udmach7bsel {
        #[doc = "Reader of register UDMACH7BSEL"]
        pub type R = crate::R<u32, super::UDMACH7BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 8 SREQ Single request is ignored for this channel\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach8ssel](udmach8ssel) module"]
    pub type UDMACH8SSEL = crate::Reg<u32, _UDMACH8SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH8SSEL;
    #[doc = "`read()` method returns [udmach8ssel::R](udmach8ssel::R) reader structure"]
    impl crate::Readable for UDMACH8SSEL {}
    #[doc = "Output Selection for DMA Channel 8 SREQ Single request is ignored for this channel"]
    pub mod udmach8ssel {
        #[doc = "Reader of register UDMACH8SSEL"]
        pub type R = crate::R<u32, super::UDMACH8SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 8 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach8bsel](udmach8bsel) module"]
    pub type UDMACH8BSEL = crate::Reg<u32, _UDMACH8BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH8BSEL;
    #[doc = "`read()` method returns [udmach8bsel::R](udmach8bsel::R) reader structure"]
    impl crate::Readable for UDMACH8BSEL {}
    #[doc = "Output Selection for DMA Channel 8 REQ"]
    pub mod udmach8bsel {
        #[doc = "Reader of register UDMACH8BSEL"]
        pub type R = crate::R<u32, super::UDMACH8BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 9 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMAARIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach9ssel](udmach9ssel) module"]
    pub type UDMACH9SSEL = crate::Reg<u32, _UDMACH9SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH9SSEL;
    #[doc = "`read()` method returns [udmach9ssel::R](udmach9ssel::R) reader structure"]
    impl crate::Readable for UDMACH9SSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach9ssel::W](udmach9ssel::W) writer structure"]
    impl crate::Writable for UDMACH9SSEL {}
    #[doc = "Output Selection for DMA Channel 9 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMAARIS"]
    pub mod udmach9ssel {
        #[doc = "Reader of register UDMACH9SSEL"]
        pub type R = crate::R<u32, super::UDMACH9SSEL>;
        #[doc = "Writer for register UDMACH9SSEL"]
        pub type W = crate::W<u32, super::UDMACH9SSEL>;
        #[doc = "Register UDMACH9SSEL `reset()`'s with value 0x45"]
        impl crate::ResetValue for super::UDMACH9SSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x45
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 9 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMAARIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach9bsel](udmach9bsel) module"]
    pub type UDMACH9BSEL = crate::Reg<u32, _UDMACH9BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH9BSEL;
    #[doc = "`read()` method returns [udmach9bsel::R](udmach9bsel::R) reader structure"]
    impl crate::Readable for UDMACH9BSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach9bsel::W](udmach9bsel::W) writer structure"]
    impl crate::Writable for UDMACH9BSEL {}
    #[doc = "Output Selection for DMA Channel 9 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMAARIS"]
    pub mod udmach9bsel {
        #[doc = "Reader of register UDMACH9BSEL"]
        pub type R = crate::R<u32, super::UDMACH9BSEL>;
        #[doc = "Writer for register UDMACH9BSEL"]
        pub type W = crate::W<u32, super::UDMACH9BSEL>;
        #[doc = "Register UDMACH9BSEL `reset()`'s with value 0x4d"]
        impl crate::ResetValue for super::UDMACH9BSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x4d
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 10 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMABRIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach10ssel](udmach10ssel) module"]
    pub type UDMACH10SSEL = crate::Reg<u32, _UDMACH10SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH10SSEL;
    #[doc = "`read()` method returns [udmach10ssel::R](udmach10ssel::R) reader structure"]
    impl crate::Readable for UDMACH10SSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach10ssel::W](udmach10ssel::W) writer structure"]
    impl crate::Writable for UDMACH10SSEL {}
    #[doc = "Output Selection for DMA Channel 10 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMABRIS"]
    pub mod udmach10ssel {
        #[doc = "Reader of register UDMACH10SSEL"]
        pub type R = crate::R<u32, super::UDMACH10SSEL>;
        #[doc = "Writer for register UDMACH10SSEL"]
        pub type W = crate::W<u32, super::UDMACH10SSEL>;
        #[doc = "Register UDMACH10SSEL `reset()`'s with value 0x46"]
        impl crate::ResetValue for super::UDMACH10SSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x46
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 10 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMABRIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach10bsel](udmach10bsel) module"]
    pub type UDMACH10BSEL = crate::Reg<u32, _UDMACH10BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH10BSEL;
    #[doc = "`read()` method returns [udmach10bsel::R](udmach10bsel::R) reader structure"]
    impl crate::Readable for UDMACH10BSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach10bsel::W](udmach10bsel::W) writer structure"]
    impl crate::Writable for UDMACH10BSEL {}
    #[doc = "Output Selection for DMA Channel 10 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT0 as GPT0:RIS.DMABRIS"]
    pub mod udmach10bsel {
        #[doc = "Reader of register UDMACH10BSEL"]
        pub type R = crate::R<u32, super::UDMACH10BSEL>;
        #[doc = "Writer for register UDMACH10BSEL"]
        pub type W = crate::W<u32, super::UDMACH10BSEL>;
        #[doc = "Register UDMACH10BSEL `reset()`'s with value 0x4e"]
        impl crate::ResetValue for super::UDMACH10BSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x4e
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 11 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMAARIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach11ssel](udmach11ssel) module"]
    pub type UDMACH11SSEL = crate::Reg<u32, _UDMACH11SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH11SSEL;
    #[doc = "`read()` method returns [udmach11ssel::R](udmach11ssel::R) reader structure"]
    impl crate::Readable for UDMACH11SSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach11ssel::W](udmach11ssel::W) writer structure"]
    impl crate::Writable for UDMACH11SSEL {}
    #[doc = "Output Selection for DMA Channel 11 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMAARIS"]
    pub mod udmach11ssel {
        #[doc = "Reader of register UDMACH11SSEL"]
        pub type R = crate::R<u32, super::UDMACH11SSEL>;
        #[doc = "Writer for register UDMACH11SSEL"]
        pub type W = crate::W<u32, super::UDMACH11SSEL>;
        #[doc = "Register UDMACH11SSEL `reset()`'s with value 0x47"]
        impl crate::ResetValue for super::UDMACH11SSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x47
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 11 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMAARIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach11bsel](udmach11bsel) module"]
    pub type UDMACH11BSEL = crate::Reg<u32, _UDMACH11BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH11BSEL;
    #[doc = "`read()` method returns [udmach11bsel::R](udmach11bsel::R) reader structure"]
    impl crate::Readable for UDMACH11BSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach11bsel::W](udmach11bsel::W) writer structure"]
    impl crate::Writable for UDMACH11BSEL {}
    #[doc = "Output Selection for DMA Channel 11 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMAARIS"]
    pub mod udmach11bsel {
        #[doc = "Reader of register UDMACH11BSEL"]
        pub type R = crate::R<u32, super::UDMACH11BSEL>;
        #[doc = "Writer for register UDMACH11BSEL"]
        pub type W = crate::W<u32, super::UDMACH11BSEL>;
        #[doc = "Register UDMACH11BSEL `reset()`'s with value 0x4f"]
        impl crate::ResetValue for super::UDMACH11BSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x4f
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 12 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMABRIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach12ssel](udmach12ssel) module"]
    pub type UDMACH12SSEL = crate::Reg<u32, _UDMACH12SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH12SSEL;
    #[doc = "`read()` method returns [udmach12ssel::R](udmach12ssel::R) reader structure"]
    impl crate::Readable for UDMACH12SSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach12ssel::W](udmach12ssel::W) writer structure"]
    impl crate::Writable for UDMACH12SSEL {}
    #[doc = "Output Selection for DMA Channel 12 SREQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMABRIS"]
    pub mod udmach12ssel {
        #[doc = "Reader of register UDMACH12SSEL"]
        pub type R = crate::R<u32, super::UDMACH12SSEL>;
        #[doc = "Writer for register UDMACH12SSEL"]
        pub type W = crate::W<u32, super::UDMACH12SSEL>;
        #[doc = "Register UDMACH12SSEL `reset()`'s with value 0x48"]
        impl crate::ResetValue for super::UDMACH12SSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x48
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 12 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMABRIS\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach12bsel](udmach12bsel) module"]
    pub type UDMACH12BSEL = crate::Reg<u32, _UDMACH12BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH12BSEL;
    #[doc = "`read()` method returns [udmach12bsel::R](udmach12bsel::R) reader structure"]
    impl crate::Readable for UDMACH12BSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach12bsel::W](udmach12bsel::W) writer structure"]
    impl crate::Writable for UDMACH12BSEL {}
    #[doc = "Output Selection for DMA Channel 12 REQ DMA_DONE for the corresponding DMA channel is available as interrupt on GPT1 as GPT1:RIS.DMABRIS"]
    pub mod udmach12bsel {
        #[doc = "Reader of register UDMACH12BSEL"]
        pub type R = crate::R<u32, super::UDMACH12BSEL>;
        #[doc = "Writer for register UDMACH12BSEL"]
        pub type W = crate::W<u32, super::UDMACH12BSEL>;
        #[doc = "Register UDMACH12BSEL `reset()`'s with value 0x50"]
        impl crate::ResetValue for super::UDMACH12BSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x50
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 13 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach13bsel](udmach13bsel) module"]
    pub type UDMACH13BSEL = crate::Reg<u32, _UDMACH13BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH13BSEL;
    #[doc = "`read()` method returns [udmach13bsel::R](udmach13bsel::R) reader structure"]
    impl crate::Readable for UDMACH13BSEL {}
    #[doc = "Output Selection for DMA Channel 13 REQ"]
    pub mod udmach13bsel {
        #[doc = "Reader of register UDMACH13BSEL"]
        pub type R = crate::R<u32, super::UDMACH13BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 14 REQ\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach14bsel](udmach14bsel) module"]
    pub type UDMACH14BSEL = crate::Reg<u32, _UDMACH14BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH14BSEL;
    #[doc = "`read()` method returns [udmach14bsel::R](udmach14bsel::R) reader structure"]
    impl crate::Readable for UDMACH14BSEL {}
    #[doc = "`write(|w| ..)` method takes [udmach14bsel::W](udmach14bsel::W) writer structure"]
    impl crate::Writable for UDMACH14BSEL {}
    #[doc = "Output Selection for DMA Channel 14 REQ"]
    pub mod udmach14bsel {
        #[doc = "Reader of register UDMACH14BSEL"]
        pub type R = crate::R<u32, super::UDMACH14BSEL>;
        #[doc = "Writer for register UDMACH14BSEL"]
        pub type W = crate::W<u32, super::UDMACH14BSEL>;
        #[doc = "Register UDMACH14BSEL `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::UDMACH14BSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 15 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach15bsel](udmach15bsel) module"]
    pub type UDMACH15BSEL = crate::Reg<u32, _UDMACH15BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH15BSEL;
    #[doc = "`read()` method returns [udmach15bsel::R](udmach15bsel::R) reader structure"]
    impl crate::Readable for UDMACH15BSEL {}
    #[doc = "Output Selection for DMA Channel 15 REQ"]
    pub mod udmach15bsel {
        #[doc = "Reader of register UDMACH15BSEL"]
        pub type R = crate::R<u32, super::UDMACH15BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 16 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach16ssel](udmach16ssel) module"]
    pub type UDMACH16SSEL = crate::Reg<u32, _UDMACH16SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH16SSEL;
    #[doc = "`read()` method returns [udmach16ssel::R](udmach16ssel::R) reader structure"]
    impl crate::Readable for UDMACH16SSEL {}
    #[doc = "Output Selection for DMA Channel 16 SREQ"]
    pub mod udmach16ssel {
        #[doc = "Reader of register UDMACH16SSEL"]
        pub type R = crate::R<u32, super::UDMACH16SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 16 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach16bsel](udmach16bsel) module"]
    pub type UDMACH16BSEL = crate::Reg<u32, _UDMACH16BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH16BSEL;
    #[doc = "`read()` method returns [udmach16bsel::R](udmach16bsel::R) reader structure"]
    impl crate::Readable for UDMACH16BSEL {}
    #[doc = "Output Selection for DMA Channel 16 REQ"]
    pub mod udmach16bsel {
        #[doc = "Reader of register UDMACH16BSEL"]
        pub type R = crate::R<u32, super::UDMACH16BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 17 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach17ssel](udmach17ssel) module"]
    pub type UDMACH17SSEL = crate::Reg<u32, _UDMACH17SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH17SSEL;
    #[doc = "`read()` method returns [udmach17ssel::R](udmach17ssel::R) reader structure"]
    impl crate::Readable for UDMACH17SSEL {}
    #[doc = "Output Selection for DMA Channel 17 SREQ"]
    pub mod udmach17ssel {
        #[doc = "Reader of register UDMACH17SSEL"]
        pub type R = crate::R<u32, super::UDMACH17SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 17 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach17bsel](udmach17bsel) module"]
    pub type UDMACH17BSEL = crate::Reg<u32, _UDMACH17BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH17BSEL;
    #[doc = "`read()` method returns [udmach17bsel::R](udmach17bsel::R) reader structure"]
    impl crate::Readable for UDMACH17BSEL {}
    #[doc = "Output Selection for DMA Channel 17 REQ"]
    pub mod udmach17bsel {
        #[doc = "Reader of register UDMACH17BSEL"]
        pub type R = crate::R<u32, super::UDMACH17BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 21 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach21ssel](udmach21ssel) module"]
    pub type UDMACH21SSEL = crate::Reg<u32, _UDMACH21SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH21SSEL;
    #[doc = "`read()` method returns [udmach21ssel::R](udmach21ssel::R) reader structure"]
    impl crate::Readable for UDMACH21SSEL {}
    #[doc = "Output Selection for DMA Channel 21 SREQ"]
    pub mod udmach21ssel {
        #[doc = "Reader of register UDMACH21SSEL"]
        pub type R = crate::R<u32, super::UDMACH21SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 21 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach21bsel](udmach21bsel) module"]
    pub type UDMACH21BSEL = crate::Reg<u32, _UDMACH21BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH21BSEL;
    #[doc = "`read()` method returns [udmach21bsel::R](udmach21bsel::R) reader structure"]
    impl crate::Readable for UDMACH21BSEL {}
    #[doc = "Output Selection for DMA Channel 21 REQ"]
    pub mod udmach21bsel {
        #[doc = "Reader of register UDMACH21BSEL"]
        pub type R = crate::R<u32, super::UDMACH21BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 22 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach22ssel](udmach22ssel) module"]
    pub type UDMACH22SSEL = crate::Reg<u32, _UDMACH22SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH22SSEL;
    #[doc = "`read()` method returns [udmach22ssel::R](udmach22ssel::R) reader structure"]
    impl crate::Readable for UDMACH22SSEL {}
    #[doc = "Output Selection for DMA Channel 22 SREQ"]
    pub mod udmach22ssel {
        #[doc = "Reader of register UDMACH22SSEL"]
        pub type R = crate::R<u32, super::UDMACH22SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 22 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach22bsel](udmach22bsel) module"]
    pub type UDMACH22BSEL = crate::Reg<u32, _UDMACH22BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH22BSEL;
    #[doc = "`read()` method returns [udmach22bsel::R](udmach22bsel::R) reader structure"]
    impl crate::Readable for UDMACH22BSEL {}
    #[doc = "Output Selection for DMA Channel 22 REQ"]
    pub mod udmach22bsel {
        #[doc = "Reader of register UDMACH22BSEL"]
        pub type R = crate::R<u32, super::UDMACH22BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 23 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach23ssel](udmach23ssel) module"]
    pub type UDMACH23SSEL = crate::Reg<u32, _UDMACH23SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH23SSEL;
    #[doc = "`read()` method returns [udmach23ssel::R](udmach23ssel::R) reader structure"]
    impl crate::Readable for UDMACH23SSEL {}
    #[doc = "Output Selection for DMA Channel 23 SREQ"]
    pub mod udmach23ssel {
        #[doc = "Reader of register UDMACH23SSEL"]
        pub type R = crate::R<u32, super::UDMACH23SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 23 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach23bsel](udmach23bsel) module"]
    pub type UDMACH23BSEL = crate::Reg<u32, _UDMACH23BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH23BSEL;
    #[doc = "`read()` method returns [udmach23bsel::R](udmach23bsel::R) reader structure"]
    impl crate::Readable for UDMACH23BSEL {}
    #[doc = "Output Selection for DMA Channel 23 REQ"]
    pub mod udmach23bsel {
        #[doc = "Reader of register UDMACH23BSEL"]
        pub type R = crate::R<u32, super::UDMACH23BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 24 SREQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach24ssel](udmach24ssel) module"]
    pub type UDMACH24SSEL = crate::Reg<u32, _UDMACH24SSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH24SSEL;
    #[doc = "`read()` method returns [udmach24ssel::R](udmach24ssel::R) reader structure"]
    impl crate::Readable for UDMACH24SSEL {}
    #[doc = "Output Selection for DMA Channel 24 SREQ"]
    pub mod udmach24ssel {
        #[doc = "Reader of register UDMACH24SSEL"]
        pub type R = crate::R<u32, super::UDMACH24SSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for DMA Channel 24 REQ\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [udmach24bsel](udmach24bsel) module"]
    pub type UDMACH24BSEL = crate::Reg<u32, _UDMACH24BSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UDMACH24BSEL;
    #[doc = "`read()` method returns [udmach24bsel::R](udmach24bsel::R) reader structure"]
    impl crate::Readable for UDMACH24BSEL {}
    #[doc = "Output Selection for DMA Channel 24 REQ"]
    pub mod udmach24bsel {
        #[doc = "Reader of register UDMACH24BSEL"]
        pub type R = crate::R<u32, super::UDMACH24BSEL>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for GPT3 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt3acaptsel](gpt3acaptsel) module"]
    pub type GPT3ACAPTSEL = crate::Reg<u32, _GPT3ACAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT3ACAPTSEL;
    #[doc = "`read()` method returns [gpt3acaptsel::R](gpt3acaptsel::R) reader structure"]
    impl crate::Readable for GPT3ACAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt3acaptsel::W](gpt3acaptsel::W) writer structure"]
    impl crate::Writable for GPT3ACAPTSEL {}
    #[doc = "Output Selection for GPT3 0"]
    pub mod gpt3acaptsel {
        #[doc = "Reader of register GPT3ACAPTSEL"]
        pub type R = crate::R<u32, super::GPT3ACAPTSEL>;
        #[doc = "Writer for register GPT3ACAPTSEL"]
        pub type W = crate::W<u32, super::GPT3ACAPTSEL>;
        #[doc = "Register GPT3ACAPTSEL `reset()`'s with value 0x5b"]
        impl crate::ResetValue for super::GPT3ACAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x5b
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for GPT3 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpt3bcaptsel](gpt3bcaptsel) module"]
    pub type GPT3BCAPTSEL = crate::Reg<u32, _GPT3BCAPTSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPT3BCAPTSEL;
    #[doc = "`read()` method returns [gpt3bcaptsel::R](gpt3bcaptsel::R) reader structure"]
    impl crate::Readable for GPT3BCAPTSEL {}
    #[doc = "`write(|w| ..)` method takes [gpt3bcaptsel::W](gpt3bcaptsel::W) writer structure"]
    impl crate::Writable for GPT3BCAPTSEL {}
    #[doc = "Output Selection for GPT3 1"]
    pub mod gpt3bcaptsel {
        #[doc = "Reader of register GPT3BCAPTSEL"]
        pub type R = crate::R<u32, super::GPT3BCAPTSEL>;
        #[doc = "Writer for register GPT3BCAPTSEL"]
        pub type W = crate::W<u32, super::GPT3BCAPTSEL>;
        #[doc = "Register GPT3BCAPTSEL `reset()`'s with value 0x5c"]
        impl crate::ResetValue for super::GPT3BCAPTSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x5c
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for AUX Subscriber 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [auxsel0](auxsel0) module"]
    pub type AUXSEL0 = crate::Reg<u32, _AUXSEL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AUXSEL0;
    #[doc = "`read()` method returns [auxsel0::R](auxsel0::R) reader structure"]
    impl crate::Readable for AUXSEL0 {}
    #[doc = "`write(|w| ..)` method takes [auxsel0::W](auxsel0::W) writer structure"]
    impl crate::Writable for AUXSEL0 {}
    #[doc = "Output Selection for AUX Subscriber 0"]
    pub mod auxsel0 {
        #[doc = "Reader of register AUXSEL0"]
        pub type R = crate::R<u32, super::AUXSEL0>;
        #[doc = "Writer for register AUXSEL0"]
        pub type W = crate::W<u32, super::AUXSEL0>;
        #[doc = "Register AUXSEL0 `reset()`'s with value 0x10"]
        impl crate::ResetValue for super::AUXSEL0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x10
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for NMI Subscriber 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cm3nmisel0](cm3nmisel0) module"]
    pub type CM3NMISEL0 = crate::Reg<u32, _CM3NMISEL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CM3NMISEL0;
    #[doc = "`read()` method returns [cm3nmisel0::R](cm3nmisel0::R) reader structure"]
    impl crate::Readable for CM3NMISEL0 {}
    #[doc = "Output Selection for NMI Subscriber 0"]
    pub mod cm3nmisel0 {
        #[doc = "Reader of register CM3NMISEL0"]
        pub type R = crate::R<u32, super::CM3NMISEL0>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Output Selection for I2S Subscriber 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sstmpsel0](i2sstmpsel0) module"]
    pub type I2SSTMPSEL0 = crate::Reg<u32, _I2SSTMPSEL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SSTMPSEL0;
    #[doc = "`read()` method returns [i2sstmpsel0::R](i2sstmpsel0::R) reader structure"]
    impl crate::Readable for I2SSTMPSEL0 {}
    #[doc = "`write(|w| ..)` method takes [i2sstmpsel0::W](i2sstmpsel0::W) writer structure"]
    impl crate::Writable for I2SSTMPSEL0 {}
    #[doc = "Output Selection for I2S Subscriber 0"]
    pub mod i2sstmpsel0 {
        #[doc = "Reader of register I2SSTMPSEL0"]
        pub type R = crate::R<u32, super::I2SSTMPSEL0>;
        #[doc = "Writer for register I2SSTMPSEL0"]
        pub type W = crate::W<u32, super::I2SSTMPSEL0>;
        #[doc = "Register I2SSTMPSEL0 `reset()`'s with value 0x5f"]
        impl crate::ResetValue for super::I2SSTMPSEL0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x5f
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Output Selection for FRZ Subscriber 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [frzsel0](frzsel0) module"]
    pub type FRZSEL0 = crate::Reg<u32, _FRZSEL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FRZSEL0;
    #[doc = "`read()` method returns [frzsel0::R](frzsel0::R) reader structure"]
    impl crate::Readable for FRZSEL0 {}
    #[doc = "`write(|w| ..)` method takes [frzsel0::W](frzsel0::W) writer structure"]
    impl crate::Writable for FRZSEL0 {}
    #[doc = "Output Selection for FRZ Subscriber 0"]
    pub mod frzsel0 {
        #[doc = "Reader of register FRZSEL0"]
        pub type R = crate::R<u32, super::FRZSEL0>;
        #[doc = "Writer for register FRZSEL0"]
        pub type W = crate::W<u32, super::FRZSEL0>;
        #[doc = "Register FRZSEL0 `reset()`'s with value 0x78"]
        impl crate::ResetValue for super::FRZSEL0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x78
            }
        }
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EV`"]
        pub struct EV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - EV"]
            #[inline(always)]
            pub fn ev(&mut self) -> EV_W {
                EV_W { w: self }
            }
        }
    }
    #[doc = "Set or Clear Software Events\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swev](swev) module"]
    pub type SWEV = crate::Reg<u32, _SWEV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWEV;
    #[doc = "`read()` method returns [swev::R](swev::R) reader structure"]
    impl crate::Readable for SWEV {}
    #[doc = "`write(|w| ..)` method takes [swev::W](swev::W) writer structure"]
    impl crate::Writable for SWEV {}
    #[doc = "Set or Clear Software Events"]
    pub mod swev {
        #[doc = "Reader of register SWEV"]
        pub type R = crate::R<u32, super::SWEV>;
        #[doc = "Writer for register SWEV"]
        pub type W = crate::W<u32, super::SWEV>;
        #[doc = "Register SWEV `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWEV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SWEV3`"]
        pub type SWEV3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV3`"]
        pub struct SWEV3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV2`"]
        pub type SWEV2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV2`"]
        pub struct SWEV2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV1`"]
        pub type SWEV1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV1`"]
        pub struct SWEV1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SWEV0`"]
        pub type SWEV0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWEV0`"]
        pub struct SWEV0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWEV0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - SWEV3"]
            #[inline(always)]
            pub fn swev3(&self) -> SWEV3_R {
                SWEV3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&self) -> SWEV2_R {
                SWEV2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&self) -> SWEV1_R {
                SWEV1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&self) -> SWEV0_R {
                SWEV0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - SWEV3"]
            #[inline(always)]
            pub fn swev3(&mut self) -> SWEV3_W {
                SWEV3_W { w: self }
            }
            #[doc = "Bit 16 - SWEV2"]
            #[inline(always)]
            pub fn swev2(&mut self) -> SWEV2_W {
                SWEV2_W { w: self }
            }
            #[doc = "Bit 8 - SWEV1"]
            #[inline(always)]
            pub fn swev1(&mut self) -> SWEV1_W {
                SWEV1_W { w: self }
            }
            #[doc = "Bit 0 - SWEV0"]
            #[inline(always)]
            pub fn swev0(&mut self) -> SWEV0_W {
                SWEV0_W { w: self }
            }
        }
    }
}
#[doc = "Factory configuration area (FCFG1)"]
pub struct FCFG1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FCFG1 {}
impl FCFG1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fcfg1::RegisterBlock {
        0x5000_1000 as *const _
    }
}
impl Deref for FCFG1 {
    type Target = fcfg1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FCFG1::ptr() }
    }
}
#[doc = "Factory configuration area (FCFG1)"]
pub mod fcfg1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 160usize],
        #[doc = "0xa0 - Misc configurations"]
        pub misc_conf_1: MISC_CONF_1,
        _reserved1: [u8; 12usize],
        #[doc = "0xb0 - Internal. Only to be used through TI provided API."]
        pub baw_meas_5: BAW_MEAS_5,
        #[doc = "0xb4 - Internal. Only to be used through TI provided API."]
        pub baw_meas_4: BAW_MEAS_4,
        #[doc = "0xb8 - Internal. Only to be used through TI provided API."]
        pub baw_meas_3: BAW_MEAS_3,
        #[doc = "0xbc - Internal. Only to be used through TI provided API."]
        pub baw_meas_2: BAW_MEAS_2,
        #[doc = "0xc0 - Internal. Only to be used through TI provided API."]
        pub baw_meas_1: BAW_MEAS_1,
        #[doc = "0xc4 - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend_div5: CONFIG_RF_FRONTEND_DIV5,
        #[doc = "0xc8 - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend_div6: CONFIG_RF_FRONTEND_DIV6,
        #[doc = "0xcc - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend_div10: CONFIG_RF_FRONTEND_DIV10,
        #[doc = "0xd0 - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend_div12: CONFIG_RF_FRONTEND_DIV12,
        #[doc = "0xd4 - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend_div15: CONFIG_RF_FRONTEND_DIV15,
        #[doc = "0xd8 - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend_div30: CONFIG_RF_FRONTEND_DIV30,
        #[doc = "0xdc - Internal. Only to be used through TI provided API."]
        pub config_synth_div5: CONFIG_SYNTH_DIV5,
        #[doc = "0xe0 - Internal. Only to be used through TI provided API."]
        pub config_synth_div6: CONFIG_SYNTH_DIV6,
        #[doc = "0xe4 - Internal. Only to be used through TI provided API."]
        pub config_synth_div10: CONFIG_SYNTH_DIV10,
        #[doc = "0xe8 - Internal. Only to be used through TI provided API."]
        pub config_synth_div12: CONFIG_SYNTH_DIV12,
        #[doc = "0xec - Internal. Only to be used through TI provided API."]
        pub config_synth_div15: CONFIG_SYNTH_DIV15,
        #[doc = "0xf0 - Internal. Only to be used through TI provided API."]
        pub config_synth_div30: CONFIG_SYNTH_DIV30,
        #[doc = "0xf4 - Internal. Only to be used through TI provided API."]
        pub config_misc_adc_div5: CONFIG_MISC_ADC_DIV5,
        #[doc = "0xf8 - Internal. Only to be used through TI provided API."]
        pub config_misc_adc_div6: CONFIG_MISC_ADC_DIV6,
        #[doc = "0xfc - Internal. Only to be used through TI provided API."]
        pub config_misc_adc_div10: CONFIG_MISC_ADC_DIV10,
        #[doc = "0x100 - Internal. Only to be used through TI provided API."]
        pub config_misc_adc_div12: CONFIG_MISC_ADC_DIV12,
        #[doc = "0x104 - Internal. Only to be used through TI provided API."]
        pub config_misc_adc_div15: CONFIG_MISC_ADC_DIV15,
        #[doc = "0x108 - Internal. Only to be used through TI provided API."]
        pub config_misc_adc_div30: CONFIG_MISC_ADC_DIV30,
        _reserved24: [u8; 12usize],
        #[doc = "0x118 - Shadow of the DIE_ID_0 register in eFuse"]
        pub shdw_die_id_0: SHDW_DIE_ID_0,
        #[doc = "0x11c - Shadow of the DIE_ID_1 register in eFuse"]
        pub shdw_die_id_1: SHDW_DIE_ID_1,
        #[doc = "0x120 - Shadow of the DIE_ID_2 register in eFuse"]
        pub shdw_die_id_2: SHDW_DIE_ID_2,
        #[doc = "0x124 - Shadow of the DIE_ID_3 register in eFuse"]
        pub shdw_die_id_3: SHDW_DIE_ID_3,
        _reserved28: [u8; 16usize],
        #[doc = "0x138 - Internal. Only to be used through TI provided API."]
        pub shdw_osc_bias_ldo_trim: SHDW_OSC_BIAS_LDO_TRIM,
        #[doc = "0x13c - Internal. Only to be used through TI provided API."]
        pub shdw_ana_trim: SHDW_ANA_TRIM,
        _reserved30: [u8; 36usize],
        #[doc = "0x164 - lol"]
        pub flash_number: FLASH_NUMBER,
        _reserved31: [u8; 4usize],
        #[doc = "0x16c - lol2"]
        pub flash_coordinate: FLASH_COORDINATE,
        #[doc = "0x170 - Internal. Only to be used through TI provided API."]
        pub flash_e_p: FLASH_E_P,
        #[doc = "0x174 - Internal. Only to be used through TI provided API."]
        pub flash_c_e_p_r: FLASH_C_E_P_R,
        #[doc = "0x178 - Internal. Only to be used through TI provided API."]
        pub flash_p_r_pv: FLASH_P_R_PV,
        #[doc = "0x17c - Internal. Only to be used through TI provided API."]
        pub flash_eh_seq: FLASH_EH_SEQ,
        #[doc = "0x180 - Internal. Only to be used through TI provided API."]
        pub flash_vhv_e: FLASH_VHV_E,
        #[doc = "0x184 - Internal. Only to be used through TI provided API."]
        pub flash_pp: FLASH_PP,
        #[doc = "0x188 - Internal. Only to be used through TI provided API."]
        pub flash_prog_ep: FLASH_PROG_EP,
        #[doc = "0x18c - Internal. Only to be used through TI provided API."]
        pub flash_era_pw: FLASH_ERA_PW,
        #[doc = "0x190 - Internal. Only to be used through TI provided API."]
        pub flash_vhv: FLASH_VHV,
        #[doc = "0x194 - Internal. Only to be used through TI provided API."]
        pub flash_vhv_pv: FLASH_VHV_PV,
        #[doc = "0x198 - Internal. Only to be used through TI provided API."]
        pub flash_v: FLASH_V,
        _reserved43: [u8; 248usize],
        #[doc = "0x294 - User Identification. Reading this register or the ICEPICK_DEVICE_ID register is the only support way of identifying a device. The value of this register will be written to AON_WUC:JTAGUSERCODE by boot FW while in safezone."]
        pub user_id: USER_ID,
        _reserved44: [u8; 24usize],
        #[doc = "0x2b0 - Internal. Only to be used through TI provided API."]
        pub flash_otp_data3: FLASH_OTP_DATA3,
        #[doc = "0x2b4 - Internal. Only to be used through TI provided API."]
        pub ana2_trim: ANA2_TRIM,
        #[doc = "0x2b8 - Internal. Only to be used through TI provided API."]
        pub ldo_trim: LDO_TRIM,
        _reserved47: [u8; 44usize],
        #[doc = "0x2e8 - MAC BLE Address 0"]
        pub mac_ble_0: MAC_BLE_0,
        #[doc = "0x2ec - MAC BLE Address 1"]
        pub mac_ble_1: MAC_BLE_1,
        #[doc = "0x2f0 - MAC IEEE 802.15.4 Address 0"]
        pub mac_15_4_0: MAC_15_4_0,
        #[doc = "0x2f4 - MAC IEEE 802.15.4 Address 1"]
        pub mac_15_4_1: MAC_15_4_1,
        _reserved51: [u8; 16usize],
        #[doc = "0x308 - Internal. Only to be used through TI provided API."]
        pub flash_otp_data4: FLASH_OTP_DATA4,
        #[doc = "0x30c - Miscellaneous Trim Parameters"]
        pub misc_trim: MISC_TRIM,
        #[doc = "0x310 - Internal. Only to be used through TI provided API."]
        pub rcosc_hf_tempcomp: RCOSC_HF_TEMPCOMP,
        _reserved54: [u8; 4usize],
        #[doc = "0x318 - IcePick Device Identification Reading this register or the USER_ID register is the only support way of identifying a device."]
        pub icepick_device_id: ICEPICK_DEVICE_ID,
        #[doc = "0x31c - Factory Configuration (FCFG1) Revision"]
        pub fcfg1_revision: FCFG1_REVISION,
        #[doc = "0x320 - Misc OTP Data"]
        pub misc_otp_data: MISC_OTP_DATA,
        _reserved57: [u8; 32usize],
        #[doc = "0x344 - IO Configuration"]
        pub ioconf: IOCONF,
        _reserved58: [u8; 4usize],
        #[doc = "0x34c - Internal. Only to be used through TI provided API."]
        pub config_if_adc: CONFIG_IF_ADC,
        #[doc = "0x350 - Internal. Only to be used through TI provided API."]
        pub config_osc_top: CONFIG_OSC_TOP,
        #[doc = "0x354 - Internal. Only to be used through TI provided API."]
        pub config_rf_frontend: CONFIG_RF_FRONTEND,
        #[doc = "0x358 - Internal. Only to be used through TI provided API."]
        pub config_synth: CONFIG_SYNTH,
        #[doc = "0x35c - AUX_ADC Gain in Absolute Reference Mode"]
        pub soc_adc_abs_gain: SOC_ADC_ABS_GAIN,
        #[doc = "0x360 - AUX_ADC Gain in Relative Reference Mode"]
        pub soc_adc_rel_gain: SOC_ADC_REL_GAIN,
        _reserved64: [u8; 4usize],
        #[doc = "0x368 - AUX_ADC Temperature Offsets in Absolute Reference Mode"]
        pub soc_adc_offset_int: SOC_ADC_OFFSET_INT,
        #[doc = "0x36c - Internal. Only to be used through TI provided API."]
        pub soc_adc_ref_trim_and_offset_ext: SOC_ADC_REF_TRIM_AND_OFFSET_EXT,
        #[doc = "0x370 - Internal. Only to be used through TI provided API."]
        pub ampcomp_th1: AMPCOMP_TH1,
        #[doc = "0x374 - Internal. Only to be used through TI provided API."]
        pub ampcomp_th2: AMPCOMP_TH2,
        #[doc = "0x378 - Internal. Only to be used through TI provided API."]
        pub ampcomp_ctrl1: AMPCOMP_CTRL1,
        #[doc = "0x37c - Internal. Only to be used through TI provided API."]
        pub anabypass_value2: ANABYPASS_VALUE2,
        #[doc = "0x380 - Internal. Only to be used through TI provided API."]
        pub config_misc_adc: CONFIG_MISC_ADC,
        _reserved71: [u8; 4usize],
        #[doc = "0x388 - Internal. Only to be used through TI provided API."]
        pub volt_trim: VOLT_TRIM,
        #[doc = "0x38c - OSC Configuration"]
        pub osc_conf: OSC_CONF,
        _reserved73: [u8; 4usize],
        #[doc = "0x394 - Internal. Only to be used through TI provided API."]
        pub cap_trim: CAP_TRIM,
        #[doc = "0x398 - Internal. Only to be used through TI provided API."]
        pub misc_otp_data_1: MISC_OTP_DATA_1,
        #[doc = "0x39c - Power Down Current Control 20C"]
        pub pwd_curr_20c: PWD_CURR_20C,
        #[doc = "0x3a0 - Power Down Current Control 35C"]
        pub pwd_curr_35c: PWD_CURR_35C,
        #[doc = "0x3a4 - Power Down Current Control 50C"]
        pub pwd_curr_50c: PWD_CURR_50C,
        #[doc = "0x3a8 - Power Down Current Control 65C"]
        pub pwd_curr_65c: PWD_CURR_65C,
        #[doc = "0x3ac - Power Down Current Control 80C"]
        pub pwd_curr_80c: PWD_CURR_80C,
        #[doc = "0x3b0 - Power Down Current Control 95C"]
        pub pwd_curr_95c: PWD_CURR_95C,
        #[doc = "0x3b4 - Power Down Current Control 110C"]
        pub pwd_curr_110c: PWD_CURR_110C,
        #[doc = "0x3b8 - Power Down Current Control 125C"]
        pub pwd_curr_125c: PWD_CURR_125C,
    }
    #[doc = "Misc configurations\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misc_conf_1](misc_conf_1) module"]
    pub type MISC_CONF_1 = crate::Reg<u32, _MISC_CONF_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MISC_CONF_1;
    #[doc = "`read()` method returns [misc_conf_1::R](misc_conf_1::R) reader structure"]
    impl crate::Readable for MISC_CONF_1 {}
    #[doc = "Misc configurations"]
    pub mod misc_conf_1 {
        #[doc = "Reader of register MISC_CONF_1"]
        pub type R = crate::R<u32, super::MISC_CONF_1>;
        #[doc = "Reader of field `DEVICE_MINOR_REV`"]
        pub type DEVICE_MINOR_REV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - DEVICE_MINOR_REV"]
            #[inline(always)]
            pub fn device_minor_rev(&self) -> DEVICE_MINOR_REV_R {
                DEVICE_MINOR_REV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baw_meas_5](baw_meas_5) module"]
    pub type BAW_MEAS_5 = crate::Reg<u32, _BAW_MEAS_5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BAW_MEAS_5;
    #[doc = "`read()` method returns [baw_meas_5::R](baw_meas_5::R) reader structure"]
    impl crate::Readable for BAW_MEAS_5 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod baw_meas_5 {
        #[doc = "Reader of register BAW_MEAS_5"]
        pub type R = crate::R<u32, super::BAW_MEAS_5>;
        #[doc = "Reader of field `BAW_D5`"]
        pub type BAW_D5_R = crate::R<u16, u16>;
        #[doc = "Reader of field `BAW_T5`"]
        pub type BAW_T5_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_DT5`"]
        pub type BAW_DT5_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - BAW_D5"]
            #[inline(always)]
            pub fn baw_d5(&self) -> BAW_D5_R {
                BAW_D5_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - BAW_T5"]
            #[inline(always)]
            pub fn baw_t5(&self) -> BAW_T5_R {
                BAW_T5_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BAW_DT5"]
            #[inline(always)]
            pub fn baw_dt5(&self) -> BAW_DT5_R {
                BAW_DT5_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baw_meas_4](baw_meas_4) module"]
    pub type BAW_MEAS_4 = crate::Reg<u32, _BAW_MEAS_4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BAW_MEAS_4;
    #[doc = "`read()` method returns [baw_meas_4::R](baw_meas_4::R) reader structure"]
    impl crate::Readable for BAW_MEAS_4 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod baw_meas_4 {
        #[doc = "Reader of register BAW_MEAS_4"]
        pub type R = crate::R<u32, super::BAW_MEAS_4>;
        #[doc = "Reader of field `BAW_D4`"]
        pub type BAW_D4_R = crate::R<u16, u16>;
        #[doc = "Reader of field `BAW_T4`"]
        pub type BAW_T4_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_DT4`"]
        pub type BAW_DT4_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - BAW_D4"]
            #[inline(always)]
            pub fn baw_d4(&self) -> BAW_D4_R {
                BAW_D4_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - BAW_T4"]
            #[inline(always)]
            pub fn baw_t4(&self) -> BAW_T4_R {
                BAW_T4_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BAW_DT4"]
            #[inline(always)]
            pub fn baw_dt4(&self) -> BAW_DT4_R {
                BAW_DT4_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baw_meas_3](baw_meas_3) module"]
    pub type BAW_MEAS_3 = crate::Reg<u32, _BAW_MEAS_3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BAW_MEAS_3;
    #[doc = "`read()` method returns [baw_meas_3::R](baw_meas_3::R) reader structure"]
    impl crate::Readable for BAW_MEAS_3 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod baw_meas_3 {
        #[doc = "Reader of register BAW_MEAS_3"]
        pub type R = crate::R<u32, super::BAW_MEAS_3>;
        #[doc = "Reader of field `BAW_D3`"]
        pub type BAW_D3_R = crate::R<u16, u16>;
        #[doc = "Reader of field `BAW_T3`"]
        pub type BAW_T3_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_DT3`"]
        pub type BAW_DT3_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - BAW_D3"]
            #[inline(always)]
            pub fn baw_d3(&self) -> BAW_D3_R {
                BAW_D3_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - BAW_T3"]
            #[inline(always)]
            pub fn baw_t3(&self) -> BAW_T3_R {
                BAW_T3_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BAW_DT3"]
            #[inline(always)]
            pub fn baw_dt3(&self) -> BAW_DT3_R {
                BAW_DT3_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baw_meas_2](baw_meas_2) module"]
    pub type BAW_MEAS_2 = crate::Reg<u32, _BAW_MEAS_2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BAW_MEAS_2;
    #[doc = "`read()` method returns [baw_meas_2::R](baw_meas_2::R) reader structure"]
    impl crate::Readable for BAW_MEAS_2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod baw_meas_2 {
        #[doc = "Reader of register BAW_MEAS_2"]
        pub type R = crate::R<u32, super::BAW_MEAS_2>;
        #[doc = "Reader of field `BAW_D2`"]
        pub type BAW_D2_R = crate::R<u16, u16>;
        #[doc = "Reader of field `BAW_T2`"]
        pub type BAW_T2_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_DT2`"]
        pub type BAW_DT2_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - BAW_D2"]
            #[inline(always)]
            pub fn baw_d2(&self) -> BAW_D2_R {
                BAW_D2_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - BAW_T2"]
            #[inline(always)]
            pub fn baw_t2(&self) -> BAW_T2_R {
                BAW_T2_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BAW_DT2"]
            #[inline(always)]
            pub fn baw_dt2(&self) -> BAW_DT2_R {
                BAW_DT2_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [baw_meas_1](baw_meas_1) module"]
    pub type BAW_MEAS_1 = crate::Reg<u32, _BAW_MEAS_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BAW_MEAS_1;
    #[doc = "`read()` method returns [baw_meas_1::R](baw_meas_1::R) reader structure"]
    impl crate::Readable for BAW_MEAS_1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod baw_meas_1 {
        #[doc = "Reader of register BAW_MEAS_1"]
        pub type R = crate::R<u32, super::BAW_MEAS_1>;
        #[doc = "Reader of field `BAW_D1`"]
        pub type BAW_D1_R = crate::R<u16, u16>;
        #[doc = "Reader of field `BAW_T1`"]
        pub type BAW_T1_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_DT1`"]
        pub type BAW_DT1_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:31 - BAW_D1"]
            #[inline(always)]
            pub fn baw_d1(&self) -> BAW_D1_R {
                BAW_D1_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - BAW_T1"]
            #[inline(always)]
            pub fn baw_t1(&self) -> BAW_T1_R {
                BAW_T1_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BAW_DT1"]
            #[inline(always)]
            pub fn baw_dt1(&self) -> BAW_DT1_R {
                BAW_DT1_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend_div5](config_rf_frontend_div5) module"]
    pub type CONFIG_RF_FRONTEND_DIV5 = crate::Reg<u32, _CONFIG_RF_FRONTEND_DIV5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND_DIV5;
    #[doc = "`read()` method returns [config_rf_frontend_div5::R](config_rf_frontend_div5::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND_DIV5 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend_div5 {
        #[doc = "Reader of register CONFIG_RF_FRONTEND_DIV5"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND_DIV5>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend_div6](config_rf_frontend_div6) module"]
    pub type CONFIG_RF_FRONTEND_DIV6 = crate::Reg<u32, _CONFIG_RF_FRONTEND_DIV6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND_DIV6;
    #[doc = "`read()` method returns [config_rf_frontend_div6::R](config_rf_frontend_div6::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND_DIV6 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend_div6 {
        #[doc = "Reader of register CONFIG_RF_FRONTEND_DIV6"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND_DIV6>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend_div10](config_rf_frontend_div10) module"]
    pub type CONFIG_RF_FRONTEND_DIV10 = crate::Reg<u32, _CONFIG_RF_FRONTEND_DIV10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND_DIV10;
    #[doc = "`read()` method returns [config_rf_frontend_div10::R](config_rf_frontend_div10::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND_DIV10 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend_div10 {
        #[doc = "Reader of register CONFIG_RF_FRONTEND_DIV10"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND_DIV10>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend_div12](config_rf_frontend_div12) module"]
    pub type CONFIG_RF_FRONTEND_DIV12 = crate::Reg<u32, _CONFIG_RF_FRONTEND_DIV12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND_DIV12;
    #[doc = "`read()` method returns [config_rf_frontend_div12::R](config_rf_frontend_div12::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND_DIV12 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend_div12 {
        #[doc = "Reader of register CONFIG_RF_FRONTEND_DIV12"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND_DIV12>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend_div15](config_rf_frontend_div15) module"]
    pub type CONFIG_RF_FRONTEND_DIV15 = crate::Reg<u32, _CONFIG_RF_FRONTEND_DIV15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND_DIV15;
    #[doc = "`read()` method returns [config_rf_frontend_div15::R](config_rf_frontend_div15::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND_DIV15 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend_div15 {
        #[doc = "Reader of register CONFIG_RF_FRONTEND_DIV15"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND_DIV15>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend_div30](config_rf_frontend_div30) module"]
    pub type CONFIG_RF_FRONTEND_DIV30 = crate::Reg<u32, _CONFIG_RF_FRONTEND_DIV30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND_DIV30;
    #[doc = "`read()` method returns [config_rf_frontend_div30::R](config_rf_frontend_div30::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND_DIV30 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend_div30 {
        #[doc = "Reader of register CONFIG_RF_FRONTEND_DIV30"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND_DIV30>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth_div5](config_synth_div5) module"]
    pub type CONFIG_SYNTH_DIV5 = crate::Reg<u32, _CONFIG_SYNTH_DIV5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH_DIV5;
    #[doc = "`read()` method returns [config_synth_div5::R](config_synth_div5::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH_DIV5 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth_div5 {
        #[doc = "Reader of register CONFIG_SYNTH_DIV5"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH_DIV5>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth_div6](config_synth_div6) module"]
    pub type CONFIG_SYNTH_DIV6 = crate::Reg<u32, _CONFIG_SYNTH_DIV6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH_DIV6;
    #[doc = "`read()` method returns [config_synth_div6::R](config_synth_div6::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH_DIV6 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth_div6 {
        #[doc = "Reader of register CONFIG_SYNTH_DIV6"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH_DIV6>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth_div10](config_synth_div10) module"]
    pub type CONFIG_SYNTH_DIV10 = crate::Reg<u32, _CONFIG_SYNTH_DIV10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH_DIV10;
    #[doc = "`read()` method returns [config_synth_div10::R](config_synth_div10::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH_DIV10 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth_div10 {
        #[doc = "Reader of register CONFIG_SYNTH_DIV10"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH_DIV10>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth_div12](config_synth_div12) module"]
    pub type CONFIG_SYNTH_DIV12 = crate::Reg<u32, _CONFIG_SYNTH_DIV12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH_DIV12;
    #[doc = "`read()` method returns [config_synth_div12::R](config_synth_div12::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH_DIV12 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth_div12 {
        #[doc = "Reader of register CONFIG_SYNTH_DIV12"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH_DIV12>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth_div15](config_synth_div15) module"]
    pub type CONFIG_SYNTH_DIV15 = crate::Reg<u32, _CONFIG_SYNTH_DIV15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH_DIV15;
    #[doc = "`read()` method returns [config_synth_div15::R](config_synth_div15::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH_DIV15 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth_div15 {
        #[doc = "Reader of register CONFIG_SYNTH_DIV15"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH_DIV15>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth_div30](config_synth_div30) module"]
    pub type CONFIG_SYNTH_DIV30 = crate::Reg<u32, _CONFIG_SYNTH_DIV30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH_DIV30;
    #[doc = "`read()` method returns [config_synth_div30::R](config_synth_div30::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH_DIV30 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth_div30 {
        #[doc = "Reader of register CONFIG_SYNTH_DIV30"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH_DIV30>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc_div5](config_misc_adc_div5) module"]
    pub type CONFIG_MISC_ADC_DIV5 = crate::Reg<u32, _CONFIG_MISC_ADC_DIV5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC_DIV5;
    #[doc = "`read()` method returns [config_misc_adc_div5::R](config_misc_adc_div5::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC_DIV5 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc_div5 {
        #[doc = "Reader of register CONFIG_MISC_ADC_DIV5"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC_DIV5>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc_div6](config_misc_adc_div6) module"]
    pub type CONFIG_MISC_ADC_DIV6 = crate::Reg<u32, _CONFIG_MISC_ADC_DIV6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC_DIV6;
    #[doc = "`read()` method returns [config_misc_adc_div6::R](config_misc_adc_div6::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC_DIV6 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc_div6 {
        #[doc = "Reader of register CONFIG_MISC_ADC_DIV6"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC_DIV6>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc_div10](config_misc_adc_div10) module"]
    pub type CONFIG_MISC_ADC_DIV10 = crate::Reg<u32, _CONFIG_MISC_ADC_DIV10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC_DIV10;
    #[doc = "`read()` method returns [config_misc_adc_div10::R](config_misc_adc_div10::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC_DIV10 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc_div10 {
        #[doc = "Reader of register CONFIG_MISC_ADC_DIV10"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC_DIV10>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc_div12](config_misc_adc_div12) module"]
    pub type CONFIG_MISC_ADC_DIV12 = crate::Reg<u32, _CONFIG_MISC_ADC_DIV12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC_DIV12;
    #[doc = "`read()` method returns [config_misc_adc_div12::R](config_misc_adc_div12::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC_DIV12 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc_div12 {
        #[doc = "Reader of register CONFIG_MISC_ADC_DIV12"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC_DIV12>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc_div15](config_misc_adc_div15) module"]
    pub type CONFIG_MISC_ADC_DIV15 = crate::Reg<u32, _CONFIG_MISC_ADC_DIV15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC_DIV15;
    #[doc = "`read()` method returns [config_misc_adc_div15::R](config_misc_adc_div15::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC_DIV15 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc_div15 {
        #[doc = "Reader of register CONFIG_MISC_ADC_DIV15"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC_DIV15>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc_div30](config_misc_adc_div30) module"]
    pub type CONFIG_MISC_ADC_DIV30 = crate::Reg<u32, _CONFIG_MISC_ADC_DIV30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC_DIV30;
    #[doc = "`read()` method returns [config_misc_adc_div30::R](config_misc_adc_div30::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC_DIV30 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc_div30 {
        #[doc = "Reader of register CONFIG_MISC_ADC_DIV30"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC_DIV30>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Shadow of the DIE_ID_0 register in eFuse\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shdw_die_id_0](shdw_die_id_0) module"]
    pub type SHDW_DIE_ID_0 = crate::Reg<u32, _SHDW_DIE_ID_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHDW_DIE_ID_0;
    #[doc = "`read()` method returns [shdw_die_id_0::R](shdw_die_id_0::R) reader structure"]
    impl crate::Readable for SHDW_DIE_ID_0 {}
    #[doc = "Shadow of the DIE_ID_0 register in eFuse"]
    pub mod shdw_die_id_0 {
        #[doc = "Reader of register SHDW_DIE_ID_0"]
        pub type R = crate::R<u32, super::SHDW_DIE_ID_0>;
        #[doc = "Reader of field `ID_31_0`"]
        pub type ID_31_0_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ID_31_0"]
            #[inline(always)]
            pub fn id_31_0(&self) -> ID_31_0_R {
                ID_31_0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Shadow of the DIE_ID_1 register in eFuse\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shdw_die_id_1](shdw_die_id_1) module"]
    pub type SHDW_DIE_ID_1 = crate::Reg<u32, _SHDW_DIE_ID_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHDW_DIE_ID_1;
    #[doc = "`read()` method returns [shdw_die_id_1::R](shdw_die_id_1::R) reader structure"]
    impl crate::Readable for SHDW_DIE_ID_1 {}
    #[doc = "Shadow of the DIE_ID_1 register in eFuse"]
    pub mod shdw_die_id_1 {
        #[doc = "Reader of register SHDW_DIE_ID_1"]
        pub type R = crate::R<u32, super::SHDW_DIE_ID_1>;
        #[doc = "Reader of field `ID_63_32`"]
        pub type ID_63_32_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ID_63_32"]
            #[inline(always)]
            pub fn id_63_32(&self) -> ID_63_32_R {
                ID_63_32_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Shadow of the DIE_ID_2 register in eFuse\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shdw_die_id_2](shdw_die_id_2) module"]
    pub type SHDW_DIE_ID_2 = crate::Reg<u32, _SHDW_DIE_ID_2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHDW_DIE_ID_2;
    #[doc = "`read()` method returns [shdw_die_id_2::R](shdw_die_id_2::R) reader structure"]
    impl crate::Readable for SHDW_DIE_ID_2 {}
    #[doc = "Shadow of the DIE_ID_2 register in eFuse"]
    pub mod shdw_die_id_2 {
        #[doc = "Reader of register SHDW_DIE_ID_2"]
        pub type R = crate::R<u32, super::SHDW_DIE_ID_2>;
        #[doc = "Reader of field `ID_95_64`"]
        pub type ID_95_64_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ID_95_64"]
            #[inline(always)]
            pub fn id_95_64(&self) -> ID_95_64_R {
                ID_95_64_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Shadow of the DIE_ID_3 register in eFuse\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shdw_die_id_3](shdw_die_id_3) module"]
    pub type SHDW_DIE_ID_3 = crate::Reg<u32, _SHDW_DIE_ID_3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHDW_DIE_ID_3;
    #[doc = "`read()` method returns [shdw_die_id_3::R](shdw_die_id_3::R) reader structure"]
    impl crate::Readable for SHDW_DIE_ID_3 {}
    #[doc = "Shadow of the DIE_ID_3 register in eFuse"]
    pub mod shdw_die_id_3 {
        #[doc = "Reader of register SHDW_DIE_ID_3"]
        pub type R = crate::R<u32, super::SHDW_DIE_ID_3>;
        #[doc = "Reader of field `ID_127_96`"]
        pub type ID_127_96_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ID_127_96"]
            #[inline(always)]
            pub fn id_127_96(&self) -> ID_127_96_R {
                ID_127_96_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shdw_osc_bias_ldo_trim](shdw_osc_bias_ldo_trim) module"]
    pub type SHDW_OSC_BIAS_LDO_TRIM = crate::Reg<u32, _SHDW_OSC_BIAS_LDO_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHDW_OSC_BIAS_LDO_TRIM;
    #[doc = "`read()` method returns [shdw_osc_bias_ldo_trim::R](shdw_osc_bias_ldo_trim::R) reader structure"]
    impl crate::Readable for SHDW_OSC_BIAS_LDO_TRIM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod shdw_osc_bias_ldo_trim {
        #[doc = "Reader of register SHDW_OSC_BIAS_LDO_TRIM"]
        pub type R = crate::R<u32, super::SHDW_OSC_BIAS_LDO_TRIM>;
        #[doc = "Reader of field `SET_RCOSC_HF_COARSE_RESISTOR`"]
        pub type SET_RCOSC_HF_COARSE_RESISTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIMMAG`"]
        pub type TRIMMAG_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIMIREF`"]
        pub type TRIMIREF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ITRIM_DIG_LDO`"]
        pub type ITRIM_DIG_LDO_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VTRIM_DIG`"]
        pub type VTRIM_DIG_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VTRIM_COARSE`"]
        pub type VTRIM_COARSE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RCOSCHF_CTRIM`"]
        pub type RCOSCHF_CTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 27:28 - SET_RCOSC_HF_COARSE_RESISTOR"]
            #[inline(always)]
            pub fn set_rcosc_hf_coarse_resistor(&self) -> SET_RCOSC_HF_COARSE_RESISTOR_R {
                SET_RCOSC_HF_COARSE_RESISTOR_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 23:26 - TRIMMAG"]
            #[inline(always)]
            pub fn trimmag(&self) -> TRIMMAG_R {
                TRIMMAG_R::new(((self.bits >> 23) & 0x0f) as u8)
            }
            #[doc = "Bits 18:22 - TRIMIREF"]
            #[inline(always)]
            pub fn trimiref(&self) -> TRIMIREF_R {
                TRIMIREF_R::new(((self.bits >> 18) & 0x1f) as u8)
            }
            #[doc = "Bits 16:17 - ITRIM_DIG_LDO"]
            #[inline(always)]
            pub fn itrim_dig_ldo(&self) -> ITRIM_DIG_LDO_R {
                ITRIM_DIG_LDO_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 12:15 - VTRIM_DIG"]
            #[inline(always)]
            pub fn vtrim_dig(&self) -> VTRIM_DIG_R {
                VTRIM_DIG_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - VTRIM_COARSE"]
            #[inline(always)]
            pub fn vtrim_coarse(&self) -> VTRIM_COARSE_R {
                VTRIM_COARSE_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 0:7 - RCOSCHF_CTRIM"]
            #[inline(always)]
            pub fn rcoschf_ctrim(&self) -> RCOSCHF_CTRIM_R {
                RCOSCHF_CTRIM_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shdw_ana_trim](shdw_ana_trim) module"]
    pub type SHDW_ANA_TRIM = crate::Reg<u32, _SHDW_ANA_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHDW_ANA_TRIM;
    #[doc = "`read()` method returns [shdw_ana_trim::R](shdw_ana_trim::R) reader structure"]
    impl crate::Readable for SHDW_ANA_TRIM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod shdw_ana_trim {
        #[doc = "Reader of register SHDW_ANA_TRIM"]
        pub type R = crate::R<u32, super::SHDW_ANA_TRIM>;
        #[doc = "Reader of field `BOD_BANDGAP_TRIM_CNF`"]
        pub type BOD_BANDGAP_TRIM_CNF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_ENABLE_PG1`"]
        pub type VDDR_ENABLE_PG1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VDDR_OK_HYS`"]
        pub type VDDR_OK_HYS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IPTAT_TRIM`"]
        pub type IPTAT_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_TRIM`"]
        pub type VDDR_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIMBOD_INTMODE`"]
        pub type TRIMBOD_INTMODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIMBOD_EXTMODE`"]
        pub type TRIMBOD_EXTMODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIMTEMP`"]
        pub type TRIMTEMP_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 25:26 - BOD_BANDGAP_TRIM_CNF"]
            #[inline(always)]
            pub fn bod_bandgap_trim_cnf(&self) -> BOD_BANDGAP_TRIM_CNF_R {
                BOD_BANDGAP_TRIM_CNF_R::new(((self.bits >> 25) & 0x03) as u8)
            }
            #[doc = "Bit 24 - VDDR_ENABLE_PG1"]
            #[inline(always)]
            pub fn vddr_enable_pg1(&self) -> VDDR_ENABLE_PG1_R {
                VDDR_ENABLE_PG1_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - VDDR_OK_HYS"]
            #[inline(always)]
            pub fn vddr_ok_hys(&self) -> VDDR_OK_HYS_R {
                VDDR_OK_HYS_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - IPTAT_TRIM"]
            #[inline(always)]
            pub fn iptat_trim(&self) -> IPTAT_TRIM_R {
                IPTAT_TRIM_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bits 16:20 - VDDR_TRIM"]
            #[inline(always)]
            pub fn vddr_trim(&self) -> VDDR_TRIM_R {
                VDDR_TRIM_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 11:15 - TRIMBOD_INTMODE"]
            #[inline(always)]
            pub fn trimbod_intmode(&self) -> TRIMBOD_INTMODE_R {
                TRIMBOD_INTMODE_R::new(((self.bits >> 11) & 0x1f) as u8)
            }
            #[doc = "Bits 6:10 - TRIMBOD_EXTMODE"]
            #[inline(always)]
            pub fn trimbod_extmode(&self) -> TRIMBOD_EXTMODE_R {
                TRIMBOD_EXTMODE_R::new(((self.bits >> 6) & 0x1f) as u8)
            }
            #[doc = "Bits 0:5 - TRIMTEMP"]
            #[inline(always)]
            pub fn trimtemp(&self) -> TRIMTEMP_R {
                TRIMTEMP_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "lol\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_number](flash_number) module"]
    pub type FLASH_NUMBER = crate::Reg<u32, _FLASH_NUMBER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_NUMBER;
    #[doc = "`read()` method returns [flash_number::R](flash_number::R) reader structure"]
    impl crate::Readable for FLASH_NUMBER {}
    #[doc = "lol"]
    pub mod flash_number {
        #[doc = "Reader of register FLASH_NUMBER"]
        pub type R = crate::R<u32, super::FLASH_NUMBER>;
        #[doc = "Reader of field `LOT_NUMBER`"]
        pub type LOT_NUMBER_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - LOT_NUMBER"]
            #[inline(always)]
            pub fn lot_number(&self) -> LOT_NUMBER_R {
                LOT_NUMBER_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "lol2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_coordinate](flash_coordinate) module"]
    pub type FLASH_COORDINATE = crate::Reg<u32, _FLASH_COORDINATE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_COORDINATE;
    #[doc = "`read()` method returns [flash_coordinate::R](flash_coordinate::R) reader structure"]
    impl crate::Readable for FLASH_COORDINATE {}
    #[doc = "lol2"]
    pub mod flash_coordinate {
        #[doc = "Reader of register FLASH_COORDINATE"]
        pub type R = crate::R<u32, super::FLASH_COORDINATE>;
        #[doc = "Reader of field `XCOORDINATE`"]
        pub type XCOORDINATE_R = crate::R<u16, u16>;
        #[doc = "Reader of field `YCOORDINATE`"]
        pub type YCOORDINATE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - XCOORDINATE"]
            #[inline(always)]
            pub fn xcoordinate(&self) -> XCOORDINATE_R {
                XCOORDINATE_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - YCOORDINATE"]
            #[inline(always)]
            pub fn ycoordinate(&self) -> YCOORDINATE_R {
                YCOORDINATE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_e_p](flash_e_p) module"]
    pub type FLASH_E_P = crate::Reg<u32, _FLASH_E_P>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_E_P;
    #[doc = "`read()` method returns [flash_e_p::R](flash_e_p::R) reader structure"]
    impl crate::Readable for FLASH_E_P {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_e_p {
        #[doc = "Reader of register FLASH_E_P"]
        pub type R = crate::R<u32, super::FLASH_E_P>;
        #[doc = "Reader of field `PSU`"]
        pub type PSU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ESU`"]
        pub type ESU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PVSU`"]
        pub type PVSU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `EVSU`"]
        pub type EVSU_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - PSU"]
            #[inline(always)]
            pub fn psu(&self) -> PSU_R {
                PSU_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - ESU"]
            #[inline(always)]
            pub fn esu(&self) -> ESU_R {
                ESU_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - PVSU"]
            #[inline(always)]
            pub fn pvsu(&self) -> PVSU_R {
                PVSU_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - EVSU"]
            #[inline(always)]
            pub fn evsu(&self) -> EVSU_R {
                EVSU_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_c_e_p_r](flash_c_e_p_r) module"]
    pub type FLASH_C_E_P_R = crate::Reg<u32, _FLASH_C_E_P_R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_C_E_P_R;
    #[doc = "`read()` method returns [flash_c_e_p_r::R](flash_c_e_p_r::R) reader structure"]
    impl crate::Readable for FLASH_C_E_P_R {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_c_e_p_r {
        #[doc = "Reader of register FLASH_C_E_P_R"]
        pub type R = crate::R<u32, super::FLASH_C_E_P_R>;
        #[doc = "Reader of field `RVSU`"]
        pub type RVSU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PV_ACCESS`"]
        pub type PV_ACCESS_R = crate::R<u8, u8>;
        #[doc = "Reader of field `A_EXEZ_SETUP`"]
        pub type A_EXEZ_SETUP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CVSU`"]
        pub type CVSU_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 24:31 - RVSU"]
            #[inline(always)]
            pub fn rvsu(&self) -> RVSU_R {
                RVSU_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - PV_ACCESS"]
            #[inline(always)]
            pub fn pv_access(&self) -> PV_ACCESS_R {
                PV_ACCESS_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 12:15 - A_EXEZ_SETUP"]
            #[inline(always)]
            pub fn a_exez_setup(&self) -> A_EXEZ_SETUP_R {
                A_EXEZ_SETUP_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 0:11 - CVSU"]
            #[inline(always)]
            pub fn cvsu(&self) -> CVSU_R {
                CVSU_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_p_r_pv](flash_p_r_pv) module"]
    pub type FLASH_P_R_PV = crate::Reg<u32, _FLASH_P_R_PV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_P_R_PV;
    #[doc = "`read()` method returns [flash_p_r_pv::R](flash_p_r_pv::R) reader structure"]
    impl crate::Readable for FLASH_P_R_PV {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_p_r_pv {
        #[doc = "Reader of register FLASH_P_R_PV"]
        pub type R = crate::R<u32, super::FLASH_P_R_PV>;
        #[doc = "Reader of field `PH`"]
        pub type PH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RH`"]
        pub type RH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PVH`"]
        pub type PVH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PVH2`"]
        pub type PVH2_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - PH"]
            #[inline(always)]
            pub fn ph(&self) -> PH_R {
                PH_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - RH"]
            #[inline(always)]
            pub fn rh(&self) -> RH_R {
                RH_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - PVH"]
            #[inline(always)]
            pub fn pvh(&self) -> PVH_R {
                PVH_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - PVH2"]
            #[inline(always)]
            pub fn pvh2(&self) -> PVH2_R {
                PVH2_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_eh_seq](flash_eh_seq) module"]
    pub type FLASH_EH_SEQ = crate::Reg<u32, _FLASH_EH_SEQ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_EH_SEQ;
    #[doc = "`read()` method returns [flash_eh_seq::R](flash_eh_seq::R) reader structure"]
    impl crate::Readable for FLASH_EH_SEQ {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_eh_seq {
        #[doc = "Reader of register FLASH_EH_SEQ"]
        pub type R = crate::R<u32, super::FLASH_EH_SEQ>;
        #[doc = "Reader of field `EH`"]
        pub type EH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SEQ`"]
        pub type SEQ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VSTAT`"]
        pub type VSTAT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SM_FREQUENCY`"]
        pub type SM_FREQUENCY_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 24:31 - EH"]
            #[inline(always)]
            pub fn eh(&self) -> EH_R {
                EH_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - SEQ"]
            #[inline(always)]
            pub fn seq(&self) -> SEQ_R {
                SEQ_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 12:15 - VSTAT"]
            #[inline(always)]
            pub fn vstat(&self) -> VSTAT_R {
                VSTAT_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 0:11 - SM_FREQUENCY"]
            #[inline(always)]
            pub fn sm_frequency(&self) -> SM_FREQUENCY_R {
                SM_FREQUENCY_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_vhv_e](flash_vhv_e) module"]
    pub type FLASH_VHV_E = crate::Reg<u32, _FLASH_VHV_E>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_VHV_E;
    #[doc = "`read()` method returns [flash_vhv_e::R](flash_vhv_e::R) reader structure"]
    impl crate::Readable for FLASH_VHV_E {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_vhv_e {
        #[doc = "Reader of register FLASH_VHV_E"]
        pub type R = crate::R<u32, super::FLASH_VHV_E>;
        #[doc = "Reader of field `VHV_E_START`"]
        pub type VHV_E_START_R = crate::R<u16, u16>;
        #[doc = "Reader of field `VHV_E_STEP_HIGHT`"]
        pub type VHV_E_STEP_HIGHT_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - VHV_E_START"]
            #[inline(always)]
            pub fn vhv_e_start(&self) -> VHV_E_START_R {
                VHV_E_START_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - VHV_E_STEP_HIGHT"]
            #[inline(always)]
            pub fn vhv_e_step_hight(&self) -> VHV_E_STEP_HIGHT_R {
                VHV_E_STEP_HIGHT_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_pp](flash_pp) module"]
    pub type FLASH_PP = crate::Reg<u32, _FLASH_PP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_PP;
    #[doc = "`read()` method returns [flash_pp::R](flash_pp::R) reader structure"]
    impl crate::Readable for FLASH_PP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_pp {
        #[doc = "Reader of register FLASH_PP"]
        pub type R = crate::R<u32, super::FLASH_PP>;
        #[doc = "Reader of field `PUMP_SU`"]
        pub type PUMP_SU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MAX_PP`"]
        pub type MAX_PP_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 24:31 - PUMP_SU"]
            #[inline(always)]
            pub fn pump_su(&self) -> PUMP_SU_R {
                PUMP_SU_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 0:15 - MAX_PP"]
            #[inline(always)]
            pub fn max_pp(&self) -> MAX_PP_R {
                MAX_PP_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_prog_ep](flash_prog_ep) module"]
    pub type FLASH_PROG_EP = crate::Reg<u32, _FLASH_PROG_EP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_PROG_EP;
    #[doc = "`read()` method returns [flash_prog_ep::R](flash_prog_ep::R) reader structure"]
    impl crate::Readable for FLASH_PROG_EP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_prog_ep {
        #[doc = "Reader of register FLASH_PROG_EP"]
        pub type R = crate::R<u32, super::FLASH_PROG_EP>;
        #[doc = "Reader of field `MAX_EP`"]
        pub type MAX_EP_R = crate::R<u16, u16>;
        #[doc = "Reader of field `PROGRAM_PW`"]
        pub type PROGRAM_PW_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - MAX_EP"]
            #[inline(always)]
            pub fn max_ep(&self) -> MAX_EP_R {
                MAX_EP_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - PROGRAM_PW"]
            #[inline(always)]
            pub fn program_pw(&self) -> PROGRAM_PW_R {
                PROGRAM_PW_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_era_pw](flash_era_pw) module"]
    pub type FLASH_ERA_PW = crate::Reg<u32, _FLASH_ERA_PW>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_ERA_PW;
    #[doc = "`read()` method returns [flash_era_pw::R](flash_era_pw::R) reader structure"]
    impl crate::Readable for FLASH_ERA_PW {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_era_pw {
        #[doc = "Reader of register FLASH_ERA_PW"]
        pub type R = crate::R<u32, super::FLASH_ERA_PW>;
        #[doc = "Reader of field `ERASE_PW`"]
        pub type ERASE_PW_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ERASE_PW"]
            #[inline(always)]
            pub fn erase_pw(&self) -> ERASE_PW_R {
                ERASE_PW_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_vhv](flash_vhv) module"]
    pub type FLASH_VHV = crate::Reg<u32, _FLASH_VHV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_VHV;
    #[doc = "`read()` method returns [flash_vhv::R](flash_vhv::R) reader structure"]
    impl crate::Readable for FLASH_VHV {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_vhv {
        #[doc = "Reader of register FLASH_VHV"]
        pub type R = crate::R<u32, super::FLASH_VHV>;
        #[doc = "Reader of field `TRIM13_P`"]
        pub type TRIM13_P_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VHV_P`"]
        pub type VHV_P_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIM13_E`"]
        pub type TRIM13_E_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VHV_E`"]
        pub type VHV_E_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:27 - TRIM13_P"]
            #[inline(always)]
            pub fn trim13_p(&self) -> TRIM13_P_R {
                TRIM13_P_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - VHV_P"]
            #[inline(always)]
            pub fn vhv_p(&self) -> VHV_P_R {
                VHV_P_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - TRIM13_E"]
            #[inline(always)]
            pub fn trim13_e(&self) -> TRIM13_E_R {
                TRIM13_E_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - VHV_E"]
            #[inline(always)]
            pub fn vhv_e(&self) -> VHV_E_R {
                VHV_E_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_vhv_pv](flash_vhv_pv) module"]
    pub type FLASH_VHV_PV = crate::Reg<u32, _FLASH_VHV_PV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_VHV_PV;
    #[doc = "`read()` method returns [flash_vhv_pv::R](flash_vhv_pv::R) reader structure"]
    impl crate::Readable for FLASH_VHV_PV {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_vhv_pv {
        #[doc = "Reader of register FLASH_VHV_PV"]
        pub type R = crate::R<u32, super::FLASH_VHV_PV>;
        #[doc = "Reader of field `TRIM13_PV`"]
        pub type TRIM13_PV_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VHV_PV`"]
        pub type VHV_PV_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VCG2P5`"]
        pub type VCG2P5_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VINH`"]
        pub type VINH_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:27 - TRIM13_PV"]
            #[inline(always)]
            pub fn trim13_pv(&self) -> TRIM13_PV_R {
                TRIM13_PV_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - VHV_PV"]
            #[inline(always)]
            pub fn vhv_pv(&self) -> VHV_PV_R {
                VHV_PV_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - VCG2P5"]
            #[inline(always)]
            pub fn vcg2p5(&self) -> VCG2P5_R {
                VCG2P5_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VINH"]
            #[inline(always)]
            pub fn vinh(&self) -> VINH_R {
                VINH_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_v](flash_v) module"]
    pub type FLASH_V = crate::Reg<u32, _FLASH_V>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_V;
    #[doc = "`read()` method returns [flash_v::R](flash_v::R) reader structure"]
    impl crate::Readable for FLASH_V {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_v {
        #[doc = "Reader of register FLASH_V"]
        pub type R = crate::R<u32, super::FLASH_V>;
        #[doc = "Reader of field `VSL_P`"]
        pub type VSL_P_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VWL_P`"]
        pub type VWL_P_R = crate::R<u8, u8>;
        #[doc = "Reader of field `V_READ`"]
        pub type V_READ_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - VSL_P"]
            #[inline(always)]
            pub fn vsl_p(&self) -> VSL_P_R {
                VSL_P_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - VWL_P"]
            #[inline(always)]
            pub fn vwl_p(&self) -> VWL_P_R {
                VWL_P_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - V_READ"]
            #[inline(always)]
            pub fn v_read(&self) -> V_READ_R {
                V_READ_R::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
    }
    #[doc = "User Identification. Reading this register or the ICEPICK_DEVICE_ID register is the only support way of identifying a device. The value of this register will be written to AON_WUC:JTAGUSERCODE by boot FW while in safezone.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [user_id](user_id) module"]
    pub type USER_ID = crate::Reg<u32, _USER_ID>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _USER_ID;
    #[doc = "`read()` method returns [user_id::R](user_id::R) reader structure"]
    impl crate::Readable for USER_ID {}
    #[doc = "User Identification. Reading this register or the ICEPICK_DEVICE_ID register is the only support way of identifying a device. The value of this register will be written to AON_WUC:JTAGUSERCODE by boot FW while in safezone."]
    pub mod user_id {
        #[doc = "Reader of register USER_ID"]
        pub type R = crate::R<u32, super::USER_ID>;
        #[doc = "Reader of field `PG_REV`"]
        pub type PG_REV_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VER`"]
        pub type VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SEQUENCE`"]
        pub type SEQUENCE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PKG`"]
        pub type PKG_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PROTOCOL`"]
        pub type PROTOCOL_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - PG_REV"]
            #[inline(always)]
            pub fn pg_rev(&self) -> PG_REV_R {
                PG_REV_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 26:27 - VER"]
            #[inline(always)]
            pub fn ver(&self) -> VER_R {
                VER_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 19:22 - SEQUENCE"]
            #[inline(always)]
            pub fn sequence(&self) -> SEQUENCE_R {
                SEQUENCE_R::new(((self.bits >> 19) & 0x0f) as u8)
            }
            #[doc = "Bits 16:18 - PKG"]
            #[inline(always)]
            pub fn pkg(&self) -> PKG_R {
                PKG_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bits 12:15 - PROTOCOL"]
            #[inline(always)]
            pub fn protocol(&self) -> PROTOCOL_R {
                PROTOCOL_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_otp_data3](flash_otp_data3) module"]
    pub type FLASH_OTP_DATA3 = crate::Reg<u32, _FLASH_OTP_DATA3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_OTP_DATA3;
    #[doc = "`read()` method returns [flash_otp_data3::R](flash_otp_data3::R) reader structure"]
    impl crate::Readable for FLASH_OTP_DATA3 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_otp_data3 {
        #[doc = "Reader of register FLASH_OTP_DATA3"]
        pub type R = crate::R<u32, super::FLASH_OTP_DATA3>;
        #[doc = "Reader of field `EC_STEP_SIZE`"]
        pub type EC_STEP_SIZE_R = crate::R<u16, u16>;
        #[doc = "Reader of field `DO_PRECOND`"]
        pub type DO_PRECOND_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MAX_EC_LEVEL`"]
        pub type MAX_EC_LEVEL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIM_1P7`"]
        pub type TRIM_1P7_R = crate::R<u8, u8>;
        #[doc = "Reader of field `FLASH_SIZE`"]
        pub type FLASH_SIZE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `WAIT_SYSCODE`"]
        pub type WAIT_SYSCODE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 23:31 - EC_STEP_SIZE"]
            #[inline(always)]
            pub fn ec_step_size(&self) -> EC_STEP_SIZE_R {
                EC_STEP_SIZE_R::new(((self.bits >> 23) & 0x01ff) as u16)
            }
            #[doc = "Bit 22 - DO_PRECOND"]
            #[inline(always)]
            pub fn do_precond(&self) -> DO_PRECOND_R {
                DO_PRECOND_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 18:21 - MAX_EC_LEVEL"]
            #[inline(always)]
            pub fn max_ec_level(&self) -> MAX_EC_LEVEL_R {
                MAX_EC_LEVEL_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bits 16:17 - TRIM_1P7"]
            #[inline(always)]
            pub fn trim_1p7(&self) -> TRIM_1P7_R {
                TRIM_1P7_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 8:15 - FLASH_SIZE"]
            #[inline(always)]
            pub fn flash_size(&self) -> FLASH_SIZE_R {
                FLASH_SIZE_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - WAIT_SYSCODE"]
            #[inline(always)]
            pub fn wait_syscode(&self) -> WAIT_SYSCODE_R {
                WAIT_SYSCODE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ana2_trim](ana2_trim) module"]
    pub type ANA2_TRIM = crate::Reg<u32, _ANA2_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANA2_TRIM;
    #[doc = "`read()` method returns [ana2_trim::R](ana2_trim::R) reader structure"]
    impl crate::Readable for ANA2_TRIM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ana2_trim {
        #[doc = "Reader of register ANA2_TRIM"]
        pub type R = crate::R<u32, super::ANA2_TRIM>;
        #[doc = "Reader of field `RCOSCHFCTRIMFRACT_EN`"]
        pub type RCOSCHFCTRIMFRACT_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RCOSCHFCTRIMFRACT`"]
        pub type RCOSCHFCTRIMFRACT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SET_RCOSC_HF_FINE_RESISTOR`"]
        pub type SET_RCOSC_HF_FINE_RESISTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ATESTLF_UDIGLDO_IBIAS_TRIM`"]
        pub type ATESTLF_UDIGLDO_IBIAS_TRIM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `NANOAMP_RES_TRIM`"]
        pub type NANOAMP_RES_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DITHER_EN`"]
        pub type DITHER_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DCDC_IPEAK`"]
        pub type DCDC_IPEAK_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DEAD_TIME_TRIM`"]
        pub type DEAD_TIME_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DCDC_LOW_EN_SEL`"]
        pub type DCDC_LOW_EN_SEL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DCDC_HIGH_EN_SEL`"]
        pub type DCDC_HIGH_EN_SEL_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 31 - RCOSCHFCTRIMFRACT_EN"]
            #[inline(always)]
            pub fn rcoschfctrimfract_en(&self) -> RCOSCHFCTRIMFRACT_EN_R {
                RCOSCHFCTRIMFRACT_EN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bits 26:30 - RCOSCHFCTRIMFRACT"]
            #[inline(always)]
            pub fn rcoschfctrimfract(&self) -> RCOSCHFCTRIMFRACT_R {
                RCOSCHFCTRIMFRACT_R::new(((self.bits >> 26) & 0x1f) as u8)
            }
            #[doc = "Bits 23:24 - SET_RCOSC_HF_FINE_RESISTOR"]
            #[inline(always)]
            pub fn set_rcosc_hf_fine_resistor(&self) -> SET_RCOSC_HF_FINE_RESISTOR_R {
                SET_RCOSC_HF_FINE_RESISTOR_R::new(((self.bits >> 23) & 0x03) as u8)
            }
            #[doc = "Bit 22 - ATESTLF_UDIGLDO_IBIAS_TRIM"]
            #[inline(always)]
            pub fn atestlf_udigldo_ibias_trim(&self) -> ATESTLF_UDIGLDO_IBIAS_TRIM_R {
                ATESTLF_UDIGLDO_IBIAS_TRIM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 16:21 - NANOAMP_RES_TRIM"]
            #[inline(always)]
            pub fn nanoamp_res_trim(&self) -> NANOAMP_RES_TRIM_R {
                NANOAMP_RES_TRIM_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bit 11 - DITHER_EN"]
            #[inline(always)]
            pub fn dither_en(&self) -> DITHER_EN_R {
                DITHER_EN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 8:10 - DCDC_IPEAK"]
            #[inline(always)]
            pub fn dcdc_ipeak(&self) -> DCDC_IPEAK_R {
                DCDC_IPEAK_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 6:7 - DEAD_TIME_TRIM"]
            #[inline(always)]
            pub fn dead_time_trim(&self) -> DEAD_TIME_TRIM_R {
                DEAD_TIME_TRIM_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 3:5 - DCDC_LOW_EN_SEL"]
            #[inline(always)]
            pub fn dcdc_low_en_sel(&self) -> DCDC_LOW_EN_SEL_R {
                DCDC_LOW_EN_SEL_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - DCDC_HIGH_EN_SEL"]
            #[inline(always)]
            pub fn dcdc_high_en_sel(&self) -> DCDC_HIGH_EN_SEL_R {
                DCDC_HIGH_EN_SEL_R::new((self.bits & 0x07) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ldo_trim](ldo_trim) module"]
    pub type LDO_TRIM = crate::Reg<u32, _LDO_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LDO_TRIM;
    #[doc = "`read()` method returns [ldo_trim::R](ldo_trim::R) reader structure"]
    impl crate::Readable for LDO_TRIM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ldo_trim {
        #[doc = "Reader of register LDO_TRIM"]
        pub type R = crate::R<u32, super::LDO_TRIM>;
        #[doc = "Reader of field `VDDR_TRIM_SLEEP`"]
        pub type VDDR_TRIM_SLEEP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `GLDO_CURSRC`"]
        pub type GLDO_CURSRC_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ITRIM_DIGLDO_LOAD`"]
        pub type ITRIM_DIGLDO_LOAD_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ITRIM_UDIGLDO`"]
        pub type ITRIM_UDIGLDO_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VTRIM_DELTA`"]
        pub type VTRIM_DELTA_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:28 - VDDR_TRIM_SLEEP"]
            #[inline(always)]
            pub fn vddr_trim_sleep(&self) -> VDDR_TRIM_SLEEP_R {
                VDDR_TRIM_SLEEP_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
            #[doc = "Bits 16:18 - GLDO_CURSRC"]
            #[inline(always)]
            pub fn gldo_cursrc(&self) -> GLDO_CURSRC_R {
                GLDO_CURSRC_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bits 11:12 - ITRIM_DIGLDO_LOAD"]
            #[inline(always)]
            pub fn itrim_digldo_load(&self) -> ITRIM_DIGLDO_LOAD_R {
                ITRIM_DIGLDO_LOAD_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 8:10 - ITRIM_UDIGLDO"]
            #[inline(always)]
            pub fn itrim_udigldo(&self) -> ITRIM_UDIGLDO_R {
                ITRIM_UDIGLDO_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - VTRIM_DELTA"]
            #[inline(always)]
            pub fn vtrim_delta(&self) -> VTRIM_DELTA_R {
                VTRIM_DELTA_R::new((self.bits & 0x07) as u8)
            }
        }
    }
    #[doc = "MAC BLE Address 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mac_ble_0](mac_ble_0) module"]
    pub type MAC_BLE_0 = crate::Reg<u32, _MAC_BLE_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MAC_BLE_0;
    #[doc = "`read()` method returns [mac_ble_0::R](mac_ble_0::R) reader structure"]
    impl crate::Readable for MAC_BLE_0 {}
    #[doc = "MAC BLE Address 0"]
    pub mod mac_ble_0 {
        #[doc = "Reader of register MAC_BLE_0"]
        pub type R = crate::R<u32, super::MAC_BLE_0>;
        #[doc = "Reader of field `ADDR_0_31`"]
        pub type ADDR_0_31_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR_0_31"]
            #[inline(always)]
            pub fn addr_0_31(&self) -> ADDR_0_31_R {
                ADDR_0_31_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "MAC BLE Address 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mac_ble_1](mac_ble_1) module"]
    pub type MAC_BLE_1 = crate::Reg<u32, _MAC_BLE_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MAC_BLE_1;
    #[doc = "`read()` method returns [mac_ble_1::R](mac_ble_1::R) reader structure"]
    impl crate::Readable for MAC_BLE_1 {}
    #[doc = "MAC BLE Address 1"]
    pub mod mac_ble_1 {
        #[doc = "Reader of register MAC_BLE_1"]
        pub type R = crate::R<u32, super::MAC_BLE_1>;
        #[doc = "Reader of field `ADDR_32_63`"]
        pub type ADDR_32_63_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR_32_63"]
            #[inline(always)]
            pub fn addr_32_63(&self) -> ADDR_32_63_R {
                ADDR_32_63_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "MAC IEEE 802.15.4 Address 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mac_15_4_0](mac_15_4_0) module"]
    pub type MAC_15_4_0 = crate::Reg<u32, _MAC_15_4_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MAC_15_4_0;
    #[doc = "`read()` method returns [mac_15_4_0::R](mac_15_4_0::R) reader structure"]
    impl crate::Readable for MAC_15_4_0 {}
    #[doc = "MAC IEEE 802.15.4 Address 0"]
    pub mod mac_15_4_0 {
        #[doc = "Reader of register MAC_15_4_0"]
        pub type R = crate::R<u32, super::MAC_15_4_0>;
        #[doc = "Reader of field `ADDR_0_31`"]
        pub type ADDR_0_31_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR_0_31"]
            #[inline(always)]
            pub fn addr_0_31(&self) -> ADDR_0_31_R {
                ADDR_0_31_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "MAC IEEE 802.15.4 Address 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mac_15_4_1](mac_15_4_1) module"]
    pub type MAC_15_4_1 = crate::Reg<u32, _MAC_15_4_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MAC_15_4_1;
    #[doc = "`read()` method returns [mac_15_4_1::R](mac_15_4_1::R) reader structure"]
    impl crate::Readable for MAC_15_4_1 {}
    #[doc = "MAC IEEE 802.15.4 Address 1"]
    pub mod mac_15_4_1 {
        #[doc = "Reader of register MAC_15_4_1"]
        pub type R = crate::R<u32, super::MAC_15_4_1>;
        #[doc = "Reader of field `ADDR_32_63`"]
        pub type ADDR_32_63_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - ADDR_32_63"]
            #[inline(always)]
            pub fn addr_32_63(&self) -> ADDR_32_63_R {
                ADDR_32_63_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_otp_data4](flash_otp_data4) module"]
    pub type FLASH_OTP_DATA4 = crate::Reg<u32, _FLASH_OTP_DATA4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_OTP_DATA4;
    #[doc = "`read()` method returns [flash_otp_data4::R](flash_otp_data4::R) reader structure"]
    impl crate::Readable for FLASH_OTP_DATA4 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_otp_data4 {
        #[doc = "Reader of register FLASH_OTP_DATA4"]
        pub type R = crate::R<u32, super::FLASH_OTP_DATA4>;
        #[doc = "Reader of field `STANDBY_MODE_SEL_INT_WRT`"]
        pub type STANDBY_MODE_SEL_INT_WRT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STANDBY_PW_SEL_INT_WRT`"]
        pub type STANDBY_PW_SEL_INT_WRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DIS_STANDBY_INT_WRT`"]
        pub type DIS_STANDBY_INT_WRT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIS_IDLE_INT_WRT`"]
        pub type DIS_IDLE_INT_WRT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VIN_AT_X_INT_WRT`"]
        pub type VIN_AT_X_INT_WRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `STANDBY_MODE_SEL_EXT_WRT`"]
        pub type STANDBY_MODE_SEL_EXT_WRT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STANDBY_PW_SEL_EXT_WRT`"]
        pub type STANDBY_PW_SEL_EXT_WRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DIS_STANDBY_EXT_WRT`"]
        pub type DIS_STANDBY_EXT_WRT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIS_IDLE_EXT_WRT`"]
        pub type DIS_IDLE_EXT_WRT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VIN_AT_X_EXT_WRT`"]
        pub type VIN_AT_X_EXT_WRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `STANDBY_MODE_SEL_INT_RD`"]
        pub type STANDBY_MODE_SEL_INT_RD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STANDBY_PW_SEL_INT_RD`"]
        pub type STANDBY_PW_SEL_INT_RD_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DIS_STANDBY_INT_RD`"]
        pub type DIS_STANDBY_INT_RD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIS_IDLE_INT_RD`"]
        pub type DIS_IDLE_INT_RD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VIN_AT_X_INT_RD`"]
        pub type VIN_AT_X_INT_RD_R = crate::R<u8, u8>;
        #[doc = "Reader of field `STANDBY_MODE_SEL_EXT_RD`"]
        pub type STANDBY_MODE_SEL_EXT_RD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STANDBY_PW_SEL_EXT_RD`"]
        pub type STANDBY_PW_SEL_EXT_RD_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DIS_STANDBY_EXT_RD`"]
        pub type DIS_STANDBY_EXT_RD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIS_IDLE_EXT_RD`"]
        pub type DIS_IDLE_EXT_RD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VIN_AT_X_EXT_RD`"]
        pub type VIN_AT_X_EXT_RD_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 31 - STANDBY_MODE_SEL_INT_WRT"]
            #[inline(always)]
            pub fn standby_mode_sel_int_wrt(&self) -> STANDBY_MODE_SEL_INT_WRT_R {
                STANDBY_MODE_SEL_INT_WRT_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bits 29:30 - STANDBY_PW_SEL_INT_WRT"]
            #[inline(always)]
            pub fn standby_pw_sel_int_wrt(&self) -> STANDBY_PW_SEL_INT_WRT_R {
                STANDBY_PW_SEL_INT_WRT_R::new(((self.bits >> 29) & 0x03) as u8)
            }
            #[doc = "Bit 28 - DIS_STANDBY_INT_WRT"]
            #[inline(always)]
            pub fn dis_standby_int_wrt(&self) -> DIS_STANDBY_INT_WRT_R {
                DIS_STANDBY_INT_WRT_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DIS_IDLE_INT_WRT"]
            #[inline(always)]
            pub fn dis_idle_int_wrt(&self) -> DIS_IDLE_INT_WRT_R {
                DIS_IDLE_INT_WRT_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bits 24:26 - VIN_AT_X_INT_WRT"]
            #[inline(always)]
            pub fn vin_at_x_int_wrt(&self) -> VIN_AT_X_INT_WRT_R {
                VIN_AT_X_INT_WRT_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 23 - STANDBY_MODE_SEL_EXT_WRT"]
            #[inline(always)]
            pub fn standby_mode_sel_ext_wrt(&self) -> STANDBY_MODE_SEL_EXT_WRT_R {
                STANDBY_MODE_SEL_EXT_WRT_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - STANDBY_PW_SEL_EXT_WRT"]
            #[inline(always)]
            pub fn standby_pw_sel_ext_wrt(&self) -> STANDBY_PW_SEL_EXT_WRT_R {
                STANDBY_PW_SEL_EXT_WRT_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bit 20 - DIS_STANDBY_EXT_WRT"]
            #[inline(always)]
            pub fn dis_standby_ext_wrt(&self) -> DIS_STANDBY_EXT_WRT_R {
                DIS_STANDBY_EXT_WRT_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DIS_IDLE_EXT_WRT"]
            #[inline(always)]
            pub fn dis_idle_ext_wrt(&self) -> DIS_IDLE_EXT_WRT_R {
                DIS_IDLE_EXT_WRT_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bits 16:18 - VIN_AT_X_EXT_WRT"]
            #[inline(always)]
            pub fn vin_at_x_ext_wrt(&self) -> VIN_AT_X_EXT_WRT_R {
                VIN_AT_X_EXT_WRT_R::new(((self.bits >> 16) & 0x07) as u8)
            }
            #[doc = "Bit 15 - STANDBY_MODE_SEL_INT_RD"]
            #[inline(always)]
            pub fn standby_mode_sel_int_rd(&self) -> STANDBY_MODE_SEL_INT_RD_R {
                STANDBY_MODE_SEL_INT_RD_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 13:14 - STANDBY_PW_SEL_INT_RD"]
            #[inline(always)]
            pub fn standby_pw_sel_int_rd(&self) -> STANDBY_PW_SEL_INT_RD_R {
                STANDBY_PW_SEL_INT_RD_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - DIS_STANDBY_INT_RD"]
            #[inline(always)]
            pub fn dis_standby_int_rd(&self) -> DIS_STANDBY_INT_RD_R {
                DIS_STANDBY_INT_RD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DIS_IDLE_INT_RD"]
            #[inline(always)]
            pub fn dis_idle_int_rd(&self) -> DIS_IDLE_INT_RD_R {
                DIS_IDLE_INT_RD_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 8:10 - VIN_AT_X_INT_RD"]
            #[inline(always)]
            pub fn vin_at_x_int_rd(&self) -> VIN_AT_X_INT_RD_R {
                VIN_AT_X_INT_RD_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 7 - STANDBY_MODE_SEL_EXT_RD"]
            #[inline(always)]
            pub fn standby_mode_sel_ext_rd(&self) -> STANDBY_MODE_SEL_EXT_RD_R {
                STANDBY_MODE_SEL_EXT_RD_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - STANDBY_PW_SEL_EXT_RD"]
            #[inline(always)]
            pub fn standby_pw_sel_ext_rd(&self) -> STANDBY_PW_SEL_EXT_RD_R {
                STANDBY_PW_SEL_EXT_RD_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 4 - DIS_STANDBY_EXT_RD"]
            #[inline(always)]
            pub fn dis_standby_ext_rd(&self) -> DIS_STANDBY_EXT_RD_R {
                DIS_STANDBY_EXT_RD_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIS_IDLE_EXT_RD"]
            #[inline(always)]
            pub fn dis_idle_ext_rd(&self) -> DIS_IDLE_EXT_RD_R {
                DIS_IDLE_EXT_RD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 0:2 - VIN_AT_X_EXT_RD"]
            #[inline(always)]
            pub fn vin_at_x_ext_rd(&self) -> VIN_AT_X_EXT_RD_R {
                VIN_AT_X_EXT_RD_R::new((self.bits & 0x07) as u8)
            }
        }
    }
    #[doc = "Miscellaneous Trim Parameters\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misc_trim](misc_trim) module"]
    pub type MISC_TRIM = crate::Reg<u32, _MISC_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MISC_TRIM;
    #[doc = "`read()` method returns [misc_trim::R](misc_trim::R) reader structure"]
    impl crate::Readable for MISC_TRIM {}
    #[doc = "Miscellaneous Trim Parameters"]
    pub mod misc_trim {
        #[doc = "Reader of register MISC_TRIM"]
        pub type R = crate::R<u32, super::MISC_TRIM>;
        #[doc = "Reader of field `TEMPVSLOPE`"]
        pub type TEMPVSLOPE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - TEMPVSLOPE"]
            #[inline(always)]
            pub fn tempvslope(&self) -> TEMPVSLOPE_R {
                TEMPVSLOPE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcosc_hf_tempcomp](rcosc_hf_tempcomp) module"]
    pub type RCOSC_HF_TEMPCOMP = crate::Reg<u32, _RCOSC_HF_TEMPCOMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCOSC_HF_TEMPCOMP;
    #[doc = "`read()` method returns [rcosc_hf_tempcomp::R](rcosc_hf_tempcomp::R) reader structure"]
    impl crate::Readable for RCOSC_HF_TEMPCOMP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod rcosc_hf_tempcomp {
        #[doc = "Reader of register RCOSC_HF_TEMPCOMP"]
        pub type R = crate::R<u32, super::RCOSC_HF_TEMPCOMP>;
        #[doc = "Reader of field `FINE_RESISTOR`"]
        pub type FINE_RESISTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTRIM`"]
        pub type CTRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTRIMFRACT_QUAD`"]
        pub type CTRIMFRACT_QUAD_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTRIMFRACT_SLOPE`"]
        pub type CTRIMFRACT_SLOPE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - FINE_RESISTOR"]
            #[inline(always)]
            pub fn fine_resistor(&self) -> FINE_RESISTOR_R {
                FINE_RESISTOR_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - CTRIM"]
            #[inline(always)]
            pub fn ctrim(&self) -> CTRIM_R {
                CTRIM_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - CTRIMFRACT_QUAD"]
            #[inline(always)]
            pub fn ctrimfract_quad(&self) -> CTRIMFRACT_QUAD_R {
                CTRIMFRACT_QUAD_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - CTRIMFRACT_SLOPE"]
            #[inline(always)]
            pub fn ctrimfract_slope(&self) -> CTRIMFRACT_SLOPE_R {
                CTRIMFRACT_SLOPE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "IcePick Device Identification Reading this register or the USER_ID register is the only support way of identifying a device.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icepick_device_id](icepick_device_id) module"]
    pub type ICEPICK_DEVICE_ID = crate::Reg<u32, _ICEPICK_DEVICE_ID>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICEPICK_DEVICE_ID;
    #[doc = "`read()` method returns [icepick_device_id::R](icepick_device_id::R) reader structure"]
    impl crate::Readable for ICEPICK_DEVICE_ID {}
    #[doc = "IcePick Device Identification Reading this register or the USER_ID register is the only support way of identifying a device."]
    pub mod icepick_device_id {
        #[doc = "Reader of register ICEPICK_DEVICE_ID"]
        pub type R = crate::R<u32, super::ICEPICK_DEVICE_ID>;
        #[doc = "Reader of field `PG_REV`"]
        pub type PG_REV_R = crate::R<u8, u8>;
        #[doc = "Reader of field `WAFER_ID`"]
        pub type WAFER_ID_R = crate::R<u16, u16>;
        #[doc = "Reader of field `MANUFACTURER_ID`"]
        pub type MANUFACTURER_ID_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 28:31 - PG_REV"]
            #[inline(always)]
            pub fn pg_rev(&self) -> PG_REV_R {
                PG_REV_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 12:27 - WAFER_ID"]
            #[inline(always)]
            pub fn wafer_id(&self) -> WAFER_ID_R {
                WAFER_ID_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 0:11 - MANUFACTURER_ID"]
            #[inline(always)]
            pub fn manufacturer_id(&self) -> MANUFACTURER_ID_R {
                MANUFACTURER_ID_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Factory Configuration (FCFG1) Revision\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg1_revision](fcfg1_revision) module"]
    pub type FCFG1_REVISION = crate::Reg<u32, _FCFG1_REVISION>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG1_REVISION;
    #[doc = "`read()` method returns [fcfg1_revision::R](fcfg1_revision::R) reader structure"]
    impl crate::Readable for FCFG1_REVISION {}
    #[doc = "Factory Configuration (FCFG1) Revision"]
    pub mod fcfg1_revision {
        #[doc = "Reader of register FCFG1_REVISION"]
        pub type R = crate::R<u32, super::FCFG1_REVISION>;
        #[doc = "Reader of field `REV`"]
        pub type REV_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - REV"]
            #[inline(always)]
            pub fn rev(&self) -> REV_R {
                REV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Misc OTP Data\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misc_otp_data](misc_otp_data) module"]
    pub type MISC_OTP_DATA = crate::Reg<u32, _MISC_OTP_DATA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MISC_OTP_DATA;
    #[doc = "`read()` method returns [misc_otp_data::R](misc_otp_data::R) reader structure"]
    impl crate::Readable for MISC_OTP_DATA {}
    #[doc = "Misc OTP Data"]
    pub mod misc_otp_data {
        #[doc = "Reader of register MISC_OTP_DATA"]
        pub type R = crate::R<u32, super::MISC_OTP_DATA>;
        #[doc = "Reader of field `RCOSC_HF_ITUNE`"]
        pub type RCOSC_HF_ITUNE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RCOSC_HF_CRIM`"]
        pub type RCOSC_HF_CRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PER_M`"]
        pub type PER_M_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PER_E`"]
        pub type PER_E_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PO_TAIL_RES_TRIM`"]
        pub type PO_TAIL_RES_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TEST_PROGRAM_REV`"]
        pub type TEST_PROGRAM_REV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - RCOSC_HF_ITUNE"]
            #[inline(always)]
            pub fn rcosc_hf_itune(&self) -> RCOSC_HF_ITUNE_R {
                RCOSC_HF_ITUNE_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 20:27 - RCOSC_HF_CRIM"]
            #[inline(always)]
            pub fn rcosc_hf_crim(&self) -> RCOSC_HF_CRIM_R {
                RCOSC_HF_CRIM_R::new(((self.bits >> 20) & 0xff) as u8)
            }
            #[doc = "Bits 15:19 - PER_M"]
            #[inline(always)]
            pub fn per_m(&self) -> PER_M_R {
                PER_M_R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 12:14 - PER_E"]
            #[inline(always)]
            pub fn per_e(&self) -> PER_E_R {
                PER_E_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - PO_TAIL_RES_TRIM"]
            #[inline(always)]
            pub fn po_tail_res_trim(&self) -> PO_TAIL_RES_TRIM_R {
                PO_TAIL_RES_TRIM_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 0:7 - TEST_PROGRAM_REV"]
            #[inline(always)]
            pub fn test_program_rev(&self) -> TEST_PROGRAM_REV_R {
                TEST_PROGRAM_REV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "IO Configuration\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ioconf](ioconf) module"]
    pub type IOCONF = crate::Reg<u32, _IOCONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCONF;
    #[doc = "`read()` method returns [ioconf::R](ioconf::R) reader structure"]
    impl crate::Readable for IOCONF {}
    #[doc = "IO Configuration"]
    pub mod ioconf {
        #[doc = "Reader of register IOCONF"]
        pub type R = crate::R<u32, super::IOCONF>;
        #[doc = "Reader of field `GPIO_CNT`"]
        pub type GPIO_CNT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:6 - GPIO_CNT"]
            #[inline(always)]
            pub fn gpio_cnt(&self) -> GPIO_CNT_R {
                GPIO_CNT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_if_adc](config_if_adc) module"]
    pub type CONFIG_IF_ADC = crate::Reg<u32, _CONFIG_IF_ADC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_IF_ADC;
    #[doc = "`read()` method returns [config_if_adc::R](config_if_adc::R) reader structure"]
    impl crate::Readable for CONFIG_IF_ADC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_if_adc {
        #[doc = "Reader of register CONFIG_IF_ADC"]
        pub type R = crate::R<u32, super::CONFIG_IF_ADC>;
        #[doc = "Reader of field `FF2ADJ`"]
        pub type FF2ADJ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `FF3ADJ`"]
        pub type FF3ADJ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `INT3ADJ`"]
        pub type INT3ADJ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `FF1ADJ`"]
        pub type FF1ADJ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `AAFCAP`"]
        pub type AAFCAP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `INT2ADJ`"]
        pub type INT2ADJ_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFDIGLDO_TRIM_OUTPUT`"]
        pub type IFDIGLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFANALDO_TRIM_OUTPUT`"]
        pub type IFANALDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - FF2ADJ"]
            #[inline(always)]
            pub fn ff2adj(&self) -> FF2ADJ_R {
                FF2ADJ_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - FF3ADJ"]
            #[inline(always)]
            pub fn ff3adj(&self) -> FF3ADJ_R {
                FF3ADJ_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - INT3ADJ"]
            #[inline(always)]
            pub fn int3adj(&self) -> INT3ADJ_R {
                INT3ADJ_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - FF1ADJ"]
            #[inline(always)]
            pub fn ff1adj(&self) -> FF1ADJ_R {
                FF1ADJ_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 14:15 - AAFCAP"]
            #[inline(always)]
            pub fn aafcap(&self) -> AAFCAP_R {
                AAFCAP_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 10:13 - INT2ADJ"]
            #[inline(always)]
            pub fn int2adj(&self) -> INT2ADJ_R {
                INT2ADJ_R::new(((self.bits >> 10) & 0x0f) as u8)
            }
            #[doc = "Bits 5:9 - IFDIGLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ifdigldo_trim_output(&self) -> IFDIGLDO_TRIM_OUTPUT_R {
                IFDIGLDO_TRIM_OUTPUT_R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - IFANALDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ifanaldo_trim_output(&self) -> IFANALDO_TRIM_OUTPUT_R {
                IFANALDO_TRIM_OUTPUT_R::new((self.bits & 0x1f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_osc_top](config_osc_top) module"]
    pub type CONFIG_OSC_TOP = crate::Reg<u32, _CONFIG_OSC_TOP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_OSC_TOP;
    #[doc = "`read()` method returns [config_osc_top::R](config_osc_top::R) reader structure"]
    impl crate::Readable for CONFIG_OSC_TOP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_osc_top {
        #[doc = "Reader of register CONFIG_OSC_TOP"]
        pub type R = crate::R<u32, super::CONFIG_OSC_TOP>;
        #[doc = "Reader of field `XOSC_HF_ROW_Q12`"]
        pub type XOSC_HF_ROW_Q12_R = crate::R<u8, u8>;
        #[doc = "Reader of field `XOSC_HF_COLUMN_Q12`"]
        pub type XOSC_HF_COLUMN_Q12_R = crate::R<u16, u16>;
        #[doc = "Reader of field `RCOSCLF_CTUNE_TRIM`"]
        pub type RCOSCLF_CTUNE_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `RCOSCLF_RTUNE_TRIM`"]
        pub type RCOSCLF_RTUNE_TRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 26:29 - XOSC_HF_ROW_Q12"]
            #[inline(always)]
            pub fn xosc_hf_row_q12(&self) -> XOSC_HF_ROW_Q12_R {
                XOSC_HF_ROW_Q12_R::new(((self.bits >> 26) & 0x0f) as u8)
            }
            #[doc = "Bits 10:25 - XOSC_HF_COLUMN_Q12"]
            #[inline(always)]
            pub fn xosc_hf_column_q12(&self) -> XOSC_HF_COLUMN_Q12_R {
                XOSC_HF_COLUMN_Q12_R::new(((self.bits >> 10) & 0xffff) as u16)
            }
            #[doc = "Bits 2:9 - RCOSCLF_CTUNE_TRIM"]
            #[inline(always)]
            pub fn rcosclf_ctune_trim(&self) -> RCOSCLF_CTUNE_TRIM_R {
                RCOSCLF_CTUNE_TRIM_R::new(((self.bits >> 2) & 0xff) as u8)
            }
            #[doc = "Bits 0:1 - RCOSCLF_RTUNE_TRIM"]
            #[inline(always)]
            pub fn rcosclf_rtune_trim(&self) -> RCOSCLF_RTUNE_TRIM_R {
                RCOSCLF_RTUNE_TRIM_R::new((self.bits & 0x03) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_rf_frontend](config_rf_frontend) module"]
    pub type CONFIG_RF_FRONTEND = crate::Reg<u32, _CONFIG_RF_FRONTEND>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_RF_FRONTEND;
    #[doc = "`read()` method returns [config_rf_frontend::R](config_rf_frontend::R) reader structure"]
    impl crate::Readable for CONFIG_RF_FRONTEND {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_rf_frontend {
        #[doc = "Reader of register CONFIG_RF_FRONTEND"]
        pub type R = crate::R<u32, super::CONFIG_RF_FRONTEND>;
        #[doc = "Reader of field `IFAMP_IB`"]
        pub type IFAMP_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LNA_IB`"]
        pub type LNA_IB_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IFAMP_TRIM`"]
        pub type IFAMP_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CTL_PA0_TRIM`"]
        pub type CTL_PA0_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PATRIMCOMPLETE_N`"]
        pub type PATRIMCOMPLETE_N_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RFLDO_TRIM_OUTPUT`"]
        pub type RFLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - IFAMP_IB"]
            #[inline(always)]
            pub fn ifamp_ib(&self) -> IFAMP_IB_R {
                IFAMP_IB_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - LNA_IB"]
            #[inline(always)]
            pub fn lna_ib(&self) -> LNA_IB_R {
                LNA_IB_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 19:23 - IFAMP_TRIM"]
            #[inline(always)]
            pub fn ifamp_trim(&self) -> IFAMP_TRIM_R {
                IFAMP_TRIM_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 14:18 - CTL_PA0_TRIM"]
            #[inline(always)]
            pub fn ctl_pa0_trim(&self) -> CTL_PA0_TRIM_R {
                CTL_PA0_TRIM_R::new(((self.bits >> 14) & 0x1f) as u8)
            }
            #[doc = "Bit 13 - PATRIMCOMPLETE_N"]
            #[inline(always)]
            pub fn patrimcomplete_n(&self) -> PATRIMCOMPLETE_N_R {
                PATRIMCOMPLETE_N_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - RFLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn rfldo_trim_output(&self) -> RFLDO_TRIM_OUTPUT_R {
                RFLDO_TRIM_OUTPUT_R::new((self.bits & 0x7f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_synth](config_synth) module"]
    pub type CONFIG_SYNTH = crate::Reg<u32, _CONFIG_SYNTH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_SYNTH;
    #[doc = "`read()` method returns [config_synth::R](config_synth::R) reader structure"]
    impl crate::Readable for CONFIG_SYNTH {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_synth {
        #[doc = "Reader of register CONFIG_SYNTH"]
        pub type R = crate::R<u32, super::CONFIG_SYNTH>;
        #[doc = "Reader of field `RFC_MDM_DEMIQMC0`"]
        pub type RFC_MDM_DEMIQMC0_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LDOVCO_TRIM_OUTPUT`"]
        pub type LDOVCO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SLDO_TRIM_OUTPUT`"]
        pub type SLDO_TRIM_OUTPUT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 12:27 - RFC_MDM_DEMIQMC0"]
            #[inline(always)]
            pub fn rfc_mdm_demiqmc0(&self) -> RFC_MDM_DEMIQMC0_R {
                RFC_MDM_DEMIQMC0_R::new(((self.bits >> 12) & 0xffff) as u16)
            }
            #[doc = "Bits 6:11 - LDOVCO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn ldovco_trim_output(&self) -> LDOVCO_TRIM_OUTPUT_R {
                LDOVCO_TRIM_OUTPUT_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
            #[doc = "Bits 0:5 - SLDO_TRIM_OUTPUT"]
            #[inline(always)]
            pub fn sldo_trim_output(&self) -> SLDO_TRIM_OUTPUT_R {
                SLDO_TRIM_OUTPUT_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "AUX_ADC Gain in Absolute Reference Mode\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [soc_adc_abs_gain](soc_adc_abs_gain) module"]
    pub type SOC_ADC_ABS_GAIN = crate::Reg<u32, _SOC_ADC_ABS_GAIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOC_ADC_ABS_GAIN;
    #[doc = "`read()` method returns [soc_adc_abs_gain::R](soc_adc_abs_gain::R) reader structure"]
    impl crate::Readable for SOC_ADC_ABS_GAIN {}
    #[doc = "AUX_ADC Gain in Absolute Reference Mode"]
    pub mod soc_adc_abs_gain {
        #[doc = "Reader of register SOC_ADC_ABS_GAIN"]
        pub type R = crate::R<u32, super::SOC_ADC_ABS_GAIN>;
        #[doc = "Reader of field `SOC_ADC_ABS_GAIN_TEMP1`"]
        pub type SOC_ADC_ABS_GAIN_TEMP1_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - SOC_ADC_ABS_GAIN_TEMP1"]
            #[inline(always)]
            pub fn soc_adc_abs_gain_temp1(&self) -> SOC_ADC_ABS_GAIN_TEMP1_R {
                SOC_ADC_ABS_GAIN_TEMP1_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "AUX_ADC Gain in Relative Reference Mode\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [soc_adc_rel_gain](soc_adc_rel_gain) module"]
    pub type SOC_ADC_REL_GAIN = crate::Reg<u32, _SOC_ADC_REL_GAIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOC_ADC_REL_GAIN;
    #[doc = "`read()` method returns [soc_adc_rel_gain::R](soc_adc_rel_gain::R) reader structure"]
    impl crate::Readable for SOC_ADC_REL_GAIN {}
    #[doc = "AUX_ADC Gain in Relative Reference Mode"]
    pub mod soc_adc_rel_gain {
        #[doc = "Reader of register SOC_ADC_REL_GAIN"]
        pub type R = crate::R<u32, super::SOC_ADC_REL_GAIN>;
        #[doc = "Reader of field `SOC_ADC_REL_GAIN_TEMP1`"]
        pub type SOC_ADC_REL_GAIN_TEMP1_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - SOC_ADC_REL_GAIN_TEMP1"]
            #[inline(always)]
            pub fn soc_adc_rel_gain_temp1(&self) -> SOC_ADC_REL_GAIN_TEMP1_R {
                SOC_ADC_REL_GAIN_TEMP1_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "AUX_ADC Temperature Offsets in Absolute Reference Mode\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [soc_adc_offset_int](soc_adc_offset_int) module"]
    pub type SOC_ADC_OFFSET_INT = crate::Reg<u32, _SOC_ADC_OFFSET_INT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOC_ADC_OFFSET_INT;
    #[doc = "`read()` method returns [soc_adc_offset_int::R](soc_adc_offset_int::R) reader structure"]
    impl crate::Readable for SOC_ADC_OFFSET_INT {}
    #[doc = "AUX_ADC Temperature Offsets in Absolute Reference Mode"]
    pub mod soc_adc_offset_int {
        #[doc = "Reader of register SOC_ADC_OFFSET_INT"]
        pub type R = crate::R<u32, super::SOC_ADC_OFFSET_INT>;
        #[doc = "Reader of field `SOC_ADC_REL_OFFSET_TEMP1`"]
        pub type SOC_ADC_REL_OFFSET_TEMP1_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SOC_ADC_ABS_OFFSET_TEMP1`"]
        pub type SOC_ADC_ABS_OFFSET_TEMP1_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:23 - SOC_ADC_REL_OFFSET_TEMP1"]
            #[inline(always)]
            pub fn soc_adc_rel_offset_temp1(&self) -> SOC_ADC_REL_OFFSET_TEMP1_R {
                SOC_ADC_REL_OFFSET_TEMP1_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - SOC_ADC_ABS_OFFSET_TEMP1"]
            #[inline(always)]
            pub fn soc_adc_abs_offset_temp1(&self) -> SOC_ADC_ABS_OFFSET_TEMP1_R {
                SOC_ADC_ABS_OFFSET_TEMP1_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [soc_adc_ref_trim_and_offset_ext](soc_adc_ref_trim_and_offset_ext) module"]
    pub type SOC_ADC_REF_TRIM_AND_OFFSET_EXT = crate::Reg<u32, _SOC_ADC_REF_TRIM_AND_OFFSET_EXT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOC_ADC_REF_TRIM_AND_OFFSET_EXT;
    #[doc = "`read()` method returns [soc_adc_ref_trim_and_offset_ext::R](soc_adc_ref_trim_and_offset_ext::R) reader structure"]
    impl crate::Readable for SOC_ADC_REF_TRIM_AND_OFFSET_EXT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod soc_adc_ref_trim_and_offset_ext {
        #[doc = "Reader of register SOC_ADC_REF_TRIM_AND_OFFSET_EXT"]
        pub type R = crate::R<u32, super::SOC_ADC_REF_TRIM_AND_OFFSET_EXT>;
        #[doc = "Reader of field `SOC_ADC_REF_VOLTAGE_TRIM_TEMP1`"]
        pub type SOC_ADC_REF_VOLTAGE_TRIM_TEMP1_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:5 - SOC_ADC_REF_VOLTAGE_TRIM_TEMP1"]
            #[inline(always)]
            pub fn soc_adc_ref_voltage_trim_temp1(&self) -> SOC_ADC_REF_VOLTAGE_TRIM_TEMP1_R {
                SOC_ADC_REF_VOLTAGE_TRIM_TEMP1_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ampcomp_th1](ampcomp_th1) module"]
    pub type AMPCOMP_TH1 = crate::Reg<u32, _AMPCOMP_TH1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AMPCOMP_TH1;
    #[doc = "`read()` method returns [ampcomp_th1::R](ampcomp_th1::R) reader structure"]
    impl crate::Readable for AMPCOMP_TH1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ampcomp_th1 {
        #[doc = "Reader of register AMPCOMP_TH1"]
        pub type R = crate::R<u32, super::AMPCOMP_TH1>;
        #[doc = "Reader of field `HPMRAMP3_LTH`"]
        pub type HPMRAMP3_LTH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HPMRAMP3_HTH`"]
        pub type HPMRAMP3_HTH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IBIASCAP_LPTOHP_OL_CNT`"]
        pub type IBIASCAP_LPTOHP_OL_CNT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HPMRAMP1_TH`"]
        pub type HPMRAMP1_TH_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 18:23 - HPMRAMP3_LTH"]
            #[inline(always)]
            pub fn hpmramp3_lth(&self) -> HPMRAMP3_LTH_R {
                HPMRAMP3_LTH_R::new(((self.bits >> 18) & 0x3f) as u8)
            }
            #[doc = "Bits 10:15 - HPMRAMP3_HTH"]
            #[inline(always)]
            pub fn hpmramp3_hth(&self) -> HPMRAMP3_HTH_R {
                HPMRAMP3_HTH_R::new(((self.bits >> 10) & 0x3f) as u8)
            }
            #[doc = "Bits 6:9 - IBIASCAP_LPTOHP_OL_CNT"]
            #[inline(always)]
            pub fn ibiascap_lptohp_ol_cnt(&self) -> IBIASCAP_LPTOHP_OL_CNT_R {
                IBIASCAP_LPTOHP_OL_CNT_R::new(((self.bits >> 6) & 0x0f) as u8)
            }
            #[doc = "Bits 0:5 - HPMRAMP1_TH"]
            #[inline(always)]
            pub fn hpmramp1_th(&self) -> HPMRAMP1_TH_R {
                HPMRAMP1_TH_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ampcomp_th2](ampcomp_th2) module"]
    pub type AMPCOMP_TH2 = crate::Reg<u32, _AMPCOMP_TH2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AMPCOMP_TH2;
    #[doc = "`read()` method returns [ampcomp_th2::R](ampcomp_th2::R) reader structure"]
    impl crate::Readable for AMPCOMP_TH2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ampcomp_th2 {
        #[doc = "Reader of register AMPCOMP_TH2"]
        pub type R = crate::R<u32, super::AMPCOMP_TH2>;
        #[doc = "Reader of field `LPMUPDATE_LTH`"]
        pub type LPMUPDATE_LTH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LPMUPDATE_HTM`"]
        pub type LPMUPDATE_HTM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ADC_COMP_AMPTH_LPM`"]
        pub type ADC_COMP_AMPTH_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ADC_COMP_AMPTH_HPM`"]
        pub type ADC_COMP_AMPTH_HPM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 26:31 - LPMUPDATE_LTH"]
            #[inline(always)]
            pub fn lpmupdate_lth(&self) -> LPMUPDATE_LTH_R {
                LPMUPDATE_LTH_R::new(((self.bits >> 26) & 0x3f) as u8)
            }
            #[doc = "Bits 18:23 - LPMUPDATE_HTM"]
            #[inline(always)]
            pub fn lpmupdate_htm(&self) -> LPMUPDATE_HTM_R {
                LPMUPDATE_HTM_R::new(((self.bits >> 18) & 0x3f) as u8)
            }
            #[doc = "Bits 10:15 - ADC_COMP_AMPTH_LPM"]
            #[inline(always)]
            pub fn adc_comp_ampth_lpm(&self) -> ADC_COMP_AMPTH_LPM_R {
                ADC_COMP_AMPTH_LPM_R::new(((self.bits >> 10) & 0x3f) as u8)
            }
            #[doc = "Bits 2:7 - ADC_COMP_AMPTH_HPM"]
            #[inline(always)]
            pub fn adc_comp_ampth_hpm(&self) -> ADC_COMP_AMPTH_HPM_R {
                ADC_COMP_AMPTH_HPM_R::new(((self.bits >> 2) & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ampcomp_ctrl1](ampcomp_ctrl1) module"]
    pub type AMPCOMP_CTRL1 = crate::Reg<u32, _AMPCOMP_CTRL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AMPCOMP_CTRL1;
    #[doc = "`read()` method returns [ampcomp_ctrl1::R](ampcomp_ctrl1::R) reader structure"]
    impl crate::Readable for AMPCOMP_CTRL1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ampcomp_ctrl1 {
        #[doc = "Reader of register AMPCOMP_CTRL1"]
        pub type R = crate::R<u32, super::AMPCOMP_CTRL1>;
        #[doc = "Reader of field `AMPCOMP_REQ_MODE`"]
        pub type AMPCOMP_REQ_MODE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IBIAS_OFFSET`"]
        pub type IBIAS_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IBIAS_INIT`"]
        pub type IBIAS_INIT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LPM_IBIAS_WAIT_CNT_FINAL`"]
        pub type LPM_IBIAS_WAIT_CNT_FINAL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CAP_STEP`"]
        pub type CAP_STEP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IBIASCAP_HPTOLP_OL_CNT`"]
        pub type IBIASCAP_HPTOLP_OL_CNT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 30 - AMPCOMP_REQ_MODE"]
            #[inline(always)]
            pub fn ampcomp_req_mode(&self) -> AMPCOMP_REQ_MODE_R {
                AMPCOMP_REQ_MODE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 20:23 - IBIAS_OFFSET"]
            #[inline(always)]
            pub fn ibias_offset(&self) -> IBIAS_OFFSET_R {
                IBIAS_OFFSET_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - IBIAS_INIT"]
            #[inline(always)]
            pub fn ibias_init(&self) -> IBIAS_INIT_R {
                IBIAS_INIT_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - LPM_IBIAS_WAIT_CNT_FINAL"]
            #[inline(always)]
            pub fn lpm_ibias_wait_cnt_final(&self) -> LPM_IBIAS_WAIT_CNT_FINAL_R {
                LPM_IBIAS_WAIT_CNT_FINAL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 4:7 - CAP_STEP"]
            #[inline(always)]
            pub fn cap_step(&self) -> CAP_STEP_R {
                CAP_STEP_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - IBIASCAP_HPTOLP_OL_CNT"]
            #[inline(always)]
            pub fn ibiascap_hptolp_ol_cnt(&self) -> IBIASCAP_HPTOLP_OL_CNT_R {
                IBIASCAP_HPTOLP_OL_CNT_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [anabypass_value2](anabypass_value2) module"]
    pub type ANABYPASS_VALUE2 = crate::Reg<u32, _ANABYPASS_VALUE2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANABYPASS_VALUE2;
    #[doc = "`read()` method returns [anabypass_value2::R](anabypass_value2::R) reader structure"]
    impl crate::Readable for ANABYPASS_VALUE2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod anabypass_value2 {
        #[doc = "Reader of register ANABYPASS_VALUE2"]
        pub type R = crate::R<u32, super::ANABYPASS_VALUE2>;
        #[doc = "Reader of field `XOSC_HF_IBIASTHERM`"]
        pub type XOSC_HF_IBIASTHERM_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:13 - XOSC_HF_IBIASTHERM"]
            #[inline(always)]
            pub fn xosc_hf_ibiastherm(&self) -> XOSC_HF_IBIASTHERM_R {
                XOSC_HF_IBIASTHERM_R::new((self.bits & 0x3fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [config_misc_adc](config_misc_adc) module"]
    pub type CONFIG_MISC_ADC = crate::Reg<u32, _CONFIG_MISC_ADC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CONFIG_MISC_ADC;
    #[doc = "`read()` method returns [config_misc_adc::R](config_misc_adc::R) reader structure"]
    impl crate::Readable for CONFIG_MISC_ADC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod config_misc_adc {
        #[doc = "Reader of register CONFIG_MISC_ADC"]
        pub type R = crate::R<u32, super::CONFIG_MISC_ADC>;
        #[doc = "Reader of field `RSSITRIMCOMPLETE_N`"]
        pub type RSSITRIMCOMPLETE_N_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RSSI_OFFSET`"]
        pub type RSSI_OFFSET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `QUANTCTLTHRES`"]
        pub type QUANTCTLTHRES_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DACTRIM`"]
        pub type DACTRIM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 17 - RSSITRIMCOMPLETE_N"]
            #[inline(always)]
            pub fn rssitrimcomplete_n(&self) -> RSSITRIMCOMPLETE_N_R {
                RSSITRIMCOMPLETE_N_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bits 9:16 - RSSI_OFFSET"]
            #[inline(always)]
            pub fn rssi_offset(&self) -> RSSI_OFFSET_R {
                RSSI_OFFSET_R::new(((self.bits >> 9) & 0xff) as u8)
            }
            #[doc = "Bits 6:8 - QUANTCTLTHRES"]
            #[inline(always)]
            pub fn quantctlthres(&self) -> QUANTCTLTHRES_R {
                QUANTCTLTHRES_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 0:5 - DACTRIM"]
            #[inline(always)]
            pub fn dactrim(&self) -> DACTRIM_R {
                DACTRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [volt_trim](volt_trim) module"]
    pub type VOLT_TRIM = crate::Reg<u32, _VOLT_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VOLT_TRIM;
    #[doc = "`read()` method returns [volt_trim::R](volt_trim::R) reader structure"]
    impl crate::Readable for VOLT_TRIM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod volt_trim {
        #[doc = "Reader of register VOLT_TRIM"]
        pub type R = crate::R<u32, super::VOLT_TRIM>;
        #[doc = "Reader of field `VDDR_TRIM_HH`"]
        pub type VDDR_TRIM_HH_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_TRIM_H`"]
        pub type VDDR_TRIM_H_R = crate::R<u8, u8>;
        #[doc = "Reader of field `VDDR_TRIM_SLEEP_H`"]
        pub type VDDR_TRIM_SLEEP_H_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TRIMBOD_H`"]
        pub type TRIMBOD_H_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:28 - VDDR_TRIM_HH"]
            #[inline(always)]
            pub fn vddr_trim_hh(&self) -> VDDR_TRIM_HH_R {
                VDDR_TRIM_HH_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
            #[doc = "Bits 16:20 - VDDR_TRIM_H"]
            #[inline(always)]
            pub fn vddr_trim_h(&self) -> VDDR_TRIM_H_R {
                VDDR_TRIM_H_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 8:12 - VDDR_TRIM_SLEEP_H"]
            #[inline(always)]
            pub fn vddr_trim_sleep_h(&self) -> VDDR_TRIM_SLEEP_H_R {
                VDDR_TRIM_SLEEP_H_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - TRIMBOD_H"]
            #[inline(always)]
            pub fn trimbod_h(&self) -> TRIMBOD_H_R {
                TRIMBOD_H_R::new((self.bits & 0x1f) as u8)
            }
        }
    }
    #[doc = "OSC Configuration\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [osc_conf](osc_conf) module"]
    pub type OSC_CONF = crate::Reg<u32, _OSC_CONF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSC_CONF;
    #[doc = "`read()` method returns [osc_conf::R](osc_conf::R) reader structure"]
    impl crate::Readable for OSC_CONF {}
    #[doc = "OSC Configuration"]
    pub mod osc_conf {
        #[doc = "Reader of register OSC_CONF"]
        pub type R = crate::R<u32, super::OSC_CONF>;
        #[doc = "Reader of field `ADC_SH_VBUF_EN`"]
        pub type ADC_SH_VBUF_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADC_SH_MODE_EN`"]
        pub type ADC_SH_MODE_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ATESTLF_RCOSCLF_IBIAS_TRIM`"]
        pub type ATESTLF_RCOSCLF_IBIAS_TRIM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `XOSCLF_REGULATOR_TRIM`"]
        pub type XOSCLF_REGULATOR_TRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `XOSCLF_CMIRRWR_RATIO`"]
        pub type XOSCLF_CMIRRWR_RATIO_R = crate::R<u8, u8>;
        #[doc = "Reader of field `XOSC_HF_FAST_START`"]
        pub type XOSC_HF_FAST_START_R = crate::R<u8, u8>;
        #[doc = "Reader of field `XOSC_OPTION`"]
        pub type XOSC_OPTION_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BAW_OPTION`"]
        pub type BAW_OPTION_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BAW_BIAS_HOLD_MODE_EN`"]
        pub type BAW_BIAS_HOLD_MODE_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BAW_CURRMIRR_RATIO`"]
        pub type BAW_CURRMIRR_RATIO_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_BIAS_RES_SET`"]
        pub type BAW_BIAS_RES_SET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_FILTER_EN`"]
        pub type BAW_FILTER_EN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BAW_BIAS_RECHARGE_DELAY`"]
        pub type BAW_BIAS_RECHARGE_DELAY_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_SERIES_CAP`"]
        pub type BAW_SERIES_CAP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BAW_DIV3_BYPASS`"]
        pub type BAW_DIV3_BYPASS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 29 - ADC_SH_VBUF_EN"]
            #[inline(always)]
            pub fn adc_sh_vbuf_en(&self) -> ADC_SH_VBUF_EN_R {
                ADC_SH_VBUF_EN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - ADC_SH_MODE_EN"]
            #[inline(always)]
            pub fn adc_sh_mode_en(&self) -> ADC_SH_MODE_EN_R {
                ADC_SH_MODE_EN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - ATESTLF_RCOSCLF_IBIAS_TRIM"]
            #[inline(always)]
            pub fn atestlf_rcosclf_ibias_trim(&self) -> ATESTLF_RCOSCLF_IBIAS_TRIM_R {
                ATESTLF_RCOSCLF_IBIAS_TRIM_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bits 25:26 - XOSCLF_REGULATOR_TRIM"]
            #[inline(always)]
            pub fn xosclf_regulator_trim(&self) -> XOSCLF_REGULATOR_TRIM_R {
                XOSCLF_REGULATOR_TRIM_R::new(((self.bits >> 25) & 0x03) as u8)
            }
            #[doc = "Bits 21:24 - XOSCLF_CMIRRWR_RATIO"]
            #[inline(always)]
            pub fn xosclf_cmirrwr_ratio(&self) -> XOSCLF_CMIRRWR_RATIO_R {
                XOSCLF_CMIRRWR_RATIO_R::new(((self.bits >> 21) & 0x0f) as u8)
            }
            #[doc = "Bits 19:20 - XOSC_HF_FAST_START"]
            #[inline(always)]
            pub fn xosc_hf_fast_start(&self) -> XOSC_HF_FAST_START_R {
                XOSC_HF_FAST_START_R::new(((self.bits >> 19) & 0x03) as u8)
            }
            #[doc = "Bit 18 - XOSC_OPTION"]
            #[inline(always)]
            pub fn xosc_option(&self) -> XOSC_OPTION_R {
                XOSC_OPTION_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - BAW_OPTION"]
            #[inline(always)]
            pub fn baw_option(&self) -> BAW_OPTION_R {
                BAW_OPTION_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - BAW_BIAS_HOLD_MODE_EN"]
            #[inline(always)]
            pub fn baw_bias_hold_mode_en(&self) -> BAW_BIAS_HOLD_MODE_EN_R {
                BAW_BIAS_HOLD_MODE_EN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 12:15 - BAW_CURRMIRR_RATIO"]
            #[inline(always)]
            pub fn baw_currmirr_ratio(&self) -> BAW_CURRMIRR_RATIO_R {
                BAW_CURRMIRR_RATIO_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - BAW_BIAS_RES_SET"]
            #[inline(always)]
            pub fn baw_bias_res_set(&self) -> BAW_BIAS_RES_SET_R {
                BAW_BIAS_RES_SET_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - BAW_FILTER_EN"]
            #[inline(always)]
            pub fn baw_filter_en(&self) -> BAW_FILTER_EN_R {
                BAW_FILTER_EN_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - BAW_BIAS_RECHARGE_DELAY"]
            #[inline(always)]
            pub fn baw_bias_recharge_delay(&self) -> BAW_BIAS_RECHARGE_DELAY_R {
                BAW_BIAS_RECHARGE_DELAY_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bits 1:2 - BAW_SERIES_CAP"]
            #[inline(always)]
            pub fn baw_series_cap(&self) -> BAW_SERIES_CAP_R {
                BAW_SERIES_CAP_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 0 - BAW_DIV3_BYPASS"]
            #[inline(always)]
            pub fn baw_div3_bypass(&self) -> BAW_DIV3_BYPASS_R {
                BAW_DIV3_BYPASS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cap_trim](cap_trim) module"]
    pub type CAP_TRIM = crate::Reg<u32, _CAP_TRIM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CAP_TRIM;
    #[doc = "`read()` method returns [cap_trim::R](cap_trim::R) reader structure"]
    impl crate::Readable for CAP_TRIM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod cap_trim {
        #[doc = "Reader of register CAP_TRIM"]
        pub type R = crate::R<u32, super::CAP_TRIM>;
        #[doc = "Reader of field `FLUX_CAP_0P28_TRIM`"]
        pub type FLUX_CAP_0P28_TRIM_R = crate::R<u16, u16>;
        #[doc = "Reader of field `FLUX_CAP_0P4_TRIM`"]
        pub type FLUX_CAP_0P4_TRIM_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:31 - FLUX_CAP_0P28_TRIM"]
            #[inline(always)]
            pub fn flux_cap_0p28_trim(&self) -> FLUX_CAP_0P28_TRIM_R {
                FLUX_CAP_0P28_TRIM_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - FLUX_CAP_0P4_TRIM"]
            #[inline(always)]
            pub fn flux_cap_0p4_trim(&self) -> FLUX_CAP_0P4_TRIM_R {
                FLUX_CAP_0P4_TRIM_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misc_otp_data_1](misc_otp_data_1) module"]
    pub type MISC_OTP_DATA_1 = crate::Reg<u32, _MISC_OTP_DATA_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MISC_OTP_DATA_1;
    #[doc = "`read()` method returns [misc_otp_data_1::R](misc_otp_data_1::R) reader structure"]
    impl crate::Readable for MISC_OTP_DATA_1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod misc_otp_data_1 {
        #[doc = "Reader of register MISC_OTP_DATA_1"]
        pub type R = crate::R<u32, super::MISC_OTP_DATA_1>;
        #[doc = "Reader of field `PEAK_DET_ITRIM`"]
        pub type PEAK_DET_ITRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HP_BUF_ITRIM`"]
        pub type HP_BUF_ITRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `LP_BUF_ITRIM`"]
        pub type LP_BUF_ITRIM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DBLR_LOOP_FILTER_RESET_VOLTAGE`"]
        pub type DBLR_LOOP_FILTER_RESET_VOLTAGE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HPM_IBIAS_WAIT_CNT`"]
        pub type HPM_IBIAS_WAIT_CNT_R = crate::R<u16, u16>;
        #[doc = "Reader of field `LPM_IBIAS_WAIT_CNT`"]
        pub type LPM_IBIAS_WAIT_CNT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `IDAC_STEP`"]
        pub type IDAC_STEP_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 27:28 - PEAK_DET_ITRIM"]
            #[inline(always)]
            pub fn peak_det_itrim(&self) -> PEAK_DET_ITRIM_R {
                PEAK_DET_ITRIM_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - HP_BUF_ITRIM"]
            #[inline(always)]
            pub fn hp_buf_itrim(&self) -> HP_BUF_ITRIM_R {
                HP_BUF_ITRIM_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 22:23 - LP_BUF_ITRIM"]
            #[inline(always)]
            pub fn lp_buf_itrim(&self) -> LP_BUF_ITRIM_R {
                LP_BUF_ITRIM_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - DBLR_LOOP_FILTER_RESET_VOLTAGE"]
            #[inline(always)]
            pub fn dblr_loop_filter_reset_voltage(&self) -> DBLR_LOOP_FILTER_RESET_VOLTAGE_R {
                DBLR_LOOP_FILTER_RESET_VOLTAGE_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 10:19 - HPM_IBIAS_WAIT_CNT"]
            #[inline(always)]
            pub fn hpm_ibias_wait_cnt(&self) -> HPM_IBIAS_WAIT_CNT_R {
                HPM_IBIAS_WAIT_CNT_R::new(((self.bits >> 10) & 0x03ff) as u16)
            }
            #[doc = "Bits 4:9 - LPM_IBIAS_WAIT_CNT"]
            #[inline(always)]
            pub fn lpm_ibias_wait_cnt(&self) -> LPM_IBIAS_WAIT_CNT_R {
                LPM_IBIAS_WAIT_CNT_R::new(((self.bits >> 4) & 0x3f) as u8)
            }
            #[doc = "Bits 0:3 - IDAC_STEP"]
            #[inline(always)]
            pub fn idac_step(&self) -> IDAC_STEP_R {
                IDAC_STEP_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 20C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_20c](pwd_curr_20c) module"]
    pub type PWD_CURR_20C = crate::Reg<u32, _PWD_CURR_20C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_20C;
    #[doc = "`read()` method returns [pwd_curr_20c::R](pwd_curr_20c::R) reader structure"]
    impl crate::Readable for PWD_CURR_20C {}
    #[doc = "Power Down Current Control 20C"]
    pub mod pwd_curr_20c {
        #[doc = "Reader of register PWD_CURR_20C"]
        pub type R = crate::R<u32, super::PWD_CURR_20C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 35C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_35c](pwd_curr_35c) module"]
    pub type PWD_CURR_35C = crate::Reg<u32, _PWD_CURR_35C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_35C;
    #[doc = "`read()` method returns [pwd_curr_35c::R](pwd_curr_35c::R) reader structure"]
    impl crate::Readable for PWD_CURR_35C {}
    #[doc = "Power Down Current Control 35C"]
    pub mod pwd_curr_35c {
        #[doc = "Reader of register PWD_CURR_35C"]
        pub type R = crate::R<u32, super::PWD_CURR_35C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 50C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_50c](pwd_curr_50c) module"]
    pub type PWD_CURR_50C = crate::Reg<u32, _PWD_CURR_50C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_50C;
    #[doc = "`read()` method returns [pwd_curr_50c::R](pwd_curr_50c::R) reader structure"]
    impl crate::Readable for PWD_CURR_50C {}
    #[doc = "Power Down Current Control 50C"]
    pub mod pwd_curr_50c {
        #[doc = "Reader of register PWD_CURR_50C"]
        pub type R = crate::R<u32, super::PWD_CURR_50C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 65C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_65c](pwd_curr_65c) module"]
    pub type PWD_CURR_65C = crate::Reg<u32, _PWD_CURR_65C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_65C;
    #[doc = "`read()` method returns [pwd_curr_65c::R](pwd_curr_65c::R) reader structure"]
    impl crate::Readable for PWD_CURR_65C {}
    #[doc = "Power Down Current Control 65C"]
    pub mod pwd_curr_65c {
        #[doc = "Reader of register PWD_CURR_65C"]
        pub type R = crate::R<u32, super::PWD_CURR_65C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 80C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_80c](pwd_curr_80c) module"]
    pub type PWD_CURR_80C = crate::Reg<u32, _PWD_CURR_80C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_80C;
    #[doc = "`read()` method returns [pwd_curr_80c::R](pwd_curr_80c::R) reader structure"]
    impl crate::Readable for PWD_CURR_80C {}
    #[doc = "Power Down Current Control 80C"]
    pub mod pwd_curr_80c {
        #[doc = "Reader of register PWD_CURR_80C"]
        pub type R = crate::R<u32, super::PWD_CURR_80C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 95C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_95c](pwd_curr_95c) module"]
    pub type PWD_CURR_95C = crate::Reg<u32, _PWD_CURR_95C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_95C;
    #[doc = "`read()` method returns [pwd_curr_95c::R](pwd_curr_95c::R) reader structure"]
    impl crate::Readable for PWD_CURR_95C {}
    #[doc = "Power Down Current Control 95C"]
    pub mod pwd_curr_95c {
        #[doc = "Reader of register PWD_CURR_95C"]
        pub type R = crate::R<u32, super::PWD_CURR_95C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 110C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_110c](pwd_curr_110c) module"]
    pub type PWD_CURR_110C = crate::Reg<u32, _PWD_CURR_110C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_110C;
    #[doc = "`read()` method returns [pwd_curr_110c::R](pwd_curr_110c::R) reader structure"]
    impl crate::Readable for PWD_CURR_110C {}
    #[doc = "Power Down Current Control 110C"]
    pub mod pwd_curr_110c {
        #[doc = "Reader of register PWD_CURR_110C"]
        pub type R = crate::R<u32, super::PWD_CURR_110C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Power Down Current Control 125C\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwd_curr_125c](pwd_curr_125c) module"]
    pub type PWD_CURR_125C = crate::Reg<u32, _PWD_CURR_125C>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWD_CURR_125C;
    #[doc = "`read()` method returns [pwd_curr_125c::R](pwd_curr_125c::R) reader structure"]
    impl crate::Readable for PWD_CURR_125C {}
    #[doc = "Power Down Current Control 125C"]
    pub mod pwd_curr_125c {
        #[doc = "Reader of register PWD_CURR_125C"]
        pub type R = crate::R<u32, super::PWD_CURR_125C>;
        #[doc = "Reader of field `DELTA_CACHE_REF`"]
        pub type DELTA_CACHE_REF_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_RFMEM_RET`"]
        pub type DELTA_RFMEM_RET_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DELTA_XOSC_LPM`"]
        pub type DELTA_XOSC_LPM_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BASELINE`"]
        pub type BASELINE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - DELTA_CACHE_REF"]
            #[inline(always)]
            pub fn delta_cache_ref(&self) -> DELTA_CACHE_REF_R {
                DELTA_CACHE_REF_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - DELTA_RFMEM_RET"]
            #[inline(always)]
            pub fn delta_rfmem_ret(&self) -> DELTA_RFMEM_RET_R {
                DELTA_RFMEM_RET_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DELTA_XOSC_LPM"]
            #[inline(always)]
            pub fn delta_xosc_lpm(&self) -> DELTA_XOSC_LPM_R {
                DELTA_XOSC_LPM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - BASELINE"]
            #[inline(always)]
            pub fn baseline(&self) -> BASELINE_R {
                BASELINE_R::new((self.bits & 0xff) as u8)
            }
        }
    }
}
#[doc = "Flash sub-system registers, includes the Flash Memory Controller (FMC), flash read path, and an integrated Efuse controller and EFUSEROM."]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        0x4003_0000 as *const _
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FLASH::ptr() }
    }
}
#[doc = "Flash sub-system registers, includes the Flash Memory Controller (FMC), flash read path, and an integrated Efuse controller and EFUSEROM."]
pub mod flash {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 28usize],
        #[doc = "0x1c - FMC and Efuse Status"]
        pub stat: STAT,
        _reserved1: [u8; 4usize],
        #[doc = "0x24 - Internal. Only to be used through TI provided API."]
        pub cfg: CFG,
        #[doc = "0x28 - Internal. Only to be used through TI provided API."]
        pub syscode_start: SYSCODE_START,
        #[doc = "0x2c - Internal. Only to be used through TI provided API."]
        pub flash_size: FLASH_SIZE,
        _reserved4: [u8; 12usize],
        #[doc = "0x3c - Internal. Only to be used through TI provided API."]
        pub fwlock: FWLOCK,
        #[doc = "0x40 - Internal. Only to be used through TI provided API."]
        pub fwflag: FWFLAG,
        _reserved6: [u8; 4028usize],
        #[doc = "0x1000 - Internal. Only to be used through TI provided API."]
        pub efuse: EFUSE,
        #[doc = "0x1004 - Internal. Only to be used through TI provided API."]
        pub efuseaddr: EFUSEADDR,
        #[doc = "0x1008 - Internal. Only to be used through TI provided API."]
        pub dataupper: DATAUPPER,
        #[doc = "0x100c - Internal. Only to be used through TI provided API."]
        pub datalower: DATALOWER,
        #[doc = "0x1010 - Internal. Only to be used through TI provided API."]
        pub efusecfg: EFUSECFG,
        #[doc = "0x1014 - Internal. Only to be used through TI provided API."]
        pub efusestat: EFUSESTAT,
        #[doc = "0x1018 - Internal. Only to be used through TI provided API."]
        pub acc: ACC,
        #[doc = "0x101c - Internal. Only to be used through TI provided API."]
        pub boundary: BOUNDARY,
        #[doc = "0x1020 - Internal. Only to be used through TI provided API."]
        pub efuseflag: EFUSEFLAG,
        #[doc = "0x1024 - Internal. Only to be used through TI provided API."]
        pub efusekey: EFUSEKEY,
        #[doc = "0x1028 - Internal. Only to be used through TI provided API."]
        pub efuserelease: EFUSERELEASE,
        #[doc = "0x102c - Internal. Only to be used through TI provided API."]
        pub efusepins: EFUSEPINS,
        #[doc = "0x1030 - Internal. Only to be used through TI provided API."]
        pub efusecra: EFUSECRA,
        #[doc = "0x1034 - Internal. Only to be used through TI provided API."]
        pub efuseread: EFUSEREAD,
        #[doc = "0x1038 - Internal. Only to be used through TI provided API."]
        pub efuseprogram: EFUSEPROGRAM,
        #[doc = "0x103c - Internal. Only to be used through TI provided API."]
        pub efuseerror: EFUSEERROR,
        #[doc = "0x1040 - Internal. Only to be used through TI provided API."]
        pub singlebit: SINGLEBIT,
        #[doc = "0x1044 - Internal. Only to be used through TI provided API."]
        pub twobit: TWOBIT,
        #[doc = "0x1048 - Internal. Only to be used through TI provided API."]
        pub selftestcyc: SELFTESTCYC,
        #[doc = "0x104c - Internal. Only to be used through TI provided API."]
        pub selftestsign: SELFTESTSIGN,
        _reserved26: [u8; 4016usize],
        #[doc = "0x2000 - Internal. Only to be used through TI provided API."]
        pub frdctl: FRDCTL,
        #[doc = "0x2004 - Internal. Only to be used through TI provided API."]
        pub fsprd: FSPRD,
        #[doc = "0x2008 - Internal. Only to be used through TI provided API."]
        pub fedacctl1: FEDACCTL1,
        _reserved29: [u8; 16usize],
        #[doc = "0x201c - Internal. Only to be used through TI provided API."]
        pub fedacstat: FEDACSTAT,
        _reserved30: [u8; 16usize],
        #[doc = "0x2030 - Internal. Only to be used through TI provided API."]
        pub fbprot: FBPROT,
        #[doc = "0x2034 - Internal. Only to be used through TI provided API."]
        pub fbse: FBSE,
        #[doc = "0x2038 - Internal. Only to be used through TI provided API."]
        pub fbbusy: FBBUSY,
        #[doc = "0x203c - Internal. Only to be used through TI provided API."]
        pub fbac: FBAC,
        #[doc = "0x2040 - Internal. Only to be used through TI provided API."]
        pub fbfallback: FBFALLBACK,
        #[doc = "0x2044 - Internal. Only to be used through TI provided API."]
        pub fbprdy: FBPRDY,
        #[doc = "0x2048 - Internal. Only to be used through TI provided API."]
        pub fpac1: FPAC1,
        #[doc = "0x204c - Internal. Only to be used through TI provided API."]
        pub fpac2: FPAC2,
        #[doc = "0x2050 - Internal. Only to be used through TI provided API."]
        pub fmac: FMAC,
        #[doc = "0x2054 - Internal. Only to be used through TI provided API."]
        pub fmstat: FMSTAT,
        _reserved40: [u8; 12usize],
        #[doc = "0x2064 - Internal. Only to be used through TI provided API."]
        pub flock: FLOCK,
        _reserved41: [u8; 24usize],
        #[doc = "0x2080 - Internal. Only to be used through TI provided API."]
        pub fvreadct: FVREADCT,
        #[doc = "0x2084 - Internal. Only to be used through TI provided API."]
        pub fvhvct1: FVHVCT1,
        #[doc = "0x2088 - Internal. Only to be used through TI provided API."]
        pub fvhvct2: FVHVCT2,
        #[doc = "0x208c - Internal. Only to be used through TI provided API."]
        pub fvhvct3: FVHVCT3,
        #[doc = "0x2090 - Internal. Only to be used through TI provided API."]
        pub fvnvct: FVNVCT,
        #[doc = "0x2094 - Internal. Only to be used through TI provided API."]
        pub fvslp: FVSLP,
        #[doc = "0x2098 - Internal. Only to be used through TI provided API."]
        pub fvwlct: FVWLCT,
        #[doc = "0x209c - Internal. Only to be used through TI provided API."]
        pub fefusectl: FEFUSECTL,
        #[doc = "0x20a0 - Internal. Only to be used through TI provided API."]
        pub fefusestat: FEFUSESTAT,
        #[doc = "0x20a4 - Internal. Only to be used through TI provided API."]
        pub fefusedata: FEFUSEDATA,
        #[doc = "0x20a8 - Internal. Only to be used through TI provided API."]
        pub fseqpmp: FSEQPMP,
        _reserved52: [u8; 84usize],
        #[doc = "0x2100 - Internal. Only to be used through TI provided API."]
        pub fbstrobes: FBSTROBES,
        #[doc = "0x2104 - Internal. Only to be used through TI provided API."]
        pub fpstrobes: FPSTROBES,
        #[doc = "0x2108 - Internal. Only to be used through TI provided API."]
        pub fbmode: FBMODE,
        #[doc = "0x210c - Internal. Only to be used through TI provided API."]
        pub ftcr: FTCR,
        #[doc = "0x2110 - Internal. Only to be used through TI provided API."]
        pub faddr: FADDR,
        _reserved57: [u8; 8usize],
        #[doc = "0x211c - Internal. Only to be used through TI provided API."]
        pub ftctl: FTCTL,
        #[doc = "0x2120 - Internal. Only to be used through TI provided API."]
        pub fwpwrite0: FWPWRITE0,
        #[doc = "0x2124 - Internal. Only to be used through TI provided API."]
        pub fwpwrite1: FWPWRITE1,
        #[doc = "0x2128 - Internal. Only to be used through TI provided API."]
        pub fwpwrite2: FWPWRITE2,
        #[doc = "0x212c - Internal. Only to be used through TI provided API."]
        pub fwpwrite3: FWPWRITE3,
        #[doc = "0x2130 - Internal. Only to be used through TI provided API."]
        pub fwpwrite4: FWPWRITE4,
        #[doc = "0x2134 - Internal. Only to be used through TI provided API."]
        pub fwpwrite5: FWPWRITE5,
        #[doc = "0x2138 - Internal. Only to be used through TI provided API."]
        pub fwpwrite6: FWPWRITE6,
        #[doc = "0x213c - Internal. Only to be used through TI provided API."]
        pub fwpwrite7: FWPWRITE7,
        #[doc = "0x2140 - Internal. Only to be used through TI provided API."]
        pub fwpwrite_ecc: FWPWRITE_ECC,
        #[doc = "0x2144 - Internal. Only to be used through TI provided API."]
        pub fswstat: FSWSTAT,
        _reserved68: [u8; 184usize],
        #[doc = "0x2200 - Internal. Only to be used through TI provided API."]
        pub fsm_glbctl: FSM_GLBCTL,
        #[doc = "0x2204 - Internal. Only to be used through TI provided API."]
        pub fsm_state: FSM_STATE,
        #[doc = "0x2208 - Internal. Only to be used through TI provided API."]
        pub fsm_stat: FSM_STAT,
        #[doc = "0x220c - Internal. Only to be used through TI provided API."]
        pub fsm_cmd: FSM_CMD,
        #[doc = "0x2210 - Internal. Only to be used through TI provided API."]
        pub fsm_pe_osu: FSM_PE_OSU,
        #[doc = "0x2214 - Internal. Only to be used through TI provided API."]
        pub fsm_vstat: FSM_VSTAT,
        #[doc = "0x2218 - Internal. Only to be used through TI provided API."]
        pub fsm_pe_vsu: FSM_PE_VSU,
        #[doc = "0x221c - Internal. Only to be used through TI provided API."]
        pub fsm_cmp_vsu: FSM_CMP_VSU,
        #[doc = "0x2220 - Internal. Only to be used through TI provided API."]
        pub fsm_ex_val: FSM_EX_VAL,
        #[doc = "0x2224 - Internal. Only to be used through TI provided API."]
        pub fsm_rd_h: FSM_RD_H,
        #[doc = "0x2228 - Internal. Only to be used through TI provided API."]
        pub fsm_p_oh: FSM_P_OH,
        #[doc = "0x222c - Internal. Only to be used through TI provided API."]
        pub fsm_era_oh: FSM_ERA_OH,
        #[doc = "0x2230 - Internal. Only to be used through TI provided API."]
        pub fsm_sav_ppul: FSM_SAV_PPUL,
        #[doc = "0x2234 - Internal. Only to be used through TI provided API."]
        pub fsm_pe_vh: FSM_PE_VH,
        _reserved82: [u8; 8usize],
        #[doc = "0x2240 - Internal. Only to be used through TI provided API."]
        pub fsm_prg_pw: FSM_PRG_PW,
        #[doc = "0x2244 - Internal. Only to be used through TI provided API."]
        pub fsm_era_pw: FSM_ERA_PW,
        _reserved84: [u8; 12usize],
        #[doc = "0x2254 - Internal. Only to be used through TI provided API."]
        pub fsm_sav_era_pul: FSM_SAV_ERA_PUL,
        #[doc = "0x2258 - Internal. Only to be used through TI provided API."]
        pub fsm_timer: FSM_TIMER,
        #[doc = "0x225c - Internal. Only to be used through TI provided API."]
        pub fsm_mode: FSM_MODE,
        #[doc = "0x2260 - Internal. Only to be used through TI provided API."]
        pub fsm_pgm: FSM_PGM,
        #[doc = "0x2264 - Internal. Only to be used through TI provided API."]
        pub fsm_era: FSM_ERA,
        #[doc = "0x2268 - Internal. Only to be used through TI provided API."]
        pub fsm_prg_pul: FSM_PRG_PUL,
        #[doc = "0x226c - Internal. Only to be used through TI provided API."]
        pub fsm_era_pul: FSM_ERA_PUL,
        #[doc = "0x2270 - Internal. Only to be used through TI provided API."]
        pub fsm_step_size: FSM_STEP_SIZE,
        #[doc = "0x2274 - Internal. Only to be used through TI provided API."]
        pub fsm_pul_cntr: FSM_PUL_CNTR,
        #[doc = "0x2278 - Internal. Only to be used through TI provided API."]
        pub fsm_ec_step_height: FSM_EC_STEP_HEIGHT,
        #[doc = "0x227c - Internal. Only to be used through TI provided API."]
        pub fsm_st_machine: FSM_ST_MACHINE,
        #[doc = "0x2280 - Internal. Only to be used through TI provided API."]
        pub fsm_fles: FSM_FLES,
        _reserved96: [u8; 4usize],
        #[doc = "0x2288 - Internal. Only to be used through TI provided API."]
        pub fsm_wr_ena: FSM_WR_ENA,
        #[doc = "0x228c - Internal. Only to be used through TI provided API."]
        pub fsm_acc_pp: FSM_ACC_PP,
        #[doc = "0x2290 - Internal. Only to be used through TI provided API."]
        pub fsm_acc_ep: FSM_ACC_EP,
        _reserved99: [u8; 12usize],
        #[doc = "0x22a0 - Internal. Only to be used through TI provided API."]
        pub fsm_addr: FSM_ADDR,
        #[doc = "0x22a4 - Internal. Only to be used through TI provided API."]
        pub fsm_sector: FSM_SECTOR,
        #[doc = "0x22a8 - Internal. Only to be used through TI provided API."]
        pub fmc_rev_id: FMC_REV_ID,
        #[doc = "0x22ac - Internal. Only to be used through TI provided API."]
        pub fsm_err_addr: FSM_ERR_ADDR,
        #[doc = "0x22b0 - Internal. Only to be used through TI provided API."]
        pub fsm_pgm_maxpul: FSM_PGM_MAXPUL,
        #[doc = "0x22b4 - Internal. Only to be used through TI provided API."]
        pub fsm_execute: FSM_EXECUTE,
        _reserved105: [u8; 8usize],
        #[doc = "0x22c0 - Internal. Only to be used through TI provided API."]
        pub fsm_sector1: FSM_SECTOR1,
        #[doc = "0x22c4 - Internal. Only to be used through TI provided API."]
        pub fsm_sector2: FSM_SECTOR2,
        _reserved107: [u8; 24usize],
        #[doc = "0x22e0 - Internal. Only to be used through TI provided API."]
        pub fsm_bsle0: FSM_BSLE0,
        #[doc = "0x22e4 - Internal. Only to be used through TI provided API."]
        pub fsm_bsle1: FSM_BSLE1,
        _reserved109: [u8; 8usize],
        #[doc = "0x22f0 - Internal. Only to be used through TI provided API."]
        pub fsm_bslp0: FSM_BSLP0,
        #[doc = "0x22f4 - Internal. Only to be used through TI provided API."]
        pub fsm_bslp1: FSM_BSLP1,
        _reserved111: [u8; 264usize],
        #[doc = "0x2400 - Internal. Only to be used through TI provided API."]
        pub fcfg_bank: FCFG_BANK,
        #[doc = "0x2404 - Internal. Only to be used through TI provided API."]
        pub fcfg_wrapper: FCFG_WRAPPER,
        #[doc = "0x2408 - Internal. Only to be used through TI provided API."]
        pub fcfg_bnk_type: FCFG_BNK_TYPE,
        _reserved114: [u8; 4usize],
        #[doc = "0x2410 - Internal. Only to be used through TI provided API."]
        pub fcfg_b0_start: FCFG_B0_START,
        #[doc = "0x2414 - Internal. Only to be used through TI provided API."]
        pub fcfg_b1_start: FCFG_B1_START,
        #[doc = "0x2418 - Internal. Only to be used through TI provided API."]
        pub fcfg_b2_start: FCFG_B2_START,
        #[doc = "0x241c - Internal. Only to be used through TI provided API."]
        pub fcfg_b3_start: FCFG_B3_START,
        #[doc = "0x2420 - Internal. Only to be used through TI provided API."]
        pub fcfg_b4_start: FCFG_B4_START,
        #[doc = "0x2424 - Internal. Only to be used through TI provided API."]
        pub fcfg_b5_start: FCFG_B5_START,
        #[doc = "0x2428 - Internal. Only to be used through TI provided API."]
        pub fcfg_b6_start: FCFG_B6_START,
        #[doc = "0x242c - Internal. Only to be used through TI provided API."]
        pub fcfg_b7_start: FCFG_B7_START,
        #[doc = "0x2430 - Internal. Only to be used through TI provided API."]
        pub fcfg_b0_ssize0: FCFG_B0_SSIZE0,
    }
    #[doc = "FMC and Efuse Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat](stat) module"]
    pub type STAT = crate::Reg<u32, _STAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STAT;
    #[doc = "`read()` method returns [stat::R](stat::R) reader structure"]
    impl crate::Readable for STAT {}
    #[doc = "FMC and Efuse Status"]
    pub mod stat {
        #[doc = "Reader of register STAT"]
        pub type R = crate::R<u32, super::STAT>;
        #[doc = "Reader of field `EFUSE_BLANK`"]
        pub type EFUSE_BLANK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EFUSE_TIMEOUT`"]
        pub type EFUSE_TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EFUSE_CRC_ERROR`"]
        pub type EFUSE_CRC_ERROR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EFUSE_ERRCODE`"]
        pub type EFUSE_ERRCODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SAMHOLD_DIS`"]
        pub type SAMHOLD_DIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `POWER_MODE`"]
        pub type POWER_MODE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 15 - EFUSE_BLANK"]
            #[inline(always)]
            pub fn efuse_blank(&self) -> EFUSE_BLANK_R {
                EFUSE_BLANK_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - EFUSE_TIMEOUT"]
            #[inline(always)]
            pub fn efuse_timeout(&self) -> EFUSE_TIMEOUT_R {
                EFUSE_TIMEOUT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - EFUSE_CRC_ERROR"]
            #[inline(always)]
            pub fn efuse_crc_error(&self) -> EFUSE_CRC_ERROR_R {
                EFUSE_CRC_ERROR_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 8:12 - EFUSE_ERRCODE"]
            #[inline(always)]
            pub fn efuse_errcode(&self) -> EFUSE_ERRCODE_R {
                EFUSE_ERRCODE_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bit 2 - SAMHOLD_DIS"]
            #[inline(always)]
            pub fn samhold_dis(&self) -> SAMHOLD_DIS_R {
                SAMHOLD_DIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - POWER_MODE"]
            #[inline(always)]
            pub fn power_mode(&self) -> POWER_MODE_R {
                POWER_MODE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
    pub type CFG = crate::Reg<u32, _CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG;
    #[doc = "`read()` method returns [cfg::R](cfg::R) reader structure"]
    impl crate::Readable for CFG {}
    #[doc = "`write(|w| ..)` method takes [cfg::W](cfg::W) writer structure"]
    impl crate::Writable for CFG {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod cfg {
        #[doc = "Reader of register CFG"]
        pub type R = crate::R<u32, super::CFG>;
        #[doc = "Writer for register CFG"]
        pub type W = crate::W<u32, super::CFG>;
        #[doc = "Register CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STANDBY_MODE_SEL`"]
        pub type STANDBY_MODE_SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STANDBY_MODE_SEL`"]
        pub struct STANDBY_MODE_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STANDBY_MODE_SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `STANDBY_PW_SEL`"]
        pub type STANDBY_PW_SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `STANDBY_PW_SEL`"]
        pub struct STANDBY_PW_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STANDBY_PW_SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `DIS_EFUSECLK`"]
        pub type DIS_EFUSECLK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIS_EFUSECLK`"]
        pub struct DIS_EFUSECLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIS_EFUSECLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIS_READACCESS`"]
        pub type DIS_READACCESS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIS_READACCESS`"]
        pub struct DIS_READACCESS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIS_READACCESS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ENABLE_SWINTF`"]
        pub type ENABLE_SWINTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENABLE_SWINTF`"]
        pub struct ENABLE_SWINTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_SWINTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DIS_STANDBY`"]
        pub type DIS_STANDBY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIS_STANDBY`"]
        pub struct DIS_STANDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIS_STANDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DIS_IDLE`"]
        pub type DIS_IDLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIS_IDLE`"]
        pub struct DIS_IDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIS_IDLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - STANDBY_MODE_SEL"]
            #[inline(always)]
            pub fn standby_mode_sel(&self) -> STANDBY_MODE_SEL_R {
                STANDBY_MODE_SEL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - STANDBY_PW_SEL"]
            #[inline(always)]
            pub fn standby_pw_sel(&self) -> STANDBY_PW_SEL_R {
                STANDBY_PW_SEL_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bit 5 - DIS_EFUSECLK"]
            #[inline(always)]
            pub fn dis_efuseclk(&self) -> DIS_EFUSECLK_R {
                DIS_EFUSECLK_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DIS_READACCESS"]
            #[inline(always)]
            pub fn dis_readaccess(&self) -> DIS_READACCESS_R {
                DIS_READACCESS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ENABLE_SWINTF"]
            #[inline(always)]
            pub fn enable_swintf(&self) -> ENABLE_SWINTF_R {
                ENABLE_SWINTF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIS_STANDBY"]
            #[inline(always)]
            pub fn dis_standby(&self) -> DIS_STANDBY_R {
                DIS_STANDBY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIS_IDLE"]
            #[inline(always)]
            pub fn dis_idle(&self) -> DIS_IDLE_R {
                DIS_IDLE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - STANDBY_MODE_SEL"]
            #[inline(always)]
            pub fn standby_mode_sel(&mut self) -> STANDBY_MODE_SEL_W {
                STANDBY_MODE_SEL_W { w: self }
            }
            #[doc = "Bits 6:7 - STANDBY_PW_SEL"]
            #[inline(always)]
            pub fn standby_pw_sel(&mut self) -> STANDBY_PW_SEL_W {
                STANDBY_PW_SEL_W { w: self }
            }
            #[doc = "Bit 5 - DIS_EFUSECLK"]
            #[inline(always)]
            pub fn dis_efuseclk(&mut self) -> DIS_EFUSECLK_W {
                DIS_EFUSECLK_W { w: self }
            }
            #[doc = "Bit 4 - DIS_READACCESS"]
            #[inline(always)]
            pub fn dis_readaccess(&mut self) -> DIS_READACCESS_W {
                DIS_READACCESS_W { w: self }
            }
            #[doc = "Bit 3 - ENABLE_SWINTF"]
            #[inline(always)]
            pub fn enable_swintf(&mut self) -> ENABLE_SWINTF_W {
                ENABLE_SWINTF_W { w: self }
            }
            #[doc = "Bit 1 - DIS_STANDBY"]
            #[inline(always)]
            pub fn dis_standby(&mut self) -> DIS_STANDBY_W {
                DIS_STANDBY_W { w: self }
            }
            #[doc = "Bit 0 - DIS_IDLE"]
            #[inline(always)]
            pub fn dis_idle(&mut self) -> DIS_IDLE_W {
                DIS_IDLE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [syscode_start](syscode_start) module"]
    pub type SYSCODE_START = crate::Reg<u32, _SYSCODE_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYSCODE_START;
    #[doc = "`read()` method returns [syscode_start::R](syscode_start::R) reader structure"]
    impl crate::Readable for SYSCODE_START {}
    #[doc = "`write(|w| ..)` method takes [syscode_start::W](syscode_start::W) writer structure"]
    impl crate::Writable for SYSCODE_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod syscode_start {
        #[doc = "Reader of register SYSCODE_START"]
        pub type R = crate::R<u32, super::SYSCODE_START>;
        #[doc = "Writer for register SYSCODE_START"]
        pub type W = crate::W<u32, super::SYSCODE_START>;
        #[doc = "Register SYSCODE_START `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYSCODE_START {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYSCODE_START`"]
        pub type SYSCODE_START_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYSCODE_START`"]
        pub struct SYSCODE_START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCODE_START_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - SYSCODE_START"]
            #[inline(always)]
            pub fn syscode_start(&self) -> SYSCODE_START_R {
                SYSCODE_START_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - SYSCODE_START"]
            #[inline(always)]
            pub fn syscode_start(&mut self) -> SYSCODE_START_W {
                SYSCODE_START_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flash_size](flash_size) module"]
    pub type FLASH_SIZE = crate::Reg<u32, _FLASH_SIZE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLASH_SIZE;
    #[doc = "`read()` method returns [flash_size::R](flash_size::R) reader structure"]
    impl crate::Readable for FLASH_SIZE {}
    #[doc = "`write(|w| ..)` method takes [flash_size::W](flash_size::W) writer structure"]
    impl crate::Writable for FLASH_SIZE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flash_size {
        #[doc = "Reader of register FLASH_SIZE"]
        pub type R = crate::R<u32, super::FLASH_SIZE>;
        #[doc = "Writer for register FLASH_SIZE"]
        pub type W = crate::W<u32, super::FLASH_SIZE>;
        #[doc = "Register FLASH_SIZE `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLASH_SIZE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SECTORS`"]
        pub type SECTORS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SECTORS`"]
        pub struct SECTORS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SECTORS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - SECTORS"]
            #[inline(always)]
            pub fn sectors(&self) -> SECTORS_R {
                SECTORS_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - SECTORS"]
            #[inline(always)]
            pub fn sectors(&mut self) -> SECTORS_W {
                SECTORS_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwlock](fwlock) module"]
    pub type FWLOCK = crate::Reg<u32, _FWLOCK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWLOCK;
    #[doc = "`read()` method returns [fwlock::R](fwlock::R) reader structure"]
    impl crate::Readable for FWLOCK {}
    #[doc = "`write(|w| ..)` method takes [fwlock::W](fwlock::W) writer structure"]
    impl crate::Writable for FWLOCK {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwlock {
        #[doc = "Reader of register FWLOCK"]
        pub type R = crate::R<u32, super::FWLOCK>;
        #[doc = "Writer for register FWLOCK"]
        pub type W = crate::W<u32, super::FWLOCK>;
        #[doc = "Register FWLOCK `reset()`'s with value 0"]
        impl crate::ResetValue for super::FWLOCK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FWLOCK`"]
        pub type FWLOCK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FWLOCK`"]
        pub struct FWLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWLOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - FWLOCK"]
            #[inline(always)]
            pub fn fwlock(&self) -> FWLOCK_R {
                FWLOCK_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - FWLOCK"]
            #[inline(always)]
            pub fn fwlock(&mut self) -> FWLOCK_W {
                FWLOCK_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwflag](fwflag) module"]
    pub type FWFLAG = crate::Reg<u32, _FWFLAG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWFLAG;
    #[doc = "`read()` method returns [fwflag::R](fwflag::R) reader structure"]
    impl crate::Readable for FWFLAG {}
    #[doc = "`write(|w| ..)` method takes [fwflag::W](fwflag::W) writer structure"]
    impl crate::Writable for FWFLAG {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwflag {
        #[doc = "Reader of register FWFLAG"]
        pub type R = crate::R<u32, super::FWFLAG>;
        #[doc = "Writer for register FWFLAG"]
        pub type W = crate::W<u32, super::FWFLAG>;
        #[doc = "Register FWFLAG `reset()`'s with value 0"]
        impl crate::ResetValue for super::FWFLAG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FWFLAG`"]
        pub type FWFLAG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FWFLAG`"]
        pub struct FWFLAG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWFLAG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - FWFLAG"]
            #[inline(always)]
            pub fn fwflag(&self) -> FWFLAG_R {
                FWFLAG_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - FWFLAG"]
            #[inline(always)]
            pub fn fwflag(&mut self) -> FWFLAG_W {
                FWFLAG_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuse](efuse) module"]
    pub type EFUSE = crate::Reg<u32, _EFUSE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSE;
    #[doc = "`write(|w| ..)` method takes [efuse::W](efuse::W) writer structure"]
    impl crate::Writable for EFUSE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuse {
        #[doc = "Writer for register EFUSE"]
        pub type W = crate::W<u32, super::EFUSE>;
        #[doc = "Register EFUSE `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `INSTRUCTION`"]
        pub struct INSTRUCTION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INSTRUCTION_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        #[doc = "Write proxy for field `DUMPWORD`"]
        pub struct DUMPWORD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DUMPWORD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 24:28 - INSTRUCTION"]
            #[inline(always)]
            pub fn instruction(&mut self) -> INSTRUCTION_W {
                INSTRUCTION_W { w: self }
            }
            #[doc = "Bits 0:15 - DUMPWORD"]
            #[inline(always)]
            pub fn dumpword(&mut self) -> DUMPWORD_W {
                DUMPWORD_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuseaddr](efuseaddr) module"]
    pub type EFUSEADDR = crate::Reg<u32, _EFUSEADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEADDR;
    #[doc = "`write(|w| ..)` method takes [efuseaddr::W](efuseaddr::W) writer structure"]
    impl crate::Writable for EFUSEADDR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuseaddr {
        #[doc = "Writer for register EFUSEADDR"]
        pub type W = crate::W<u32, super::EFUSEADDR>;
        #[doc = "Register EFUSEADDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEADDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BLOCK`"]
        pub struct BLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 11)) | (((value as u32) & 0x1f) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `ROW`"]
        pub struct ROW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ROW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07ff) | ((value as u32) & 0x07ff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 11:15 - BLOCK"]
            #[inline(always)]
            pub fn block(&mut self) -> BLOCK_W {
                BLOCK_W { w: self }
            }
            #[doc = "Bits 0:10 - ROW"]
            #[inline(always)]
            pub fn row(&mut self) -> ROW_W {
                ROW_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dataupper](dataupper) module"]
    pub type DATAUPPER = crate::Reg<u32, _DATAUPPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATAUPPER;
    #[doc = "`write(|w| ..)` method takes [dataupper::W](dataupper::W) writer structure"]
    impl crate::Writable for DATAUPPER {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod dataupper {
        #[doc = "Writer for register DATAUPPER"]
        pub type W = crate::W<u32, super::DATAUPPER>;
        #[doc = "Register DATAUPPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DATAUPPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `SPARE`"]
        pub struct SPARE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPARE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 3)) | (((value as u32) & 0x1f) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `P`"]
        pub struct P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `R`"]
        pub struct R_W<'a> {
            w: &'a mut W,
        }
        impl<'a> R_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `EEN`"]
        pub struct EEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 3:7 - SPARE"]
            #[inline(always)]
            pub fn spare(&mut self) -> SPARE_W {
                SPARE_W { w: self }
            }
            #[doc = "Bit 2 - P"]
            #[inline(always)]
            pub fn p(&mut self) -> P_W {
                P_W { w: self }
            }
            #[doc = "Bit 1 - R"]
            #[inline(always)]
            pub fn r(&mut self) -> R_W {
                R_W { w: self }
            }
            #[doc = "Bit 0 - EEN"]
            #[inline(always)]
            pub fn een(&mut self) -> EEN_W {
                EEN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [datalower](datalower) module"]
    pub type DATALOWER = crate::Reg<u32, _DATALOWER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DATALOWER;
    #[doc = "`write(|w| ..)` method takes [datalower::W](datalower::W) writer structure"]
    impl crate::Writable for DATALOWER {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod datalower {
        #[doc = "Writer for register DATALOWER"]
        pub type W = crate::W<u32, super::DATALOWER>;
        #[doc = "Register DATALOWER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DATALOWER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efusecfg](efusecfg) module"]
    pub type EFUSECFG = crate::Reg<u32, _EFUSECFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSECFG;
    #[doc = "`write(|w| ..)` method takes [efusecfg::W](efusecfg::W) writer structure"]
    impl crate::Writable for EFUSECFG {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efusecfg {
        #[doc = "Writer for register EFUSECFG"]
        pub type W = crate::W<u32, super::EFUSECFG>;
        #[doc = "Register EFUSECFG `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::EFUSECFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Write proxy for field `IDLEGATING`"]
        pub struct IDLEGATING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLEGATING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `SLAVEPOWER`"]
        pub struct SLAVEPOWER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLAVEPOWER_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `GATING`"]
        pub struct GATING_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GATING_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 8 - IDLEGATING"]
            #[inline(always)]
            pub fn idlegating(&mut self) -> IDLEGATING_W {
                IDLEGATING_W { w: self }
            }
            #[doc = "Bits 3:4 - SLAVEPOWER"]
            #[inline(always)]
            pub fn slavepower(&mut self) -> SLAVEPOWER_W {
                SLAVEPOWER_W { w: self }
            }
            #[doc = "Bit 0 - GATING"]
            #[inline(always)]
            pub fn gating(&mut self) -> GATING_W {
                GATING_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efusestat](efusestat) module"]
    pub type EFUSESTAT = crate::Reg<u32, _EFUSESTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSESTAT;
    #[doc = "`write(|w| ..)` method takes [efusestat::W](efusestat::W) writer structure"]
    impl crate::Writable for EFUSESTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efusestat {
        #[doc = "Writer for register EFUSESTAT"]
        pub type W = crate::W<u32, super::EFUSESTAT>;
        #[doc = "Register EFUSESTAT `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::EFUSESTAT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Write proxy for field `RESETDONE`"]
        pub struct RESETDONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESETDONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - RESETDONE"]
            #[inline(always)]
            pub fn resetdone(&mut self) -> RESETDONE_W {
                RESETDONE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [acc](acc) module"]
    pub type ACC = crate::Reg<u32, _ACC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ACC;
    #[doc = "`write(|w| ..)` method takes [acc::W](acc::W) writer structure"]
    impl crate::Writable for ACC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod acc {
        #[doc = "Writer for register ACC"]
        pub type W = crate::W<u32, super::ACC>;
        #[doc = "Register ACC `reset()`'s with value 0"]
        impl crate::ResetValue for super::ACC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ACCUMULATOR`"]
        pub struct ACCUMULATOR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACCUMULATOR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:23 - ACCUMULATOR"]
            #[inline(always)]
            pub fn accumulator(&mut self) -> ACCUMULATOR_W {
                ACCUMULATOR_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [boundary](boundary) module"]
    pub type BOUNDARY = crate::Reg<u32, _BOUNDARY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BOUNDARY;
    #[doc = "`write(|w| ..)` method takes [boundary::W](boundary::W) writer structure"]
    impl crate::Writable for BOUNDARY {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod boundary {
        #[doc = "Writer for register BOUNDARY"]
        pub type W = crate::W<u32, super::BOUNDARY>;
        #[doc = "Register BOUNDARY `reset()`'s with value 0"]
        impl crate::ResetValue for super::BOUNDARY {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DISROW0`"]
        pub struct DISROW0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISROW0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `SPARE`"]
        pub struct SPARE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPARE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_SELF_TEST_ERROR`"]
        pub struct EFC_SELF_TEST_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_SELF_TEST_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_INSTRUCTION_INFO`"]
        pub struct EFC_INSTRUCTION_INFO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_INSTRUCTION_INFO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_INSTRUCTION_ERROR`"]
        pub struct EFC_INSTRUCTION_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_INSTRUCTION_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_AUTOLOAD_ERROR`"]
        pub struct EFC_AUTOLOAD_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_AUTOLOAD_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `OUTPUTENABLE`"]
        pub struct OUTPUTENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTPUTENABLE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 14)) | (((value as u32) & 0x0f) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_ECC_SELF_TEST_EN`"]
        pub struct SYS_ECC_SELF_TEST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_ECC_SELF_TEST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_ECC_OVERRIDE_EN`"]
        pub struct SYS_ECC_OVERRIDE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_ECC_OVERRIDE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_FDI`"]
        pub struct EFC_FDI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_FDI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_DIEID_AUTOLOAD_EN`"]
        pub struct SYS_DIEID_AUTOLOAD_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_DIEID_AUTOLOAD_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_REPAIR_EN`"]
        pub struct SYS_REPAIR_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_REPAIR_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_WS_READ_STATES`"]
        pub struct SYS_WS_READ_STATES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_WS_READ_STATES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `INPUTENABLE`"]
        pub struct INPUTENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INPUTENABLE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 23 - DISROW0"]
            #[inline(always)]
            pub fn disrow0(&mut self) -> DISROW0_W {
                DISROW0_W { w: self }
            }
            #[doc = "Bit 22 - SPARE"]
            #[inline(always)]
            pub fn spare(&mut self) -> SPARE_W {
                SPARE_W { w: self }
            }
            #[doc = "Bit 21 - EFC_SELF_TEST_ERROR"]
            #[inline(always)]
            pub fn efc_self_test_error(&mut self) -> EFC_SELF_TEST_ERROR_W {
                EFC_SELF_TEST_ERROR_W { w: self }
            }
            #[doc = "Bit 20 - EFC_INSTRUCTION_INFO"]
            #[inline(always)]
            pub fn efc_instruction_info(&mut self) -> EFC_INSTRUCTION_INFO_W {
                EFC_INSTRUCTION_INFO_W { w: self }
            }
            #[doc = "Bit 19 - EFC_INSTRUCTION_ERROR"]
            #[inline(always)]
            pub fn efc_instruction_error(&mut self) -> EFC_INSTRUCTION_ERROR_W {
                EFC_INSTRUCTION_ERROR_W { w: self }
            }
            #[doc = "Bit 18 - EFC_AUTOLOAD_ERROR"]
            #[inline(always)]
            pub fn efc_autoload_error(&mut self) -> EFC_AUTOLOAD_ERROR_W {
                EFC_AUTOLOAD_ERROR_W { w: self }
            }
            #[doc = "Bits 14:17 - OUTPUTENABLE"]
            #[inline(always)]
            pub fn outputenable(&mut self) -> OUTPUTENABLE_W {
                OUTPUTENABLE_W { w: self }
            }
            #[doc = "Bit 13 - SYS_ECC_SELF_TEST_EN"]
            #[inline(always)]
            pub fn sys_ecc_self_test_en(&mut self) -> SYS_ECC_SELF_TEST_EN_W {
                SYS_ECC_SELF_TEST_EN_W { w: self }
            }
            #[doc = "Bit 12 - SYS_ECC_OVERRIDE_EN"]
            #[inline(always)]
            pub fn sys_ecc_override_en(&mut self) -> SYS_ECC_OVERRIDE_EN_W {
                SYS_ECC_OVERRIDE_EN_W { w: self }
            }
            #[doc = "Bit 11 - EFC_FDI"]
            #[inline(always)]
            pub fn efc_fdi(&mut self) -> EFC_FDI_W {
                EFC_FDI_W { w: self }
            }
            #[doc = "Bit 10 - SYS_DIEID_AUTOLOAD_EN"]
            #[inline(always)]
            pub fn sys_dieid_autoload_en(&mut self) -> SYS_DIEID_AUTOLOAD_EN_W {
                SYS_DIEID_AUTOLOAD_EN_W { w: self }
            }
            #[doc = "Bits 8:9 - SYS_REPAIR_EN"]
            #[inline(always)]
            pub fn sys_repair_en(&mut self) -> SYS_REPAIR_EN_W {
                SYS_REPAIR_EN_W { w: self }
            }
            #[doc = "Bits 4:7 - SYS_WS_READ_STATES"]
            #[inline(always)]
            pub fn sys_ws_read_states(&mut self) -> SYS_WS_READ_STATES_W {
                SYS_WS_READ_STATES_W { w: self }
            }
            #[doc = "Bits 0:3 - INPUTENABLE"]
            #[inline(always)]
            pub fn inputenable(&mut self) -> INPUTENABLE_W {
                INPUTENABLE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuseflag](efuseflag) module"]
    pub type EFUSEFLAG = crate::Reg<u32, _EFUSEFLAG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEFLAG;
    #[doc = "`write(|w| ..)` method takes [efuseflag::W](efuseflag::W) writer structure"]
    impl crate::Writable for EFUSEFLAG {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuseflag {
        #[doc = "Writer for register EFUSEFLAG"]
        pub type W = crate::W<u32, super::EFUSEFLAG>;
        #[doc = "Register EFUSEFLAG `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEFLAG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - KEY"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efusekey](efusekey) module"]
    pub type EFUSEKEY = crate::Reg<u32, _EFUSEKEY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEKEY;
    #[doc = "`write(|w| ..)` method takes [efusekey::W](efusekey::W) writer structure"]
    impl crate::Writable for EFUSEKEY {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efusekey {
        #[doc = "Writer for register EFUSEKEY"]
        pub type W = crate::W<u32, super::EFUSEKEY>;
        #[doc = "Register EFUSEKEY `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEKEY {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CODE`"]
        pub struct CODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CODE"]
            #[inline(always)]
            pub fn code(&mut self) -> CODE_W {
                CODE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuserelease](efuserelease) module"]
    pub type EFUSERELEASE = crate::Reg<u32, _EFUSERELEASE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSERELEASE;
    #[doc = "`write(|w| ..)` method takes [efuserelease::W](efuserelease::W) writer structure"]
    impl crate::Writable for EFUSERELEASE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuserelease {
        #[doc = "Writer for register EFUSERELEASE"]
        pub type W = crate::W<u32, super::EFUSERELEASE>;
        #[doc = "Register EFUSERELEASE `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSERELEASE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ODPYEAR`"]
        pub struct ODPYEAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODPYEAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 25)) | (((value as u32) & 0x7f) << 25);
                self.w
            }
        }
        #[doc = "Write proxy for field `ODPMONTH`"]
        pub struct ODPMONTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODPMONTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 21)) | (((value as u32) & 0x0f) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `ODPDAY`"]
        pub struct ODPDAY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODPDAY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 16)) | (((value as u32) & 0x1f) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFUSEYEAR`"]
        pub struct EFUSEYEAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFUSEYEAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 9)) | (((value as u32) & 0x7f) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFUSEMONTH`"]
        pub struct EFUSEMONTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFUSEMONTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 5)) | (((value as u32) & 0x0f) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFUSEDAY`"]
        pub struct EFUSEDAY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFUSEDAY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 25:31 - ODPYEAR"]
            #[inline(always)]
            pub fn odpyear(&mut self) -> ODPYEAR_W {
                ODPYEAR_W { w: self }
            }
            #[doc = "Bits 21:24 - ODPMONTH"]
            #[inline(always)]
            pub fn odpmonth(&mut self) -> ODPMONTH_W {
                ODPMONTH_W { w: self }
            }
            #[doc = "Bits 16:20 - ODPDAY"]
            #[inline(always)]
            pub fn odpday(&mut self) -> ODPDAY_W {
                ODPDAY_W { w: self }
            }
            #[doc = "Bits 9:15 - EFUSEYEAR"]
            #[inline(always)]
            pub fn efuseyear(&mut self) -> EFUSEYEAR_W {
                EFUSEYEAR_W { w: self }
            }
            #[doc = "Bits 5:8 - EFUSEMONTH"]
            #[inline(always)]
            pub fn efusemonth(&mut self) -> EFUSEMONTH_W {
                EFUSEMONTH_W { w: self }
            }
            #[doc = "Bits 0:4 - EFUSEDAY"]
            #[inline(always)]
            pub fn efuseday(&mut self) -> EFUSEDAY_W {
                EFUSEDAY_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efusepins](efusepins) module"]
    pub type EFUSEPINS = crate::Reg<u32, _EFUSEPINS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEPINS;
    #[doc = "`write(|w| ..)` method takes [efusepins::W](efusepins::W) writer structure"]
    impl crate::Writable for EFUSEPINS {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efusepins {
        #[doc = "Writer for register EFUSEPINS"]
        pub type W = crate::W<u32, super::EFUSEPINS>;
        #[doc = "Register EFUSEPINS `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEPINS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `EFC_SELF_TEST_DONE`"]
        pub struct EFC_SELF_TEST_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_SELF_TEST_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_SELF_TEST_ERROR`"]
        pub struct EFC_SELF_TEST_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_SELF_TEST_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_ECC_SELF_TEST_EN`"]
        pub struct SYS_ECC_SELF_TEST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_ECC_SELF_TEST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_INSTRUCTION_INFO`"]
        pub struct EFC_INSTRUCTION_INFO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_INSTRUCTION_INFO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_INSTRUCTION_ERROR`"]
        pub struct EFC_INSTRUCTION_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_INSTRUCTION_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_AUTOLOAD_ERROR`"]
        pub struct EFC_AUTOLOAD_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_AUTOLOAD_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_ECC_OVERRIDE_EN`"]
        pub struct SYS_ECC_OVERRIDE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_ECC_OVERRIDE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_READY`"]
        pub struct EFC_READY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_READY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `EFC_FCLRZ`"]
        pub struct EFC_FCLRZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFC_FCLRZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_DIEID_AUTOLOAD_EN`"]
        pub struct SYS_DIEID_AUTOLOAD_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_DIEID_AUTOLOAD_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_REPAIR_EN`"]
        pub struct SYS_REPAIR_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_REPAIR_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `SYS_WS_READ_STATES`"]
        pub struct SYS_WS_READ_STATES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYS_WS_READ_STATES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 15 - EFC_SELF_TEST_DONE"]
            #[inline(always)]
            pub fn efc_self_test_done(&mut self) -> EFC_SELF_TEST_DONE_W {
                EFC_SELF_TEST_DONE_W { w: self }
            }
            #[doc = "Bit 14 - EFC_SELF_TEST_ERROR"]
            #[inline(always)]
            pub fn efc_self_test_error(&mut self) -> EFC_SELF_TEST_ERROR_W {
                EFC_SELF_TEST_ERROR_W { w: self }
            }
            #[doc = "Bit 13 - SYS_ECC_SELF_TEST_EN"]
            #[inline(always)]
            pub fn sys_ecc_self_test_en(&mut self) -> SYS_ECC_SELF_TEST_EN_W {
                SYS_ECC_SELF_TEST_EN_W { w: self }
            }
            #[doc = "Bit 12 - EFC_INSTRUCTION_INFO"]
            #[inline(always)]
            pub fn efc_instruction_info(&mut self) -> EFC_INSTRUCTION_INFO_W {
                EFC_INSTRUCTION_INFO_W { w: self }
            }
            #[doc = "Bit 11 - EFC_INSTRUCTION_ERROR"]
            #[inline(always)]
            pub fn efc_instruction_error(&mut self) -> EFC_INSTRUCTION_ERROR_W {
                EFC_INSTRUCTION_ERROR_W { w: self }
            }
            #[doc = "Bit 10 - EFC_AUTOLOAD_ERROR"]
            #[inline(always)]
            pub fn efc_autoload_error(&mut self) -> EFC_AUTOLOAD_ERROR_W {
                EFC_AUTOLOAD_ERROR_W { w: self }
            }
            #[doc = "Bit 9 - SYS_ECC_OVERRIDE_EN"]
            #[inline(always)]
            pub fn sys_ecc_override_en(&mut self) -> SYS_ECC_OVERRIDE_EN_W {
                SYS_ECC_OVERRIDE_EN_W { w: self }
            }
            #[doc = "Bit 8 - EFC_READY"]
            #[inline(always)]
            pub fn efc_ready(&mut self) -> EFC_READY_W {
                EFC_READY_W { w: self }
            }
            #[doc = "Bit 7 - EFC_FCLRZ"]
            #[inline(always)]
            pub fn efc_fclrz(&mut self) -> EFC_FCLRZ_W {
                EFC_FCLRZ_W { w: self }
            }
            #[doc = "Bit 6 - SYS_DIEID_AUTOLOAD_EN"]
            #[inline(always)]
            pub fn sys_dieid_autoload_en(&mut self) -> SYS_DIEID_AUTOLOAD_EN_W {
                SYS_DIEID_AUTOLOAD_EN_W { w: self }
            }
            #[doc = "Bits 4:5 - SYS_REPAIR_EN"]
            #[inline(always)]
            pub fn sys_repair_en(&mut self) -> SYS_REPAIR_EN_W {
                SYS_REPAIR_EN_W { w: self }
            }
            #[doc = "Bits 0:3 - SYS_WS_READ_STATES"]
            #[inline(always)]
            pub fn sys_ws_read_states(&mut self) -> SYS_WS_READ_STATES_W {
                SYS_WS_READ_STATES_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efusecra](efusecra) module"]
    pub type EFUSECRA = crate::Reg<u32, _EFUSECRA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSECRA;
    #[doc = "`write(|w| ..)` method takes [efusecra::W](efusecra::W) writer structure"]
    impl crate::Writable for EFUSECRA {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efusecra {
        #[doc = "Writer for register EFUSECRA"]
        pub type W = crate::W<u32, super::EFUSECRA>;
        #[doc = "Register EFUSECRA `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSECRA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:5 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuseread](efuseread) module"]
    pub type EFUSEREAD = crate::Reg<u32, _EFUSEREAD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEREAD;
    #[doc = "`write(|w| ..)` method takes [efuseread::W](efuseread::W) writer structure"]
    impl crate::Writable for EFUSEREAD {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuseread {
        #[doc = "Writer for register EFUSEREAD"]
        pub type W = crate::W<u32, super::EFUSEREAD>;
        #[doc = "Register EFUSEREAD `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEREAD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DATABIT`"]
        pub struct DATABIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATABIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `READCLOCK`"]
        pub struct READCLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> READCLOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `DEBUG`"]
        pub struct DEBUG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEBUG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `SPARE`"]
        pub struct SPARE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPARE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `MARGIN`"]
        pub struct MARGIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MARGIN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 8:9 - DATABIT"]
            #[inline(always)]
            pub fn databit(&mut self) -> DATABIT_W {
                DATABIT_W { w: self }
            }
            #[doc = "Bits 4:7 - READCLOCK"]
            #[inline(always)]
            pub fn readclock(&mut self) -> READCLOCK_W {
                READCLOCK_W { w: self }
            }
            #[doc = "Bit 3 - DEBUG"]
            #[inline(always)]
            pub fn debug(&mut self) -> DEBUG_W {
                DEBUG_W { w: self }
            }
            #[doc = "Bit 2 - SPARE"]
            #[inline(always)]
            pub fn spare(&mut self) -> SPARE_W {
                SPARE_W { w: self }
            }
            #[doc = "Bits 0:1 - MARGIN"]
            #[inline(always)]
            pub fn margin(&mut self) -> MARGIN_W {
                MARGIN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuseprogram](efuseprogram) module"]
    pub type EFUSEPROGRAM = crate::Reg<u32, _EFUSEPROGRAM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEPROGRAM;
    #[doc = "`write(|w| ..)` method takes [efuseprogram::W](efuseprogram::W) writer structure"]
    impl crate::Writable for EFUSEPROGRAM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuseprogram {
        #[doc = "Writer for register EFUSEPROGRAM"]
        pub type W = crate::W<u32, super::EFUSEPROGRAM>;
        #[doc = "Register EFUSEPROGRAM `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEPROGRAM {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `COMPAREDISABLE`"]
        pub struct COMPAREDISABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMPAREDISABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Write proxy for field `CLOCKSTALL`"]
        pub struct CLOCKSTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLOCKSTALL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 14)) | (((value as u32) & 0xffff) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `VPPTOVDD`"]
        pub struct VPPTOVDD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VPPTOVDD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `ITERATIONS`"]
        pub struct ITERATIONS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITERATIONS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 9)) | (((value as u32) & 0x0f) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `WRITECLOCK`"]
        pub struct WRITECLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITECLOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 30 - COMPAREDISABLE"]
            #[inline(always)]
            pub fn comparedisable(&mut self) -> COMPAREDISABLE_W {
                COMPAREDISABLE_W { w: self }
            }
            #[doc = "Bits 14:29 - CLOCKSTALL"]
            #[inline(always)]
            pub fn clockstall(&mut self) -> CLOCKSTALL_W {
                CLOCKSTALL_W { w: self }
            }
            #[doc = "Bit 13 - VPPTOVDD"]
            #[inline(always)]
            pub fn vpptovdd(&mut self) -> VPPTOVDD_W {
                VPPTOVDD_W { w: self }
            }
            #[doc = "Bits 9:12 - ITERATIONS"]
            #[inline(always)]
            pub fn iterations(&mut self) -> ITERATIONS_W {
                ITERATIONS_W { w: self }
            }
            #[doc = "Bits 0:8 - WRITECLOCK"]
            #[inline(always)]
            pub fn writeclock(&mut self) -> WRITECLOCK_W {
                WRITECLOCK_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [efuseerror](efuseerror) module"]
    pub type EFUSEERROR = crate::Reg<u32, _EFUSEERROR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EFUSEERROR;
    #[doc = "`write(|w| ..)` method takes [efuseerror::W](efuseerror::W) writer structure"]
    impl crate::Writable for EFUSEERROR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod efuseerror {
        #[doc = "Writer for register EFUSEERROR"]
        pub type W = crate::W<u32, super::EFUSEERROR>;
        #[doc = "Register EFUSEERROR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EFUSEERROR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DONE`"]
        pub struct DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CODE`"]
        pub struct CODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 5 - DONE"]
            #[inline(always)]
            pub fn done(&mut self) -> DONE_W {
                DONE_W { w: self }
            }
            #[doc = "Bits 0:4 - CODE"]
            #[inline(always)]
            pub fn code(&mut self) -> CODE_W {
                CODE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [singlebit](singlebit) module"]
    pub type SINGLEBIT = crate::Reg<u32, _SINGLEBIT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SINGLEBIT;
    #[doc = "`write(|w| ..)` method takes [singlebit::W](singlebit::W) writer structure"]
    impl crate::Writable for SINGLEBIT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod singlebit {
        #[doc = "Writer for register SINGLEBIT"]
        pub type W = crate::W<u32, super::SINGLEBIT>;
        #[doc = "Register SINGLEBIT `reset()`'s with value 0"]
        impl crate::ResetValue for super::SINGLEBIT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `FROMN`"]
        pub struct FROMN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FROMN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits =
                    (self.w.bits & !(0x7fff_ffff << 1)) | (((value as u32) & 0x7fff_ffff) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `FROM0`"]
        pub struct FROM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FROM0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 1:31 - FROMN"]
            #[inline(always)]
            pub fn fromn(&mut self) -> FROMN_W {
                FROMN_W { w: self }
            }
            #[doc = "Bit 0 - FROM0"]
            #[inline(always)]
            pub fn from0(&mut self) -> FROM0_W {
                FROM0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [twobit](twobit) module"]
    pub type TWOBIT = crate::Reg<u32, _TWOBIT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TWOBIT;
    #[doc = "`write(|w| ..)` method takes [twobit::W](twobit::W) writer structure"]
    impl crate::Writable for TWOBIT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod twobit {
        #[doc = "Writer for register TWOBIT"]
        pub type W = crate::W<u32, super::TWOBIT>;
        #[doc = "Register TWOBIT `reset()`'s with value 0"]
        impl crate::ResetValue for super::TWOBIT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `FROMN`"]
        pub struct FROMN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FROMN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits =
                    (self.w.bits & !(0x7fff_ffff << 1)) | (((value as u32) & 0x7fff_ffff) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `FROM0`"]
        pub struct FROM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FROM0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 1:31 - FROMN"]
            #[inline(always)]
            pub fn fromn(&mut self) -> FROMN_W {
                FROMN_W { w: self }
            }
            #[doc = "Bit 0 - FROM0"]
            #[inline(always)]
            pub fn from0(&mut self) -> FROM0_W {
                FROM0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [selftestcyc](selftestcyc) module"]
    pub type SELFTESTCYC = crate::Reg<u32, _SELFTESTCYC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SELFTESTCYC;
    #[doc = "`write(|w| ..)` method takes [selftestcyc::W](selftestcyc::W) writer structure"]
    impl crate::Writable for SELFTESTCYC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod selftestcyc {
        #[doc = "Writer for register SELFTESTCYC"]
        pub type W = crate::W<u32, super::SELFTESTCYC>;
        #[doc = "Register SELFTESTCYC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SELFTESTCYC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CYCLES`"]
        pub struct CYCLES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CYCLES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CYCLES"]
            #[inline(always)]
            pub fn cycles(&mut self) -> CYCLES_W {
                CYCLES_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [selftestsign](selftestsign) module"]
    pub type SELFTESTSIGN = crate::Reg<u32, _SELFTESTSIGN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SELFTESTSIGN;
    #[doc = "`write(|w| ..)` method takes [selftestsign::W](selftestsign::W) writer structure"]
    impl crate::Writable for SELFTESTSIGN {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod selftestsign {
        #[doc = "Writer for register SELFTESTSIGN"]
        pub type W = crate::W<u32, super::SELFTESTSIGN>;
        #[doc = "Register SELFTESTSIGN `reset()`'s with value 0"]
        impl crate::ResetValue for super::SELFTESTSIGN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `SIGNATURE`"]
        pub struct SIGNATURE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIGNATURE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - SIGNATURE"]
            #[inline(always)]
            pub fn signature(&mut self) -> SIGNATURE_W {
                SIGNATURE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [frdctl](frdctl) module"]
    pub type FRDCTL = crate::Reg<u32, _FRDCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FRDCTL;
    #[doc = "`read()` method returns [frdctl::R](frdctl::R) reader structure"]
    impl crate::Readable for FRDCTL {}
    #[doc = "`write(|w| ..)` method takes [frdctl::W](frdctl::W) writer structure"]
    impl crate::Writable for FRDCTL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod frdctl {
        #[doc = "Reader of register FRDCTL"]
        pub type R = crate::R<u32, super::FRDCTL>;
        #[doc = "Writer for register FRDCTL"]
        pub type W = crate::W<u32, super::FRDCTL>;
        #[doc = "Register FRDCTL `reset()`'s with value 0x0200"]
        impl crate::ResetValue for super::FRDCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0200
            }
        }
        #[doc = "Reader of field `RWAIT`"]
        pub type RWAIT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RWAIT`"]
        pub struct RWAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWAIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:11 - RWAIT"]
            #[inline(always)]
            pub fn rwait(&self) -> RWAIT_R {
                RWAIT_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:11 - RWAIT"]
            #[inline(always)]
            pub fn rwait(&mut self) -> RWAIT_W {
                RWAIT_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsprd](fsprd) module"]
    pub type FSPRD = crate::Reg<u32, _FSPRD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSPRD;
    #[doc = "`read()` method returns [fsprd::R](fsprd::R) reader structure"]
    impl crate::Readable for FSPRD {}
    #[doc = "`write(|w| ..)` method takes [fsprd::W](fsprd::W) writer structure"]
    impl crate::Writable for FSPRD {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsprd {
        #[doc = "Reader of register FSPRD"]
        pub type R = crate::R<u32, super::FSPRD>;
        #[doc = "Writer for register FSPRD"]
        pub type W = crate::W<u32, super::FSPRD>;
        #[doc = "Register FSPRD `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSPRD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RMBSEM`"]
        pub type RMBSEM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RMBSEM`"]
        pub struct RMBSEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMBSEM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `RM1`"]
        pub type RM1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RM1`"]
        pub struct RM1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RM1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RM0`"]
        pub type RM0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RM0`"]
        pub struct RM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RM0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - RMBSEM"]
            #[inline(always)]
            pub fn rmbsem(&self) -> RMBSEM_R {
                RMBSEM_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 1 - RM1"]
            #[inline(always)]
            pub fn rm1(&self) -> RM1_R {
                RM1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RM0"]
            #[inline(always)]
            pub fn rm0(&self) -> RM0_R {
                RM0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - RMBSEM"]
            #[inline(always)]
            pub fn rmbsem(&mut self) -> RMBSEM_W {
                RMBSEM_W { w: self }
            }
            #[doc = "Bit 1 - RM1"]
            #[inline(always)]
            pub fn rm1(&mut self) -> RM1_W {
                RM1_W { w: self }
            }
            #[doc = "Bit 0 - RM0"]
            #[inline(always)]
            pub fn rm0(&mut self) -> RM0_W {
                RM0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fedacctl1](fedacctl1) module"]
    pub type FEDACCTL1 = crate::Reg<u32, _FEDACCTL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FEDACCTL1;
    #[doc = "`read()` method returns [fedacctl1::R](fedacctl1::R) reader structure"]
    impl crate::Readable for FEDACCTL1 {}
    #[doc = "`write(|w| ..)` method takes [fedacctl1::W](fedacctl1::W) writer structure"]
    impl crate::Writable for FEDACCTL1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fedacctl1 {
        #[doc = "Reader of register FEDACCTL1"]
        pub type R = crate::R<u32, super::FEDACCTL1>;
        #[doc = "Writer for register FEDACCTL1"]
        pub type W = crate::W<u32, super::FEDACCTL1>;
        #[doc = "Register FEDACCTL1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FEDACCTL1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SUSP_IGNR`"]
        pub type SUSP_IGNR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SUSP_IGNR`"]
        pub struct SUSP_IGNR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSP_IGNR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - SUSP_IGNR"]
            #[inline(always)]
            pub fn susp_ignr(&self) -> SUSP_IGNR_R {
                SUSP_IGNR_R::new(((self.bits >> 24) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - SUSP_IGNR"]
            #[inline(always)]
            pub fn susp_ignr(&mut self) -> SUSP_IGNR_W {
                SUSP_IGNR_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fedacstat](fedacstat) module"]
    pub type FEDACSTAT = crate::Reg<u32, _FEDACSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FEDACSTAT;
    #[doc = "`read()` method returns [fedacstat::R](fedacstat::R) reader structure"]
    impl crate::Readable for FEDACSTAT {}
    #[doc = "`write(|w| ..)` method takes [fedacstat::W](fedacstat::W) writer structure"]
    impl crate::Writable for FEDACSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fedacstat {
        #[doc = "Reader of register FEDACSTAT"]
        pub type R = crate::R<u32, super::FEDACSTAT>;
        #[doc = "Writer for register FEDACSTAT"]
        pub type W = crate::W<u32, super::FEDACSTAT>;
        #[doc = "Register FEDACSTAT `reset()`'s with value 0"]
        impl crate::ResetValue for super::FEDACSTAT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RVF_INT`"]
        pub type RVF_INT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RVF_INT`"]
        pub struct RVF_INT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RVF_INT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `FSM_DONE`"]
        pub type FSM_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSM_DONE`"]
        pub struct FSM_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 25 - RVF_INT"]
            #[inline(always)]
            pub fn rvf_int(&self) -> RVF_INT_R {
                RVF_INT_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - FSM_DONE"]
            #[inline(always)]
            pub fn fsm_done(&self) -> FSM_DONE_R {
                FSM_DONE_R::new(((self.bits >> 24) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 25 - RVF_INT"]
            #[inline(always)]
            pub fn rvf_int(&mut self) -> RVF_INT_W {
                RVF_INT_W { w: self }
            }
            #[doc = "Bit 24 - FSM_DONE"]
            #[inline(always)]
            pub fn fsm_done(&mut self) -> FSM_DONE_W {
                FSM_DONE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbprot](fbprot) module"]
    pub type FBPROT = crate::Reg<u32, _FBPROT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBPROT;
    #[doc = "`read()` method returns [fbprot::R](fbprot::R) reader structure"]
    impl crate::Readable for FBPROT {}
    #[doc = "`write(|w| ..)` method takes [fbprot::W](fbprot::W) writer structure"]
    impl crate::Writable for FBPROT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbprot {
        #[doc = "Reader of register FBPROT"]
        pub type R = crate::R<u32, super::FBPROT>;
        #[doc = "Writer for register FBPROT"]
        pub type W = crate::W<u32, super::FBPROT>;
        #[doc = "Register FBPROT `reset()`'s with value 0"]
        impl crate::ResetValue for super::FBPROT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PROTL1DIS`"]
        pub type PROTL1DIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PROTL1DIS`"]
        pub struct PROTL1DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PROTL1DIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - PROTL1DIS"]
            #[inline(always)]
            pub fn protl1dis(&self) -> PROTL1DIS_R {
                PROTL1DIS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - PROTL1DIS"]
            #[inline(always)]
            pub fn protl1dis(&mut self) -> PROTL1DIS_W {
                PROTL1DIS_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbse](fbse) module"]
    pub type FBSE = crate::Reg<u32, _FBSE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBSE;
    #[doc = "`read()` method returns [fbse::R](fbse::R) reader structure"]
    impl crate::Readable for FBSE {}
    #[doc = "`write(|w| ..)` method takes [fbse::W](fbse::W) writer structure"]
    impl crate::Writable for FBSE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbse {
        #[doc = "Reader of register FBSE"]
        pub type R = crate::R<u32, super::FBSE>;
        #[doc = "Writer for register FBSE"]
        pub type W = crate::W<u32, super::FBSE>;
        #[doc = "Register FBSE `reset()`'s with value 0"]
        impl crate::ResetValue for super::FBSE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BSE`"]
        pub type BSE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `BSE`"]
        pub struct BSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BSE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - BSE"]
            #[inline(always)]
            pub fn bse(&self) -> BSE_R {
                BSE_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - BSE"]
            #[inline(always)]
            pub fn bse(&mut self) -> BSE_W {
                BSE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbbusy](fbbusy) module"]
    pub type FBBUSY = crate::Reg<u32, _FBBUSY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBBUSY;
    #[doc = "`read()` method returns [fbbusy::R](fbbusy::R) reader structure"]
    impl crate::Readable for FBBUSY {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbbusy {
        #[doc = "Reader of register FBBUSY"]
        pub type R = crate::R<u32, super::FBBUSY>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbac](fbac) module"]
    pub type FBAC = crate::Reg<u32, _FBAC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBAC;
    #[doc = "`read()` method returns [fbac::R](fbac::R) reader structure"]
    impl crate::Readable for FBAC {}
    #[doc = "`write(|w| ..)` method takes [fbac::W](fbac::W) writer structure"]
    impl crate::Writable for FBAC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbac {
        #[doc = "Reader of register FBAC"]
        pub type R = crate::R<u32, super::FBAC>;
        #[doc = "Writer for register FBAC"]
        pub type W = crate::W<u32, super::FBAC>;
        #[doc = "Register FBAC `reset()`'s with value 0x0f"]
        impl crate::ResetValue for super::FBAC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0f
            }
        }
        #[doc = "Reader of field `OTPPROTDIS`"]
        pub type OTPPROTDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OTPPROTDIS`"]
        pub struct OTPPROTDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OTPPROTDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `BAGP`"]
        pub type BAGP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BAGP`"]
        pub struct BAGP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BAGP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `VREADS`"]
        pub type VREADS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VREADS`"]
        pub struct VREADS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VREADS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - OTPPROTDIS"]
            #[inline(always)]
            pub fn otpprotdis(&self) -> OTPPROTDIS_R {
                OTPPROTDIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - BAGP"]
            #[inline(always)]
            pub fn bagp(&self) -> BAGP_R {
                BAGP_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - VREADS"]
            #[inline(always)]
            pub fn vreads(&self) -> VREADS_R {
                VREADS_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 16 - OTPPROTDIS"]
            #[inline(always)]
            pub fn otpprotdis(&mut self) -> OTPPROTDIS_W {
                OTPPROTDIS_W { w: self }
            }
            #[doc = "Bits 8:15 - BAGP"]
            #[inline(always)]
            pub fn bagp(&mut self) -> BAGP_W {
                BAGP_W { w: self }
            }
            #[doc = "Bits 0:7 - VREADS"]
            #[inline(always)]
            pub fn vreads(&mut self) -> VREADS_W {
                VREADS_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbfallback](fbfallback) module"]
    pub type FBFALLBACK = crate::Reg<u32, _FBFALLBACK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBFALLBACK;
    #[doc = "`read()` method returns [fbfallback::R](fbfallback::R) reader structure"]
    impl crate::Readable for FBFALLBACK {}
    #[doc = "`write(|w| ..)` method takes [fbfallback::W](fbfallback::W) writer structure"]
    impl crate::Writable for FBFALLBACK {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbfallback {
        #[doc = "Reader of register FBFALLBACK"]
        pub type R = crate::R<u32, super::FBFALLBACK>;
        #[doc = "Writer for register FBFALLBACK"]
        pub type W = crate::W<u32, super::FBFALLBACK>;
        #[doc = "Register FBFALLBACK `reset()`'s with value 0x0505_ffff"]
        impl crate::ResetValue for super::FBFALLBACK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0505_ffff
            }
        }
        #[doc = "Reader of field `FSM_PWRSAV`"]
        pub type FSM_PWRSAV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FSM_PWRSAV`"]
        pub struct FSM_PWRSAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_PWRSAV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `REG_PWRSAV`"]
        pub type REG_PWRSAV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REG_PWRSAV`"]
        pub struct REG_PWRSAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REG_PWRSAV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR7`"]
        pub type BANKPWR7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR7`"]
        pub struct BANKPWR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR6`"]
        pub type BANKPWR6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR6`"]
        pub struct BANKPWR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR5`"]
        pub type BANKPWR5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR5`"]
        pub struct BANKPWR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR4`"]
        pub type BANKPWR4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR4`"]
        pub struct BANKPWR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR3`"]
        pub type BANKPWR3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR3`"]
        pub struct BANKPWR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR2`"]
        pub type BANKPWR2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR2`"]
        pub struct BANKPWR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR1`"]
        pub type BANKPWR1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR1`"]
        pub struct BANKPWR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `BANKPWR0`"]
        pub type BANKPWR0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANKPWR0`"]
        pub struct BANKPWR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANKPWR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - FSM_PWRSAV"]
            #[inline(always)]
            pub fn fsm_pwrsav(&self) -> FSM_PWRSAV_R {
                FSM_PWRSAV_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - REG_PWRSAV"]
            #[inline(always)]
            pub fn reg_pwrsav(&self) -> REG_PWRSAV_R {
                REG_PWRSAV_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 14:15 - BANKPWR7"]
            #[inline(always)]
            pub fn bankpwr7(&self) -> BANKPWR7_R {
                BANKPWR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - BANKPWR6"]
            #[inline(always)]
            pub fn bankpwr6(&self) -> BANKPWR6_R {
                BANKPWR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - BANKPWR5"]
            #[inline(always)]
            pub fn bankpwr5(&self) -> BANKPWR5_R {
                BANKPWR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - BANKPWR4"]
            #[inline(always)]
            pub fn bankpwr4(&self) -> BANKPWR4_R {
                BANKPWR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - BANKPWR3"]
            #[inline(always)]
            pub fn bankpwr3(&self) -> BANKPWR3_R {
                BANKPWR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - BANKPWR2"]
            #[inline(always)]
            pub fn bankpwr2(&self) -> BANKPWR2_R {
                BANKPWR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - BANKPWR1"]
            #[inline(always)]
            pub fn bankpwr1(&self) -> BANKPWR1_R {
                BANKPWR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - BANKPWR0"]
            #[inline(always)]
            pub fn bankpwr0(&self) -> BANKPWR0_R {
                BANKPWR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - FSM_PWRSAV"]
            #[inline(always)]
            pub fn fsm_pwrsav(&mut self) -> FSM_PWRSAV_W {
                FSM_PWRSAV_W { w: self }
            }
            #[doc = "Bits 16:19 - REG_PWRSAV"]
            #[inline(always)]
            pub fn reg_pwrsav(&mut self) -> REG_PWRSAV_W {
                REG_PWRSAV_W { w: self }
            }
            #[doc = "Bits 14:15 - BANKPWR7"]
            #[inline(always)]
            pub fn bankpwr7(&mut self) -> BANKPWR7_W {
                BANKPWR7_W { w: self }
            }
            #[doc = "Bits 12:13 - BANKPWR6"]
            #[inline(always)]
            pub fn bankpwr6(&mut self) -> BANKPWR6_W {
                BANKPWR6_W { w: self }
            }
            #[doc = "Bits 10:11 - BANKPWR5"]
            #[inline(always)]
            pub fn bankpwr5(&mut self) -> BANKPWR5_W {
                BANKPWR5_W { w: self }
            }
            #[doc = "Bits 8:9 - BANKPWR4"]
            #[inline(always)]
            pub fn bankpwr4(&mut self) -> BANKPWR4_W {
                BANKPWR4_W { w: self }
            }
            #[doc = "Bits 6:7 - BANKPWR3"]
            #[inline(always)]
            pub fn bankpwr3(&mut self) -> BANKPWR3_W {
                BANKPWR3_W { w: self }
            }
            #[doc = "Bits 4:5 - BANKPWR2"]
            #[inline(always)]
            pub fn bankpwr2(&mut self) -> BANKPWR2_W {
                BANKPWR2_W { w: self }
            }
            #[doc = "Bits 2:3 - BANKPWR1"]
            #[inline(always)]
            pub fn bankpwr1(&mut self) -> BANKPWR1_W {
                BANKPWR1_W { w: self }
            }
            #[doc = "Bits 0:1 - BANKPWR0"]
            #[inline(always)]
            pub fn bankpwr0(&mut self) -> BANKPWR0_W {
                BANKPWR0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbprdy](fbprdy) module"]
    pub type FBPRDY = crate::Reg<u32, _FBPRDY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBPRDY;
    #[doc = "`read()` method returns [fbprdy::R](fbprdy::R) reader structure"]
    impl crate::Readable for FBPRDY {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbprdy {
        #[doc = "Reader of register FBPRDY"]
        pub type R = crate::R<u32, super::FBPRDY>;
        #[doc = "Reader of field `BANKBUSY`"]
        pub type BANKBUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PUMPRDY`"]
        pub type PUMPRDY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BANKRDY`"]
        pub type BANKRDY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - BANKBUSY"]
            #[inline(always)]
            pub fn bankbusy(&self) -> BANKBUSY_R {
                BANKBUSY_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - PUMPRDY"]
            #[inline(always)]
            pub fn pumprdy(&self) -> PUMPRDY_R {
                PUMPRDY_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 0 - BANKRDY"]
            #[inline(always)]
            pub fn bankrdy(&self) -> BANKRDY_R {
                BANKRDY_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpac1](fpac1) module"]
    pub type FPAC1 = crate::Reg<u32, _FPAC1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPAC1;
    #[doc = "`read()` method returns [fpac1::R](fpac1::R) reader structure"]
    impl crate::Readable for FPAC1 {}
    #[doc = "`write(|w| ..)` method takes [fpac1::W](fpac1::W) writer structure"]
    impl crate::Writable for FPAC1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fpac1 {
        #[doc = "Reader of register FPAC1"]
        pub type R = crate::R<u32, super::FPAC1>;
        #[doc = "Writer for register FPAC1"]
        pub type W = crate::W<u32, super::FPAC1>;
        #[doc = "Register FPAC1 `reset()`'s with value 0x0208_2081"]
        impl crate::ResetValue for super::FPAC1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0208_2081
            }
        }
        #[doc = "Reader of field `PSLEEPTDIS`"]
        pub type PSLEEPTDIS_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSLEEPTDIS`"]
        pub struct PSLEEPTDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSLEEPTDIS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PUMPRESET_PW`"]
        pub type PUMPRESET_PW_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PUMPRESET_PW`"]
        pub struct PUMPRESET_PW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUMPRESET_PW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | (((value as u32) & 0x0fff) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PUMPPWR`"]
        pub type PUMPPWR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUMPPWR`"]
        pub struct PUMPPWR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUMPPWR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:27 - PSLEEPTDIS"]
            #[inline(always)]
            pub fn psleeptdis(&self) -> PSLEEPTDIS_R {
                PSLEEPTDIS_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 4:15 - PUMPRESET_PW"]
            #[inline(always)]
            pub fn pumpreset_pw(&self) -> PUMPRESET_PW_R {
                PUMPRESET_PW_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:1 - PUMPPWR"]
            #[inline(always)]
            pub fn pumppwr(&self) -> PUMPPWR_R {
                PUMPPWR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:27 - PSLEEPTDIS"]
            #[inline(always)]
            pub fn psleeptdis(&mut self) -> PSLEEPTDIS_W {
                PSLEEPTDIS_W { w: self }
            }
            #[doc = "Bits 4:15 - PUMPRESET_PW"]
            #[inline(always)]
            pub fn pumpreset_pw(&mut self) -> PUMPRESET_PW_W {
                PUMPRESET_PW_W { w: self }
            }
            #[doc = "Bits 0:1 - PUMPPWR"]
            #[inline(always)]
            pub fn pumppwr(&mut self) -> PUMPPWR_W {
                PUMPPWR_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpac2](fpac2) module"]
    pub type FPAC2 = crate::Reg<u32, _FPAC2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPAC2;
    #[doc = "`read()` method returns [fpac2::R](fpac2::R) reader structure"]
    impl crate::Readable for FPAC2 {}
    #[doc = "`write(|w| ..)` method takes [fpac2::W](fpac2::W) writer structure"]
    impl crate::Writable for FPAC2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fpac2 {
        #[doc = "Reader of register FPAC2"]
        pub type R = crate::R<u32, super::FPAC2>;
        #[doc = "Writer for register FPAC2"]
        pub type W = crate::W<u32, super::FPAC2>;
        #[doc = "Register FPAC2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FPAC2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PAGP`"]
        pub type PAGP_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PAGP`"]
        pub struct PAGP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PAGP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - PAGP"]
            #[inline(always)]
            pub fn pagp(&self) -> PAGP_R {
                PAGP_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - PAGP"]
            #[inline(always)]
            pub fn pagp(&mut self) -> PAGP_W {
                PAGP_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fmac](fmac) module"]
    pub type FMAC = crate::Reg<u32, _FMAC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FMAC;
    #[doc = "`read()` method returns [fmac::R](fmac::R) reader structure"]
    impl crate::Readable for FMAC {}
    #[doc = "`write(|w| ..)` method takes [fmac::W](fmac::W) writer structure"]
    impl crate::Writable for FMAC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fmac {
        #[doc = "Reader of register FMAC"]
        pub type R = crate::R<u32, super::FMAC>;
        #[doc = "Writer for register FMAC"]
        pub type W = crate::W<u32, super::FMAC>;
        #[doc = "Register FMAC `reset()`'s with value 0"]
        impl crate::ResetValue for super::FMAC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BANK`"]
        pub type BANK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BANK`"]
        pub struct BANK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BANK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - BANK"]
            #[inline(always)]
            pub fn bank(&self) -> BANK_R {
                BANK_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - BANK"]
            #[inline(always)]
            pub fn bank(&mut self) -> BANK_W {
                BANK_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fmstat](fmstat) module"]
    pub type FMSTAT = crate::Reg<u32, _FMSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FMSTAT;
    #[doc = "`read()` method returns [fmstat::R](fmstat::R) reader structure"]
    impl crate::Readable for FMSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fmstat {
        #[doc = "Reader of register FMSTAT"]
        pub type R = crate::R<u32, super::FMSTAT>;
        #[doc = "Reader of field `RVSUSP`"]
        pub type RVSUSP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RDVER`"]
        pub type RDVER_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RVF`"]
        pub type RVF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ILA`"]
        pub type ILA_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DBF`"]
        pub type DBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PGV`"]
        pub type PGV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PCV`"]
        pub type PCV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EV`"]
        pub type EV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CV`"]
        pub type CV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ERS`"]
        pub type ERS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PGM`"]
        pub type PGM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `INVDAT`"]
        pub type INVDAT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CSTAT`"]
        pub type CSTAT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VOLSTAT`"]
        pub type VOLSTAT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ESUSP`"]
        pub type ESUSP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PSUSP`"]
        pub type PSUSP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SLOCK`"]
        pub type SLOCK_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 17 - RVSUSP"]
            #[inline(always)]
            pub fn rvsusp(&self) -> RVSUSP_R {
                RVSUSP_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RDVER"]
            #[inline(always)]
            pub fn rdver(&self) -> RDVER_R {
                RDVER_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - RVF"]
            #[inline(always)]
            pub fn rvf(&self) -> RVF_R {
                RVF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - ILA"]
            #[inline(always)]
            pub fn ila(&self) -> ILA_R {
                ILA_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DBF"]
            #[inline(always)]
            pub fn dbf(&self) -> DBF_R {
                DBF_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - PGV"]
            #[inline(always)]
            pub fn pgv(&self) -> PGV_R {
                PGV_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - PCV"]
            #[inline(always)]
            pub fn pcv(&self) -> PCV_R {
                PCV_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - EV"]
            #[inline(always)]
            pub fn ev(&self) -> EV_R {
                EV_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CV"]
            #[inline(always)]
            pub fn cv(&self) -> CV_R {
                CV_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ERS"]
            #[inline(always)]
            pub fn ers(&self) -> ERS_R {
                ERS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - PGM"]
            #[inline(always)]
            pub fn pgm(&self) -> PGM_R {
                PGM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - INVDAT"]
            #[inline(always)]
            pub fn invdat(&self) -> INVDAT_R {
                INVDAT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CSTAT"]
            #[inline(always)]
            pub fn cstat(&self) -> CSTAT_R {
                CSTAT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - VOLSTAT"]
            #[inline(always)]
            pub fn volstat(&self) -> VOLSTAT_R {
                VOLSTAT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ESUSP"]
            #[inline(always)]
            pub fn esusp(&self) -> ESUSP_R {
                ESUSP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - PSUSP"]
            #[inline(always)]
            pub fn psusp(&self) -> PSUSP_R {
                PSUSP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - SLOCK"]
            #[inline(always)]
            pub fn slock(&self) -> SLOCK_R {
                SLOCK_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [flock](flock) module"]
    pub type FLOCK = crate::Reg<u32, _FLOCK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLOCK;
    #[doc = "`read()` method returns [flock::R](flock::R) reader structure"]
    impl crate::Readable for FLOCK {}
    #[doc = "`write(|w| ..)` method takes [flock::W](flock::W) writer structure"]
    impl crate::Writable for FLOCK {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod flock {
        #[doc = "Reader of register FLOCK"]
        pub type R = crate::R<u32, super::FLOCK>;
        #[doc = "Writer for register FLOCK"]
        pub type W = crate::W<u32, super::FLOCK>;
        #[doc = "Register FLOCK `reset()`'s with value 0x55aa"]
        impl crate::ResetValue for super::FLOCK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x55aa
            }
        }
        #[doc = "Reader of field `ENCOM`"]
        pub type ENCOM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ENCOM`"]
        pub struct ENCOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENCOM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - ENCOM"]
            #[inline(always)]
            pub fn encom(&self) -> ENCOM_R {
                ENCOM_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - ENCOM"]
            #[inline(always)]
            pub fn encom(&mut self) -> ENCOM_W {
                ENCOM_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvreadct](fvreadct) module"]
    pub type FVREADCT = crate::Reg<u32, _FVREADCT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVREADCT;
    #[doc = "`read()` method returns [fvreadct::R](fvreadct::R) reader structure"]
    impl crate::Readable for FVREADCT {}
    #[doc = "`write(|w| ..)` method takes [fvreadct::W](fvreadct::W) writer structure"]
    impl crate::Writable for FVREADCT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvreadct {
        #[doc = "Reader of register FVREADCT"]
        pub type R = crate::R<u32, super::FVREADCT>;
        #[doc = "Writer for register FVREADCT"]
        pub type W = crate::W<u32, super::FVREADCT>;
        #[doc = "Register FVREADCT `reset()`'s with value 0x08"]
        impl crate::ResetValue for super::FVREADCT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x08
            }
        }
        #[doc = "Reader of field `VREADCT`"]
        pub type VREADCT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VREADCT`"]
        pub struct VREADCT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VREADCT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - VREADCT"]
            #[inline(always)]
            pub fn vreadct(&self) -> VREADCT_R {
                VREADCT_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - VREADCT"]
            #[inline(always)]
            pub fn vreadct(&mut self) -> VREADCT_W {
                VREADCT_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvhvct1](fvhvct1) module"]
    pub type FVHVCT1 = crate::Reg<u32, _FVHVCT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVHVCT1;
    #[doc = "`read()` method returns [fvhvct1::R](fvhvct1::R) reader structure"]
    impl crate::Readable for FVHVCT1 {}
    #[doc = "`write(|w| ..)` method takes [fvhvct1::W](fvhvct1::W) writer structure"]
    impl crate::Writable for FVHVCT1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvhvct1 {
        #[doc = "Reader of register FVHVCT1"]
        pub type R = crate::R<u32, super::FVHVCT1>;
        #[doc = "Writer for register FVHVCT1"]
        pub type W = crate::W<u32, super::FVHVCT1>;
        #[doc = "Register FVHVCT1 `reset()`'s with value 0x0084_0088"]
        impl crate::ResetValue for super::FVHVCT1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0084_0088
            }
        }
        #[doc = "Reader of field `TRIM13_E`"]
        pub type TRIM13_E_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM13_E`"]
        pub struct TRIM13_E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM13_E_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `VHVCT_E`"]
        pub type VHVCT_E_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VHVCT_E`"]
        pub struct VHVCT_E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VHVCT_E_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TRIM13_PV`"]
        pub type TRIM13_PV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM13_PV`"]
        pub struct TRIM13_PV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM13_PV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `VHVCT_PV`"]
        pub type VHVCT_PV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VHVCT_PV`"]
        pub struct VHVCT_PV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VHVCT_PV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - TRIM13_E"]
            #[inline(always)]
            pub fn trim13_e(&self) -> TRIM13_E_R {
                TRIM13_E_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - VHVCT_E"]
            #[inline(always)]
            pub fn vhvct_e(&self) -> VHVCT_E_R {
                VHVCT_E_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - TRIM13_PV"]
            #[inline(always)]
            pub fn trim13_pv(&self) -> TRIM13_PV_R {
                TRIM13_PV_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - VHVCT_PV"]
            #[inline(always)]
            pub fn vhvct_pv(&self) -> VHVCT_PV_R {
                VHVCT_PV_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - TRIM13_E"]
            #[inline(always)]
            pub fn trim13_e(&mut self) -> TRIM13_E_W {
                TRIM13_E_W { w: self }
            }
            #[doc = "Bits 16:19 - VHVCT_E"]
            #[inline(always)]
            pub fn vhvct_e(&mut self) -> VHVCT_E_W {
                VHVCT_E_W { w: self }
            }
            #[doc = "Bits 4:7 - TRIM13_PV"]
            #[inline(always)]
            pub fn trim13_pv(&mut self) -> TRIM13_PV_W {
                TRIM13_PV_W { w: self }
            }
            #[doc = "Bits 0:3 - VHVCT_PV"]
            #[inline(always)]
            pub fn vhvct_pv(&mut self) -> VHVCT_PV_W {
                VHVCT_PV_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvhvct2](fvhvct2) module"]
    pub type FVHVCT2 = crate::Reg<u32, _FVHVCT2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVHVCT2;
    #[doc = "`read()` method returns [fvhvct2::R](fvhvct2::R) reader structure"]
    impl crate::Readable for FVHVCT2 {}
    #[doc = "`write(|w| ..)` method takes [fvhvct2::W](fvhvct2::W) writer structure"]
    impl crate::Writable for FVHVCT2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvhvct2 {
        #[doc = "Reader of register FVHVCT2"]
        pub type R = crate::R<u32, super::FVHVCT2>;
        #[doc = "Writer for register FVHVCT2"]
        pub type W = crate::W<u32, super::FVHVCT2>;
        #[doc = "Register FVHVCT2 `reset()`'s with value 0x00a2_0000"]
        impl crate::ResetValue for super::FVHVCT2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x00a2_0000
            }
        }
        #[doc = "Reader of field `TRIM13_P`"]
        pub type TRIM13_P_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM13_P`"]
        pub struct TRIM13_P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM13_P_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `VHVCT_P`"]
        pub type VHVCT_P_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VHVCT_P`"]
        pub struct VHVCT_P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VHVCT_P_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - TRIM13_P"]
            #[inline(always)]
            pub fn trim13_p(&self) -> TRIM13_P_R {
                TRIM13_P_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - VHVCT_P"]
            #[inline(always)]
            pub fn vhvct_p(&self) -> VHVCT_P_R {
                VHVCT_P_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - TRIM13_P"]
            #[inline(always)]
            pub fn trim13_p(&mut self) -> TRIM13_P_W {
                TRIM13_P_W { w: self }
            }
            #[doc = "Bits 16:19 - VHVCT_P"]
            #[inline(always)]
            pub fn vhvct_p(&mut self) -> VHVCT_P_W {
                VHVCT_P_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvhvct3](fvhvct3) module"]
    pub type FVHVCT3 = crate::Reg<u32, _FVHVCT3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVHVCT3;
    #[doc = "`read()` method returns [fvhvct3::R](fvhvct3::R) reader structure"]
    impl crate::Readable for FVHVCT3 {}
    #[doc = "`write(|w| ..)` method takes [fvhvct3::W](fvhvct3::W) writer structure"]
    impl crate::Writable for FVHVCT3 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvhvct3 {
        #[doc = "Reader of register FVHVCT3"]
        pub type R = crate::R<u32, super::FVHVCT3>;
        #[doc = "Writer for register FVHVCT3"]
        pub type W = crate::W<u32, super::FVHVCT3>;
        #[doc = "Register FVHVCT3 `reset()`'s with value 0x000f_0000"]
        impl crate::ResetValue for super::FVHVCT3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x000f_0000
            }
        }
        #[doc = "Reader of field `WCT`"]
        pub type WCT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WCT`"]
        pub struct WCT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `VHVCT_READ`"]
        pub type VHVCT_READ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VHVCT_READ`"]
        pub struct VHVCT_READ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VHVCT_READ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:19 - WCT"]
            #[inline(always)]
            pub fn wct(&self) -> WCT_R {
                WCT_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - VHVCT_READ"]
            #[inline(always)]
            pub fn vhvct_read(&self) -> VHVCT_READ_R {
                VHVCT_READ_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:19 - WCT"]
            #[inline(always)]
            pub fn wct(&mut self) -> WCT_W {
                WCT_W { w: self }
            }
            #[doc = "Bits 0:3 - VHVCT_READ"]
            #[inline(always)]
            pub fn vhvct_read(&mut self) -> VHVCT_READ_W {
                VHVCT_READ_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvnvct](fvnvct) module"]
    pub type FVNVCT = crate::Reg<u32, _FVNVCT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVNVCT;
    #[doc = "`read()` method returns [fvnvct::R](fvnvct::R) reader structure"]
    impl crate::Readable for FVNVCT {}
    #[doc = "`write(|w| ..)` method takes [fvnvct::W](fvnvct::W) writer structure"]
    impl crate::Writable for FVNVCT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvnvct {
        #[doc = "Reader of register FVNVCT"]
        pub type R = crate::R<u32, super::FVNVCT>;
        #[doc = "Writer for register FVNVCT"]
        pub type W = crate::W<u32, super::FVNVCT>;
        #[doc = "Register FVNVCT `reset()`'s with value 0x0800"]
        impl crate::ResetValue for super::FVNVCT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0800
            }
        }
        #[doc = "Reader of field `VCG2P5CT`"]
        pub type VCG2P5CT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VCG2P5CT`"]
        pub struct VCG2P5CT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VCG2P5CT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `VIN_CT`"]
        pub type VIN_CT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VIN_CT`"]
        pub struct VIN_CT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VIN_CT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - VCG2P5CT"]
            #[inline(always)]
            pub fn vcg2p5ct(&self) -> VCG2P5CT_R {
                VCG2P5CT_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - VIN_CT"]
            #[inline(always)]
            pub fn vin_ct(&self) -> VIN_CT_R {
                VIN_CT_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - VCG2P5CT"]
            #[inline(always)]
            pub fn vcg2p5ct(&mut self) -> VCG2P5CT_W {
                VCG2P5CT_W { w: self }
            }
            #[doc = "Bits 0:4 - VIN_CT"]
            #[inline(always)]
            pub fn vin_ct(&mut self) -> VIN_CT_W {
                VIN_CT_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvslp](fvslp) module"]
    pub type FVSLP = crate::Reg<u32, _FVSLP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVSLP;
    #[doc = "`read()` method returns [fvslp::R](fvslp::R) reader structure"]
    impl crate::Readable for FVSLP {}
    #[doc = "`write(|w| ..)` method takes [fvslp::W](fvslp::W) writer structure"]
    impl crate::Writable for FVSLP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvslp {
        #[doc = "Reader of register FVSLP"]
        pub type R = crate::R<u32, super::FVSLP>;
        #[doc = "Writer for register FVSLP"]
        pub type W = crate::W<u32, super::FVSLP>;
        #[doc = "Register FVSLP `reset()`'s with value 0x8000"]
        impl crate::ResetValue for super::FVSLP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x8000
            }
        }
        #[doc = "Reader of field `VSL_P`"]
        pub type VSL_P_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VSL_P`"]
        pub struct VSL_P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VSL_P_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - VSL_P"]
            #[inline(always)]
            pub fn vsl_p(&self) -> VSL_P_R {
                VSL_P_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - VSL_P"]
            #[inline(always)]
            pub fn vsl_p(&mut self) -> VSL_P_W {
                VSL_P_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fvwlct](fvwlct) module"]
    pub type FVWLCT = crate::Reg<u32, _FVWLCT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FVWLCT;
    #[doc = "`read()` method returns [fvwlct::R](fvwlct::R) reader structure"]
    impl crate::Readable for FVWLCT {}
    #[doc = "`write(|w| ..)` method takes [fvwlct::W](fvwlct::W) writer structure"]
    impl crate::Writable for FVWLCT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fvwlct {
        #[doc = "Reader of register FVWLCT"]
        pub type R = crate::R<u32, super::FVWLCT>;
        #[doc = "Writer for register FVWLCT"]
        pub type W = crate::W<u32, super::FVWLCT>;
        #[doc = "Register FVWLCT `reset()`'s with value 0x08"]
        impl crate::ResetValue for super::FVWLCT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x08
            }
        }
        #[doc = "Reader of field `VWLCT_P`"]
        pub type VWLCT_P_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VWLCT_P`"]
        pub struct VWLCT_P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VWLCT_P_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - VWLCT_P"]
            #[inline(always)]
            pub fn vwlct_p(&self) -> VWLCT_P_R {
                VWLCT_P_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - VWLCT_P"]
            #[inline(always)]
            pub fn vwlct_p(&mut self) -> VWLCT_P_W {
                VWLCT_P_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fefusectl](fefusectl) module"]
    pub type FEFUSECTL = crate::Reg<u32, _FEFUSECTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FEFUSECTL;
    #[doc = "`read()` method returns [fefusectl::R](fefusectl::R) reader structure"]
    impl crate::Readable for FEFUSECTL {}
    #[doc = "`write(|w| ..)` method takes [fefusectl::W](fefusectl::W) writer structure"]
    impl crate::Writable for FEFUSECTL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fefusectl {
        #[doc = "Reader of register FEFUSECTL"]
        pub type R = crate::R<u32, super::FEFUSECTL>;
        #[doc = "Writer for register FEFUSECTL"]
        pub type W = crate::W<u32, super::FEFUSECTL>;
        #[doc = "Register FEFUSECTL `reset()`'s with value 0x0701_010a"]
        impl crate::ResetValue for super::FEFUSECTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0701_010a
            }
        }
        #[doc = "Reader of field `CHAIN_SEL`"]
        pub type CHAIN_SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CHAIN_SEL`"]
        pub struct CHAIN_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHAIN_SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `WRITE_EN`"]
        pub type WRITE_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WRITE_EN`"]
        pub struct WRITE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRITE_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `BP_SEL`"]
        pub type BP_SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BP_SEL`"]
        pub struct BP_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BP_SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `EF_CLRZ`"]
        pub type EF_CLRZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EF_CLRZ`"]
        pub struct EF_CLRZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EF_CLRZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EF_TEST`"]
        pub type EF_TEST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EF_TEST`"]
        pub struct EF_TEST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EF_TEST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EFUSE_EN`"]
        pub type EFUSE_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EFUSE_EN`"]
        pub struct EFUSE_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EFUSE_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:26 - CHAIN_SEL"]
            #[inline(always)]
            pub fn chain_sel(&self) -> CHAIN_SEL_R {
                CHAIN_SEL_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 17 - WRITE_EN"]
            #[inline(always)]
            pub fn write_en(&self) -> WRITE_EN_R {
                WRITE_EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - BP_SEL"]
            #[inline(always)]
            pub fn bp_sel(&self) -> BP_SEL_R {
                BP_SEL_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - EF_CLRZ"]
            #[inline(always)]
            pub fn ef_clrz(&self) -> EF_CLRZ_R {
                EF_CLRZ_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 4 - EF_TEST"]
            #[inline(always)]
            pub fn ef_test(&self) -> EF_TEST_R {
                EF_TEST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 0:3 - EFUSE_EN"]
            #[inline(always)]
            pub fn efuse_en(&self) -> EFUSE_EN_R {
                EFUSE_EN_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:26 - CHAIN_SEL"]
            #[inline(always)]
            pub fn chain_sel(&mut self) -> CHAIN_SEL_W {
                CHAIN_SEL_W { w: self }
            }
            #[doc = "Bit 17 - WRITE_EN"]
            #[inline(always)]
            pub fn write_en(&mut self) -> WRITE_EN_W {
                WRITE_EN_W { w: self }
            }
            #[doc = "Bit 16 - BP_SEL"]
            #[inline(always)]
            pub fn bp_sel(&mut self) -> BP_SEL_W {
                BP_SEL_W { w: self }
            }
            #[doc = "Bit 8 - EF_CLRZ"]
            #[inline(always)]
            pub fn ef_clrz(&mut self) -> EF_CLRZ_W {
                EF_CLRZ_W { w: self }
            }
            #[doc = "Bit 4 - EF_TEST"]
            #[inline(always)]
            pub fn ef_test(&mut self) -> EF_TEST_W {
                EF_TEST_W { w: self }
            }
            #[doc = "Bits 0:3 - EFUSE_EN"]
            #[inline(always)]
            pub fn efuse_en(&mut self) -> EFUSE_EN_W {
                EFUSE_EN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fefusestat](fefusestat) module"]
    pub type FEFUSESTAT = crate::Reg<u32, _FEFUSESTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FEFUSESTAT;
    #[doc = "`read()` method returns [fefusestat::R](fefusestat::R) reader structure"]
    impl crate::Readable for FEFUSESTAT {}
    #[doc = "`write(|w| ..)` method takes [fefusestat::W](fefusestat::W) writer structure"]
    impl crate::Writable for FEFUSESTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fefusestat {
        #[doc = "Reader of register FEFUSESTAT"]
        pub type R = crate::R<u32, super::FEFUSESTAT>;
        #[doc = "Writer for register FEFUSESTAT"]
        pub type W = crate::W<u32, super::FEFUSESTAT>;
        #[doc = "Register FEFUSESTAT `reset()`'s with value 0"]
        impl crate::ResetValue for super::FEFUSESTAT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SHIFT_DONE`"]
        pub type SHIFT_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SHIFT_DONE`"]
        pub struct SHIFT_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHIFT_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SHIFT_DONE"]
            #[inline(always)]
            pub fn shift_done(&self) -> SHIFT_DONE_R {
                SHIFT_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SHIFT_DONE"]
            #[inline(always)]
            pub fn shift_done(&mut self) -> SHIFT_DONE_W {
                SHIFT_DONE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fefusedata](fefusedata) module"]
    pub type FEFUSEDATA = crate::Reg<u32, _FEFUSEDATA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FEFUSEDATA;
    #[doc = "`read()` method returns [fefusedata::R](fefusedata::R) reader structure"]
    impl crate::Readable for FEFUSEDATA {}
    #[doc = "`write(|w| ..)` method takes [fefusedata::W](fefusedata::W) writer structure"]
    impl crate::Writable for FEFUSEDATA {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fefusedata {
        #[doc = "Reader of register FEFUSEDATA"]
        pub type R = crate::R<u32, super::FEFUSEDATA>;
        #[doc = "Writer for register FEFUSEDATA"]
        pub type W = crate::W<u32, super::FEFUSEDATA>;
        #[doc = "Register FEFUSEDATA `reset()`'s with value 0"]
        impl crate::ResetValue for super::FEFUSEDATA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FEFUSEDATA`"]
        pub type FEFUSEDATA_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FEFUSEDATA`"]
        pub struct FEFUSEDATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEFUSEDATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FEFUSEDATA"]
            #[inline(always)]
            pub fn fefusedata(&self) -> FEFUSEDATA_R {
                FEFUSEDATA_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FEFUSEDATA"]
            #[inline(always)]
            pub fn fefusedata(&mut self) -> FEFUSEDATA_W {
                FEFUSEDATA_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fseqpmp](fseqpmp) module"]
    pub type FSEQPMP = crate::Reg<u32, _FSEQPMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSEQPMP;
    #[doc = "`read()` method returns [fseqpmp::R](fseqpmp::R) reader structure"]
    impl crate::Readable for FSEQPMP {}
    #[doc = "`write(|w| ..)` method takes [fseqpmp::W](fseqpmp::W) writer structure"]
    impl crate::Writable for FSEQPMP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fseqpmp {
        #[doc = "Reader of register FSEQPMP"]
        pub type R = crate::R<u32, super::FSEQPMP>;
        #[doc = "Writer for register FSEQPMP"]
        pub type W = crate::W<u32, super::FSEQPMP>;
        #[doc = "Register FSEQPMP `reset()`'s with value 0x8508_0000"]
        impl crate::ResetValue for super::FSEQPMP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x8508_0000
            }
        }
        #[doc = "Reader of field `TRIM_3P4`"]
        pub type TRIM_3P4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM_3P4`"]
        pub struct TRIM_3P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM_3P4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `TRIM_1P7`"]
        pub type TRIM_1P7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM_1P7`"]
        pub struct TRIM_1P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM_1P7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `TRIM_0P8`"]
        pub type TRIM_0P8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM_0P8`"]
        pub struct TRIM_0P8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM_0P8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `VIN_AT_X`"]
        pub type VIN_AT_X_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VIN_AT_X`"]
        pub struct VIN_AT_X_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VIN_AT_X_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `VIN_BY_PASS`"]
        pub type VIN_BY_PASS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VIN_BY_PASS`"]
        pub struct VIN_BY_PASS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VIN_BY_PASS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - TRIM_3P4"]
            #[inline(always)]
            pub fn trim_3p4(&self) -> TRIM_3P4_R {
                TRIM_3P4_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:21 - TRIM_1P7"]
            #[inline(always)]
            pub fn trim_1p7(&self) -> TRIM_1P7_R {
                TRIM_1P7_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - TRIM_0P8"]
            #[inline(always)]
            pub fn trim_0p8(&self) -> TRIM_0P8_R {
                TRIM_0P8_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - VIN_AT_X"]
            #[inline(always)]
            pub fn vin_at_x(&self) -> VIN_AT_X_R {
                VIN_AT_X_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 8 - VIN_BY_PASS"]
            #[inline(always)]
            pub fn vin_by_pass(&self) -> VIN_BY_PASS_R {
                VIN_BY_PASS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - TRIM_3P4"]
            #[inline(always)]
            pub fn trim_3p4(&mut self) -> TRIM_3P4_W {
                TRIM_3P4_W { w: self }
            }
            #[doc = "Bits 20:21 - TRIM_1P7"]
            #[inline(always)]
            pub fn trim_1p7(&mut self) -> TRIM_1P7_W {
                TRIM_1P7_W { w: self }
            }
            #[doc = "Bits 16:19 - TRIM_0P8"]
            #[inline(always)]
            pub fn trim_0p8(&mut self) -> TRIM_0P8_W {
                TRIM_0P8_W { w: self }
            }
            #[doc = "Bits 12:14 - VIN_AT_X"]
            #[inline(always)]
            pub fn vin_at_x(&mut self) -> VIN_AT_X_W {
                VIN_AT_X_W { w: self }
            }
            #[doc = "Bit 8 - VIN_BY_PASS"]
            #[inline(always)]
            pub fn vin_by_pass(&mut self) -> VIN_BY_PASS_W {
                VIN_BY_PASS_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbstrobes](fbstrobes) module"]
    pub type FBSTROBES = crate::Reg<u32, _FBSTROBES>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBSTROBES;
    #[doc = "`read()` method returns [fbstrobes::R](fbstrobes::R) reader structure"]
    impl crate::Readable for FBSTROBES {}
    #[doc = "`write(|w| ..)` method takes [fbstrobes::W](fbstrobes::W) writer structure"]
    impl crate::Writable for FBSTROBES {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbstrobes {
        #[doc = "Reader of register FBSTROBES"]
        pub type R = crate::R<u32, super::FBSTROBES>;
        #[doc = "Writer for register FBSTROBES"]
        pub type W = crate::W<u32, super::FBSTROBES>;
        #[doc = "Register FBSTROBES `reset()`'s with value 0x0104"]
        impl crate::ResetValue for super::FBSTROBES {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0104
            }
        }
        #[doc = "Reader of field `ECBIT`"]
        pub type ECBIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECBIT`"]
        pub struct ECBIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECBIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RWAIT2_FLCLK`"]
        pub type RWAIT2_FLCLK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RWAIT2_FLCLK`"]
        pub struct RWAIT2_FLCLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWAIT2_FLCLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RWAIT_FLCLK`"]
        pub type RWAIT_FLCLK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RWAIT_FLCLK`"]
        pub struct RWAIT_FLCLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RWAIT_FLCLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `FLCLKEN`"]
        pub type FLCLKEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLCLKEN`"]
        pub struct FLCLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLCLKEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CTRLENZ`"]
        pub type CTRLENZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTRLENZ`"]
        pub struct CTRLENZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTRLENZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `NOCOLRED`"]
        pub type NOCOLRED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NOCOLRED`"]
        pub struct NOCOLRED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOCOLRED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PRECOL`"]
        pub type PRECOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRECOL`"]
        pub struct PRECOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRECOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TI_OTP`"]
        pub type TI_OTP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TI_OTP`"]
        pub struct TI_OTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI_OTP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OTP`"]
        pub type OTP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OTP`"]
        pub struct OTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OTP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TEZ`"]
        pub type TEZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEZ`"]
        pub struct TEZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - ECBIT"]
            #[inline(always)]
            pub fn ecbit(&self) -> ECBIT_R {
                ECBIT_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RWAIT2_FLCLK"]
            #[inline(always)]
            pub fn rwait2_flclk(&self) -> RWAIT2_FLCLK_R {
                RWAIT2_FLCLK_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RWAIT_FLCLK"]
            #[inline(always)]
            pub fn rwait_flclk(&self) -> RWAIT_FLCLK_R {
                RWAIT_FLCLK_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - FLCLKEN"]
            #[inline(always)]
            pub fn flclken(&self) -> FLCLKEN_R {
                FLCLKEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CTRLENZ"]
            #[inline(always)]
            pub fn ctrlenz(&self) -> CTRLENZ_R {
                CTRLENZ_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - NOCOLRED"]
            #[inline(always)]
            pub fn nocolred(&self) -> NOCOLRED_R {
                NOCOLRED_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PRECOL"]
            #[inline(always)]
            pub fn precol(&self) -> PRECOL_R {
                PRECOL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TI_OTP"]
            #[inline(always)]
            pub fn ti_otp(&self) -> TI_OTP_R {
                TI_OTP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - OTP"]
            #[inline(always)]
            pub fn otp(&self) -> OTP_R {
                OTP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TEZ"]
            #[inline(always)]
            pub fn tez(&self) -> TEZ_R {
                TEZ_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - ECBIT"]
            #[inline(always)]
            pub fn ecbit(&mut self) -> ECBIT_W {
                ECBIT_W { w: self }
            }
            #[doc = "Bit 18 - RWAIT2_FLCLK"]
            #[inline(always)]
            pub fn rwait2_flclk(&mut self) -> RWAIT2_FLCLK_W {
                RWAIT2_FLCLK_W { w: self }
            }
            #[doc = "Bit 17 - RWAIT_FLCLK"]
            #[inline(always)]
            pub fn rwait_flclk(&mut self) -> RWAIT_FLCLK_W {
                RWAIT_FLCLK_W { w: self }
            }
            #[doc = "Bit 16 - FLCLKEN"]
            #[inline(always)]
            pub fn flclken(&mut self) -> FLCLKEN_W {
                FLCLKEN_W { w: self }
            }
            #[doc = "Bit 8 - CTRLENZ"]
            #[inline(always)]
            pub fn ctrlenz(&mut self) -> CTRLENZ_W {
                CTRLENZ_W { w: self }
            }
            #[doc = "Bit 6 - NOCOLRED"]
            #[inline(always)]
            pub fn nocolred(&mut self) -> NOCOLRED_W {
                NOCOLRED_W { w: self }
            }
            #[doc = "Bit 5 - PRECOL"]
            #[inline(always)]
            pub fn precol(&mut self) -> PRECOL_W {
                PRECOL_W { w: self }
            }
            #[doc = "Bit 4 - TI_OTP"]
            #[inline(always)]
            pub fn ti_otp(&mut self) -> TI_OTP_W {
                TI_OTP_W { w: self }
            }
            #[doc = "Bit 3 - OTP"]
            #[inline(always)]
            pub fn otp(&mut self) -> OTP_W {
                OTP_W { w: self }
            }
            #[doc = "Bit 2 - TEZ"]
            #[inline(always)]
            pub fn tez(&mut self) -> TEZ_W {
                TEZ_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpstrobes](fpstrobes) module"]
    pub type FPSTROBES = crate::Reg<u32, _FPSTROBES>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPSTROBES;
    #[doc = "`read()` method returns [fpstrobes::R](fpstrobes::R) reader structure"]
    impl crate::Readable for FPSTROBES {}
    #[doc = "`write(|w| ..)` method takes [fpstrobes::W](fpstrobes::W) writer structure"]
    impl crate::Writable for FPSTROBES {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fpstrobes {
        #[doc = "Reader of register FPSTROBES"]
        pub type R = crate::R<u32, super::FPSTROBES>;
        #[doc = "Writer for register FPSTROBES"]
        pub type W = crate::W<u32, super::FPSTROBES>;
        #[doc = "Register FPSTROBES `reset()`'s with value 0x0103"]
        impl crate::ResetValue for super::FPSTROBES {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0103
            }
        }
        #[doc = "Reader of field `EXECUTEZ`"]
        pub type EXECUTEZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EXECUTEZ`"]
        pub struct EXECUTEZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXECUTEZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `V3PWRDNZ`"]
        pub type V3PWRDNZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `V3PWRDNZ`"]
        pub struct V3PWRDNZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> V3PWRDNZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `V5PWRDNZ`"]
        pub type V5PWRDNZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `V5PWRDNZ`"]
        pub struct V5PWRDNZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> V5PWRDNZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - EXECUTEZ"]
            #[inline(always)]
            pub fn executez(&self) -> EXECUTEZ_R {
                EXECUTEZ_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - V3PWRDNZ"]
            #[inline(always)]
            pub fn v3pwrdnz(&self) -> V3PWRDNZ_R {
                V3PWRDNZ_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - V5PWRDNZ"]
            #[inline(always)]
            pub fn v5pwrdnz(&self) -> V5PWRDNZ_R {
                V5PWRDNZ_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - EXECUTEZ"]
            #[inline(always)]
            pub fn executez(&mut self) -> EXECUTEZ_W {
                EXECUTEZ_W { w: self }
            }
            #[doc = "Bit 1 - V3PWRDNZ"]
            #[inline(always)]
            pub fn v3pwrdnz(&mut self) -> V3PWRDNZ_W {
                V3PWRDNZ_W { w: self }
            }
            #[doc = "Bit 0 - V5PWRDNZ"]
            #[inline(always)]
            pub fn v5pwrdnz(&mut self) -> V5PWRDNZ_W {
                V5PWRDNZ_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbmode](fbmode) module"]
    pub type FBMODE = crate::Reg<u32, _FBMODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBMODE;
    #[doc = "`read()` method returns [fbmode::R](fbmode::R) reader structure"]
    impl crate::Readable for FBMODE {}
    #[doc = "`write(|w| ..)` method takes [fbmode::W](fbmode::W) writer structure"]
    impl crate::Writable for FBMODE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fbmode {
        #[doc = "Reader of register FBMODE"]
        pub type R = crate::R<u32, super::FBMODE>;
        #[doc = "Writer for register FBMODE"]
        pub type W = crate::W<u32, super::FBMODE>;
        #[doc = "Register FBMODE `reset()`'s with value 0"]
        impl crate::ResetValue for super::FBMODE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODE`"]
        pub struct MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - MODE"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - MODE"]
            #[inline(always)]
            pub fn mode(&mut self) -> MODE_W {
                MODE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftcr](ftcr) module"]
    pub type FTCR = crate::Reg<u32, _FTCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FTCR;
    #[doc = "`read()` method returns [ftcr::R](ftcr::R) reader structure"]
    impl crate::Readable for FTCR {}
    #[doc = "`write(|w| ..)` method takes [ftcr::W](ftcr::W) writer structure"]
    impl crate::Writable for FTCR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ftcr {
        #[doc = "Reader of register FTCR"]
        pub type R = crate::R<u32, super::FTCR>;
        #[doc = "Writer for register FTCR"]
        pub type W = crate::W<u32, super::FTCR>;
        #[doc = "Register FTCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FTCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCR`"]
        pub type TCR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCR`"]
        pub struct TCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - TCR"]
            #[inline(always)]
            pub fn tcr(&self) -> TCR_R {
                TCR_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - TCR"]
            #[inline(always)]
            pub fn tcr(&mut self) -> TCR_W {
                TCR_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [faddr](faddr) module"]
    pub type FADDR = crate::Reg<u32, _FADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FADDR;
    #[doc = "`read()` method returns [faddr::R](faddr::R) reader structure"]
    impl crate::Readable for FADDR {}
    #[doc = "`write(|w| ..)` method takes [faddr::W](faddr::W) writer structure"]
    impl crate::Writable for FADDR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod faddr {
        #[doc = "Reader of register FADDR"]
        pub type R = crate::R<u32, super::FADDR>;
        #[doc = "Writer for register FADDR"]
        pub type W = crate::W<u32, super::FADDR>;
        #[doc = "Register FADDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FADDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FADDR`"]
        pub type FADDR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FADDR`"]
        pub struct FADDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FADDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FADDR"]
            #[inline(always)]
            pub fn faddr(&self) -> FADDR_R {
                FADDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FADDR"]
            #[inline(always)]
            pub fn faddr(&mut self) -> FADDR_W {
                FADDR_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftctl](ftctl) module"]
    pub type FTCTL = crate::Reg<u32, _FTCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FTCTL;
    #[doc = "`read()` method returns [ftctl::R](ftctl::R) reader structure"]
    impl crate::Readable for FTCTL {}
    #[doc = "`write(|w| ..)` method takes [ftctl::W](ftctl::W) writer structure"]
    impl crate::Writable for FTCTL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod ftctl {
        #[doc = "Reader of register FTCTL"]
        pub type R = crate::R<u32, super::FTCTL>;
        #[doc = "Writer for register FTCTL"]
        pub type W = crate::W<u32, super::FTCTL>;
        #[doc = "Register FTCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::FTCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WDATA_BLK_CLR`"]
        pub type WDATA_BLK_CLR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDATA_BLK_CLR`"]
        pub struct WDATA_BLK_CLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDATA_BLK_CLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TEST_EN`"]
        pub type TEST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEST_EN`"]
        pub struct TEST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WDATA_BLK_CLR"]
            #[inline(always)]
            pub fn wdata_blk_clr(&self) -> WDATA_BLK_CLR_R {
                WDATA_BLK_CLR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TEST_EN"]
            #[inline(always)]
            pub fn test_en(&self) -> TEST_EN_R {
                TEST_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WDATA_BLK_CLR"]
            #[inline(always)]
            pub fn wdata_blk_clr(&mut self) -> WDATA_BLK_CLR_W {
                WDATA_BLK_CLR_W { w: self }
            }
            #[doc = "Bit 1 - TEST_EN"]
            #[inline(always)]
            pub fn test_en(&mut self) -> TEST_EN_W {
                TEST_EN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite0](fwpwrite0) module"]
    pub type FWPWRITE0 = crate::Reg<u32, _FWPWRITE0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE0;
    #[doc = "`read()` method returns [fwpwrite0::R](fwpwrite0::R) reader structure"]
    impl crate::Readable for FWPWRITE0 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite0::W](fwpwrite0::W) writer structure"]
    impl crate::Writable for FWPWRITE0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite0 {
        #[doc = "Reader of register FWPWRITE0"]
        pub type R = crate::R<u32, super::FWPWRITE0>;
        #[doc = "Writer for register FWPWRITE0"]
        pub type W = crate::W<u32, super::FWPWRITE0>;
        #[doc = "Register FWPWRITE0 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE0`"]
        pub type FWPWRITE0_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE0`"]
        pub struct FWPWRITE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE0"]
            #[inline(always)]
            pub fn fwpwrite0(&self) -> FWPWRITE0_R {
                FWPWRITE0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE0"]
            #[inline(always)]
            pub fn fwpwrite0(&mut self) -> FWPWRITE0_W {
                FWPWRITE0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite1](fwpwrite1) module"]
    pub type FWPWRITE1 = crate::Reg<u32, _FWPWRITE1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE1;
    #[doc = "`read()` method returns [fwpwrite1::R](fwpwrite1::R) reader structure"]
    impl crate::Readable for FWPWRITE1 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite1::W](fwpwrite1::W) writer structure"]
    impl crate::Writable for FWPWRITE1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite1 {
        #[doc = "Reader of register FWPWRITE1"]
        pub type R = crate::R<u32, super::FWPWRITE1>;
        #[doc = "Writer for register FWPWRITE1"]
        pub type W = crate::W<u32, super::FWPWRITE1>;
        #[doc = "Register FWPWRITE1 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE1`"]
        pub type FWPWRITE1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE1`"]
        pub struct FWPWRITE1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE1"]
            #[inline(always)]
            pub fn fwpwrite1(&self) -> FWPWRITE1_R {
                FWPWRITE1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE1"]
            #[inline(always)]
            pub fn fwpwrite1(&mut self) -> FWPWRITE1_W {
                FWPWRITE1_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite2](fwpwrite2) module"]
    pub type FWPWRITE2 = crate::Reg<u32, _FWPWRITE2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE2;
    #[doc = "`read()` method returns [fwpwrite2::R](fwpwrite2::R) reader structure"]
    impl crate::Readable for FWPWRITE2 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite2::W](fwpwrite2::W) writer structure"]
    impl crate::Writable for FWPWRITE2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite2 {
        #[doc = "Reader of register FWPWRITE2"]
        pub type R = crate::R<u32, super::FWPWRITE2>;
        #[doc = "Writer for register FWPWRITE2"]
        pub type W = crate::W<u32, super::FWPWRITE2>;
        #[doc = "Register FWPWRITE2 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE2`"]
        pub type FWPWRITE2_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE2`"]
        pub struct FWPWRITE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE2"]
            #[inline(always)]
            pub fn fwpwrite2(&self) -> FWPWRITE2_R {
                FWPWRITE2_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE2"]
            #[inline(always)]
            pub fn fwpwrite2(&mut self) -> FWPWRITE2_W {
                FWPWRITE2_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite3](fwpwrite3) module"]
    pub type FWPWRITE3 = crate::Reg<u32, _FWPWRITE3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE3;
    #[doc = "`read()` method returns [fwpwrite3::R](fwpwrite3::R) reader structure"]
    impl crate::Readable for FWPWRITE3 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite3::W](fwpwrite3::W) writer structure"]
    impl crate::Writable for FWPWRITE3 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite3 {
        #[doc = "Reader of register FWPWRITE3"]
        pub type R = crate::R<u32, super::FWPWRITE3>;
        #[doc = "Writer for register FWPWRITE3"]
        pub type W = crate::W<u32, super::FWPWRITE3>;
        #[doc = "Register FWPWRITE3 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE3`"]
        pub type FWPWRITE3_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE3`"]
        pub struct FWPWRITE3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE3"]
            #[inline(always)]
            pub fn fwpwrite3(&self) -> FWPWRITE3_R {
                FWPWRITE3_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE3"]
            #[inline(always)]
            pub fn fwpwrite3(&mut self) -> FWPWRITE3_W {
                FWPWRITE3_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite4](fwpwrite4) module"]
    pub type FWPWRITE4 = crate::Reg<u32, _FWPWRITE4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE4;
    #[doc = "`read()` method returns [fwpwrite4::R](fwpwrite4::R) reader structure"]
    impl crate::Readable for FWPWRITE4 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite4::W](fwpwrite4::W) writer structure"]
    impl crate::Writable for FWPWRITE4 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite4 {
        #[doc = "Reader of register FWPWRITE4"]
        pub type R = crate::R<u32, super::FWPWRITE4>;
        #[doc = "Writer for register FWPWRITE4"]
        pub type W = crate::W<u32, super::FWPWRITE4>;
        #[doc = "Register FWPWRITE4 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE4`"]
        pub type FWPWRITE4_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE4`"]
        pub struct FWPWRITE4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE4"]
            #[inline(always)]
            pub fn fwpwrite4(&self) -> FWPWRITE4_R {
                FWPWRITE4_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE4"]
            #[inline(always)]
            pub fn fwpwrite4(&mut self) -> FWPWRITE4_W {
                FWPWRITE4_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite5](fwpwrite5) module"]
    pub type FWPWRITE5 = crate::Reg<u32, _FWPWRITE5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE5;
    #[doc = "`read()` method returns [fwpwrite5::R](fwpwrite5::R) reader structure"]
    impl crate::Readable for FWPWRITE5 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite5::W](fwpwrite5::W) writer structure"]
    impl crate::Writable for FWPWRITE5 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite5 {
        #[doc = "Reader of register FWPWRITE5"]
        pub type R = crate::R<u32, super::FWPWRITE5>;
        #[doc = "Writer for register FWPWRITE5"]
        pub type W = crate::W<u32, super::FWPWRITE5>;
        #[doc = "Register FWPWRITE5 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE5`"]
        pub type FWPWRITE5_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE5`"]
        pub struct FWPWRITE5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE5"]
            #[inline(always)]
            pub fn fwpwrite5(&self) -> FWPWRITE5_R {
                FWPWRITE5_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE5"]
            #[inline(always)]
            pub fn fwpwrite5(&mut self) -> FWPWRITE5_W {
                FWPWRITE5_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite6](fwpwrite6) module"]
    pub type FWPWRITE6 = crate::Reg<u32, _FWPWRITE6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE6;
    #[doc = "`read()` method returns [fwpwrite6::R](fwpwrite6::R) reader structure"]
    impl crate::Readable for FWPWRITE6 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite6::W](fwpwrite6::W) writer structure"]
    impl crate::Writable for FWPWRITE6 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite6 {
        #[doc = "Reader of register FWPWRITE6"]
        pub type R = crate::R<u32, super::FWPWRITE6>;
        #[doc = "Writer for register FWPWRITE6"]
        pub type W = crate::W<u32, super::FWPWRITE6>;
        #[doc = "Register FWPWRITE6 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE6`"]
        pub type FWPWRITE6_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE6`"]
        pub struct FWPWRITE6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE6"]
            #[inline(always)]
            pub fn fwpwrite6(&self) -> FWPWRITE6_R {
                FWPWRITE6_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE6"]
            #[inline(always)]
            pub fn fwpwrite6(&mut self) -> FWPWRITE6_W {
                FWPWRITE6_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite7](fwpwrite7) module"]
    pub type FWPWRITE7 = crate::Reg<u32, _FWPWRITE7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE7;
    #[doc = "`read()` method returns [fwpwrite7::R](fwpwrite7::R) reader structure"]
    impl crate::Readable for FWPWRITE7 {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite7::W](fwpwrite7::W) writer structure"]
    impl crate::Writable for FWPWRITE7 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite7 {
        #[doc = "Reader of register FWPWRITE7"]
        pub type R = crate::R<u32, super::FWPWRITE7>;
        #[doc = "Writer for register FWPWRITE7"]
        pub type W = crate::W<u32, super::FWPWRITE7>;
        #[doc = "Register FWPWRITE7 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FWPWRITE7`"]
        pub type FWPWRITE7_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FWPWRITE7`"]
        pub struct FWPWRITE7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWPWRITE7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FWPWRITE7"]
            #[inline(always)]
            pub fn fwpwrite7(&self) -> FWPWRITE7_R {
                FWPWRITE7_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FWPWRITE7"]
            #[inline(always)]
            pub fn fwpwrite7(&mut self) -> FWPWRITE7_W {
                FWPWRITE7_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fwpwrite_ecc](fwpwrite_ecc) module"]
    pub type FWPWRITE_ECC = crate::Reg<u32, _FWPWRITE_ECC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FWPWRITE_ECC;
    #[doc = "`read()` method returns [fwpwrite_ecc::R](fwpwrite_ecc::R) reader structure"]
    impl crate::Readable for FWPWRITE_ECC {}
    #[doc = "`write(|w| ..)` method takes [fwpwrite_ecc::W](fwpwrite_ecc::W) writer structure"]
    impl crate::Writable for FWPWRITE_ECC {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fwpwrite_ecc {
        #[doc = "Reader of register FWPWRITE_ECC"]
        pub type R = crate::R<u32, super::FWPWRITE_ECC>;
        #[doc = "Writer for register FWPWRITE_ECC"]
        pub type W = crate::W<u32, super::FWPWRITE_ECC>;
        #[doc = "Register FWPWRITE_ECC `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FWPWRITE_ECC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `ECCBYTES07_00`"]
        pub type ECCBYTES07_00_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ECCBYTES07_00`"]
        pub struct ECCBYTES07_00_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCBYTES07_00_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `ECCBYTES15_08`"]
        pub type ECCBYTES15_08_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ECCBYTES15_08`"]
        pub struct ECCBYTES15_08_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCBYTES15_08_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ECCBYTES23_16`"]
        pub type ECCBYTES23_16_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ECCBYTES23_16`"]
        pub struct ECCBYTES23_16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCBYTES23_16_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ECCBYTES31_24`"]
        pub type ECCBYTES31_24_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ECCBYTES31_24`"]
        pub struct ECCBYTES31_24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCBYTES31_24_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:31 - ECCBYTES07_00"]
            #[inline(always)]
            pub fn eccbytes07_00(&self) -> ECCBYTES07_00_R {
                ECCBYTES07_00_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - ECCBYTES15_08"]
            #[inline(always)]
            pub fn eccbytes15_08(&self) -> ECCBYTES15_08_R {
                ECCBYTES15_08_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - ECCBYTES23_16"]
            #[inline(always)]
            pub fn eccbytes23_16(&self) -> ECCBYTES23_16_R {
                ECCBYTES23_16_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - ECCBYTES31_24"]
            #[inline(always)]
            pub fn eccbytes31_24(&self) -> ECCBYTES31_24_R {
                ECCBYTES31_24_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - ECCBYTES07_00"]
            #[inline(always)]
            pub fn eccbytes07_00(&mut self) -> ECCBYTES07_00_W {
                ECCBYTES07_00_W { w: self }
            }
            #[doc = "Bits 16:23 - ECCBYTES15_08"]
            #[inline(always)]
            pub fn eccbytes15_08(&mut self) -> ECCBYTES15_08_W {
                ECCBYTES15_08_W { w: self }
            }
            #[doc = "Bits 8:15 - ECCBYTES23_16"]
            #[inline(always)]
            pub fn eccbytes23_16(&mut self) -> ECCBYTES23_16_W {
                ECCBYTES23_16_W { w: self }
            }
            #[doc = "Bits 0:7 - ECCBYTES31_24"]
            #[inline(always)]
            pub fn eccbytes31_24(&mut self) -> ECCBYTES31_24_W {
                ECCBYTES31_24_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fswstat](fswstat) module"]
    pub type FSWSTAT = crate::Reg<u32, _FSWSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSWSTAT;
    #[doc = "`read()` method returns [fswstat::R](fswstat::R) reader structure"]
    impl crate::Readable for FSWSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fswstat {
        #[doc = "Reader of register FSWSTAT"]
        pub type R = crate::R<u32, super::FSWSTAT>;
        #[doc = "Reader of field `SAFELV`"]
        pub type SAFELV_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - SAFELV"]
            #[inline(always)]
            pub fn safelv(&self) -> SAFELV_R {
                SAFELV_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_glbctl](fsm_glbctl) module"]
    pub type FSM_GLBCTL = crate::Reg<u32, _FSM_GLBCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_GLBCTL;
    #[doc = "`read()` method returns [fsm_glbctl::R](fsm_glbctl::R) reader structure"]
    impl crate::Readable for FSM_GLBCTL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_glbctl {
        #[doc = "Reader of register FSM_GLBCTL"]
        pub type R = crate::R<u32, super::FSM_GLBCTL>;
        #[doc = "Reader of field `CLKSEL`"]
        pub type CLKSEL_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - CLKSEL"]
            #[inline(always)]
            pub fn clksel(&self) -> CLKSEL_R {
                CLKSEL_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_state](fsm_state) module"]
    pub type FSM_STATE = crate::Reg<u32, _FSM_STATE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_STATE;
    #[doc = "`read()` method returns [fsm_state::R](fsm_state::R) reader structure"]
    impl crate::Readable for FSM_STATE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_state {
        #[doc = "Reader of register FSM_STATE"]
        pub type R = crate::R<u32, super::FSM_STATE>;
        #[doc = "Reader of field `CTRLENZ`"]
        pub type CTRLENZ_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXECUTEZ`"]
        pub type EXECUTEZ_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FSM_ACT`"]
        pub type FSM_ACT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIOTP_ACT`"]
        pub type TIOTP_ACT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OTP_ACT`"]
        pub type OTP_ACT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 11 - CTRLENZ"]
            #[inline(always)]
            pub fn ctrlenz(&self) -> CTRLENZ_R {
                CTRLENZ_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - EXECUTEZ"]
            #[inline(always)]
            pub fn executez(&self) -> EXECUTEZ_R {
                EXECUTEZ_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 8 - FSM_ACT"]
            #[inline(always)]
            pub fn fsm_act(&self) -> FSM_ACT_R {
                FSM_ACT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TIOTP_ACT"]
            #[inline(always)]
            pub fn tiotp_act(&self) -> TIOTP_ACT_R {
                TIOTP_ACT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - OTP_ACT"]
            #[inline(always)]
            pub fn otp_act(&self) -> OTP_ACT_R {
                OTP_ACT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_stat](fsm_stat) module"]
    pub type FSM_STAT = crate::Reg<u32, _FSM_STAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_STAT;
    #[doc = "`read()` method returns [fsm_stat::R](fsm_stat::R) reader structure"]
    impl crate::Readable for FSM_STAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_stat {
        #[doc = "Reader of register FSM_STAT"]
        pub type R = crate::R<u32, super::FSM_STAT>;
        #[doc = "Reader of field `NON_OP`"]
        pub type NON_OP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OVR_PUL_CNT`"]
        pub type OVR_PUL_CNT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `INV_DAT`"]
        pub type INV_DAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - NON_OP"]
            #[inline(always)]
            pub fn non_op(&self) -> NON_OP_R {
                NON_OP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - OVR_PUL_CNT"]
            #[inline(always)]
            pub fn ovr_pul_cnt(&self) -> OVR_PUL_CNT_R {
                OVR_PUL_CNT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - INV_DAT"]
            #[inline(always)]
            pub fn inv_dat(&self) -> INV_DAT_R {
                INV_DAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_cmd](fsm_cmd) module"]
    pub type FSM_CMD = crate::Reg<u32, _FSM_CMD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_CMD;
    #[doc = "`read()` method returns [fsm_cmd::R](fsm_cmd::R) reader structure"]
    impl crate::Readable for FSM_CMD {}
    #[doc = "`write(|w| ..)` method takes [fsm_cmd::W](fsm_cmd::W) writer structure"]
    impl crate::Writable for FSM_CMD {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_cmd {
        #[doc = "Reader of register FSM_CMD"]
        pub type R = crate::R<u32, super::FSM_CMD>;
        #[doc = "Writer for register FSM_CMD"]
        pub type W = crate::W<u32, super::FSM_CMD>;
        #[doc = "Register FSM_CMD `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_CMD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSMCMD`"]
        pub type FSMCMD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FSMCMD`"]
        pub struct FSMCMD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSMCMD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - FSMCMD"]
            #[inline(always)]
            pub fn fsmcmd(&self) -> FSMCMD_R {
                FSMCMD_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - FSMCMD"]
            #[inline(always)]
            pub fn fsmcmd(&mut self) -> FSMCMD_W {
                FSMCMD_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_pe_osu](fsm_pe_osu) module"]
    pub type FSM_PE_OSU = crate::Reg<u32, _FSM_PE_OSU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PE_OSU;
    #[doc = "`read()` method returns [fsm_pe_osu::R](fsm_pe_osu::R) reader structure"]
    impl crate::Readable for FSM_PE_OSU {}
    #[doc = "`write(|w| ..)` method takes [fsm_pe_osu::W](fsm_pe_osu::W) writer structure"]
    impl crate::Writable for FSM_PE_OSU {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_pe_osu {
        #[doc = "Reader of register FSM_PE_OSU"]
        pub type R = crate::R<u32, super::FSM_PE_OSU>;
        #[doc = "Writer for register FSM_PE_OSU"]
        pub type W = crate::W<u32, super::FSM_PE_OSU>;
        #[doc = "Register FSM_PE_OSU `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_PE_OSU {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PGM_OSU`"]
        pub type PGM_OSU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PGM_OSU`"]
        pub struct PGM_OSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGM_OSU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ERA_OSU`"]
        pub type ERA_OSU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ERA_OSU`"]
        pub struct ERA_OSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERA_OSU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - PGM_OSU"]
            #[inline(always)]
            pub fn pgm_osu(&self) -> PGM_OSU_R {
                PGM_OSU_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - ERA_OSU"]
            #[inline(always)]
            pub fn era_osu(&self) -> ERA_OSU_R {
                ERA_OSU_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - PGM_OSU"]
            #[inline(always)]
            pub fn pgm_osu(&mut self) -> PGM_OSU_W {
                PGM_OSU_W { w: self }
            }
            #[doc = "Bits 0:7 - ERA_OSU"]
            #[inline(always)]
            pub fn era_osu(&mut self) -> ERA_OSU_W {
                ERA_OSU_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_vstat](fsm_vstat) module"]
    pub type FSM_VSTAT = crate::Reg<u32, _FSM_VSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_VSTAT;
    #[doc = "`read()` method returns [fsm_vstat::R](fsm_vstat::R) reader structure"]
    impl crate::Readable for FSM_VSTAT {}
    #[doc = "`write(|w| ..)` method takes [fsm_vstat::W](fsm_vstat::W) writer structure"]
    impl crate::Writable for FSM_VSTAT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_vstat {
        #[doc = "Reader of register FSM_VSTAT"]
        pub type R = crate::R<u32, super::FSM_VSTAT>;
        #[doc = "Writer for register FSM_VSTAT"]
        pub type W = crate::W<u32, super::FSM_VSTAT>;
        #[doc = "Register FSM_VSTAT `reset()`'s with value 0x3000"]
        impl crate::ResetValue for super::FSM_VSTAT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x3000
            }
        }
        #[doc = "Reader of field `VSTAT_CNT`"]
        pub type VSTAT_CNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VSTAT_CNT`"]
        pub struct VSTAT_CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VSTAT_CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - VSTAT_CNT"]
            #[inline(always)]
            pub fn vstat_cnt(&self) -> VSTAT_CNT_R {
                VSTAT_CNT_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - VSTAT_CNT"]
            #[inline(always)]
            pub fn vstat_cnt(&mut self) -> VSTAT_CNT_W {
                VSTAT_CNT_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_pe_vsu](fsm_pe_vsu) module"]
    pub type FSM_PE_VSU = crate::Reg<u32, _FSM_PE_VSU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PE_VSU;
    #[doc = "`read()` method returns [fsm_pe_vsu::R](fsm_pe_vsu::R) reader structure"]
    impl crate::Readable for FSM_PE_VSU {}
    #[doc = "`write(|w| ..)` method takes [fsm_pe_vsu::W](fsm_pe_vsu::W) writer structure"]
    impl crate::Writable for FSM_PE_VSU {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_pe_vsu {
        #[doc = "Reader of register FSM_PE_VSU"]
        pub type R = crate::R<u32, super::FSM_PE_VSU>;
        #[doc = "Writer for register FSM_PE_VSU"]
        pub type W = crate::W<u32, super::FSM_PE_VSU>;
        #[doc = "Register FSM_PE_VSU `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_PE_VSU {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PGM_VSU`"]
        pub type PGM_VSU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PGM_VSU`"]
        pub struct PGM_VSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGM_VSU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ERA_VSU`"]
        pub type ERA_VSU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ERA_VSU`"]
        pub struct ERA_VSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERA_VSU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - PGM_VSU"]
            #[inline(always)]
            pub fn pgm_vsu(&self) -> PGM_VSU_R {
                PGM_VSU_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - ERA_VSU"]
            #[inline(always)]
            pub fn era_vsu(&self) -> ERA_VSU_R {
                ERA_VSU_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - PGM_VSU"]
            #[inline(always)]
            pub fn pgm_vsu(&mut self) -> PGM_VSU_W {
                PGM_VSU_W { w: self }
            }
            #[doc = "Bits 0:7 - ERA_VSU"]
            #[inline(always)]
            pub fn era_vsu(&mut self) -> ERA_VSU_W {
                ERA_VSU_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_cmp_vsu](fsm_cmp_vsu) module"]
    pub type FSM_CMP_VSU = crate::Reg<u32, _FSM_CMP_VSU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_CMP_VSU;
    #[doc = "`read()` method returns [fsm_cmp_vsu::R](fsm_cmp_vsu::R) reader structure"]
    impl crate::Readable for FSM_CMP_VSU {}
    #[doc = "`write(|w| ..)` method takes [fsm_cmp_vsu::W](fsm_cmp_vsu::W) writer structure"]
    impl crate::Writable for FSM_CMP_VSU {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_cmp_vsu {
        #[doc = "Reader of register FSM_CMP_VSU"]
        pub type R = crate::R<u32, super::FSM_CMP_VSU>;
        #[doc = "Writer for register FSM_CMP_VSU"]
        pub type W = crate::W<u32, super::FSM_CMP_VSU>;
        #[doc = "Register FSM_CMP_VSU `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_CMP_VSU {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADD_EXZ`"]
        pub type ADD_EXZ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD_EXZ`"]
        pub struct ADD_EXZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD_EXZ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - ADD_EXZ"]
            #[inline(always)]
            pub fn add_exz(&self) -> ADD_EXZ_R {
                ADD_EXZ_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - ADD_EXZ"]
            #[inline(always)]
            pub fn add_exz(&mut self) -> ADD_EXZ_W {
                ADD_EXZ_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_ex_val](fsm_ex_val) module"]
    pub type FSM_EX_VAL = crate::Reg<u32, _FSM_EX_VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_EX_VAL;
    #[doc = "`read()` method returns [fsm_ex_val::R](fsm_ex_val::R) reader structure"]
    impl crate::Readable for FSM_EX_VAL {}
    #[doc = "`write(|w| ..)` method takes [fsm_ex_val::W](fsm_ex_val::W) writer structure"]
    impl crate::Writable for FSM_EX_VAL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_ex_val {
        #[doc = "Reader of register FSM_EX_VAL"]
        pub type R = crate::R<u32, super::FSM_EX_VAL>;
        #[doc = "Writer for register FSM_EX_VAL"]
        pub type W = crate::W<u32, super::FSM_EX_VAL>;
        #[doc = "Register FSM_EX_VAL `reset()`'s with value 0x0301"]
        impl crate::ResetValue for super::FSM_EX_VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0301
            }
        }
        #[doc = "Reader of field `REP_VSU`"]
        pub type REP_VSU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REP_VSU`"]
        pub struct REP_VSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REP_VSU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EXE_VALD`"]
        pub type EXE_VALD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXE_VALD`"]
        pub struct EXE_VALD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXE_VALD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - REP_VSU"]
            #[inline(always)]
            pub fn rep_vsu(&self) -> REP_VSU_R {
                REP_VSU_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - EXE_VALD"]
            #[inline(always)]
            pub fn exe_vald(&self) -> EXE_VALD_R {
                EXE_VALD_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - REP_VSU"]
            #[inline(always)]
            pub fn rep_vsu(&mut self) -> REP_VSU_W {
                REP_VSU_W { w: self }
            }
            #[doc = "Bits 0:7 - EXE_VALD"]
            #[inline(always)]
            pub fn exe_vald(&mut self) -> EXE_VALD_W {
                EXE_VALD_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_rd_h](fsm_rd_h) module"]
    pub type FSM_RD_H = crate::Reg<u32, _FSM_RD_H>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_RD_H;
    #[doc = "`read()` method returns [fsm_rd_h::R](fsm_rd_h::R) reader structure"]
    impl crate::Readable for FSM_RD_H {}
    #[doc = "`write(|w| ..)` method takes [fsm_rd_h::W](fsm_rd_h::W) writer structure"]
    impl crate::Writable for FSM_RD_H {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_rd_h {
        #[doc = "Reader of register FSM_RD_H"]
        pub type R = crate::R<u32, super::FSM_RD_H>;
        #[doc = "Writer for register FSM_RD_H"]
        pub type W = crate::W<u32, super::FSM_RD_H>;
        #[doc = "Register FSM_RD_H `reset()`'s with value 0x5a"]
        impl crate::ResetValue for super::FSM_RD_H {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x5a
            }
        }
        #[doc = "Reader of field `RD_H`"]
        pub type RD_H_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RD_H`"]
        pub struct RD_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RD_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - RD_H"]
            #[inline(always)]
            pub fn rd_h(&self) -> RD_H_R {
                RD_H_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - RD_H"]
            #[inline(always)]
            pub fn rd_h(&mut self) -> RD_H_W {
                RD_H_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_p_oh](fsm_p_oh) module"]
    pub type FSM_P_OH = crate::Reg<u32, _FSM_P_OH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_P_OH;
    #[doc = "`read()` method returns [fsm_p_oh::R](fsm_p_oh::R) reader structure"]
    impl crate::Readable for FSM_P_OH {}
    #[doc = "`write(|w| ..)` method takes [fsm_p_oh::W](fsm_p_oh::W) writer structure"]
    impl crate::Writable for FSM_P_OH {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_p_oh {
        #[doc = "Reader of register FSM_P_OH"]
        pub type R = crate::R<u32, super::FSM_P_OH>;
        #[doc = "Writer for register FSM_P_OH"]
        pub type W = crate::W<u32, super::FSM_P_OH>;
        #[doc = "Register FSM_P_OH `reset()`'s with value 0x0100"]
        impl crate::ResetValue for super::FSM_P_OH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0100
            }
        }
        #[doc = "Reader of field `PGM_OH`"]
        pub type PGM_OH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PGM_OH`"]
        pub struct PGM_OH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGM_OH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - PGM_OH"]
            #[inline(always)]
            pub fn pgm_oh(&self) -> PGM_OH_R {
                PGM_OH_R::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - PGM_OH"]
            #[inline(always)]
            pub fn pgm_oh(&mut self) -> PGM_OH_W {
                PGM_OH_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_era_oh](fsm_era_oh) module"]
    pub type FSM_ERA_OH = crate::Reg<u32, _FSM_ERA_OH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ERA_OH;
    #[doc = "`read()` method returns [fsm_era_oh::R](fsm_era_oh::R) reader structure"]
    impl crate::Readable for FSM_ERA_OH {}
    #[doc = "`write(|w| ..)` method takes [fsm_era_oh::W](fsm_era_oh::W) writer structure"]
    impl crate::Writable for FSM_ERA_OH {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_era_oh {
        #[doc = "Reader of register FSM_ERA_OH"]
        pub type R = crate::R<u32, super::FSM_ERA_OH>;
        #[doc = "Writer for register FSM_ERA_OH"]
        pub type W = crate::W<u32, super::FSM_ERA_OH>;
        #[doc = "Register FSM_ERA_OH `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::FSM_ERA_OH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `ERA_OH`"]
        pub type ERA_OH_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ERA_OH`"]
        pub struct ERA_OH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERA_OH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - ERA_OH"]
            #[inline(always)]
            pub fn era_oh(&self) -> ERA_OH_R {
                ERA_OH_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - ERA_OH"]
            #[inline(always)]
            pub fn era_oh(&mut self) -> ERA_OH_W {
                ERA_OH_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_sav_ppul](fsm_sav_ppul) module"]
    pub type FSM_SAV_PPUL = crate::Reg<u32, _FSM_SAV_PPUL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_SAV_PPUL;
    #[doc = "`read()` method returns [fsm_sav_ppul::R](fsm_sav_ppul::R) reader structure"]
    impl crate::Readable for FSM_SAV_PPUL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_sav_ppul {
        #[doc = "Reader of register FSM_SAV_PPUL"]
        pub type R = crate::R<u32, super::FSM_SAV_PPUL>;
        #[doc = "Reader of field `SAV_P_PUL`"]
        pub type SAV_P_PUL_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - SAV_P_PUL"]
            #[inline(always)]
            pub fn sav_p_pul(&self) -> SAV_P_PUL_R {
                SAV_P_PUL_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_pe_vh](fsm_pe_vh) module"]
    pub type FSM_PE_VH = crate::Reg<u32, _FSM_PE_VH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PE_VH;
    #[doc = "`read()` method returns [fsm_pe_vh::R](fsm_pe_vh::R) reader structure"]
    impl crate::Readable for FSM_PE_VH {}
    #[doc = "`write(|w| ..)` method takes [fsm_pe_vh::W](fsm_pe_vh::W) writer structure"]
    impl crate::Writable for FSM_PE_VH {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_pe_vh {
        #[doc = "Reader of register FSM_PE_VH"]
        pub type R = crate::R<u32, super::FSM_PE_VH>;
        #[doc = "Writer for register FSM_PE_VH"]
        pub type W = crate::W<u32, super::FSM_PE_VH>;
        #[doc = "Register FSM_PE_VH `reset()`'s with value 0x0100"]
        impl crate::ResetValue for super::FSM_PE_VH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0100
            }
        }
        #[doc = "Reader of field `PGM_VH`"]
        pub type PGM_VH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PGM_VH`"]
        pub struct PGM_VH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGM_VH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - PGM_VH"]
            #[inline(always)]
            pub fn pgm_vh(&self) -> PGM_VH_R {
                PGM_VH_R::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - PGM_VH"]
            #[inline(always)]
            pub fn pgm_vh(&mut self) -> PGM_VH_W {
                PGM_VH_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_prg_pw](fsm_prg_pw) module"]
    pub type FSM_PRG_PW = crate::Reg<u32, _FSM_PRG_PW>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PRG_PW;
    #[doc = "`read()` method returns [fsm_prg_pw::R](fsm_prg_pw::R) reader structure"]
    impl crate::Readable for FSM_PRG_PW {}
    #[doc = "`write(|w| ..)` method takes [fsm_prg_pw::W](fsm_prg_pw::W) writer structure"]
    impl crate::Writable for FSM_PRG_PW {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_prg_pw {
        #[doc = "Reader of register FSM_PRG_PW"]
        pub type R = crate::R<u32, super::FSM_PRG_PW>;
        #[doc = "Writer for register FSM_PRG_PW"]
        pub type W = crate::W<u32, super::FSM_PRG_PW>;
        #[doc = "Register FSM_PRG_PW `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_PRG_PW {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PROG_PUL_WIDTH`"]
        pub type PROG_PUL_WIDTH_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PROG_PUL_WIDTH`"]
        pub struct PROG_PUL_WIDTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PROG_PUL_WIDTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - PROG_PUL_WIDTH"]
            #[inline(always)]
            pub fn prog_pul_width(&self) -> PROG_PUL_WIDTH_R {
                PROG_PUL_WIDTH_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - PROG_PUL_WIDTH"]
            #[inline(always)]
            pub fn prog_pul_width(&mut self) -> PROG_PUL_WIDTH_W {
                PROG_PUL_WIDTH_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_era_pw](fsm_era_pw) module"]
    pub type FSM_ERA_PW = crate::Reg<u32, _FSM_ERA_PW>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ERA_PW;
    #[doc = "`read()` method returns [fsm_era_pw::R](fsm_era_pw::R) reader structure"]
    impl crate::Readable for FSM_ERA_PW {}
    #[doc = "`write(|w| ..)` method takes [fsm_era_pw::W](fsm_era_pw::W) writer structure"]
    impl crate::Writable for FSM_ERA_PW {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_era_pw {
        #[doc = "Reader of register FSM_ERA_PW"]
        pub type R = crate::R<u32, super::FSM_ERA_PW>;
        #[doc = "Writer for register FSM_ERA_PW"]
        pub type W = crate::W<u32, super::FSM_ERA_PW>;
        #[doc = "Register FSM_ERA_PW `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_ERA_PW {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSM_ERA_PW`"]
        pub type FSM_ERA_PW_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_ERA_PW`"]
        pub struct FSM_ERA_PW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_ERA_PW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_ERA_PW"]
            #[inline(always)]
            pub fn fsm_era_pw(&self) -> FSM_ERA_PW_R {
                FSM_ERA_PW_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_ERA_PW"]
            #[inline(always)]
            pub fn fsm_era_pw(&mut self) -> FSM_ERA_PW_W {
                FSM_ERA_PW_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_sav_era_pul](fsm_sav_era_pul) module"]
    pub type FSM_SAV_ERA_PUL = crate::Reg<u32, _FSM_SAV_ERA_PUL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_SAV_ERA_PUL;
    #[doc = "`read()` method returns [fsm_sav_era_pul::R](fsm_sav_era_pul::R) reader structure"]
    impl crate::Readable for FSM_SAV_ERA_PUL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_sav_era_pul {
        #[doc = "Reader of register FSM_SAV_ERA_PUL"]
        pub type R = crate::R<u32, super::FSM_SAV_ERA_PUL>;
        #[doc = "Reader of field `SAV_ERA_PUL`"]
        pub type SAV_ERA_PUL_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - SAV_ERA_PUL"]
            #[inline(always)]
            pub fn sav_era_pul(&self) -> SAV_ERA_PUL_R {
                SAV_ERA_PUL_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_timer](fsm_timer) module"]
    pub type FSM_TIMER = crate::Reg<u32, _FSM_TIMER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_TIMER;
    #[doc = "`read()` method returns [fsm_timer::R](fsm_timer::R) reader structure"]
    impl crate::Readable for FSM_TIMER {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_timer {
        #[doc = "Reader of register FSM_TIMER"]
        pub type R = crate::R<u32, super::FSM_TIMER>;
        #[doc = "Reader of field `FSM_TIMER`"]
        pub type FSM_TIMER_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - FSM_TIMER"]
            #[inline(always)]
            pub fn fsm_timer(&self) -> FSM_TIMER_R {
                FSM_TIMER_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_mode](fsm_mode) module"]
    pub type FSM_MODE = crate::Reg<u32, _FSM_MODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_MODE;
    #[doc = "`read()` method returns [fsm_mode::R](fsm_mode::R) reader structure"]
    impl crate::Readable for FSM_MODE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_mode {
        #[doc = "Reader of register FSM_MODE"]
        pub type R = crate::R<u32, super::FSM_MODE>;
        #[doc = "Reader of field `RDV_SUBMODE`"]
        pub type RDV_SUBMODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PGM_SUBMODE`"]
        pub type PGM_SUBMODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ERA_SUBMODE`"]
        pub type ERA_SUBMODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SUBMODE`"]
        pub type SUBMODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SAV_PGM_CMD`"]
        pub type SAV_PGM_CMD_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SAV_ERA_MODE`"]
        pub type SAV_ERA_MODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CMD`"]
        pub type CMD_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 18:19 - RDV_SUBMODE"]
            #[inline(always)]
            pub fn rdv_submode(&self) -> RDV_SUBMODE_R {
                RDV_SUBMODE_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - PGM_SUBMODE"]
            #[inline(always)]
            pub fn pgm_submode(&self) -> PGM_SUBMODE_R {
                PGM_SUBMODE_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - ERA_SUBMODE"]
            #[inline(always)]
            pub fn era_submode(&self) -> ERA_SUBMODE_R {
                ERA_SUBMODE_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - SUBMODE"]
            #[inline(always)]
            pub fn submode(&self) -> SUBMODE_R {
                SUBMODE_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 9:11 - SAV_PGM_CMD"]
            #[inline(always)]
            pub fn sav_pgm_cmd(&self) -> SAV_PGM_CMD_R {
                SAV_PGM_CMD_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 6:8 - SAV_ERA_MODE"]
            #[inline(always)]
            pub fn sav_era_mode(&self) -> SAV_ERA_MODE_R {
                SAV_ERA_MODE_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bits 3:5 - MODE"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - CMD"]
            #[inline(always)]
            pub fn cmd(&self) -> CMD_R {
                CMD_R::new((self.bits & 0x07) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_pgm](fsm_pgm) module"]
    pub type FSM_PGM = crate::Reg<u32, _FSM_PGM>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PGM;
    #[doc = "`read()` method returns [fsm_pgm::R](fsm_pgm::R) reader structure"]
    impl crate::Readable for FSM_PGM {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_pgm {
        #[doc = "Reader of register FSM_PGM"]
        pub type R = crate::R<u32, super::FSM_PGM>;
        #[doc = "Reader of field `PGM_BANK`"]
        pub type PGM_BANK_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PGM_ADDR`"]
        pub type PGM_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 23:25 - PGM_BANK"]
            #[inline(always)]
            pub fn pgm_bank(&self) -> PGM_BANK_R {
                PGM_BANK_R::new(((self.bits >> 23) & 0x07) as u8)
            }
            #[doc = "Bits 0:22 - PGM_ADDR"]
            #[inline(always)]
            pub fn pgm_addr(&self) -> PGM_ADDR_R {
                PGM_ADDR_R::new((self.bits & 0x007f_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_era](fsm_era) module"]
    pub type FSM_ERA = crate::Reg<u32, _FSM_ERA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ERA;
    #[doc = "`read()` method returns [fsm_era::R](fsm_era::R) reader structure"]
    impl crate::Readable for FSM_ERA {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_era {
        #[doc = "Reader of register FSM_ERA"]
        pub type R = crate::R<u32, super::FSM_ERA>;
        #[doc = "Reader of field `ERA_BANK`"]
        pub type ERA_BANK_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ERA_ADDR`"]
        pub type ERA_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 23:25 - ERA_BANK"]
            #[inline(always)]
            pub fn era_bank(&self) -> ERA_BANK_R {
                ERA_BANK_R::new(((self.bits >> 23) & 0x07) as u8)
            }
            #[doc = "Bits 0:22 - ERA_ADDR"]
            #[inline(always)]
            pub fn era_addr(&self) -> ERA_ADDR_R {
                ERA_ADDR_R::new((self.bits & 0x007f_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_prg_pul](fsm_prg_pul) module"]
    pub type FSM_PRG_PUL = crate::Reg<u32, _FSM_PRG_PUL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PRG_PUL;
    #[doc = "`read()` method returns [fsm_prg_pul::R](fsm_prg_pul::R) reader structure"]
    impl crate::Readable for FSM_PRG_PUL {}
    #[doc = "`write(|w| ..)` method takes [fsm_prg_pul::W](fsm_prg_pul::W) writer structure"]
    impl crate::Writable for FSM_PRG_PUL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_prg_pul {
        #[doc = "Reader of register FSM_PRG_PUL"]
        pub type R = crate::R<u32, super::FSM_PRG_PUL>;
        #[doc = "Writer for register FSM_PRG_PUL"]
        pub type W = crate::W<u32, super::FSM_PRG_PUL>;
        #[doc = "Register FSM_PRG_PUL `reset()`'s with value 0x0004_0032"]
        impl crate::ResetValue for super::FSM_PRG_PUL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0004_0032
            }
        }
        #[doc = "Reader of field `BEG_EC_LEVEL`"]
        pub type BEG_EC_LEVEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BEG_EC_LEVEL`"]
        pub struct BEG_EC_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BEG_EC_LEVEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MAX_PRG_PUL`"]
        pub type MAX_PRG_PUL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MAX_PRG_PUL`"]
        pub struct MAX_PRG_PUL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_PRG_PUL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:19 - BEG_EC_LEVEL"]
            #[inline(always)]
            pub fn beg_ec_level(&self) -> BEG_EC_LEVEL_R {
                BEG_EC_LEVEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 0:11 - MAX_PRG_PUL"]
            #[inline(always)]
            pub fn max_prg_pul(&self) -> MAX_PRG_PUL_R {
                MAX_PRG_PUL_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:19 - BEG_EC_LEVEL"]
            #[inline(always)]
            pub fn beg_ec_level(&mut self) -> BEG_EC_LEVEL_W {
                BEG_EC_LEVEL_W { w: self }
            }
            #[doc = "Bits 0:11 - MAX_PRG_PUL"]
            #[inline(always)]
            pub fn max_prg_pul(&mut self) -> MAX_PRG_PUL_W {
                MAX_PRG_PUL_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_era_pul](fsm_era_pul) module"]
    pub type FSM_ERA_PUL = crate::Reg<u32, _FSM_ERA_PUL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ERA_PUL;
    #[doc = "`read()` method returns [fsm_era_pul::R](fsm_era_pul::R) reader structure"]
    impl crate::Readable for FSM_ERA_PUL {}
    #[doc = "`write(|w| ..)` method takes [fsm_era_pul::W](fsm_era_pul::W) writer structure"]
    impl crate::Writable for FSM_ERA_PUL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_era_pul {
        #[doc = "Reader of register FSM_ERA_PUL"]
        pub type R = crate::R<u32, super::FSM_ERA_PUL>;
        #[doc = "Writer for register FSM_ERA_PUL"]
        pub type W = crate::W<u32, super::FSM_ERA_PUL>;
        #[doc = "Register FSM_ERA_PUL `reset()`'s with value 0x0004_0bb8"]
        impl crate::ResetValue for super::FSM_ERA_PUL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0004_0bb8
            }
        }
        #[doc = "Reader of field `MAX_EC_LEVEL`"]
        pub type MAX_EC_LEVEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MAX_EC_LEVEL`"]
        pub struct MAX_EC_LEVEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_EC_LEVEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MAX_ERA_PUL`"]
        pub type MAX_ERA_PUL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MAX_ERA_PUL`"]
        pub struct MAX_ERA_PUL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_ERA_PUL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:19 - MAX_EC_LEVEL"]
            #[inline(always)]
            pub fn max_ec_level(&self) -> MAX_EC_LEVEL_R {
                MAX_EC_LEVEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 0:11 - MAX_ERA_PUL"]
            #[inline(always)]
            pub fn max_era_pul(&self) -> MAX_ERA_PUL_R {
                MAX_ERA_PUL_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:19 - MAX_EC_LEVEL"]
            #[inline(always)]
            pub fn max_ec_level(&mut self) -> MAX_EC_LEVEL_W {
                MAX_EC_LEVEL_W { w: self }
            }
            #[doc = "Bits 0:11 - MAX_ERA_PUL"]
            #[inline(always)]
            pub fn max_era_pul(&mut self) -> MAX_ERA_PUL_W {
                MAX_ERA_PUL_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_step_size](fsm_step_size) module"]
    pub type FSM_STEP_SIZE = crate::Reg<u32, _FSM_STEP_SIZE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_STEP_SIZE;
    #[doc = "`read()` method returns [fsm_step_size::R](fsm_step_size::R) reader structure"]
    impl crate::Readable for FSM_STEP_SIZE {}
    #[doc = "`write(|w| ..)` method takes [fsm_step_size::W](fsm_step_size::W) writer structure"]
    impl crate::Writable for FSM_STEP_SIZE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_step_size {
        #[doc = "Reader of register FSM_STEP_SIZE"]
        pub type R = crate::R<u32, super::FSM_STEP_SIZE>;
        #[doc = "Writer for register FSM_STEP_SIZE"]
        pub type W = crate::W<u32, super::FSM_STEP_SIZE>;
        #[doc = "Register FSM_STEP_SIZE `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_STEP_SIZE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EC_STEP_SIZE`"]
        pub type EC_STEP_SIZE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `EC_STEP_SIZE`"]
        pub struct EC_STEP_SIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EC_STEP_SIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01ff << 16)) | (((value as u32) & 0x01ff) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:24 - EC_STEP_SIZE"]
            #[inline(always)]
            pub fn ec_step_size(&self) -> EC_STEP_SIZE_R {
                EC_STEP_SIZE_R::new(((self.bits >> 16) & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:24 - EC_STEP_SIZE"]
            #[inline(always)]
            pub fn ec_step_size(&mut self) -> EC_STEP_SIZE_W {
                EC_STEP_SIZE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_pul_cntr](fsm_pul_cntr) module"]
    pub type FSM_PUL_CNTR = crate::Reg<u32, _FSM_PUL_CNTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PUL_CNTR;
    #[doc = "`read()` method returns [fsm_pul_cntr::R](fsm_pul_cntr::R) reader structure"]
    impl crate::Readable for FSM_PUL_CNTR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_pul_cntr {
        #[doc = "Reader of register FSM_PUL_CNTR"]
        pub type R = crate::R<u32, super::FSM_PUL_CNTR>;
        #[doc = "Reader of field `CUR_EC_LEVEL`"]
        pub type CUR_EC_LEVEL_R = crate::R<u16, u16>;
        #[doc = "Reader of field `PUL_CNTR`"]
        pub type PUL_CNTR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 16:24 - CUR_EC_LEVEL"]
            #[inline(always)]
            pub fn cur_ec_level(&self) -> CUR_EC_LEVEL_R {
                CUR_EC_LEVEL_R::new(((self.bits >> 16) & 0x01ff) as u16)
            }
            #[doc = "Bits 0:11 - PUL_CNTR"]
            #[inline(always)]
            pub fn pul_cntr(&self) -> PUL_CNTR_R {
                PUL_CNTR_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_ec_step_height](fsm_ec_step_height) module"]
    pub type FSM_EC_STEP_HEIGHT = crate::Reg<u32, _FSM_EC_STEP_HEIGHT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_EC_STEP_HEIGHT;
    #[doc = "`read()` method returns [fsm_ec_step_height::R](fsm_ec_step_height::R) reader structure"]
    impl crate::Readable for FSM_EC_STEP_HEIGHT {}
    #[doc = "`write(|w| ..)` method takes [fsm_ec_step_height::W](fsm_ec_step_height::W) writer structure"]
    impl crate::Writable for FSM_EC_STEP_HEIGHT {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_ec_step_height {
        #[doc = "Reader of register FSM_EC_STEP_HEIGHT"]
        pub type R = crate::R<u32, super::FSM_EC_STEP_HEIGHT>;
        #[doc = "Writer for register FSM_EC_STEP_HEIGHT"]
        pub type W = crate::W<u32, super::FSM_EC_STEP_HEIGHT>;
        #[doc = "Register FSM_EC_STEP_HEIGHT `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_EC_STEP_HEIGHT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EC_STEP_HEIGHT`"]
        pub type EC_STEP_HEIGHT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EC_STEP_HEIGHT`"]
        pub struct EC_STEP_HEIGHT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EC_STEP_HEIGHT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - EC_STEP_HEIGHT"]
            #[inline(always)]
            pub fn ec_step_height(&self) -> EC_STEP_HEIGHT_R {
                EC_STEP_HEIGHT_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EC_STEP_HEIGHT"]
            #[inline(always)]
            pub fn ec_step_height(&mut self) -> EC_STEP_HEIGHT_W {
                EC_STEP_HEIGHT_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_st_machine](fsm_st_machine) module"]
    pub type FSM_ST_MACHINE = crate::Reg<u32, _FSM_ST_MACHINE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ST_MACHINE;
    #[doc = "`read()` method returns [fsm_st_machine::R](fsm_st_machine::R) reader structure"]
    impl crate::Readable for FSM_ST_MACHINE {}
    #[doc = "`write(|w| ..)` method takes [fsm_st_machine::W](fsm_st_machine::W) writer structure"]
    impl crate::Writable for FSM_ST_MACHINE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_st_machine {
        #[doc = "Reader of register FSM_ST_MACHINE"]
        pub type R = crate::R<u32, super::FSM_ST_MACHINE>;
        #[doc = "Writer for register FSM_ST_MACHINE"]
        pub type W = crate::W<u32, super::FSM_ST_MACHINE>;
        #[doc = "Register FSM_ST_MACHINE `reset()`'s with value 0x0080_0500"]
        impl crate::ResetValue for super::FSM_ST_MACHINE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0080_0500
            }
        }
        #[doc = "Reader of field `DO_PRECOND`"]
        pub type DO_PRECOND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DO_PRECOND`"]
        pub struct DO_PRECOND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DO_PRECOND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `FSM_INT_EN`"]
        pub type FSM_INT_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSM_INT_EN`"]
        pub struct FSM_INT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_INT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `ALL_BANKS`"]
        pub type ALL_BANKS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALL_BANKS`"]
        pub struct ALL_BANKS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALL_BANKS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `CMPV_ALLOWED`"]
        pub type CMPV_ALLOWED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMPV_ALLOWED`"]
        pub struct CMPV_ALLOWED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPV_ALLOWED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `RANDOM`"]
        pub type RANDOM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RANDOM`"]
        pub struct RANDOM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RANDOM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RV_SEC_EN`"]
        pub type RV_SEC_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RV_SEC_EN`"]
        pub struct RV_SEC_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RV_SEC_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RV_RES`"]
        pub type RV_RES_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RV_RES`"]
        pub struct RV_RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RV_RES_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RV_INT_EN`"]
        pub type RV_INT_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RV_INT_EN`"]
        pub struct RV_INT_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RV_INT_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ONE_TIME_GOOD`"]
        pub type ONE_TIME_GOOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ONE_TIME_GOOD`"]
        pub struct ONE_TIME_GOOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ONE_TIME_GOOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DO_REDU_COL`"]
        pub type DO_REDU_COL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DO_REDU_COL`"]
        pub struct DO_REDU_COL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DO_REDU_COL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_SHORT_ROW`"]
        pub type DBG_SHORT_ROW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBG_SHORT_ROW`"]
        pub struct DBG_SHORT_ROW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_SHORT_ROW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 7)) | (((value as u32) & 0x0f) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PGM_SEC_COF_EN`"]
        pub type PGM_SEC_COF_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PGM_SEC_COF_EN`"]
        pub struct PGM_SEC_COF_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGM_SEC_COF_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PREC_STOP_EN`"]
        pub type PREC_STOP_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PREC_STOP_EN`"]
        pub struct PREC_STOP_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREC_STOP_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIS_TST_EN`"]
        pub type DIS_TST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIS_TST_EN`"]
        pub struct DIS_TST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIS_TST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CMD_EN`"]
        pub type CMD_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMD_EN`"]
        pub struct CMD_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `INV_DATA`"]
        pub type INV_DATA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INV_DATA`"]
        pub struct INV_DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INV_DATA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OVERRIDE`"]
        pub type OVERRIDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVERRIDE`"]
        pub struct OVERRIDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVERRIDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 23 - DO_PRECOND"]
            #[inline(always)]
            pub fn do_precond(&self) -> DO_PRECOND_R {
                DO_PRECOND_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - FSM_INT_EN"]
            #[inline(always)]
            pub fn fsm_int_en(&self) -> FSM_INT_EN_R {
                FSM_INT_EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - ALL_BANKS"]
            #[inline(always)]
            pub fn all_banks(&self) -> ALL_BANKS_R {
                ALL_BANKS_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - CMPV_ALLOWED"]
            #[inline(always)]
            pub fn cmpv_allowed(&self) -> CMPV_ALLOWED_R {
                CMPV_ALLOWED_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RANDOM"]
            #[inline(always)]
            pub fn random(&self) -> RANDOM_R {
                RANDOM_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RV_SEC_EN"]
            #[inline(always)]
            pub fn rv_sec_en(&self) -> RV_SEC_EN_R {
                RV_SEC_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RV_RES"]
            #[inline(always)]
            pub fn rv_res(&self) -> RV_RES_R {
                RV_RES_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RV_INT_EN"]
            #[inline(always)]
            pub fn rv_int_en(&self) -> RV_INT_EN_R {
                RV_INT_EN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 14 - ONE_TIME_GOOD"]
            #[inline(always)]
            pub fn one_time_good(&self) -> ONE_TIME_GOOD_R {
                ONE_TIME_GOOD_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DO_REDU_COL"]
            #[inline(always)]
            pub fn do_redu_col(&self) -> DO_REDU_COL_R {
                DO_REDU_COL_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 7:10 - DBG_SHORT_ROW"]
            #[inline(always)]
            pub fn dbg_short_row(&self) -> DBG_SHORT_ROW_R {
                DBG_SHORT_ROW_R::new(((self.bits >> 7) & 0x0f) as u8)
            }
            #[doc = "Bit 5 - PGM_SEC_COF_EN"]
            #[inline(always)]
            pub fn pgm_sec_cof_en(&self) -> PGM_SEC_COF_EN_R {
                PGM_SEC_COF_EN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PREC_STOP_EN"]
            #[inline(always)]
            pub fn prec_stop_en(&self) -> PREC_STOP_EN_R {
                PREC_STOP_EN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIS_TST_EN"]
            #[inline(always)]
            pub fn dis_tst_en(&self) -> DIS_TST_EN_R {
                DIS_TST_EN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CMD_EN"]
            #[inline(always)]
            pub fn cmd_en(&self) -> CMD_EN_R {
                CMD_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - INV_DATA"]
            #[inline(always)]
            pub fn inv_data(&self) -> INV_DATA_R {
                INV_DATA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - OVERRIDE"]
            #[inline(always)]
            pub fn override_(&self) -> OVERRIDE_R {
                OVERRIDE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 23 - DO_PRECOND"]
            #[inline(always)]
            pub fn do_precond(&mut self) -> DO_PRECOND_W {
                DO_PRECOND_W { w: self }
            }
            #[doc = "Bit 22 - FSM_INT_EN"]
            #[inline(always)]
            pub fn fsm_int_en(&mut self) -> FSM_INT_EN_W {
                FSM_INT_EN_W { w: self }
            }
            #[doc = "Bit 21 - ALL_BANKS"]
            #[inline(always)]
            pub fn all_banks(&mut self) -> ALL_BANKS_W {
                ALL_BANKS_W { w: self }
            }
            #[doc = "Bit 20 - CMPV_ALLOWED"]
            #[inline(always)]
            pub fn cmpv_allowed(&mut self) -> CMPV_ALLOWED_W {
                CMPV_ALLOWED_W { w: self }
            }
            #[doc = "Bit 19 - RANDOM"]
            #[inline(always)]
            pub fn random(&mut self) -> RANDOM_W {
                RANDOM_W { w: self }
            }
            #[doc = "Bit 18 - RV_SEC_EN"]
            #[inline(always)]
            pub fn rv_sec_en(&mut self) -> RV_SEC_EN_W {
                RV_SEC_EN_W { w: self }
            }
            #[doc = "Bit 17 - RV_RES"]
            #[inline(always)]
            pub fn rv_res(&mut self) -> RV_RES_W {
                RV_RES_W { w: self }
            }
            #[doc = "Bit 16 - RV_INT_EN"]
            #[inline(always)]
            pub fn rv_int_en(&mut self) -> RV_INT_EN_W {
                RV_INT_EN_W { w: self }
            }
            #[doc = "Bit 14 - ONE_TIME_GOOD"]
            #[inline(always)]
            pub fn one_time_good(&mut self) -> ONE_TIME_GOOD_W {
                ONE_TIME_GOOD_W { w: self }
            }
            #[doc = "Bit 11 - DO_REDU_COL"]
            #[inline(always)]
            pub fn do_redu_col(&mut self) -> DO_REDU_COL_W {
                DO_REDU_COL_W { w: self }
            }
            #[doc = "Bits 7:10 - DBG_SHORT_ROW"]
            #[inline(always)]
            pub fn dbg_short_row(&mut self) -> DBG_SHORT_ROW_W {
                DBG_SHORT_ROW_W { w: self }
            }
            #[doc = "Bit 5 - PGM_SEC_COF_EN"]
            #[inline(always)]
            pub fn pgm_sec_cof_en(&mut self) -> PGM_SEC_COF_EN_W {
                PGM_SEC_COF_EN_W { w: self }
            }
            #[doc = "Bit 4 - PREC_STOP_EN"]
            #[inline(always)]
            pub fn prec_stop_en(&mut self) -> PREC_STOP_EN_W {
                PREC_STOP_EN_W { w: self }
            }
            #[doc = "Bit 3 - DIS_TST_EN"]
            #[inline(always)]
            pub fn dis_tst_en(&mut self) -> DIS_TST_EN_W {
                DIS_TST_EN_W { w: self }
            }
            #[doc = "Bit 2 - CMD_EN"]
            #[inline(always)]
            pub fn cmd_en(&mut self) -> CMD_EN_W {
                CMD_EN_W { w: self }
            }
            #[doc = "Bit 1 - INV_DATA"]
            #[inline(always)]
            pub fn inv_data(&mut self) -> INV_DATA_W {
                INV_DATA_W { w: self }
            }
            #[doc = "Bit 0 - OVERRIDE"]
            #[inline(always)]
            pub fn override_(&mut self) -> OVERRIDE_W {
                OVERRIDE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_fles](fsm_fles) module"]
    pub type FSM_FLES = crate::Reg<u32, _FSM_FLES>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_FLES;
    #[doc = "`read()` method returns [fsm_fles::R](fsm_fles::R) reader structure"]
    impl crate::Readable for FSM_FLES {}
    #[doc = "`write(|w| ..)` method takes [fsm_fles::W](fsm_fles::W) writer structure"]
    impl crate::Writable for FSM_FLES {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_fles {
        #[doc = "Reader of register FSM_FLES"]
        pub type R = crate::R<u32, super::FSM_FLES>;
        #[doc = "Writer for register FSM_FLES"]
        pub type W = crate::W<u32, super::FSM_FLES>;
        #[doc = "Register FSM_FLES `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_FLES {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BLK_TIOTP`"]
        pub type BLK_TIOTP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BLK_TIOTP`"]
        pub struct BLK_TIOTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLK_TIOTP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BLK_OTP`"]
        pub type BLK_OTP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BLK_OTP`"]
        pub struct BLK_OTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLK_OTP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:11 - BLK_TIOTP"]
            #[inline(always)]
            pub fn blk_tiotp(&self) -> BLK_TIOTP_R {
                BLK_TIOTP_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 0:7 - BLK_OTP"]
            #[inline(always)]
            pub fn blk_otp(&self) -> BLK_OTP_R {
                BLK_OTP_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:11 - BLK_TIOTP"]
            #[inline(always)]
            pub fn blk_tiotp(&mut self) -> BLK_TIOTP_W {
                BLK_TIOTP_W { w: self }
            }
            #[doc = "Bits 0:7 - BLK_OTP"]
            #[inline(always)]
            pub fn blk_otp(&mut self) -> BLK_OTP_W {
                BLK_OTP_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_wr_ena](fsm_wr_ena) module"]
    pub type FSM_WR_ENA = crate::Reg<u32, _FSM_WR_ENA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_WR_ENA;
    #[doc = "`read()` method returns [fsm_wr_ena::R](fsm_wr_ena::R) reader structure"]
    impl crate::Readable for FSM_WR_ENA {}
    #[doc = "`write(|w| ..)` method takes [fsm_wr_ena::W](fsm_wr_ena::W) writer structure"]
    impl crate::Writable for FSM_WR_ENA {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_wr_ena {
        #[doc = "Reader of register FSM_WR_ENA"]
        pub type R = crate::R<u32, super::FSM_WR_ENA>;
        #[doc = "Writer for register FSM_WR_ENA"]
        pub type W = crate::W<u32, super::FSM_WR_ENA>;
        #[doc = "Register FSM_WR_ENA `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::FSM_WR_ENA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `WR_ENA`"]
        pub type WR_ENA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WR_ENA`"]
        pub struct WR_ENA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WR_ENA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - WR_ENA"]
            #[inline(always)]
            pub fn wr_ena(&self) -> WR_ENA_R {
                WR_ENA_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - WR_ENA"]
            #[inline(always)]
            pub fn wr_ena(&mut self) -> WR_ENA_W {
                WR_ENA_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_acc_pp](fsm_acc_pp) module"]
    pub type FSM_ACC_PP = crate::Reg<u32, _FSM_ACC_PP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ACC_PP;
    #[doc = "`read()` method returns [fsm_acc_pp::R](fsm_acc_pp::R) reader structure"]
    impl crate::Readable for FSM_ACC_PP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_acc_pp {
        #[doc = "Reader of register FSM_ACC_PP"]
        pub type R = crate::R<u32, super::FSM_ACC_PP>;
        #[doc = "Reader of field `FSM_ACC_PP`"]
        pub type FSM_ACC_PP_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - FSM_ACC_PP"]
            #[inline(always)]
            pub fn fsm_acc_pp(&self) -> FSM_ACC_PP_R {
                FSM_ACC_PP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_acc_ep](fsm_acc_ep) module"]
    pub type FSM_ACC_EP = crate::Reg<u32, _FSM_ACC_EP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ACC_EP;
    #[doc = "`read()` method returns [fsm_acc_ep::R](fsm_acc_ep::R) reader structure"]
    impl crate::Readable for FSM_ACC_EP {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_acc_ep {
        #[doc = "Reader of register FSM_ACC_EP"]
        pub type R = crate::R<u32, super::FSM_ACC_EP>;
        #[doc = "Reader of field `ACC_EP`"]
        pub type ACC_EP_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - ACC_EP"]
            #[inline(always)]
            pub fn acc_ep(&self) -> ACC_EP_R {
                ACC_EP_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_addr](fsm_addr) module"]
    pub type FSM_ADDR = crate::Reg<u32, _FSM_ADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ADDR;
    #[doc = "`read()` method returns [fsm_addr::R](fsm_addr::R) reader structure"]
    impl crate::Readable for FSM_ADDR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_addr {
        #[doc = "Reader of register FSM_ADDR"]
        pub type R = crate::R<u32, super::FSM_ADDR>;
        #[doc = "Reader of field `BANK`"]
        pub type BANK_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CUR_ADDR`"]
        pub type CUR_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:30 - BANK"]
            #[inline(always)]
            pub fn bank(&self) -> BANK_R {
                BANK_R::new(((self.bits >> 28) & 0x07) as u8)
            }
            #[doc = "Bits 0:27 - CUR_ADDR"]
            #[inline(always)]
            pub fn cur_addr(&self) -> CUR_ADDR_R {
                CUR_ADDR_R::new((self.bits & 0x0fff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_sector](fsm_sector) module"]
    pub type FSM_SECTOR = crate::Reg<u32, _FSM_SECTOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_SECTOR;
    #[doc = "`read()` method returns [fsm_sector::R](fsm_sector::R) reader structure"]
    impl crate::Readable for FSM_SECTOR {}
    #[doc = "`write(|w| ..)` method takes [fsm_sector::W](fsm_sector::W) writer structure"]
    impl crate::Writable for FSM_SECTOR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_sector {
        #[doc = "Reader of register FSM_SECTOR"]
        pub type R = crate::R<u32, super::FSM_SECTOR>;
        #[doc = "Writer for register FSM_SECTOR"]
        pub type W = crate::W<u32, super::FSM_SECTOR>;
        #[doc = "Register FSM_SECTOR `reset()`'s with value 0xffff_0000"]
        impl crate::ResetValue for super::FSM_SECTOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_0000
            }
        }
        #[doc = "Reader of field `SECT_ERASED`"]
        pub type SECT_ERASED_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SECT_ERASED`"]
        pub struct SECT_ERASED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SECT_ERASED_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `FSM_SECTOR_EXTENSION`"]
        pub type FSM_SECTOR_EXTENSION_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FSM_SECTOR_EXTENSION`"]
        pub struct FSM_SECTOR_EXTENSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_SECTOR_EXTENSION_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SECTOR`"]
        pub type SECTOR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SECTOR`"]
        pub struct SECTOR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SECTOR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SEC_OUT`"]
        pub type SEC_OUT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SEC_OUT`"]
        pub struct SEC_OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SEC_OUT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - SECT_ERASED"]
            #[inline(always)]
            pub fn sect_erased(&self) -> SECT_ERASED_R {
                SECT_ERASED_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:15 - FSM_SECTOR_EXTENSION"]
            #[inline(always)]
            pub fn fsm_sector_extension(&self) -> FSM_SECTOR_EXTENSION_R {
                FSM_SECTOR_EXTENSION_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 4:7 - SECTOR"]
            #[inline(always)]
            pub fn sector(&self) -> SECTOR_R {
                SECTOR_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - SEC_OUT"]
            #[inline(always)]
            pub fn sec_out(&self) -> SEC_OUT_R {
                SEC_OUT_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - SECT_ERASED"]
            #[inline(always)]
            pub fn sect_erased(&mut self) -> SECT_ERASED_W {
                SECT_ERASED_W { w: self }
            }
            #[doc = "Bits 8:15 - FSM_SECTOR_EXTENSION"]
            #[inline(always)]
            pub fn fsm_sector_extension(&mut self) -> FSM_SECTOR_EXTENSION_W {
                FSM_SECTOR_EXTENSION_W { w: self }
            }
            #[doc = "Bits 4:7 - SECTOR"]
            #[inline(always)]
            pub fn sector(&mut self) -> SECTOR_W {
                SECTOR_W { w: self }
            }
            #[doc = "Bits 0:3 - SEC_OUT"]
            #[inline(always)]
            pub fn sec_out(&mut self) -> SEC_OUT_W {
                SEC_OUT_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fmc_rev_id](fmc_rev_id) module"]
    pub type FMC_REV_ID = crate::Reg<u32, _FMC_REV_ID>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FMC_REV_ID;
    #[doc = "`read()` method returns [fmc_rev_id::R](fmc_rev_id::R) reader structure"]
    impl crate::Readable for FMC_REV_ID {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fmc_rev_id {
        #[doc = "Reader of register FMC_REV_ID"]
        pub type R = crate::R<u32, super::FMC_REV_ID>;
        #[doc = "Reader of field `MOD_VERSION`"]
        pub type MOD_VERSION_R = crate::R<u32, u32>;
        #[doc = "Reader of field `CONFIG_CRC`"]
        pub type CONFIG_CRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 12:31 - MOD_VERSION"]
            #[inline(always)]
            pub fn mod_version(&self) -> MOD_VERSION_R {
                MOD_VERSION_R::new(((self.bits >> 12) & 0x000f_ffff) as u32)
            }
            #[doc = "Bits 0:11 - CONFIG_CRC"]
            #[inline(always)]
            pub fn config_crc(&self) -> CONFIG_CRC_R {
                CONFIG_CRC_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_err_addr](fsm_err_addr) module"]
    pub type FSM_ERR_ADDR = crate::Reg<u32, _FSM_ERR_ADDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_ERR_ADDR;
    #[doc = "`read()` method returns [fsm_err_addr::R](fsm_err_addr::R) reader structure"]
    impl crate::Readable for FSM_ERR_ADDR {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_err_addr {
        #[doc = "Reader of register FSM_ERR_ADDR"]
        pub type R = crate::R<u32, super::FSM_ERR_ADDR>;
        #[doc = "Reader of field `FSM_ERR_ADDR`"]
        pub type FSM_ERR_ADDR_R = crate::R<u32, u32>;
        #[doc = "Reader of field `FSM_ERR_BANK`"]
        pub type FSM_ERR_BANK_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 8:31 - FSM_ERR_ADDR"]
            #[inline(always)]
            pub fn fsm_err_addr(&self) -> FSM_ERR_ADDR_R {
                FSM_ERR_ADDR_R::new(((self.bits >> 8) & 0x00ff_ffff) as u32)
            }
            #[doc = "Bits 0:3 - FSM_ERR_BANK"]
            #[inline(always)]
            pub fn fsm_err_bank(&self) -> FSM_ERR_BANK_R {
                FSM_ERR_BANK_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_pgm_maxpul](fsm_pgm_maxpul) module"]
    pub type FSM_PGM_MAXPUL = crate::Reg<u32, _FSM_PGM_MAXPUL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_PGM_MAXPUL;
    #[doc = "`read()` method returns [fsm_pgm_maxpul::R](fsm_pgm_maxpul::R) reader structure"]
    impl crate::Readable for FSM_PGM_MAXPUL {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_pgm_maxpul {
        #[doc = "Reader of register FSM_PGM_MAXPUL"]
        pub type R = crate::R<u32, super::FSM_PGM_MAXPUL>;
        #[doc = "Reader of field `FSM_PGM_MAXPUL`"]
        pub type FSM_PGM_MAXPUL_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - FSM_PGM_MAXPUL"]
            #[inline(always)]
            pub fn fsm_pgm_maxpul(&self) -> FSM_PGM_MAXPUL_R {
                FSM_PGM_MAXPUL_R::new((self.bits & 0x0fff) as u16)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_execute](fsm_execute) module"]
    pub type FSM_EXECUTE = crate::Reg<u32, _FSM_EXECUTE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_EXECUTE;
    #[doc = "`read()` method returns [fsm_execute::R](fsm_execute::R) reader structure"]
    impl crate::Readable for FSM_EXECUTE {}
    #[doc = "`write(|w| ..)` method takes [fsm_execute::W](fsm_execute::W) writer structure"]
    impl crate::Writable for FSM_EXECUTE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_execute {
        #[doc = "Reader of register FSM_EXECUTE"]
        pub type R = crate::R<u32, super::FSM_EXECUTE>;
        #[doc = "Writer for register FSM_EXECUTE"]
        pub type W = crate::W<u32, super::FSM_EXECUTE>;
        #[doc = "Register FSM_EXECUTE `reset()`'s with value 0x000a_000a"]
        impl crate::ResetValue for super::FSM_EXECUTE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x000a_000a
            }
        }
        #[doc = "Reader of field `SUSPEND_NOW`"]
        pub type SUSPEND_NOW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SUSPEND_NOW`"]
        pub struct SUSPEND_NOW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUSPEND_NOW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `FSMEXECUTE`"]
        pub type FSMEXECUTE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FSMEXECUTE`"]
        pub struct FSMEXECUTE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSMEXECUTE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:19 - SUSPEND_NOW"]
            #[inline(always)]
            pub fn suspend_now(&self) -> SUSPEND_NOW_R {
                SUSPEND_NOW_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 0:4 - FSMEXECUTE"]
            #[inline(always)]
            pub fn fsmexecute(&self) -> FSMEXECUTE_R {
                FSMEXECUTE_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:19 - SUSPEND_NOW"]
            #[inline(always)]
            pub fn suspend_now(&mut self) -> SUSPEND_NOW_W {
                SUSPEND_NOW_W { w: self }
            }
            #[doc = "Bits 0:4 - FSMEXECUTE"]
            #[inline(always)]
            pub fn fsmexecute(&mut self) -> FSMEXECUTE_W {
                FSMEXECUTE_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_sector1](fsm_sector1) module"]
    pub type FSM_SECTOR1 = crate::Reg<u32, _FSM_SECTOR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_SECTOR1;
    #[doc = "`read()` method returns [fsm_sector1::R](fsm_sector1::R) reader structure"]
    impl crate::Readable for FSM_SECTOR1 {}
    #[doc = "`write(|w| ..)` method takes [fsm_sector1::W](fsm_sector1::W) writer structure"]
    impl crate::Writable for FSM_SECTOR1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_sector1 {
        #[doc = "Reader of register FSM_SECTOR1"]
        pub type R = crate::R<u32, super::FSM_SECTOR1>;
        #[doc = "Writer for register FSM_SECTOR1"]
        pub type W = crate::W<u32, super::FSM_SECTOR1>;
        #[doc = "Register FSM_SECTOR1 `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::FSM_SECTOR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `FSM_SECTOR1`"]
        pub type FSM_SECTOR1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_SECTOR1`"]
        pub struct FSM_SECTOR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_SECTOR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_SECTOR1"]
            #[inline(always)]
            pub fn fsm_sector1(&self) -> FSM_SECTOR1_R {
                FSM_SECTOR1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_SECTOR1"]
            #[inline(always)]
            pub fn fsm_sector1(&mut self) -> FSM_SECTOR1_W {
                FSM_SECTOR1_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_sector2](fsm_sector2) module"]
    pub type FSM_SECTOR2 = crate::Reg<u32, _FSM_SECTOR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_SECTOR2;
    #[doc = "`read()` method returns [fsm_sector2::R](fsm_sector2::R) reader structure"]
    impl crate::Readable for FSM_SECTOR2 {}
    #[doc = "`write(|w| ..)` method takes [fsm_sector2::W](fsm_sector2::W) writer structure"]
    impl crate::Writable for FSM_SECTOR2 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_sector2 {
        #[doc = "Reader of register FSM_SECTOR2"]
        pub type R = crate::R<u32, super::FSM_SECTOR2>;
        #[doc = "Writer for register FSM_SECTOR2"]
        pub type W = crate::W<u32, super::FSM_SECTOR2>;
        #[doc = "Register FSM_SECTOR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_SECTOR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSM_SECTOR2`"]
        pub type FSM_SECTOR2_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_SECTOR2`"]
        pub struct FSM_SECTOR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_SECTOR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_SECTOR2"]
            #[inline(always)]
            pub fn fsm_sector2(&self) -> FSM_SECTOR2_R {
                FSM_SECTOR2_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_SECTOR2"]
            #[inline(always)]
            pub fn fsm_sector2(&mut self) -> FSM_SECTOR2_W {
                FSM_SECTOR2_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_bsle0](fsm_bsle0) module"]
    pub type FSM_BSLE0 = crate::Reg<u32, _FSM_BSLE0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_BSLE0;
    #[doc = "`read()` method returns [fsm_bsle0::R](fsm_bsle0::R) reader structure"]
    impl crate::Readable for FSM_BSLE0 {}
    #[doc = "`write(|w| ..)` method takes [fsm_bsle0::W](fsm_bsle0::W) writer structure"]
    impl crate::Writable for FSM_BSLE0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_bsle0 {
        #[doc = "Reader of register FSM_BSLE0"]
        pub type R = crate::R<u32, super::FSM_BSLE0>;
        #[doc = "Writer for register FSM_BSLE0"]
        pub type W = crate::W<u32, super::FSM_BSLE0>;
        #[doc = "Register FSM_BSLE0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_BSLE0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSM_BSLE0`"]
        pub type FSM_BSLE0_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_BSLE0`"]
        pub struct FSM_BSLE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_BSLE0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_BSLE0"]
            #[inline(always)]
            pub fn fsm_bsle0(&self) -> FSM_BSLE0_R {
                FSM_BSLE0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_BSLE0"]
            #[inline(always)]
            pub fn fsm_bsle0(&mut self) -> FSM_BSLE0_W {
                FSM_BSLE0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_bsle1](fsm_bsle1) module"]
    pub type FSM_BSLE1 = crate::Reg<u32, _FSM_BSLE1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_BSLE1;
    #[doc = "`read()` method returns [fsm_bsle1::R](fsm_bsle1::R) reader structure"]
    impl crate::Readable for FSM_BSLE1 {}
    #[doc = "`write(|w| ..)` method takes [fsm_bsle1::W](fsm_bsle1::W) writer structure"]
    impl crate::Writable for FSM_BSLE1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_bsle1 {
        #[doc = "Reader of register FSM_BSLE1"]
        pub type R = crate::R<u32, super::FSM_BSLE1>;
        #[doc = "Writer for register FSM_BSLE1"]
        pub type W = crate::W<u32, super::FSM_BSLE1>;
        #[doc = "Register FSM_BSLE1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_BSLE1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSM_BSL1`"]
        pub type FSM_BSL1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_BSL1`"]
        pub struct FSM_BSL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_BSL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_BSL1"]
            #[inline(always)]
            pub fn fsm_bsl1(&self) -> FSM_BSL1_R {
                FSM_BSL1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_BSL1"]
            #[inline(always)]
            pub fn fsm_bsl1(&mut self) -> FSM_BSL1_W {
                FSM_BSL1_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_bslp0](fsm_bslp0) module"]
    pub type FSM_BSLP0 = crate::Reg<u32, _FSM_BSLP0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_BSLP0;
    #[doc = "`read()` method returns [fsm_bslp0::R](fsm_bslp0::R) reader structure"]
    impl crate::Readable for FSM_BSLP0 {}
    #[doc = "`write(|w| ..)` method takes [fsm_bslp0::W](fsm_bslp0::W) writer structure"]
    impl crate::Writable for FSM_BSLP0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_bslp0 {
        #[doc = "Reader of register FSM_BSLP0"]
        pub type R = crate::R<u32, super::FSM_BSLP0>;
        #[doc = "Writer for register FSM_BSLP0"]
        pub type W = crate::W<u32, super::FSM_BSLP0>;
        #[doc = "Register FSM_BSLP0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_BSLP0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSM_BSLP0`"]
        pub type FSM_BSLP0_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_BSLP0`"]
        pub struct FSM_BSLP0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_BSLP0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_BSLP0"]
            #[inline(always)]
            pub fn fsm_bslp0(&self) -> FSM_BSLP0_R {
                FSM_BSLP0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_BSLP0"]
            #[inline(always)]
            pub fn fsm_bslp0(&mut self) -> FSM_BSLP0_W {
                FSM_BSLP0_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fsm_bslp1](fsm_bslp1) module"]
    pub type FSM_BSLP1 = crate::Reg<u32, _FSM_BSLP1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FSM_BSLP1;
    #[doc = "`read()` method returns [fsm_bslp1::R](fsm_bslp1::R) reader structure"]
    impl crate::Readable for FSM_BSLP1 {}
    #[doc = "`write(|w| ..)` method takes [fsm_bslp1::W](fsm_bslp1::W) writer structure"]
    impl crate::Writable for FSM_BSLP1 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fsm_bslp1 {
        #[doc = "Reader of register FSM_BSLP1"]
        pub type R = crate::R<u32, super::FSM_BSLP1>;
        #[doc = "Writer for register FSM_BSLP1"]
        pub type W = crate::W<u32, super::FSM_BSLP1>;
        #[doc = "Register FSM_BSLP1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FSM_BSLP1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FSM_BSL1`"]
        pub type FSM_BSL1_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FSM_BSL1`"]
        pub struct FSM_BSL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSM_BSL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - FSM_BSL1"]
            #[inline(always)]
            pub fn fsm_bsl1(&self) -> FSM_BSL1_R {
                FSM_BSL1_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - FSM_BSL1"]
            #[inline(always)]
            pub fn fsm_bsl1(&mut self) -> FSM_BSL1_W {
                FSM_BSL1_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_bank](fcfg_bank) module"]
    pub type FCFG_BANK = crate::Reg<u32, _FCFG_BANK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_BANK;
    #[doc = "`read()` method returns [fcfg_bank::R](fcfg_bank::R) reader structure"]
    impl crate::Readable for FCFG_BANK {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_bank {
        #[doc = "Reader of register FCFG_BANK"]
        pub type R = crate::R<u32, super::FCFG_BANK>;
        #[doc = "Reader of field `EE_BANK_WIDTH`"]
        pub type EE_BANK_WIDTH_R = crate::R<u16, u16>;
        #[doc = "Reader of field `EE_NUM_BANK`"]
        pub type EE_NUM_BANK_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MAIN_BANK_WIDTH`"]
        pub type MAIN_BANK_WIDTH_R = crate::R<u16, u16>;
        #[doc = "Reader of field `MAIN_NUM_BANK`"]
        pub type MAIN_NUM_BANK_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 20:31 - EE_BANK_WIDTH"]
            #[inline(always)]
            pub fn ee_bank_width(&self) -> EE_BANK_WIDTH_R {
                EE_BANK_WIDTH_R::new(((self.bits >> 20) & 0x0fff) as u16)
            }
            #[doc = "Bits 16:19 - EE_NUM_BANK"]
            #[inline(always)]
            pub fn ee_num_bank(&self) -> EE_NUM_BANK_R {
                EE_NUM_BANK_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 4:15 - MAIN_BANK_WIDTH"]
            #[inline(always)]
            pub fn main_bank_width(&self) -> MAIN_BANK_WIDTH_R {
                MAIN_BANK_WIDTH_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:3 - MAIN_NUM_BANK"]
            #[inline(always)]
            pub fn main_num_bank(&self) -> MAIN_NUM_BANK_R {
                MAIN_NUM_BANK_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_wrapper](fcfg_wrapper) module"]
    pub type FCFG_WRAPPER = crate::Reg<u32, _FCFG_WRAPPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_WRAPPER;
    #[doc = "`read()` method returns [fcfg_wrapper::R](fcfg_wrapper::R) reader structure"]
    impl crate::Readable for FCFG_WRAPPER {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_wrapper {
        #[doc = "Reader of register FCFG_WRAPPER"]
        pub type R = crate::R<u32, super::FCFG_WRAPPER>;
        #[doc = "Reader of field `FAMILY_TYPE`"]
        pub type FAMILY_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MEM_MAP`"]
        pub type MEM_MAP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CPU2`"]
        pub type CPU2_R = crate::R<u8, u8>;
        #[doc = "Reader of field `EE_IN_MAIN`"]
        pub type EE_IN_MAIN_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ROM`"]
        pub type ROM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IFLUSH`"]
        pub type IFLUSH_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SIL3`"]
        pub type SIL3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ECCA`"]
        pub type ECCA_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AUTO_SUSP`"]
        pub type AUTO_SUSP_R = crate::R<u8, u8>;
        #[doc = "Reader of field `UERR`"]
        pub type UERR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `CPU_TYPE1`"]
        pub type CPU_TYPE1_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:31 - FAMILY_TYPE"]
            #[inline(always)]
            pub fn family_type(&self) -> FAMILY_TYPE_R {
                FAMILY_TYPE_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bit 20 - MEM_MAP"]
            #[inline(always)]
            pub fn mem_map(&self) -> MEM_MAP_R {
                MEM_MAP_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bits 16:19 - CPU2"]
            #[inline(always)]
            pub fn cpu2(&self) -> CPU2_R {
                CPU2_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EE_IN_MAIN"]
            #[inline(always)]
            pub fn ee_in_main(&self) -> EE_IN_MAIN_R {
                EE_IN_MAIN_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bit 11 - ROM"]
            #[inline(always)]
            pub fn rom(&self) -> ROM_R {
                ROM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - IFLUSH"]
            #[inline(always)]
            pub fn iflush(&self) -> IFLUSH_R {
                IFLUSH_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - SIL3"]
            #[inline(always)]
            pub fn sil3(&self) -> SIL3_R {
                SIL3_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ECCA"]
            #[inline(always)]
            pub fn ecca(&self) -> ECCA_R {
                ECCA_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - AUTO_SUSP"]
            #[inline(always)]
            pub fn auto_susp(&self) -> AUTO_SUSP_R {
                AUTO_SUSP_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - UERR"]
            #[inline(always)]
            pub fn uerr(&self) -> UERR_R {
                UERR_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - CPU_TYPE1"]
            #[inline(always)]
            pub fn cpu_type1(&self) -> CPU_TYPE1_R {
                CPU_TYPE1_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_bnk_type](fcfg_bnk_type) module"]
    pub type FCFG_BNK_TYPE = crate::Reg<u32, _FCFG_BNK_TYPE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_BNK_TYPE;
    #[doc = "`read()` method returns [fcfg_bnk_type::R](fcfg_bnk_type::R) reader structure"]
    impl crate::Readable for FCFG_BNK_TYPE {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_bnk_type {
        #[doc = "Reader of register FCFG_BNK_TYPE"]
        pub type R = crate::R<u32, super::FCFG_BNK_TYPE>;
        #[doc = "Reader of field `B7_TYPE`"]
        pub type B7_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B6_TYPE`"]
        pub type B6_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B5_TYPE`"]
        pub type B5_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B4_TYPE`"]
        pub type B4_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B3_TYPE`"]
        pub type B3_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B2_TYPE`"]
        pub type B2_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B1_TYPE`"]
        pub type B1_TYPE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B0_TYPE`"]
        pub type B0_TYPE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 28:31 - B7_TYPE"]
            #[inline(always)]
            pub fn b7_type(&self) -> B7_TYPE_R {
                B7_TYPE_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B6_TYPE"]
            #[inline(always)]
            pub fn b6_type(&self) -> B6_TYPE_R {
                B6_TYPE_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - B5_TYPE"]
            #[inline(always)]
            pub fn b5_type(&self) -> B5_TYPE_R {
                B5_TYPE_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - B4_TYPE"]
            #[inline(always)]
            pub fn b4_type(&self) -> B4_TYPE_R {
                B4_TYPE_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - B3_TYPE"]
            #[inline(always)]
            pub fn b3_type(&self) -> B3_TYPE_R {
                B3_TYPE_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - B2_TYPE"]
            #[inline(always)]
            pub fn b2_type(&self) -> B2_TYPE_R {
                B2_TYPE_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - B1_TYPE"]
            #[inline(always)]
            pub fn b1_type(&self) -> B1_TYPE_R {
                B1_TYPE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - B0_TYPE"]
            #[inline(always)]
            pub fn b0_type(&self) -> B0_TYPE_R {
                B0_TYPE_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b0_start](fcfg_b0_start) module"]
    pub type FCFG_B0_START = crate::Reg<u32, _FCFG_B0_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B0_START;
    #[doc = "`read()` method returns [fcfg_b0_start::R](fcfg_b0_start::R) reader structure"]
    impl crate::Readable for FCFG_B0_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b0_start {
        #[doc = "Reader of register FCFG_B0_START"]
        pub type R = crate::R<u32, super::FCFG_B0_START>;
        #[doc = "Reader of field `B0_MAX_SECTOR`"]
        pub type B0_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B0_MUX_FACTOR`"]
        pub type B0_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B0_START_ADDR`"]
        pub type B0_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B0_MAX_SECTOR"]
            #[inline(always)]
            pub fn b0_max_sector(&self) -> B0_MAX_SECTOR_R {
                B0_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B0_MUX_FACTOR"]
            #[inline(always)]
            pub fn b0_mux_factor(&self) -> B0_MUX_FACTOR_R {
                B0_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B0_START_ADDR"]
            #[inline(always)]
            pub fn b0_start_addr(&self) -> B0_START_ADDR_R {
                B0_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b1_start](fcfg_b1_start) module"]
    pub type FCFG_B1_START = crate::Reg<u32, _FCFG_B1_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B1_START;
    #[doc = "`read()` method returns [fcfg_b1_start::R](fcfg_b1_start::R) reader structure"]
    impl crate::Readable for FCFG_B1_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b1_start {
        #[doc = "Reader of register FCFG_B1_START"]
        pub type R = crate::R<u32, super::FCFG_B1_START>;
        #[doc = "Reader of field `B1_MAX_SECTOR`"]
        pub type B1_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B1_MUX_FACTOR`"]
        pub type B1_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B1_START_ADDR`"]
        pub type B1_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B1_MAX_SECTOR"]
            #[inline(always)]
            pub fn b1_max_sector(&self) -> B1_MAX_SECTOR_R {
                B1_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B1_MUX_FACTOR"]
            #[inline(always)]
            pub fn b1_mux_factor(&self) -> B1_MUX_FACTOR_R {
                B1_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B1_START_ADDR"]
            #[inline(always)]
            pub fn b1_start_addr(&self) -> B1_START_ADDR_R {
                B1_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b2_start](fcfg_b2_start) module"]
    pub type FCFG_B2_START = crate::Reg<u32, _FCFG_B2_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B2_START;
    #[doc = "`read()` method returns [fcfg_b2_start::R](fcfg_b2_start::R) reader structure"]
    impl crate::Readable for FCFG_B2_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b2_start {
        #[doc = "Reader of register FCFG_B2_START"]
        pub type R = crate::R<u32, super::FCFG_B2_START>;
        #[doc = "Reader of field `B2_MAX_SECTOR`"]
        pub type B2_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B2_MUX_FACTOR`"]
        pub type B2_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B2_START_ADDR`"]
        pub type B2_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B2_MAX_SECTOR"]
            #[inline(always)]
            pub fn b2_max_sector(&self) -> B2_MAX_SECTOR_R {
                B2_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B2_MUX_FACTOR"]
            #[inline(always)]
            pub fn b2_mux_factor(&self) -> B2_MUX_FACTOR_R {
                B2_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B2_START_ADDR"]
            #[inline(always)]
            pub fn b2_start_addr(&self) -> B2_START_ADDR_R {
                B2_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b3_start](fcfg_b3_start) module"]
    pub type FCFG_B3_START = crate::Reg<u32, _FCFG_B3_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B3_START;
    #[doc = "`read()` method returns [fcfg_b3_start::R](fcfg_b3_start::R) reader structure"]
    impl crate::Readable for FCFG_B3_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b3_start {
        #[doc = "Reader of register FCFG_B3_START"]
        pub type R = crate::R<u32, super::FCFG_B3_START>;
        #[doc = "Reader of field `B3_MAX_SECTOR`"]
        pub type B3_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B3_MUX_FACTOR`"]
        pub type B3_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B3_START_ADDR`"]
        pub type B3_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B3_MAX_SECTOR"]
            #[inline(always)]
            pub fn b3_max_sector(&self) -> B3_MAX_SECTOR_R {
                B3_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B3_MUX_FACTOR"]
            #[inline(always)]
            pub fn b3_mux_factor(&self) -> B3_MUX_FACTOR_R {
                B3_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B3_START_ADDR"]
            #[inline(always)]
            pub fn b3_start_addr(&self) -> B3_START_ADDR_R {
                B3_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b4_start](fcfg_b4_start) module"]
    pub type FCFG_B4_START = crate::Reg<u32, _FCFG_B4_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B4_START;
    #[doc = "`read()` method returns [fcfg_b4_start::R](fcfg_b4_start::R) reader structure"]
    impl crate::Readable for FCFG_B4_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b4_start {
        #[doc = "Reader of register FCFG_B4_START"]
        pub type R = crate::R<u32, super::FCFG_B4_START>;
        #[doc = "Reader of field `B4_MAX_SECTOR`"]
        pub type B4_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B4_MUX_FACTOR`"]
        pub type B4_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B4_START_ADDR`"]
        pub type B4_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B4_MAX_SECTOR"]
            #[inline(always)]
            pub fn b4_max_sector(&self) -> B4_MAX_SECTOR_R {
                B4_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B4_MUX_FACTOR"]
            #[inline(always)]
            pub fn b4_mux_factor(&self) -> B4_MUX_FACTOR_R {
                B4_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B4_START_ADDR"]
            #[inline(always)]
            pub fn b4_start_addr(&self) -> B4_START_ADDR_R {
                B4_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b5_start](fcfg_b5_start) module"]
    pub type FCFG_B5_START = crate::Reg<u32, _FCFG_B5_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B5_START;
    #[doc = "`read()` method returns [fcfg_b5_start::R](fcfg_b5_start::R) reader structure"]
    impl crate::Readable for FCFG_B5_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b5_start {
        #[doc = "Reader of register FCFG_B5_START"]
        pub type R = crate::R<u32, super::FCFG_B5_START>;
        #[doc = "Reader of field `B5_MAX_SECTOR`"]
        pub type B5_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B5_MUX_FACTOR`"]
        pub type B5_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B5_START_ADDR`"]
        pub type B5_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B5_MAX_SECTOR"]
            #[inline(always)]
            pub fn b5_max_sector(&self) -> B5_MAX_SECTOR_R {
                B5_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B5_MUX_FACTOR"]
            #[inline(always)]
            pub fn b5_mux_factor(&self) -> B5_MUX_FACTOR_R {
                B5_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B5_START_ADDR"]
            #[inline(always)]
            pub fn b5_start_addr(&self) -> B5_START_ADDR_R {
                B5_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b6_start](fcfg_b6_start) module"]
    pub type FCFG_B6_START = crate::Reg<u32, _FCFG_B6_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B6_START;
    #[doc = "`read()` method returns [fcfg_b6_start::R](fcfg_b6_start::R) reader structure"]
    impl crate::Readable for FCFG_B6_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b6_start {
        #[doc = "Reader of register FCFG_B6_START"]
        pub type R = crate::R<u32, super::FCFG_B6_START>;
        #[doc = "Reader of field `B6_MAX_SECTOR`"]
        pub type B6_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B6_MUX_FACTOR`"]
        pub type B6_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B6_START_ADDR`"]
        pub type B6_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B6_MAX_SECTOR"]
            #[inline(always)]
            pub fn b6_max_sector(&self) -> B6_MAX_SECTOR_R {
                B6_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B6_MUX_FACTOR"]
            #[inline(always)]
            pub fn b6_mux_factor(&self) -> B6_MUX_FACTOR_R {
                B6_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B6_START_ADDR"]
            #[inline(always)]
            pub fn b6_start_addr(&self) -> B6_START_ADDR_R {
                B6_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b7_start](fcfg_b7_start) module"]
    pub type FCFG_B7_START = crate::Reg<u32, _FCFG_B7_START>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B7_START;
    #[doc = "`read()` method returns [fcfg_b7_start::R](fcfg_b7_start::R) reader structure"]
    impl crate::Readable for FCFG_B7_START {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b7_start {
        #[doc = "Reader of register FCFG_B7_START"]
        pub type R = crate::R<u32, super::FCFG_B7_START>;
        #[doc = "Reader of field `B7_MAX_SECTOR`"]
        pub type B7_MAX_SECTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B7_MUX_FACTOR`"]
        pub type B7_MUX_FACTOR_R = crate::R<u8, u8>;
        #[doc = "Reader of field `B7_START_ADDR`"]
        pub type B7_START_ADDR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 28:31 - B7_MAX_SECTOR"]
            #[inline(always)]
            pub fn b7_max_sector(&self) -> B7_MAX_SECTOR_R {
                B7_MAX_SECTOR_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - B7_MUX_FACTOR"]
            #[inline(always)]
            pub fn b7_mux_factor(&self) -> B7_MUX_FACTOR_R {
                B7_MUX_FACTOR_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:23 - B7_START_ADDR"]
            #[inline(always)]
            pub fn b7_start_addr(&self) -> B7_START_ADDR_R {
                B7_START_ADDR_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fcfg_b0_ssize0](fcfg_b0_ssize0) module"]
    pub type FCFG_B0_SSIZE0 = crate::Reg<u32, _FCFG_B0_SSIZE0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FCFG_B0_SSIZE0;
    #[doc = "`read()` method returns [fcfg_b0_ssize0::R](fcfg_b0_ssize0::R) reader structure"]
    impl crate::Readable for FCFG_B0_SSIZE0 {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod fcfg_b0_ssize0 {
        #[doc = "Reader of register FCFG_B0_SSIZE0"]
        pub type R = crate::R<u32, super::FCFG_B0_SSIZE0>;
        #[doc = "Reader of field `B0_NUM_SECTORS`"]
        pub type B0_NUM_SECTORS_R = crate::R<u16, u16>;
        #[doc = "Reader of field `B0_SECT_SIZE`"]
        pub type B0_SECT_SIZE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 16:27 - B0_NUM_SECTORS"]
            #[inline(always)]
            pub fn b0_num_sectors(&self) -> B0_NUM_SECTORS_R {
                B0_NUM_SECTORS_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:3 - B0_SECT_SIZE"]
            #[inline(always)]
            pub fn b0_sect_size(&self) -> B0_SECT_SIZE_R {
                B0_SECT_SIZE_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
}
#[doc = "MCU GPIO - I/F for controlling and reading IO status and IO event status"]
pub struct GPIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO {}
impl GPIO {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio::RegisterBlock {
        0x4002_2000 as *const _
    }
}
impl Deref for GPIO {
    type Target = gpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIO::ptr() }
    }
}
#[doc = "MCU GPIO - I/F for controlling and reading IO status and IO event status"]
pub mod gpio {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Data Out 0 to 3 Alias register for byte access to each bit in DOUT31_0"]
        pub dout3_0: DOUT3_0,
        #[doc = "0x04 - Data Out 4 to 7 Alias register for byte access to each bit in DOUT31_0"]
        pub dout7_4: DOUT7_4,
        #[doc = "0x08 - Data Out 8 to 11 Alias register for byte access to each bit in DOUT31_0"]
        pub dout11_8: DOUT11_8,
        #[doc = "0x0c - Data Out 12 to 15 Alias register for byte access to each bit in DOUT31_0"]
        pub dout15_12: DOUT15_12,
        #[doc = "0x10 - Data Out 16 to 19 Alias register for byte access to each bit in DOUT31_0"]
        pub dout19_16: DOUT19_16,
        #[doc = "0x14 - Data Out 20 to 23 Alias register for byte access to each bit in DOUT31_0"]
        pub dout23_20: DOUT23_20,
        #[doc = "0x18 - Data Out 24 to 27 Alias register for byte access to each bit in DOUT31_0"]
        pub dout27_24: DOUT27_24,
        #[doc = "0x1c - Data Out 28 to 31 Alias register for byte access to each bit in DOUT31_0"]
        pub dout31_28: DOUT31_28,
        _reserved8: [u8; 96usize],
        #[doc = "0x80 - Data Output for DIO 0 to 31"]
        pub dout31_0: DOUT31_0,
        _reserved9: [u8; 12usize],
        #[doc = "0x90 - Data Out Set Writing 1 to a bit position sets the corresponding bit in the DOUT31_0 register"]
        pub doutset31_0: DOUTSET31_0,
        _reserved10: [u8; 12usize],
        #[doc = "0xa0 - Data Out Clear Writing 1 to a bit position clears the corresponding bit in the DOUT31_0 register"]
        pub doutclr31_0: DOUTCLR31_0,
        _reserved11: [u8; 12usize],
        #[doc = "0xb0 - Data Out Toggle Writing 1 to a bit position will invert the corresponding DIO output."]
        pub douttgl31_0: DOUTTGL31_0,
        _reserved12: [u8; 12usize],
        #[doc = "0xc0 - Data Input from DIO 0 to 31"]
        pub din31_0: DIN31_0,
        _reserved13: [u8; 12usize],
        #[doc = "0xd0 - Data Output Enable for DIO 0 to 31"]
        pub doe31_0: DOE31_0,
        _reserved14: [u8; 12usize],
        #[doc = "0xe0 - Event Register for DIO 0 to 31 Reading this registers will return 1 for triggered event and 0 for non-triggered events. Writing a 1 to a bit field will clear the event. The configuration of events is done inside MCU IOC, e.g. events for DIO #0 is configured in IOC:IOCFG0.EDGE_DET and IOC:IOCFG0.EDGE_IRQ_EN."]
        pub evflags31_0: EVFLAGS31_0,
    }
    #[doc = "Data Out 0 to 3 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout3_0](dout3_0) module"]
    pub type DOUT3_0 = crate::Reg<u32, _DOUT3_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT3_0;
    #[doc = "`read()` method returns [dout3_0::R](dout3_0::R) reader structure"]
    impl crate::Readable for DOUT3_0 {}
    #[doc = "`write(|w| ..)` method takes [dout3_0::W](dout3_0::W) writer structure"]
    impl crate::Writable for DOUT3_0 {}
    #[doc = "Data Out 0 to 3 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout3_0 {
        #[doc = "Reader of register DOUT3_0"]
        pub type R = crate::R<u32, super::DOUT3_0>;
        #[doc = "Writer for register DOUT3_0"]
        pub type W = crate::W<u32, super::DOUT3_0>;
        #[doc = "Register DOUT3_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT3_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO3`"]
        pub type DIO3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO2`"]
        pub type DIO2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO1`"]
        pub type DIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO0`"]
        pub type DIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO3"]
            #[inline(always)]
            pub fn dio3(&self) -> DIO3_R {
                DIO3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO2"]
            #[inline(always)]
            pub fn dio2(&self) -> DIO2_R {
                DIO2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO1"]
            #[inline(always)]
            pub fn dio1(&self) -> DIO1_R {
                DIO1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&self) -> DIO0_R {
                DIO0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 16 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 8 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
    #[doc = "Data Out 4 to 7 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout7_4](dout7_4) module"]
    pub type DOUT7_4 = crate::Reg<u32, _DOUT7_4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT7_4;
    #[doc = "`read()` method returns [dout7_4::R](dout7_4::R) reader structure"]
    impl crate::Readable for DOUT7_4 {}
    #[doc = "`write(|w| ..)` method takes [dout7_4::W](dout7_4::W) writer structure"]
    impl crate::Writable for DOUT7_4 {}
    #[doc = "Data Out 4 to 7 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout7_4 {
        #[doc = "Reader of register DOUT7_4"]
        pub type R = crate::R<u32, super::DOUT7_4>;
        #[doc = "Writer for register DOUT7_4"]
        pub type W = crate::W<u32, super::DOUT7_4>;
        #[doc = "Register DOUT7_4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT7_4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO7`"]
        pub type DIO7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO6`"]
        pub type DIO6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO5`"]
        pub type DIO5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO4`"]
        pub type DIO4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO7"]
            #[inline(always)]
            pub fn dio7(&self) -> DIO7_R {
                DIO7_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO6"]
            #[inline(always)]
            pub fn dio6(&self) -> DIO6_R {
                DIO6_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO5"]
            #[inline(always)]
            pub fn dio5(&self) -> DIO5_R {
                DIO5_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO4"]
            #[inline(always)]
            pub fn dio4(&self) -> DIO4_R {
                DIO4_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 16 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 8 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 0 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
        }
    }
    #[doc = "Data Out 8 to 11 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout11_8](dout11_8) module"]
    pub type DOUT11_8 = crate::Reg<u32, _DOUT11_8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT11_8;
    #[doc = "`read()` method returns [dout11_8::R](dout11_8::R) reader structure"]
    impl crate::Readable for DOUT11_8 {}
    #[doc = "`write(|w| ..)` method takes [dout11_8::W](dout11_8::W) writer structure"]
    impl crate::Writable for DOUT11_8 {}
    #[doc = "Data Out 8 to 11 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout11_8 {
        #[doc = "Reader of register DOUT11_8"]
        pub type R = crate::R<u32, super::DOUT11_8>;
        #[doc = "Writer for register DOUT11_8"]
        pub type W = crate::W<u32, super::DOUT11_8>;
        #[doc = "Register DOUT11_8 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT11_8 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO11`"]
        pub type DIO11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO10`"]
        pub type DIO10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO9`"]
        pub type DIO9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO8`"]
        pub type DIO8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO11"]
            #[inline(always)]
            pub fn dio11(&self) -> DIO11_R {
                DIO11_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO10"]
            #[inline(always)]
            pub fn dio10(&self) -> DIO10_R {
                DIO10_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO9"]
            #[inline(always)]
            pub fn dio9(&self) -> DIO9_R {
                DIO9_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO8"]
            #[inline(always)]
            pub fn dio8(&self) -> DIO8_R {
                DIO8_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 16 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 8 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 0 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
        }
    }
    #[doc = "Data Out 12 to 15 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout15_12](dout15_12) module"]
    pub type DOUT15_12 = crate::Reg<u32, _DOUT15_12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT15_12;
    #[doc = "`read()` method returns [dout15_12::R](dout15_12::R) reader structure"]
    impl crate::Readable for DOUT15_12 {}
    #[doc = "`write(|w| ..)` method takes [dout15_12::W](dout15_12::W) writer structure"]
    impl crate::Writable for DOUT15_12 {}
    #[doc = "Data Out 12 to 15 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout15_12 {
        #[doc = "Reader of register DOUT15_12"]
        pub type R = crate::R<u32, super::DOUT15_12>;
        #[doc = "Writer for register DOUT15_12"]
        pub type W = crate::W<u32, super::DOUT15_12>;
        #[doc = "Register DOUT15_12 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT15_12 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO15`"]
        pub type DIO15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO14`"]
        pub type DIO14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO13`"]
        pub type DIO13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO12`"]
        pub type DIO12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO15"]
            #[inline(always)]
            pub fn dio15(&self) -> DIO15_R {
                DIO15_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO14"]
            #[inline(always)]
            pub fn dio14(&self) -> DIO14_R {
                DIO14_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO13"]
            #[inline(always)]
            pub fn dio13(&self) -> DIO13_R {
                DIO13_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO12"]
            #[inline(always)]
            pub fn dio12(&self) -> DIO12_R {
                DIO12_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 16 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 8 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 0 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
        }
    }
    #[doc = "Data Out 16 to 19 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout19_16](dout19_16) module"]
    pub type DOUT19_16 = crate::Reg<u32, _DOUT19_16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT19_16;
    #[doc = "`read()` method returns [dout19_16::R](dout19_16::R) reader structure"]
    impl crate::Readable for DOUT19_16 {}
    #[doc = "`write(|w| ..)` method takes [dout19_16::W](dout19_16::W) writer structure"]
    impl crate::Writable for DOUT19_16 {}
    #[doc = "Data Out 16 to 19 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout19_16 {
        #[doc = "Reader of register DOUT19_16"]
        pub type R = crate::R<u32, super::DOUT19_16>;
        #[doc = "Writer for register DOUT19_16"]
        pub type W = crate::W<u32, super::DOUT19_16>;
        #[doc = "Register DOUT19_16 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT19_16 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO19`"]
        pub type DIO19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO18`"]
        pub type DIO18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO17`"]
        pub type DIO17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO16`"]
        pub type DIO16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO19"]
            #[inline(always)]
            pub fn dio19(&self) -> DIO19_R {
                DIO19_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO18"]
            #[inline(always)]
            pub fn dio18(&self) -> DIO18_R {
                DIO18_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO17"]
            #[inline(always)]
            pub fn dio17(&self) -> DIO17_R {
                DIO17_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO16"]
            #[inline(always)]
            pub fn dio16(&self) -> DIO16_R {
                DIO16_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 16 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 8 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 0 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
        }
    }
    #[doc = "Data Out 20 to 23 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout23_20](dout23_20) module"]
    pub type DOUT23_20 = crate::Reg<u32, _DOUT23_20>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT23_20;
    #[doc = "`read()` method returns [dout23_20::R](dout23_20::R) reader structure"]
    impl crate::Readable for DOUT23_20 {}
    #[doc = "`write(|w| ..)` method takes [dout23_20::W](dout23_20::W) writer structure"]
    impl crate::Writable for DOUT23_20 {}
    #[doc = "Data Out 20 to 23 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout23_20 {
        #[doc = "Reader of register DOUT23_20"]
        pub type R = crate::R<u32, super::DOUT23_20>;
        #[doc = "Writer for register DOUT23_20"]
        pub type W = crate::W<u32, super::DOUT23_20>;
        #[doc = "Register DOUT23_20 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT23_20 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO23`"]
        pub type DIO23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO22`"]
        pub type DIO22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO21`"]
        pub type DIO21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO20`"]
        pub type DIO20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO23"]
            #[inline(always)]
            pub fn dio23(&self) -> DIO23_R {
                DIO23_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO22"]
            #[inline(always)]
            pub fn dio22(&self) -> DIO22_R {
                DIO22_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO21"]
            #[inline(always)]
            pub fn dio21(&self) -> DIO21_R {
                DIO21_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO20"]
            #[inline(always)]
            pub fn dio20(&self) -> DIO20_R {
                DIO20_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 16 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 8 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 0 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
        }
    }
    #[doc = "Data Out 24 to 27 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout27_24](dout27_24) module"]
    pub type DOUT27_24 = crate::Reg<u32, _DOUT27_24>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT27_24;
    #[doc = "`read()` method returns [dout27_24::R](dout27_24::R) reader structure"]
    impl crate::Readable for DOUT27_24 {}
    #[doc = "`write(|w| ..)` method takes [dout27_24::W](dout27_24::W) writer structure"]
    impl crate::Writable for DOUT27_24 {}
    #[doc = "Data Out 24 to 27 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout27_24 {
        #[doc = "Reader of register DOUT27_24"]
        pub type R = crate::R<u32, super::DOUT27_24>;
        #[doc = "Writer for register DOUT27_24"]
        pub type W = crate::W<u32, super::DOUT27_24>;
        #[doc = "Register DOUT27_24 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT27_24 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO27`"]
        pub type DIO27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO26`"]
        pub type DIO26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO25`"]
        pub type DIO25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO24`"]
        pub type DIO24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO27"]
            #[inline(always)]
            pub fn dio27(&self) -> DIO27_R {
                DIO27_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO26"]
            #[inline(always)]
            pub fn dio26(&self) -> DIO26_R {
                DIO26_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO25"]
            #[inline(always)]
            pub fn dio25(&self) -> DIO25_R {
                DIO25_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO24"]
            #[inline(always)]
            pub fn dio24(&self) -> DIO24_R {
                DIO24_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 16 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 8 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 0 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
        }
    }
    #[doc = "Data Out 28 to 31 Alias register for byte access to each bit in DOUT31_0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout31_28](dout31_28) module"]
    pub type DOUT31_28 = crate::Reg<u32, _DOUT31_28>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT31_28;
    #[doc = "`read()` method returns [dout31_28::R](dout31_28::R) reader structure"]
    impl crate::Readable for DOUT31_28 {}
    #[doc = "`write(|w| ..)` method takes [dout31_28::W](dout31_28::W) writer structure"]
    impl crate::Writable for DOUT31_28 {}
    #[doc = "Data Out 28 to 31 Alias register for byte access to each bit in DOUT31_0"]
    pub mod dout31_28 {
        #[doc = "Reader of register DOUT31_28"]
        pub type R = crate::R<u32, super::DOUT31_28>;
        #[doc = "Writer for register DOUT31_28"]
        pub type W = crate::W<u32, super::DOUT31_28>;
        #[doc = "Register DOUT31_28 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT31_28 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO31`"]
        pub type DIO31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO30`"]
        pub type DIO30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO29`"]
        pub type DIO29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO28`"]
        pub type DIO28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - DIO31"]
            #[inline(always)]
            pub fn dio31(&self) -> DIO31_R {
                DIO31_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO30"]
            #[inline(always)]
            pub fn dio30(&self) -> DIO30_R {
                DIO30_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO29"]
            #[inline(always)]
            pub fn dio29(&self) -> DIO29_R {
                DIO29_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO28"]
            #[inline(always)]
            pub fn dio28(&self) -> DIO28_R {
                DIO28_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 16 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 8 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 0 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
        }
    }
    #[doc = "Data Output for DIO 0 to 31\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dout31_0](dout31_0) module"]
    pub type DOUT31_0 = crate::Reg<u32, _DOUT31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUT31_0;
    #[doc = "`read()` method returns [dout31_0::R](dout31_0::R) reader structure"]
    impl crate::Readable for DOUT31_0 {}
    #[doc = "`write(|w| ..)` method takes [dout31_0::W](dout31_0::W) writer structure"]
    impl crate::Writable for DOUT31_0 {}
    #[doc = "Data Output for DIO 0 to 31"]
    pub mod dout31_0 {
        #[doc = "Reader of register DOUT31_0"]
        pub type R = crate::R<u32, super::DOUT31_0>;
        #[doc = "Writer for register DOUT31_0"]
        pub type W = crate::W<u32, super::DOUT31_0>;
        #[doc = "Register DOUT31_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUT31_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO31`"]
        pub type DIO31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DIO30`"]
        pub type DIO30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DIO29`"]
        pub type DIO29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `DIO28`"]
        pub type DIO28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DIO27`"]
        pub type DIO27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `DIO26`"]
        pub type DIO26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `DIO25`"]
        pub type DIO25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DIO24`"]
        pub type DIO24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO23`"]
        pub type DIO23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `DIO22`"]
        pub type DIO22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DIO21`"]
        pub type DIO21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DIO20`"]
        pub type DIO20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DIO19`"]
        pub type DIO19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `DIO18`"]
        pub type DIO18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `DIO17`"]
        pub type DIO17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DIO16`"]
        pub type DIO16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO15`"]
        pub type DIO15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DIO14`"]
        pub type DIO14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DIO13`"]
        pub type DIO13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `DIO12`"]
        pub type DIO12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DIO11`"]
        pub type DIO11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DIO10`"]
        pub type DIO10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DIO9`"]
        pub type DIO9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DIO8`"]
        pub type DIO8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO7`"]
        pub type DIO7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DIO6`"]
        pub type DIO6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `DIO5`"]
        pub type DIO5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIO4`"]
        pub type DIO4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIO3`"]
        pub type DIO3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DIO2`"]
        pub type DIO2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DIO1`"]
        pub type DIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DIO0`"]
        pub type DIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&self) -> DIO31_R {
                DIO31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&self) -> DIO30_R {
                DIO30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&self) -> DIO29_R {
                DIO29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&self) -> DIO28_R {
                DIO28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&self) -> DIO27_R {
                DIO27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&self) -> DIO26_R {
                DIO26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&self) -> DIO25_R {
                DIO25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&self) -> DIO24_R {
                DIO24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&self) -> DIO23_R {
                DIO23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&self) -> DIO22_R {
                DIO22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&self) -> DIO21_R {
                DIO21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&self) -> DIO20_R {
                DIO20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&self) -> DIO19_R {
                DIO19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&self) -> DIO18_R {
                DIO18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&self) -> DIO17_R {
                DIO17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&self) -> DIO16_R {
                DIO16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&self) -> DIO15_R {
                DIO15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&self) -> DIO14_R {
                DIO14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&self) -> DIO13_R {
                DIO13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&self) -> DIO12_R {
                DIO12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&self) -> DIO11_R {
                DIO11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&self) -> DIO10_R {
                DIO10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&self) -> DIO9_R {
                DIO9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&self) -> DIO8_R {
                DIO8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&self) -> DIO7_R {
                DIO7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&self) -> DIO6_R {
                DIO6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&self) -> DIO5_R {
                DIO5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&self) -> DIO4_R {
                DIO4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&self) -> DIO3_R {
                DIO3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&self) -> DIO2_R {
                DIO2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&self) -> DIO1_R {
                DIO1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&self) -> DIO0_R {
                DIO0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
    #[doc = "Data Out Set Writing 1 to a bit position sets the corresponding bit in the DOUT31_0 register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doutset31_0](doutset31_0) module"]
    pub type DOUTSET31_0 = crate::Reg<u32, _DOUTSET31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUTSET31_0;
    #[doc = "`write(|w| ..)` method takes [doutset31_0::W](doutset31_0::W) writer structure"]
    impl crate::Writable for DOUTSET31_0 {}
    #[doc = "Data Out Set Writing 1 to a bit position sets the corresponding bit in the DOUT31_0 register"]
    pub mod doutset31_0 {
        #[doc = "Writer for register DOUTSET31_0"]
        pub type W = crate::W<u32, super::DOUTSET31_0>;
        #[doc = "Register DOUTSET31_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUTSET31_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
    #[doc = "Data Out Clear Writing 1 to a bit position clears the corresponding bit in the DOUT31_0 register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doutclr31_0](doutclr31_0) module"]
    pub type DOUTCLR31_0 = crate::Reg<u32, _DOUTCLR31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUTCLR31_0;
    #[doc = "`write(|w| ..)` method takes [doutclr31_0::W](doutclr31_0::W) writer structure"]
    impl crate::Writable for DOUTCLR31_0 {}
    #[doc = "Data Out Clear Writing 1 to a bit position clears the corresponding bit in the DOUT31_0 register"]
    pub mod doutclr31_0 {
        #[doc = "Writer for register DOUTCLR31_0"]
        pub type W = crate::W<u32, super::DOUTCLR31_0>;
        #[doc = "Register DOUTCLR31_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUTCLR31_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
    #[doc = "Data Out Toggle Writing 1 to a bit position will invert the corresponding DIO output.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [douttgl31_0](douttgl31_0) module"]
    pub type DOUTTGL31_0 = crate::Reg<u32, _DOUTTGL31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOUTTGL31_0;
    #[doc = "`read()` method returns [douttgl31_0::R](douttgl31_0::R) reader structure"]
    impl crate::Readable for DOUTTGL31_0 {}
    #[doc = "`write(|w| ..)` method takes [douttgl31_0::W](douttgl31_0::W) writer structure"]
    impl crate::Writable for DOUTTGL31_0 {}
    #[doc = "Data Out Toggle Writing 1 to a bit position will invert the corresponding DIO output."]
    pub mod douttgl31_0 {
        #[doc = "Reader of register DOUTTGL31_0"]
        pub type R = crate::R<u32, super::DOUTTGL31_0>;
        #[doc = "Writer for register DOUTTGL31_0"]
        pub type W = crate::W<u32, super::DOUTTGL31_0>;
        #[doc = "Register DOUTTGL31_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOUTTGL31_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO31`"]
        pub type DIO31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DIO30`"]
        pub type DIO30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DIO29`"]
        pub type DIO29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `DIO28`"]
        pub type DIO28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DIO27`"]
        pub type DIO27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `DIO26`"]
        pub type DIO26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `DIO25`"]
        pub type DIO25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DIO24`"]
        pub type DIO24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO23`"]
        pub type DIO23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `DIO22`"]
        pub type DIO22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DIO21`"]
        pub type DIO21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DIO20`"]
        pub type DIO20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DIO19`"]
        pub type DIO19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `DIO18`"]
        pub type DIO18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `DIO17`"]
        pub type DIO17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DIO16`"]
        pub type DIO16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO15`"]
        pub type DIO15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DIO14`"]
        pub type DIO14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DIO13`"]
        pub type DIO13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `DIO12`"]
        pub type DIO12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DIO11`"]
        pub type DIO11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DIO10`"]
        pub type DIO10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DIO9`"]
        pub type DIO9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DIO8`"]
        pub type DIO8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO7`"]
        pub type DIO7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DIO6`"]
        pub type DIO6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `DIO5`"]
        pub type DIO5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIO4`"]
        pub type DIO4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIO3`"]
        pub type DIO3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DIO2`"]
        pub type DIO2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DIO1`"]
        pub type DIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DIO0`"]
        pub type DIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&self) -> DIO31_R {
                DIO31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&self) -> DIO30_R {
                DIO30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&self) -> DIO29_R {
                DIO29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&self) -> DIO28_R {
                DIO28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&self) -> DIO27_R {
                DIO27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&self) -> DIO26_R {
                DIO26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&self) -> DIO25_R {
                DIO25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&self) -> DIO24_R {
                DIO24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&self) -> DIO23_R {
                DIO23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&self) -> DIO22_R {
                DIO22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&self) -> DIO21_R {
                DIO21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&self) -> DIO20_R {
                DIO20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&self) -> DIO19_R {
                DIO19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&self) -> DIO18_R {
                DIO18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&self) -> DIO17_R {
                DIO17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&self) -> DIO16_R {
                DIO16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&self) -> DIO15_R {
                DIO15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&self) -> DIO14_R {
                DIO14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&self) -> DIO13_R {
                DIO13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&self) -> DIO12_R {
                DIO12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&self) -> DIO11_R {
                DIO11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&self) -> DIO10_R {
                DIO10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&self) -> DIO9_R {
                DIO9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&self) -> DIO8_R {
                DIO8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&self) -> DIO7_R {
                DIO7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&self) -> DIO6_R {
                DIO6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&self) -> DIO5_R {
                DIO5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&self) -> DIO4_R {
                DIO4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&self) -> DIO3_R {
                DIO3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&self) -> DIO2_R {
                DIO2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&self) -> DIO1_R {
                DIO1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&self) -> DIO0_R {
                DIO0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
    #[doc = "Data Input from DIO 0 to 31\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [din31_0](din31_0) module"]
    pub type DIN31_0 = crate::Reg<u32, _DIN31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIN31_0;
    #[doc = "`read()` method returns [din31_0::R](din31_0::R) reader structure"]
    impl crate::Readable for DIN31_0 {}
    #[doc = "Data Input from DIO 0 to 31"]
    pub mod din31_0 {
        #[doc = "Reader of register DIN31_0"]
        pub type R = crate::R<u32, super::DIN31_0>;
        #[doc = "Reader of field `DIO31`"]
        pub type DIO31_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO30`"]
        pub type DIO30_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO29`"]
        pub type DIO29_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO28`"]
        pub type DIO28_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO27`"]
        pub type DIO27_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO26`"]
        pub type DIO26_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO25`"]
        pub type DIO25_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO24`"]
        pub type DIO24_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO23`"]
        pub type DIO23_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO22`"]
        pub type DIO22_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO21`"]
        pub type DIO21_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO20`"]
        pub type DIO20_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO19`"]
        pub type DIO19_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO18`"]
        pub type DIO18_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO17`"]
        pub type DIO17_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO16`"]
        pub type DIO16_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO15`"]
        pub type DIO15_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO14`"]
        pub type DIO14_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO13`"]
        pub type DIO13_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO12`"]
        pub type DIO12_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO11`"]
        pub type DIO11_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO10`"]
        pub type DIO10_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO9`"]
        pub type DIO9_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO8`"]
        pub type DIO8_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO7`"]
        pub type DIO7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO6`"]
        pub type DIO6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO5`"]
        pub type DIO5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO4`"]
        pub type DIO4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO3`"]
        pub type DIO3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO2`"]
        pub type DIO2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO1`"]
        pub type DIO1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DIO0`"]
        pub type DIO0_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&self) -> DIO31_R {
                DIO31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&self) -> DIO30_R {
                DIO30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&self) -> DIO29_R {
                DIO29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&self) -> DIO28_R {
                DIO28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&self) -> DIO27_R {
                DIO27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&self) -> DIO26_R {
                DIO26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&self) -> DIO25_R {
                DIO25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&self) -> DIO24_R {
                DIO24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&self) -> DIO23_R {
                DIO23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&self) -> DIO22_R {
                DIO22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&self) -> DIO21_R {
                DIO21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&self) -> DIO20_R {
                DIO20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&self) -> DIO19_R {
                DIO19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&self) -> DIO18_R {
                DIO18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&self) -> DIO17_R {
                DIO17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&self) -> DIO16_R {
                DIO16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&self) -> DIO15_R {
                DIO15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&self) -> DIO14_R {
                DIO14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&self) -> DIO13_R {
                DIO13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&self) -> DIO12_R {
                DIO12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&self) -> DIO11_R {
                DIO11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&self) -> DIO10_R {
                DIO10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&self) -> DIO9_R {
                DIO9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&self) -> DIO8_R {
                DIO8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&self) -> DIO7_R {
                DIO7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&self) -> DIO6_R {
                DIO6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&self) -> DIO5_R {
                DIO5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&self) -> DIO4_R {
                DIO4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&self) -> DIO3_R {
                DIO3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&self) -> DIO2_R {
                DIO2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&self) -> DIO1_R {
                DIO1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&self) -> DIO0_R {
                DIO0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Data Output Enable for DIO 0 to 31\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [doe31_0](doe31_0) module"]
    pub type DOE31_0 = crate::Reg<u32, _DOE31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DOE31_0;
    #[doc = "`read()` method returns [doe31_0::R](doe31_0::R) reader structure"]
    impl crate::Readable for DOE31_0 {}
    #[doc = "`write(|w| ..)` method takes [doe31_0::W](doe31_0::W) writer structure"]
    impl crate::Writable for DOE31_0 {}
    #[doc = "Data Output Enable for DIO 0 to 31"]
    pub mod doe31_0 {
        #[doc = "Reader of register DOE31_0"]
        pub type R = crate::R<u32, super::DOE31_0>;
        #[doc = "Writer for register DOE31_0"]
        pub type W = crate::W<u32, super::DOE31_0>;
        #[doc = "Register DOE31_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::DOE31_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO31`"]
        pub type DIO31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DIO30`"]
        pub type DIO30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DIO29`"]
        pub type DIO29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `DIO28`"]
        pub type DIO28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DIO27`"]
        pub type DIO27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `DIO26`"]
        pub type DIO26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `DIO25`"]
        pub type DIO25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DIO24`"]
        pub type DIO24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO23`"]
        pub type DIO23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `DIO22`"]
        pub type DIO22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DIO21`"]
        pub type DIO21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DIO20`"]
        pub type DIO20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DIO19`"]
        pub type DIO19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `DIO18`"]
        pub type DIO18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `DIO17`"]
        pub type DIO17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DIO16`"]
        pub type DIO16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO15`"]
        pub type DIO15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DIO14`"]
        pub type DIO14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DIO13`"]
        pub type DIO13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `DIO12`"]
        pub type DIO12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DIO11`"]
        pub type DIO11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DIO10`"]
        pub type DIO10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DIO9`"]
        pub type DIO9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DIO8`"]
        pub type DIO8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO7`"]
        pub type DIO7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DIO6`"]
        pub type DIO6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `DIO5`"]
        pub type DIO5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIO4`"]
        pub type DIO4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIO3`"]
        pub type DIO3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DIO2`"]
        pub type DIO2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DIO1`"]
        pub type DIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DIO0`"]
        pub type DIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&self) -> DIO31_R {
                DIO31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&self) -> DIO30_R {
                DIO30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&self) -> DIO29_R {
                DIO29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&self) -> DIO28_R {
                DIO28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&self) -> DIO27_R {
                DIO27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&self) -> DIO26_R {
                DIO26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&self) -> DIO25_R {
                DIO25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&self) -> DIO24_R {
                DIO24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&self) -> DIO23_R {
                DIO23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&self) -> DIO22_R {
                DIO22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&self) -> DIO21_R {
                DIO21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&self) -> DIO20_R {
                DIO20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&self) -> DIO19_R {
                DIO19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&self) -> DIO18_R {
                DIO18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&self) -> DIO17_R {
                DIO17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&self) -> DIO16_R {
                DIO16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&self) -> DIO15_R {
                DIO15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&self) -> DIO14_R {
                DIO14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&self) -> DIO13_R {
                DIO13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&self) -> DIO12_R {
                DIO12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&self) -> DIO11_R {
                DIO11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&self) -> DIO10_R {
                DIO10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&self) -> DIO9_R {
                DIO9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&self) -> DIO8_R {
                DIO8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&self) -> DIO7_R {
                DIO7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&self) -> DIO6_R {
                DIO6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&self) -> DIO5_R {
                DIO5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&self) -> DIO4_R {
                DIO4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&self) -> DIO3_R {
                DIO3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&self) -> DIO2_R {
                DIO2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&self) -> DIO1_R {
                DIO1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&self) -> DIO0_R {
                DIO0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
    #[doc = "Event Register for DIO 0 to 31 Reading this registers will return 1 for triggered event and 0 for non-triggered events. Writing a 1 to a bit field will clear the event. The configuration of events is done inside MCU IOC, e.g. events for DIO #0 is configured in IOC:IOCFG0.EDGE_DET and IOC:IOCFG0.EDGE_IRQ_EN.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [evflags31_0](evflags31_0) module"]
    pub type EVFLAGS31_0 = crate::Reg<u32, _EVFLAGS31_0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EVFLAGS31_0;
    #[doc = "`read()` method returns [evflags31_0::R](evflags31_0::R) reader structure"]
    impl crate::Readable for EVFLAGS31_0 {}
    #[doc = "`write(|w| ..)` method takes [evflags31_0::W](evflags31_0::W) writer structure"]
    impl crate::Writable for EVFLAGS31_0 {}
    #[doc = "Event Register for DIO 0 to 31 Reading this registers will return 1 for triggered event and 0 for non-triggered events. Writing a 1 to a bit field will clear the event. The configuration of events is done inside MCU IOC, e.g. events for DIO #0 is configured in IOC:IOCFG0.EDGE_DET and IOC:IOCFG0.EDGE_IRQ_EN."]
    pub mod evflags31_0 {
        #[doc = "Reader of register EVFLAGS31_0"]
        pub type R = crate::R<u32, super::EVFLAGS31_0>;
        #[doc = "Writer for register EVFLAGS31_0"]
        pub type W = crate::W<u32, super::EVFLAGS31_0>;
        #[doc = "Register EVFLAGS31_0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EVFLAGS31_0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIO31`"]
        pub type DIO31_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO31`"]
        pub struct DIO31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO31_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `DIO30`"]
        pub type DIO30_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO30`"]
        pub struct DIO30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO30_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DIO29`"]
        pub type DIO29_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO29`"]
        pub struct DIO29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO29_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `DIO28`"]
        pub type DIO28_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO28`"]
        pub struct DIO28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO28_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DIO27`"]
        pub type DIO27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO27`"]
        pub struct DIO27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `DIO26`"]
        pub type DIO26_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO26`"]
        pub struct DIO26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO26_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `DIO25`"]
        pub type DIO25_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO25`"]
        pub struct DIO25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO25_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `DIO24`"]
        pub type DIO24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO24`"]
        pub struct DIO24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DIO23`"]
        pub type DIO23_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO23`"]
        pub struct DIO23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO23_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `DIO22`"]
        pub type DIO22_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO22`"]
        pub struct DIO22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO22_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DIO21`"]
        pub type DIO21_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO21`"]
        pub struct DIO21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO21_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DIO20`"]
        pub type DIO20_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO20`"]
        pub struct DIO20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO20_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DIO19`"]
        pub type DIO19_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO19`"]
        pub struct DIO19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO19_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `DIO18`"]
        pub type DIO18_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO18`"]
        pub struct DIO18_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO18_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `DIO17`"]
        pub type DIO17_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO17`"]
        pub struct DIO17_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO17_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DIO16`"]
        pub type DIO16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO16`"]
        pub struct DIO16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DIO15`"]
        pub type DIO15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO15`"]
        pub struct DIO15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DIO14`"]
        pub type DIO14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO14`"]
        pub struct DIO14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DIO13`"]
        pub type DIO13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO13`"]
        pub struct DIO13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `DIO12`"]
        pub type DIO12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO12`"]
        pub struct DIO12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DIO11`"]
        pub type DIO11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO11`"]
        pub struct DIO11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DIO10`"]
        pub type DIO10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO10`"]
        pub struct DIO10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DIO9`"]
        pub type DIO9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO9`"]
        pub struct DIO9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DIO8`"]
        pub type DIO8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO8`"]
        pub struct DIO8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DIO7`"]
        pub type DIO7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO7`"]
        pub struct DIO7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DIO6`"]
        pub type DIO6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO6`"]
        pub struct DIO6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `DIO5`"]
        pub type DIO5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO5`"]
        pub struct DIO5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIO4`"]
        pub type DIO4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO4`"]
        pub struct DIO4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIO3`"]
        pub type DIO3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO3`"]
        pub struct DIO3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `DIO2`"]
        pub type DIO2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO2`"]
        pub struct DIO2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DIO1`"]
        pub type DIO1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO1`"]
        pub struct DIO1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DIO0`"]
        pub type DIO0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIO0`"]
        pub struct DIO0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIO0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&self) -> DIO31_R {
                DIO31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&self) -> DIO30_R {
                DIO30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&self) -> DIO29_R {
                DIO29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&self) -> DIO28_R {
                DIO28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&self) -> DIO27_R {
                DIO27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&self) -> DIO26_R {
                DIO26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&self) -> DIO25_R {
                DIO25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&self) -> DIO24_R {
                DIO24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&self) -> DIO23_R {
                DIO23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&self) -> DIO22_R {
                DIO22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&self) -> DIO21_R {
                DIO21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&self) -> DIO20_R {
                DIO20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&self) -> DIO19_R {
                DIO19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&self) -> DIO18_R {
                DIO18_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&self) -> DIO17_R {
                DIO17_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&self) -> DIO16_R {
                DIO16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&self) -> DIO15_R {
                DIO15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&self) -> DIO14_R {
                DIO14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&self) -> DIO13_R {
                DIO13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&self) -> DIO12_R {
                DIO12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&self) -> DIO11_R {
                DIO11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&self) -> DIO10_R {
                DIO10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&self) -> DIO9_R {
                DIO9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&self) -> DIO8_R {
                DIO8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&self) -> DIO7_R {
                DIO7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&self) -> DIO6_R {
                DIO6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&self) -> DIO5_R {
                DIO5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&self) -> DIO4_R {
                DIO4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&self) -> DIO3_R {
                DIO3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&self) -> DIO2_R {
                DIO2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&self) -> DIO1_R {
                DIO1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&self) -> DIO0_R {
                DIO0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - DIO31"]
            #[inline(always)]
            pub fn dio31(&mut self) -> DIO31_W {
                DIO31_W { w: self }
            }
            #[doc = "Bit 30 - DIO30"]
            #[inline(always)]
            pub fn dio30(&mut self) -> DIO30_W {
                DIO30_W { w: self }
            }
            #[doc = "Bit 29 - DIO29"]
            #[inline(always)]
            pub fn dio29(&mut self) -> DIO29_W {
                DIO29_W { w: self }
            }
            #[doc = "Bit 28 - DIO28"]
            #[inline(always)]
            pub fn dio28(&mut self) -> DIO28_W {
                DIO28_W { w: self }
            }
            #[doc = "Bit 27 - DIO27"]
            #[inline(always)]
            pub fn dio27(&mut self) -> DIO27_W {
                DIO27_W { w: self }
            }
            #[doc = "Bit 26 - DIO26"]
            #[inline(always)]
            pub fn dio26(&mut self) -> DIO26_W {
                DIO26_W { w: self }
            }
            #[doc = "Bit 25 - DIO25"]
            #[inline(always)]
            pub fn dio25(&mut self) -> DIO25_W {
                DIO25_W { w: self }
            }
            #[doc = "Bit 24 - DIO24"]
            #[inline(always)]
            pub fn dio24(&mut self) -> DIO24_W {
                DIO24_W { w: self }
            }
            #[doc = "Bit 23 - DIO23"]
            #[inline(always)]
            pub fn dio23(&mut self) -> DIO23_W {
                DIO23_W { w: self }
            }
            #[doc = "Bit 22 - DIO22"]
            #[inline(always)]
            pub fn dio22(&mut self) -> DIO22_W {
                DIO22_W { w: self }
            }
            #[doc = "Bit 21 - DIO21"]
            #[inline(always)]
            pub fn dio21(&mut self) -> DIO21_W {
                DIO21_W { w: self }
            }
            #[doc = "Bit 20 - DIO20"]
            #[inline(always)]
            pub fn dio20(&mut self) -> DIO20_W {
                DIO20_W { w: self }
            }
            #[doc = "Bit 19 - DIO19"]
            #[inline(always)]
            pub fn dio19(&mut self) -> DIO19_W {
                DIO19_W { w: self }
            }
            #[doc = "Bit 18 - DIO18"]
            #[inline(always)]
            pub fn dio18(&mut self) -> DIO18_W {
                DIO18_W { w: self }
            }
            #[doc = "Bit 17 - DIO17"]
            #[inline(always)]
            pub fn dio17(&mut self) -> DIO17_W {
                DIO17_W { w: self }
            }
            #[doc = "Bit 16 - DIO16"]
            #[inline(always)]
            pub fn dio16(&mut self) -> DIO16_W {
                DIO16_W { w: self }
            }
            #[doc = "Bit 15 - DIO15"]
            #[inline(always)]
            pub fn dio15(&mut self) -> DIO15_W {
                DIO15_W { w: self }
            }
            #[doc = "Bit 14 - DIO14"]
            #[inline(always)]
            pub fn dio14(&mut self) -> DIO14_W {
                DIO14_W { w: self }
            }
            #[doc = "Bit 13 - DIO13"]
            #[inline(always)]
            pub fn dio13(&mut self) -> DIO13_W {
                DIO13_W { w: self }
            }
            #[doc = "Bit 12 - DIO12"]
            #[inline(always)]
            pub fn dio12(&mut self) -> DIO12_W {
                DIO12_W { w: self }
            }
            #[doc = "Bit 11 - DIO11"]
            #[inline(always)]
            pub fn dio11(&mut self) -> DIO11_W {
                DIO11_W { w: self }
            }
            #[doc = "Bit 10 - DIO10"]
            #[inline(always)]
            pub fn dio10(&mut self) -> DIO10_W {
                DIO10_W { w: self }
            }
            #[doc = "Bit 9 - DIO9"]
            #[inline(always)]
            pub fn dio9(&mut self) -> DIO9_W {
                DIO9_W { w: self }
            }
            #[doc = "Bit 8 - DIO8"]
            #[inline(always)]
            pub fn dio8(&mut self) -> DIO8_W {
                DIO8_W { w: self }
            }
            #[doc = "Bit 7 - DIO7"]
            #[inline(always)]
            pub fn dio7(&mut self) -> DIO7_W {
                DIO7_W { w: self }
            }
            #[doc = "Bit 6 - DIO6"]
            #[inline(always)]
            pub fn dio6(&mut self) -> DIO6_W {
                DIO6_W { w: self }
            }
            #[doc = "Bit 5 - DIO5"]
            #[inline(always)]
            pub fn dio5(&mut self) -> DIO5_W {
                DIO5_W { w: self }
            }
            #[doc = "Bit 4 - DIO4"]
            #[inline(always)]
            pub fn dio4(&mut self) -> DIO4_W {
                DIO4_W { w: self }
            }
            #[doc = "Bit 3 - DIO3"]
            #[inline(always)]
            pub fn dio3(&mut self) -> DIO3_W {
                DIO3_W { w: self }
            }
            #[doc = "Bit 2 - DIO2"]
            #[inline(always)]
            pub fn dio2(&mut self) -> DIO2_W {
                DIO2_W { w: self }
            }
            #[doc = "Bit 1 - DIO1"]
            #[inline(always)]
            pub fn dio1(&mut self) -> DIO1_W {
                DIO1_W { w: self }
            }
            #[doc = "Bit 0 - DIO0"]
            #[inline(always)]
            pub fn dio0(&mut self) -> DIO0_W {
                DIO0_W { w: self }
            }
        }
    }
}
#[doc = "General Purpose Timer."]
pub struct GPT0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPT0 {}
impl GPT0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpt0::RegisterBlock {
        0x4001_0000 as *const _
    }
}
impl Deref for GPT0 {
    type Target = gpt0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPT0::ptr() }
    }
}
#[doc = "General Purpose Timer."]
pub mod gpt0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Configuration"]
        pub cfg: CFG,
        #[doc = "0x04 - Timer A Mode"]
        pub tamr: TAMR,
        #[doc = "0x08 - Timer B Mode"]
        pub tbmr: TBMR,
        #[doc = "0x0c - Control"]
        pub ctl: CTL,
        #[doc = "0x10 - Synch Register"]
        pub sync: SYNC,
        _reserved5: [u8; 4usize],
        #[doc = "0x18 - Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
        pub imr: IMR,
        #[doc = "0x1c - Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
        pub ris: RIS,
        #[doc = "0x20 - Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
        pub mis: MIS,
        #[doc = "0x24 - Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
        pub iclr: ICLR,
        #[doc = "0x28 - Timer A Interval Load Register"]
        pub tailr: TAILR,
        #[doc = "0x2c - Timer B Interval Load Register"]
        pub tbilr: TBILR,
        #[doc = "0x30 - Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
        pub tamatchr: TAMATCHR,
        #[doc = "0x34 - Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
        pub tbmatchr: TBMATCHR,
        #[doc = "0x38 - Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tapr: TAPR,
        #[doc = "0x3c - Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tbpr: TBPR,
        #[doc = "0x40 - Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
        pub tapmr: TAPMR,
        #[doc = "0x44 - Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
        pub tbpmr: TBPMR,
        #[doc = "0x48 - Timer A Register"]
        pub tar: TAR,
        #[doc = "0x4c - Timer B Register"]
        pub tbr: TBR,
        #[doc = "0x50 - Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
        pub tav: TAV,
        #[doc = "0x54 - Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tbv: TBV,
        #[doc = "0x58 - RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
        pub rtcpd: RTCPD,
        #[doc = "0x5c - Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub taps: TAPS,
        #[doc = "0x60 - Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub tbps: TBPS,
        #[doc = "0x64 - Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tapv: TAPV,
        #[doc = "0x68 - Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
        pub tbpv: TBPV,
        #[doc = "0x6c - DMA Event This register allows software to enable/disable GPT DMA trigger events."]
        pub dmaev: DMAEV,
        _reserved27: [u8; 3904usize],
        #[doc = "0xfb0 - Peripheral Version This register provides information regarding the GPT version"]
        pub version: VERSION,
        #[doc = "0xfb4 - Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
        pub andccp: ANDCCP,
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
    pub type CFG = crate::Reg<u32, _CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG;
    #[doc = "`read()` method returns [cfg::R](cfg::R) reader structure"]
    impl crate::Readable for CFG {}
    #[doc = "`write(|w| ..)` method takes [cfg::W](cfg::W) writer structure"]
    impl crate::Writable for CFG {}
    #[doc = "Configuration"]
    pub mod cfg {
        #[doc = "Reader of register CFG"]
        pub type R = crate::R<u32, super::CFG>;
        #[doc = "Writer for register CFG"]
        pub type W = crate::W<u32, super::CFG>;
        #[doc = "Register CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Timer A Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamr](tamr) module"]
    pub type TAMR = crate::Reg<u32, _TAMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMR;
    #[doc = "`read()` method returns [tamr::R](tamr::R) reader structure"]
    impl crate::Readable for TAMR {}
    #[doc = "`write(|w| ..)` method takes [tamr::W](tamr::W) writer structure"]
    impl crate::Writable for TAMR {}
    #[doc = "Timer A Mode"]
    pub mod tamr {
        #[doc = "Reader of register TAMR"]
        pub type R = crate::R<u32, super::TAMR>;
        #[doc = "Writer for register TAMR"]
        pub type W = crate::W<u32, super::TAMR>;
        #[doc = "Register TAMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TACINTD`"]
        pub type TACINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACINTD`"]
        pub struct TACINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TAPLO`"]
        pub type TAPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPLO`"]
        pub struct TAPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TAMRSU`"]
        pub type TAMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMRSU`"]
        pub struct TAMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWMIE`"]
        pub type TAPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWMIE`"]
        pub struct TAPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TAILD`"]
        pub type TAILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAILD`"]
        pub struct TAILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TASNAPS`"]
        pub type TASNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASNAPS`"]
        pub struct TASNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TAWOT`"]
        pub type TAWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAWOT`"]
        pub struct TAWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIE`"]
        pub type TAMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIE`"]
        pub struct TAMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TACDIR`"]
        pub type TACDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACDIR`"]
        pub struct TACDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAAMS`"]
        pub type TAAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAAMS`"]
        pub struct TAAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TACM`"]
        pub type TACM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACM`"]
        pub struct TACM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TAMR`"]
        pub type TAMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMR`"]
        pub struct TAMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&self) -> TACINTD_R {
                TACINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&self) -> TAPLO_R {
                TAPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&self) -> TAMRSU_R {
                TAMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&self) -> TAPWMIE_R {
                TAPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&self) -> TAILD_R {
                TAILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&self) -> TASNAPS_R {
                TASNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&self) -> TAWOT_R {
                TAWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&self) -> TAMIE_R {
                TAMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&self) -> TACDIR_R {
                TACDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&self) -> TAAMS_R {
                TAAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&self) -> TACM_R {
                TACM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&self) -> TAMR_R {
                TAMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&mut self) -> TACINTD_W {
                TACINTD_W { w: self }
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&mut self) -> TAPLO_W {
                TAPLO_W { w: self }
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&mut self) -> TAMRSU_W {
                TAMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&mut self) -> TAPWMIE_W {
                TAPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&mut self) -> TAILD_W {
                TAILD_W { w: self }
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&mut self) -> TASNAPS_W {
                TASNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&mut self) -> TAWOT_W {
                TAWOT_W { w: self }
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&mut self) -> TAMIE_W {
                TAMIE_W { w: self }
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&mut self) -> TACDIR_W {
                TACDIR_W { w: self }
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&mut self) -> TAAMS_W {
                TAAMS_W { w: self }
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&mut self) -> TACM_W {
                TACM_W { w: self }
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&mut self) -> TAMR_W {
                TAMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmr](tbmr) module"]
    pub type TBMR = crate::Reg<u32, _TBMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMR;
    #[doc = "`read()` method returns [tbmr::R](tbmr::R) reader structure"]
    impl crate::Readable for TBMR {}
    #[doc = "`write(|w| ..)` method takes [tbmr::W](tbmr::W) writer structure"]
    impl crate::Writable for TBMR {}
    #[doc = "Timer B Mode"]
    pub mod tbmr {
        #[doc = "Reader of register TBMR"]
        pub type R = crate::R<u32, super::TBMR>;
        #[doc = "Writer for register TBMR"]
        pub type W = crate::W<u32, super::TBMR>;
        #[doc = "Register TBMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBCINTD`"]
        pub type TBCINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCINTD`"]
        pub struct TBCINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TBPLO`"]
        pub type TBPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPLO`"]
        pub struct TBPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TBMRSU`"]
        pub type TBMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMRSU`"]
        pub struct TBMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBPWMIE`"]
        pub type TBPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWMIE`"]
        pub struct TBPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBILD`"]
        pub type TBILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBILD`"]
        pub struct TBILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TBSNAPS`"]
        pub type TBSNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSNAPS`"]
        pub struct TBSNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TBWOT`"]
        pub type TBWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBWOT`"]
        pub struct TBWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIE`"]
        pub type TBMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIE`"]
        pub struct TBMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TBCDIR`"]
        pub type TBCDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCDIR`"]
        pub struct TBCDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TBAMS`"]
        pub type TBAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBAMS`"]
        pub struct TBAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TBCM`"]
        pub type TBCM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCM`"]
        pub struct TBCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TBMR`"]
        pub type TBMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBMR`"]
        pub struct TBMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&self) -> TBCINTD_R {
                TBCINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&self) -> TBPLO_R {
                TBPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&self) -> TBMRSU_R {
                TBMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&self) -> TBPWMIE_R {
                TBPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&self) -> TBILD_R {
                TBILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&self) -> TBSNAPS_R {
                TBSNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&self) -> TBWOT_R {
                TBWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&self) -> TBMIE_R {
                TBMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&self) -> TBCDIR_R {
                TBCDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&self) -> TBAMS_R {
                TBAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&self) -> TBCM_R {
                TBCM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&self) -> TBMR_R {
                TBMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&mut self) -> TBCINTD_W {
                TBCINTD_W { w: self }
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&mut self) -> TBPLO_W {
                TBPLO_W { w: self }
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&mut self) -> TBMRSU_W {
                TBMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&mut self) -> TBPWMIE_W {
                TBPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&mut self) -> TBILD_W {
                TBILD_W { w: self }
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&mut self) -> TBSNAPS_W {
                TBSNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&mut self) -> TBWOT_W {
                TBWOT_W { w: self }
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&mut self) -> TBMIE_W {
                TBMIE_W { w: self }
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&mut self) -> TBCDIR_W {
                TBCDIR_W { w: self }
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&mut self) -> TBAMS_W {
                TBAMS_W { w: self }
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&mut self) -> TBCM_W {
                TBCM_W { w: self }
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&mut self) -> TBMR_W {
                TBMR_W { w: self }
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPWML`"]
        pub type TBPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWML`"]
        pub struct TBPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TBEVENT`"]
        pub type TBEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBEVENT`"]
        pub struct TBEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBSTALL`"]
        pub type TBSTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSTALL`"]
        pub struct TBSTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBEN`"]
        pub type TBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBEN`"]
        pub struct TBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWML`"]
        pub type TAPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWML`"]
        pub struct TAPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAEVENT`"]
        pub type TAEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAEVENT`"]
        pub struct TAEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TASTALL`"]
        pub type TASTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASTALL`"]
        pub struct TASTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAEN`"]
        pub type TAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAEN`"]
        pub struct TAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&self) -> TBPWML_R {
                TBPWML_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&self) -> TBEVENT_R {
                TBEVENT_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&self) -> TBSTALL_R {
                TBSTALL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&self) -> TBEN_R {
                TBEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&self) -> TAPWML_R {
                TAPWML_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&self) -> TAEVENT_R {
                TAEVENT_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&self) -> TASTALL_R {
                TASTALL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&self) -> TAEN_R {
                TAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&mut self) -> TBPWML_W {
                TBPWML_W { w: self }
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&mut self) -> TBEVENT_W {
                TBEVENT_W { w: self }
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&mut self) -> TBSTALL_W {
                TBSTALL_W { w: self }
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&mut self) -> TBEN_W {
                TBEN_W { w: self }
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&mut self) -> TAPWML_W {
                TAPWML_W { w: self }
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&mut self) -> TAEVENT_W {
                TAEVENT_W { w: self }
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&mut self) -> TASTALL_W {
                TASTALL_W { w: self }
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&mut self) -> TAEN_W {
                TAEN_W { w: self }
            }
        }
    }
    #[doc = "Synch Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "Synch Register"]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYNC3`"]
        pub type SYNC3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC3`"]
        pub struct SYNC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC2`"]
        pub type SYNC2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC2`"]
        pub struct SYNC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC1`"]
        pub type SYNC1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC1`"]
        pub struct SYNC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC0`"]
        pub type SYNC0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC0`"]
        pub struct SYNC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&self) -> SYNC3_R {
                SYNC3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&self) -> SYNC2_R {
                SYNC2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&self) -> SYNC1_R {
                SYNC1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&self) -> SYNC0_R {
                SYNC0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&mut self) -> SYNC3_W {
                SYNC3_W { w: self }
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&mut self) -> SYNC2_W {
                SYNC2_W { w: self }
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&mut self) -> SYNC1_W {
                SYNC1_W { w: self }
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&mut self) -> SYNC0_W {
                SYNC0_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr](imr) module"]
    pub type IMR = crate::Reg<u32, _IMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR;
    #[doc = "`read()` method returns [imr::R](imr::R) reader structure"]
    impl crate::Readable for IMR {}
    #[doc = "`write(|w| ..)` method takes [imr::W](imr::W) writer structure"]
    impl crate::Writable for IMR {}
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
    pub mod imr {
        #[doc = "Reader of register IMR"]
        pub type R = crate::R<u32, super::IMR>;
        #[doc = "Writer for register IMR"]
        pub type W = crate::W<u32, super::IMR>;
        #[doc = "Register IMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUMIS`"]
        pub struct WUMIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUMIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABIM`"]
        pub type DMABIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABIM`"]
        pub struct DMABIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIM`"]
        pub type TBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIM`"]
        pub struct TBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEIM`"]
        pub type CBEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEIM`"]
        pub struct CBEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMIM`"]
        pub type CBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMIM`"]
        pub struct CBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOIM`"]
        pub type TBTOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOIM`"]
        pub struct TBTOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAIM`"]
        pub type DMAAIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAIM`"]
        pub struct DMAAIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIM`"]
        pub type TAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIM`"]
        pub struct TAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCIM`"]
        pub type RTCIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCIM`"]
        pub struct RTCIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEIM`"]
        pub type CAEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEIM`"]
        pub struct CAEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMIM`"]
        pub type CAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMIM`"]
        pub struct CAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOIM`"]
        pub type TATOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOIM`"]
        pub struct TATOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&self) -> DMABIM_R {
                DMABIM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&self) -> TBMIM_R {
                TBMIM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&self) -> CBEIM_R {
                CBEIM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&self) -> CBMIM_R {
                CBMIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&self) -> TBTOIM_R {
                TBTOIM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&self) -> DMAAIM_R {
                DMAAIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&self) -> TAMIM_R {
                TAMIM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&self) -> RTCIM_R {
                RTCIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&self) -> CAEIM_R {
                CAEIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&self) -> CAMIM_R {
                CAMIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&self) -> TATOIM_R {
                TATOIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&mut self) -> WUMIS_W {
                WUMIS_W { w: self }
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&mut self) -> DMABIM_W {
                DMABIM_W { w: self }
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&mut self) -> TBMIM_W {
                TBMIM_W { w: self }
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&mut self) -> CBEIM_W {
                CBEIM_W { w: self }
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&mut self) -> CBMIM_W {
                CBMIM_W { w: self }
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&mut self) -> TBTOIM_W {
                TBTOIM_W { w: self }
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&mut self) -> DMAAIM_W {
                DMAAIM_W { w: self }
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&mut self) -> TAMIM_W {
                TAMIM_W { w: self }
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&mut self) -> RTCIM_W {
                RTCIM_W { w: self }
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&mut self) -> CAEIM_W {
                CAEIM_W { w: self }
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&mut self) -> CAMIM_W {
                CAMIM_W { w: self }
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&mut self) -> TATOIM_W {
                TATOIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `WURIS`"]
        pub type WURIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABRIS`"]
        pub type DMABRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMRIS`"]
        pub type TBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBERIS`"]
        pub type CBERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMRIS`"]
        pub type CBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTORIS`"]
        pub type TBTORIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAARIS`"]
        pub type DMAARIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMRIS`"]
        pub type TAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCRIS`"]
        pub type RTCRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAERIS`"]
        pub type CAERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMRIS`"]
        pub type CAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATORIS`"]
        pub type TATORIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WURIS"]
            #[inline(always)]
            pub fn wuris(&self) -> WURIS_R {
                WURIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABRIS"]
            #[inline(always)]
            pub fn dmabris(&self) -> DMABRIS_R {
                DMABRIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMRIS"]
            #[inline(always)]
            pub fn tbmris(&self) -> TBMRIS_R {
                TBMRIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBERIS"]
            #[inline(always)]
            pub fn cberis(&self) -> CBERIS_R {
                CBERIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMRIS"]
            #[inline(always)]
            pub fn cbmris(&self) -> CBMRIS_R {
                CBMRIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTORIS"]
            #[inline(always)]
            pub fn tbtoris(&self) -> TBTORIS_R {
                TBTORIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAARIS"]
            #[inline(always)]
            pub fn dmaaris(&self) -> DMAARIS_R {
                DMAARIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMRIS"]
            #[inline(always)]
            pub fn tamris(&self) -> TAMRIS_R {
                TAMRIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCRIS"]
            #[inline(always)]
            pub fn rtcris(&self) -> RTCRIS_R {
                RTCRIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAERIS"]
            #[inline(always)]
            pub fn caeris(&self) -> CAERIS_R {
                CAERIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMRIS"]
            #[inline(always)]
            pub fn camris(&self) -> CAMRIS_R {
                CAMRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATORIS"]
            #[inline(always)]
            pub fn tatoris(&self) -> TATORIS_R {
                TATORIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABMIS`"]
        pub type DMABMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMMIS`"]
        pub type TBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBEMIS`"]
        pub type CBEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMMIS`"]
        pub type CBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTOMIS`"]
        pub type TBTOMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAAMIS`"]
        pub type DMAAMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMMIS`"]
        pub type TAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCMIS`"]
        pub type RTCMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAEMIS`"]
        pub type CAEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMMIS`"]
        pub type CAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATOMIS`"]
        pub type TATOMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABMIS"]
            #[inline(always)]
            pub fn dmabmis(&self) -> DMABMIS_R {
                DMABMIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMMIS"]
            #[inline(always)]
            pub fn tbmmis(&self) -> TBMMIS_R {
                TBMMIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEMIS"]
            #[inline(always)]
            pub fn cbemis(&self) -> CBEMIS_R {
                CBEMIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMMIS"]
            #[inline(always)]
            pub fn cbmmis(&self) -> CBMMIS_R {
                CBMMIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOMIS"]
            #[inline(always)]
            pub fn tbtomis(&self) -> TBTOMIS_R {
                TBTOMIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAMIS"]
            #[inline(always)]
            pub fn dmaamis(&self) -> DMAAMIS_R {
                DMAAMIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMMIS"]
            #[inline(always)]
            pub fn tammis(&self) -> TAMMIS_R {
                TAMMIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCMIS"]
            #[inline(always)]
            pub fn rtcmis(&self) -> RTCMIS_R {
                RTCMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEMIS"]
            #[inline(always)]
            pub fn caemis(&self) -> CAEMIS_R {
                CAEMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMMIS"]
            #[inline(always)]
            pub fn cammis(&self) -> CAMMIS_R {
                CAMMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOMIS"]
            #[inline(always)]
            pub fn tatomis(&self) -> TATOMIS_R {
                TATOMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iclr](iclr) module"]
    pub type ICLR = crate::Reg<u32, _ICLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICLR;
    #[doc = "`read()` method returns [iclr::R](iclr::R) reader structure"]
    impl crate::Readable for ICLR {}
    #[doc = "`write(|w| ..)` method takes [iclr::W](iclr::W) writer structure"]
    impl crate::Writable for ICLR {}
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
    pub mod iclr {
        #[doc = "Reader of register ICLR"]
        pub type R = crate::R<u32, super::ICLR>;
        #[doc = "Writer for register ICLR"]
        pub type W = crate::W<u32, super::ICLR>;
        #[doc = "Register ICLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUECINT`"]
        pub type WUECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUECINT`"]
        pub struct WUECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABINT`"]
        pub type DMABINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABINT`"]
        pub struct DMABINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMCINT`"]
        pub type TBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMCINT`"]
        pub struct TBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBECINT`"]
        pub type CBECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBECINT`"]
        pub struct CBECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMCINT`"]
        pub type CBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMCINT`"]
        pub struct CBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOCINT`"]
        pub type TBTOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOCINT`"]
        pub struct TBTOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAINT`"]
        pub type DMAAINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAINT`"]
        pub struct DMAAINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMCINT`"]
        pub type TAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMCINT`"]
        pub struct TAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCCINT`"]
        pub type RTCCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCCINT`"]
        pub struct RTCCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAECINT`"]
        pub type CAECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAECINT`"]
        pub struct CAECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMCINT`"]
        pub type CAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMCINT`"]
        pub struct CAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOCINT`"]
        pub type TATOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOCINT`"]
        pub struct TATOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&self) -> WUECINT_R {
                WUECINT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&self) -> DMABINT_R {
                DMABINT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&self) -> TBMCINT_R {
                TBMCINT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&self) -> CBECINT_R {
                CBECINT_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&self) -> CBMCINT_R {
                CBMCINT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&self) -> TBTOCINT_R {
                TBTOCINT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&self) -> DMAAINT_R {
                DMAAINT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&self) -> TAMCINT_R {
                TAMCINT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&self) -> RTCCINT_R {
                RTCCINT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&self) -> CAECINT_R {
                CAECINT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&self) -> CAMCINT_R {
                CAMCINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&self) -> TATOCINT_R {
                TATOCINT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&mut self) -> WUECINT_W {
                WUECINT_W { w: self }
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&mut self) -> DMABINT_W {
                DMABINT_W { w: self }
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&mut self) -> TBMCINT_W {
                TBMCINT_W { w: self }
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&mut self) -> CBECINT_W {
                CBECINT_W { w: self }
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&mut self) -> CBMCINT_W {
                CBMCINT_W { w: self }
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&mut self) -> TBTOCINT_W {
                TBTOCINT_W { w: self }
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&mut self) -> DMAAINT_W {
                DMAAINT_W { w: self }
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&mut self) -> TAMCINT_W {
                TAMCINT_W { w: self }
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&mut self) -> RTCCINT_W {
                RTCCINT_W { w: self }
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&mut self) -> CAECINT_W {
                CAECINT_W { w: self }
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&mut self) -> CAMCINT_W {
                CAMCINT_W { w: self }
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&mut self) -> TATOCINT_W {
                TATOCINT_W { w: self }
            }
        }
    }
    #[doc = "Timer A Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tailr](tailr) module"]
    pub type TAILR = crate::Reg<u32, _TAILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAILR;
    #[doc = "`read()` method returns [tailr::R](tailr::R) reader structure"]
    impl crate::Readable for TAILR {}
    #[doc = "`write(|w| ..)` method takes [tailr::W](tailr::W) writer structure"]
    impl crate::Writable for TAILR {}
    #[doc = "Timer A Interval Load Register"]
    pub mod tailr {
        #[doc = "Reader of register TAILR"]
        pub type R = crate::R<u32, super::TAILR>;
        #[doc = "Writer for register TAILR"]
        pub type W = crate::W<u32, super::TAILR>;
        #[doc = "Register TAILR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAILR`"]
        pub type TAILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAILR`"]
        pub struct TAILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&self) -> TAILR_R {
                TAILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&mut self) -> TAILR_W {
                TAILR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbilr](tbilr) module"]
    pub type TBILR = crate::Reg<u32, _TBILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBILR;
    #[doc = "`read()` method returns [tbilr::R](tbilr::R) reader structure"]
    impl crate::Readable for TBILR {}
    #[doc = "`write(|w| ..)` method takes [tbilr::W](tbilr::W) writer structure"]
    impl crate::Writable for TBILR {}
    #[doc = "Timer B Interval Load Register"]
    pub mod tbilr {
        #[doc = "Reader of register TBILR"]
        pub type R = crate::R<u32, super::TBILR>;
        #[doc = "Writer for register TBILR"]
        pub type W = crate::W<u32, super::TBILR>;
        #[doc = "Register TBILR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBILR`"]
        pub type TBILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBILR`"]
        pub struct TBILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&self) -> TBILR_R {
                TBILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&mut self) -> TBILR_W {
                TBILR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamatchr](tamatchr) module"]
    pub type TAMATCHR = crate::Reg<u32, _TAMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMATCHR;
    #[doc = "`read()` method returns [tamatchr::R](tamatchr::R) reader structure"]
    impl crate::Readable for TAMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tamatchr::W](tamatchr::W) writer structure"]
    impl crate::Writable for TAMATCHR {}
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
    pub mod tamatchr {
        #[doc = "Reader of register TAMATCHR"]
        pub type R = crate::R<u32, super::TAMATCHR>;
        #[doc = "Writer for register TAMATCHR"]
        pub type W = crate::W<u32, super::TAMATCHR>;
        #[doc = "Register TAMATCHR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAMATCHR`"]
        pub type TAMATCHR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAMATCHR`"]
        pub struct TAMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&self) -> TAMATCHR_R {
                TAMATCHR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&mut self) -> TAMATCHR_W {
                TAMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmatchr](tbmatchr) module"]
    pub type TBMATCHR = crate::Reg<u32, _TBMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMATCHR;
    #[doc = "`read()` method returns [tbmatchr::R](tbmatchr::R) reader structure"]
    impl crate::Readable for TBMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tbmatchr::W](tbmatchr::W) writer structure"]
    impl crate::Writable for TBMATCHR {}
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
    pub mod tbmatchr {
        #[doc = "Reader of register TBMATCHR"]
        pub type R = crate::R<u32, super::TBMATCHR>;
        #[doc = "Writer for register TBMATCHR"]
        pub type W = crate::W<u32, super::TBMATCHR>;
        #[doc = "Register TBMATCHR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBMATCHR`"]
        pub type TBMATCHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TBMATCHR`"]
        pub struct TBMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&self) -> TBMATCHR_R {
                TBMATCHR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&mut self) -> TBMATCHR_W {
                TBMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapr](tapr) module"]
    pub type TAPR = crate::Reg<u32, _TAPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPR;
    #[doc = "`read()` method returns [tapr::R](tapr::R) reader structure"]
    impl crate::Readable for TAPR {}
    #[doc = "`write(|w| ..)` method takes [tapr::W](tapr::W) writer structure"]
    impl crate::Writable for TAPR {}
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tapr {
        #[doc = "Reader of register TAPR"]
        pub type R = crate::R<u32, super::TAPR>;
        #[doc = "Writer for register TAPR"]
        pub type W = crate::W<u32, super::TAPR>;
        #[doc = "Register TAPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSR`"]
        pub type TAPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSR`"]
        pub struct TAPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&self) -> TAPSR_R {
                TAPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&mut self) -> TAPSR_W {
                TAPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpr](tbpr) module"]
    pub type TBPR = crate::Reg<u32, _TBPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPR;
    #[doc = "`read()` method returns [tbpr::R](tbpr::R) reader structure"]
    impl crate::Readable for TBPR {}
    #[doc = "`write(|w| ..)` method takes [tbpr::W](tbpr::W) writer structure"]
    impl crate::Writable for TBPR {}
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tbpr {
        #[doc = "Reader of register TBPR"]
        pub type R = crate::R<u32, super::TBPR>;
        #[doc = "Writer for register TBPR"]
        pub type W = crate::W<u32, super::TBPR>;
        #[doc = "Register TBPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSR`"]
        pub type TBPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSR`"]
        pub struct TBPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&self) -> TBPSR_R {
                TBPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&mut self) -> TBPSR_W {
                TBPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapmr](tapmr) module"]
    pub type TAPMR = crate::Reg<u32, _TAPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPMR;
    #[doc = "`read()` method returns [tapmr::R](tapmr::R) reader structure"]
    impl crate::Readable for TAPMR {}
    #[doc = "`write(|w| ..)` method takes [tapmr::W](tapmr::W) writer structure"]
    impl crate::Writable for TAPMR {}
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
    pub mod tapmr {
        #[doc = "Reader of register TAPMR"]
        pub type R = crate::R<u32, super::TAPMR>;
        #[doc = "Writer for register TAPMR"]
        pub type W = crate::W<u32, super::TAPMR>;
        #[doc = "Register TAPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSMR`"]
        pub type TAPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSMR`"]
        pub struct TAPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&self) -> TAPSMR_R {
                TAPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&mut self) -> TAPSMR_W {
                TAPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpmr](tbpmr) module"]
    pub type TBPMR = crate::Reg<u32, _TBPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPMR;
    #[doc = "`read()` method returns [tbpmr::R](tbpmr::R) reader structure"]
    impl crate::Readable for TBPMR {}
    #[doc = "`write(|w| ..)` method takes [tbpmr::W](tbpmr::W) writer structure"]
    impl crate::Writable for TBPMR {}
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
    pub mod tbpmr {
        #[doc = "Reader of register TBPMR"]
        pub type R = crate::R<u32, super::TBPMR>;
        #[doc = "Writer for register TBPMR"]
        pub type W = crate::W<u32, super::TBPMR>;
        #[doc = "Register TBPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSMR`"]
        pub type TBPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSMR`"]
        pub struct TBPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&self) -> TBPSMR_R {
                TBPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&mut self) -> TBPSMR_W {
                TBPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tar](tar) module"]
    pub type TAR = crate::Reg<u32, _TAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAR;
    #[doc = "`read()` method returns [tar::R](tar::R) reader structure"]
    impl crate::Readable for TAR {}
    #[doc = "Timer A Register"]
    pub mod tar {
        #[doc = "Reader of register TAR"]
        pub type R = crate::R<u32, super::TAR>;
        #[doc = "Reader of field `TAR`"]
        pub type TAR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TAR"]
            #[inline(always)]
            pub fn tar(&self) -> TAR_R {
                TAR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer B Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbr](tbr) module"]
    pub type TBR = crate::Reg<u32, _TBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBR;
    #[doc = "`read()` method returns [tbr::R](tbr::R) reader structure"]
    impl crate::Readable for TBR {}
    #[doc = "Timer B Register"]
    pub mod tbr {
        #[doc = "Reader of register TBR"]
        pub type R = crate::R<u32, super::TBR>;
        #[doc = "Reader of field `TBR`"]
        pub type TBR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TBR"]
            #[inline(always)]
            pub fn tbr(&self) -> TBR_R {
                TBR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tav](tav) module"]
    pub type TAV = crate::Reg<u32, _TAV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAV;
    #[doc = "`read()` method returns [tav::R](tav::R) reader structure"]
    impl crate::Readable for TAV {}
    #[doc = "`write(|w| ..)` method takes [tav::W](tav::W) writer structure"]
    impl crate::Writable for TAV {}
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
    pub mod tav {
        #[doc = "Reader of register TAV"]
        pub type R = crate::R<u32, super::TAV>;
        #[doc = "Writer for register TAV"]
        pub type W = crate::W<u32, super::TAV>;
        #[doc = "Register TAV `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAV`"]
        pub type TAV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAV`"]
        pub struct TAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&self) -> TAV_R {
                TAV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&mut self) -> TAV_W {
                TAV_W { w: self }
            }
        }
    }
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbv](tbv) module"]
    pub type TBV = crate::Reg<u32, _TBV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBV;
    #[doc = "`read()` method returns [tbv::R](tbv::R) reader structure"]
    impl crate::Readable for TBV {}
    #[doc = "`write(|w| ..)` method takes [tbv::W](tbv::W) writer structure"]
    impl crate::Writable for TBV {}
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tbv {
        #[doc = "Reader of register TBV"]
        pub type R = crate::R<u32, super::TBV>;
        #[doc = "Writer for register TBV"]
        pub type W = crate::W<u32, super::TBV>;
        #[doc = "Register TBV `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBV`"]
        pub type TBV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBV`"]
        pub struct TBV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&self) -> TBV_R {
                TBV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&mut self) -> TBV_W {
                TBV_W { w: self }
            }
        }
    }
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcpd](rtcpd) module"]
    pub type RTCPD = crate::Reg<u32, _RTCPD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCPD;
    #[doc = "`read()` method returns [rtcpd::R](rtcpd::R) reader structure"]
    impl crate::Readable for RTCPD {}
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
    pub mod rtcpd {
        #[doc = "Reader of register RTCPD"]
        pub type R = crate::R<u32, super::RTCPD>;
        #[doc = "Reader of field `RTCPD`"]
        pub type RTCPD_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTCPD"]
            #[inline(always)]
            pub fn rtcpd(&self) -> RTCPD_R {
                RTCPD_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taps](taps) module"]
    pub type TAPS = crate::Reg<u32, _TAPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPS;
    #[doc = "`read()` method returns [taps::R](taps::R) reader structure"]
    impl crate::Readable for TAPS {}
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod taps {
        #[doc = "Reader of register TAPS"]
        pub type R = crate::R<u32, super::TAPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbps](tbps) module"]
    pub type TBPS = crate::Reg<u32, _TBPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPS;
    #[doc = "`read()` method returns [tbps::R](tbps::R) reader structure"]
    impl crate::Readable for TBPS {}
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod tbps {
        #[doc = "Reader of register TBPS"]
        pub type R = crate::R<u32, super::TBPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapv](tapv) module"]
    pub type TAPV = crate::Reg<u32, _TAPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPV;
    #[doc = "`read()` method returns [tapv::R](tapv::R) reader structure"]
    impl crate::Readable for TAPV {}
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tapv {
        #[doc = "Reader of register TAPV"]
        pub type R = crate::R<u32, super::TAPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpv](tbpv) module"]
    pub type TBPV = crate::Reg<u32, _TBPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPV;
    #[doc = "`read()` method returns [tbpv::R](tbpv::R) reader structure"]
    impl crate::Readable for TBPV {}
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
    pub mod tbpv {
        #[doc = "Reader of register TBPV"]
        pub type R = crate::R<u32, super::TBPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaev](dmaev) module"]
    pub type DMAEV = crate::Reg<u32, _DMAEV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAEV;
    #[doc = "`read()` method returns [dmaev::R](dmaev::R) reader structure"]
    impl crate::Readable for DMAEV {}
    #[doc = "`write(|w| ..)` method takes [dmaev::W](dmaev::W) writer structure"]
    impl crate::Writable for DMAEV {}
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events."]
    pub mod dmaev {
        #[doc = "Reader of register DMAEV"]
        pub type R = crate::R<u32, super::DMAEV>;
        #[doc = "Writer for register DMAEV"]
        pub type W = crate::W<u32, super::DMAEV>;
        #[doc = "Register DMAEV `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAEV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBMDMAEN`"]
        pub type TBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMDMAEN`"]
        pub struct TBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEDMAEN`"]
        pub type CBEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEDMAEN`"]
        pub struct CBEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMDMAEN`"]
        pub type CBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMDMAEN`"]
        pub struct CBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTODMAEN`"]
        pub type TBTODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTODMAEN`"]
        pub struct TBTODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAMDMAEN`"]
        pub type TAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMDMAEN`"]
        pub struct TAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCDMAEN`"]
        pub type RTCDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCDMAEN`"]
        pub struct RTCDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEDMAEN`"]
        pub type CAEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEDMAEN`"]
        pub struct CAEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMDMAEN`"]
        pub type CAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMDMAEN`"]
        pub struct CAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATODMAEN`"]
        pub type TATODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATODMAEN`"]
        pub struct TATODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&self) -> TBMDMAEN_R {
                TBMDMAEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&self) -> CBEDMAEN_R {
                CBEDMAEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&self) -> CBMDMAEN_R {
                CBMDMAEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&self) -> TBTODMAEN_R {
                TBTODMAEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&self) -> TAMDMAEN_R {
                TAMDMAEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&self) -> RTCDMAEN_R {
                RTCDMAEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&self) -> CAEDMAEN_R {
                CAEDMAEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&self) -> CAMDMAEN_R {
                CAMDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&self) -> TATODMAEN_R {
                TATODMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&mut self) -> TBMDMAEN_W {
                TBMDMAEN_W { w: self }
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&mut self) -> CBEDMAEN_W {
                CBEDMAEN_W { w: self }
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&mut self) -> CBMDMAEN_W {
                CBMDMAEN_W { w: self }
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&mut self) -> TBTODMAEN_W {
                TBTODMAEN_W { w: self }
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&mut self) -> TAMDMAEN_W {
                TAMDMAEN_W { w: self }
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&mut self) -> RTCDMAEN_W {
                RTCDMAEN_W { w: self }
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&mut self) -> CAEDMAEN_W {
                CAEDMAEN_W { w: self }
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&mut self) -> CAMDMAEN_W {
                CAMDMAEN_W { w: self }
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&mut self) -> TATODMAEN_W {
                TATODMAEN_W { w: self }
            }
        }
    }
    #[doc = "Peripheral Version This register provides information regarding the GPT version\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [version](version) module"]
    pub type VERSION = crate::Reg<u32, _VERSION>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VERSION;
    #[doc = "`read()` method returns [version::R](version::R) reader structure"]
    impl crate::Readable for VERSION {}
    #[doc = "Peripheral Version This register provides information regarding the GPT version"]
    pub mod version {
        #[doc = "Reader of register VERSION"]
        pub type R = crate::R<u32, super::VERSION>;
        #[doc = "Reader of field `VERSION`"]
        pub type VERSION_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - VERSION"]
            #[inline(always)]
            pub fn version(&self) -> VERSION_R {
                VERSION_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [andccp](andccp) module"]
    pub type ANDCCP = crate::Reg<u32, _ANDCCP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANDCCP;
    #[doc = "`read()` method returns [andccp::R](andccp::R) reader structure"]
    impl crate::Readable for ANDCCP {}
    #[doc = "`write(|w| ..)` method takes [andccp::W](andccp::W) writer structure"]
    impl crate::Writable for ANDCCP {}
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
    pub mod andccp {
        #[doc = "Reader of register ANDCCP"]
        pub type R = crate::R<u32, super::ANDCCP>;
        #[doc = "Writer for register ANDCCP"]
        pub type W = crate::W<u32, super::ANDCCP>;
        #[doc = "Register ANDCCP `reset()`'s with value 0"]
        impl crate::ResetValue for super::ANDCCP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCP_AND_EN`"]
        pub type CCP_AND_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCP_AND_EN`"]
        pub struct CCP_AND_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCP_AND_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&self) -> CCP_AND_EN_R {
                CCP_AND_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&mut self) -> CCP_AND_EN_W {
                CCP_AND_EN_W { w: self }
            }
        }
    }
}
#[doc = "General Purpose Timer."]
pub struct GPT1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPT1 {}
impl GPT1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpt1::RegisterBlock {
        0x4001_1000 as *const _
    }
}
impl Deref for GPT1 {
    type Target = gpt1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPT1::ptr() }
    }
}
#[doc = "General Purpose Timer."]
pub mod gpt1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Configuration"]
        pub cfg: CFG,
        #[doc = "0x04 - Timer A Mode"]
        pub tamr: TAMR,
        #[doc = "0x08 - Timer B Mode"]
        pub tbmr: TBMR,
        #[doc = "0x0c - Control"]
        pub ctl: CTL,
        #[doc = "0x10 - Synch Register"]
        pub sync: SYNC,
        _reserved5: [u8; 4usize],
        #[doc = "0x18 - Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
        pub imr: IMR,
        #[doc = "0x1c - Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
        pub ris: RIS,
        #[doc = "0x20 - Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
        pub mis: MIS,
        #[doc = "0x24 - Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
        pub iclr: ICLR,
        #[doc = "0x28 - Timer A Interval Load Register"]
        pub tailr: TAILR,
        #[doc = "0x2c - Timer B Interval Load Register"]
        pub tbilr: TBILR,
        #[doc = "0x30 - Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
        pub tamatchr: TAMATCHR,
        #[doc = "0x34 - Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
        pub tbmatchr: TBMATCHR,
        #[doc = "0x38 - Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tapr: TAPR,
        #[doc = "0x3c - Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tbpr: TBPR,
        #[doc = "0x40 - Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
        pub tapmr: TAPMR,
        #[doc = "0x44 - Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
        pub tbpmr: TBPMR,
        #[doc = "0x48 - Timer A Register"]
        pub tar: TAR,
        #[doc = "0x4c - Timer B Register"]
        pub tbr: TBR,
        #[doc = "0x50 - Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
        pub tav: TAV,
        #[doc = "0x54 - Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tbv: TBV,
        #[doc = "0x58 - RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
        pub rtcpd: RTCPD,
        #[doc = "0x5c - Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub taps: TAPS,
        #[doc = "0x60 - Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub tbps: TBPS,
        #[doc = "0x64 - Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tapv: TAPV,
        #[doc = "0x68 - Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
        pub tbpv: TBPV,
        #[doc = "0x6c - DMA Event This register allows software to enable/disable GPT DMA trigger events."]
        pub dmaev: DMAEV,
        _reserved27: [u8; 3904usize],
        #[doc = "0xfb0 - Peripheral Version This register provides information regarding the GPT version"]
        pub version: VERSION,
        #[doc = "0xfb4 - Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
        pub andccp: ANDCCP,
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
    pub type CFG = crate::Reg<u32, _CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG;
    #[doc = "`read()` method returns [cfg::R](cfg::R) reader structure"]
    impl crate::Readable for CFG {}
    #[doc = "`write(|w| ..)` method takes [cfg::W](cfg::W) writer structure"]
    impl crate::Writable for CFG {}
    #[doc = "Configuration"]
    pub mod cfg {
        #[doc = "Reader of register CFG"]
        pub type R = crate::R<u32, super::CFG>;
        #[doc = "Writer for register CFG"]
        pub type W = crate::W<u32, super::CFG>;
        #[doc = "Register CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Timer A Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamr](tamr) module"]
    pub type TAMR = crate::Reg<u32, _TAMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMR;
    #[doc = "`read()` method returns [tamr::R](tamr::R) reader structure"]
    impl crate::Readable for TAMR {}
    #[doc = "`write(|w| ..)` method takes [tamr::W](tamr::W) writer structure"]
    impl crate::Writable for TAMR {}
    #[doc = "Timer A Mode"]
    pub mod tamr {
        #[doc = "Reader of register TAMR"]
        pub type R = crate::R<u32, super::TAMR>;
        #[doc = "Writer for register TAMR"]
        pub type W = crate::W<u32, super::TAMR>;
        #[doc = "Register TAMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TACINTD`"]
        pub type TACINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACINTD`"]
        pub struct TACINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TAPLO`"]
        pub type TAPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPLO`"]
        pub struct TAPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TAMRSU`"]
        pub type TAMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMRSU`"]
        pub struct TAMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWMIE`"]
        pub type TAPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWMIE`"]
        pub struct TAPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TAILD`"]
        pub type TAILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAILD`"]
        pub struct TAILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TASNAPS`"]
        pub type TASNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASNAPS`"]
        pub struct TASNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TAWOT`"]
        pub type TAWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAWOT`"]
        pub struct TAWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIE`"]
        pub type TAMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIE`"]
        pub struct TAMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TACDIR`"]
        pub type TACDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACDIR`"]
        pub struct TACDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAAMS`"]
        pub type TAAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAAMS`"]
        pub struct TAAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TACM`"]
        pub type TACM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACM`"]
        pub struct TACM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TAMR`"]
        pub type TAMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMR`"]
        pub struct TAMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&self) -> TACINTD_R {
                TACINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&self) -> TAPLO_R {
                TAPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&self) -> TAMRSU_R {
                TAMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&self) -> TAPWMIE_R {
                TAPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&self) -> TAILD_R {
                TAILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&self) -> TASNAPS_R {
                TASNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&self) -> TAWOT_R {
                TAWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&self) -> TAMIE_R {
                TAMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&self) -> TACDIR_R {
                TACDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&self) -> TAAMS_R {
                TAAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&self) -> TACM_R {
                TACM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&self) -> TAMR_R {
                TAMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&mut self) -> TACINTD_W {
                TACINTD_W { w: self }
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&mut self) -> TAPLO_W {
                TAPLO_W { w: self }
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&mut self) -> TAMRSU_W {
                TAMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&mut self) -> TAPWMIE_W {
                TAPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&mut self) -> TAILD_W {
                TAILD_W { w: self }
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&mut self) -> TASNAPS_W {
                TASNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&mut self) -> TAWOT_W {
                TAWOT_W { w: self }
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&mut self) -> TAMIE_W {
                TAMIE_W { w: self }
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&mut self) -> TACDIR_W {
                TACDIR_W { w: self }
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&mut self) -> TAAMS_W {
                TAAMS_W { w: self }
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&mut self) -> TACM_W {
                TACM_W { w: self }
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&mut self) -> TAMR_W {
                TAMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmr](tbmr) module"]
    pub type TBMR = crate::Reg<u32, _TBMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMR;
    #[doc = "`read()` method returns [tbmr::R](tbmr::R) reader structure"]
    impl crate::Readable for TBMR {}
    #[doc = "`write(|w| ..)` method takes [tbmr::W](tbmr::W) writer structure"]
    impl crate::Writable for TBMR {}
    #[doc = "Timer B Mode"]
    pub mod tbmr {
        #[doc = "Reader of register TBMR"]
        pub type R = crate::R<u32, super::TBMR>;
        #[doc = "Writer for register TBMR"]
        pub type W = crate::W<u32, super::TBMR>;
        #[doc = "Register TBMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBCINTD`"]
        pub type TBCINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCINTD`"]
        pub struct TBCINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TBPLO`"]
        pub type TBPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPLO`"]
        pub struct TBPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TBMRSU`"]
        pub type TBMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMRSU`"]
        pub struct TBMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBPWMIE`"]
        pub type TBPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWMIE`"]
        pub struct TBPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBILD`"]
        pub type TBILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBILD`"]
        pub struct TBILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TBSNAPS`"]
        pub type TBSNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSNAPS`"]
        pub struct TBSNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TBWOT`"]
        pub type TBWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBWOT`"]
        pub struct TBWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIE`"]
        pub type TBMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIE`"]
        pub struct TBMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TBCDIR`"]
        pub type TBCDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCDIR`"]
        pub struct TBCDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TBAMS`"]
        pub type TBAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBAMS`"]
        pub struct TBAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TBCM`"]
        pub type TBCM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCM`"]
        pub struct TBCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TBMR`"]
        pub type TBMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBMR`"]
        pub struct TBMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&self) -> TBCINTD_R {
                TBCINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&self) -> TBPLO_R {
                TBPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&self) -> TBMRSU_R {
                TBMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&self) -> TBPWMIE_R {
                TBPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&self) -> TBILD_R {
                TBILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&self) -> TBSNAPS_R {
                TBSNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&self) -> TBWOT_R {
                TBWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&self) -> TBMIE_R {
                TBMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&self) -> TBCDIR_R {
                TBCDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&self) -> TBAMS_R {
                TBAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&self) -> TBCM_R {
                TBCM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&self) -> TBMR_R {
                TBMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&mut self) -> TBCINTD_W {
                TBCINTD_W { w: self }
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&mut self) -> TBPLO_W {
                TBPLO_W { w: self }
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&mut self) -> TBMRSU_W {
                TBMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&mut self) -> TBPWMIE_W {
                TBPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&mut self) -> TBILD_W {
                TBILD_W { w: self }
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&mut self) -> TBSNAPS_W {
                TBSNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&mut self) -> TBWOT_W {
                TBWOT_W { w: self }
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&mut self) -> TBMIE_W {
                TBMIE_W { w: self }
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&mut self) -> TBCDIR_W {
                TBCDIR_W { w: self }
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&mut self) -> TBAMS_W {
                TBAMS_W { w: self }
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&mut self) -> TBCM_W {
                TBCM_W { w: self }
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&mut self) -> TBMR_W {
                TBMR_W { w: self }
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPWML`"]
        pub type TBPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWML`"]
        pub struct TBPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TBEVENT`"]
        pub type TBEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBEVENT`"]
        pub struct TBEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBSTALL`"]
        pub type TBSTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSTALL`"]
        pub struct TBSTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBEN`"]
        pub type TBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBEN`"]
        pub struct TBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWML`"]
        pub type TAPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWML`"]
        pub struct TAPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAEVENT`"]
        pub type TAEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAEVENT`"]
        pub struct TAEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TASTALL`"]
        pub type TASTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASTALL`"]
        pub struct TASTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAEN`"]
        pub type TAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAEN`"]
        pub struct TAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&self) -> TBPWML_R {
                TBPWML_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&self) -> TBEVENT_R {
                TBEVENT_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&self) -> TBSTALL_R {
                TBSTALL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&self) -> TBEN_R {
                TBEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&self) -> TAPWML_R {
                TAPWML_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&self) -> TAEVENT_R {
                TAEVENT_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&self) -> TASTALL_R {
                TASTALL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&self) -> TAEN_R {
                TAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&mut self) -> TBPWML_W {
                TBPWML_W { w: self }
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&mut self) -> TBEVENT_W {
                TBEVENT_W { w: self }
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&mut self) -> TBSTALL_W {
                TBSTALL_W { w: self }
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&mut self) -> TBEN_W {
                TBEN_W { w: self }
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&mut self) -> TAPWML_W {
                TAPWML_W { w: self }
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&mut self) -> TAEVENT_W {
                TAEVENT_W { w: self }
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&mut self) -> TASTALL_W {
                TASTALL_W { w: self }
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&mut self) -> TAEN_W {
                TAEN_W { w: self }
            }
        }
    }
    #[doc = "Synch Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "Synch Register"]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYNC3`"]
        pub type SYNC3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC3`"]
        pub struct SYNC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC2`"]
        pub type SYNC2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC2`"]
        pub struct SYNC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC1`"]
        pub type SYNC1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC1`"]
        pub struct SYNC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC0`"]
        pub type SYNC0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC0`"]
        pub struct SYNC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&self) -> SYNC3_R {
                SYNC3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&self) -> SYNC2_R {
                SYNC2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&self) -> SYNC1_R {
                SYNC1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&self) -> SYNC0_R {
                SYNC0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&mut self) -> SYNC3_W {
                SYNC3_W { w: self }
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&mut self) -> SYNC2_W {
                SYNC2_W { w: self }
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&mut self) -> SYNC1_W {
                SYNC1_W { w: self }
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&mut self) -> SYNC0_W {
                SYNC0_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr](imr) module"]
    pub type IMR = crate::Reg<u32, _IMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR;
    #[doc = "`read()` method returns [imr::R](imr::R) reader structure"]
    impl crate::Readable for IMR {}
    #[doc = "`write(|w| ..)` method takes [imr::W](imr::W) writer structure"]
    impl crate::Writable for IMR {}
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
    pub mod imr {
        #[doc = "Reader of register IMR"]
        pub type R = crate::R<u32, super::IMR>;
        #[doc = "Writer for register IMR"]
        pub type W = crate::W<u32, super::IMR>;
        #[doc = "Register IMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUMIS`"]
        pub struct WUMIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUMIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABIM`"]
        pub type DMABIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABIM`"]
        pub struct DMABIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIM`"]
        pub type TBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIM`"]
        pub struct TBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEIM`"]
        pub type CBEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEIM`"]
        pub struct CBEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMIM`"]
        pub type CBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMIM`"]
        pub struct CBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOIM`"]
        pub type TBTOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOIM`"]
        pub struct TBTOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAIM`"]
        pub type DMAAIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAIM`"]
        pub struct DMAAIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIM`"]
        pub type TAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIM`"]
        pub struct TAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCIM`"]
        pub type RTCIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCIM`"]
        pub struct RTCIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEIM`"]
        pub type CAEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEIM`"]
        pub struct CAEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMIM`"]
        pub type CAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMIM`"]
        pub struct CAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOIM`"]
        pub type TATOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOIM`"]
        pub struct TATOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&self) -> DMABIM_R {
                DMABIM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&self) -> TBMIM_R {
                TBMIM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&self) -> CBEIM_R {
                CBEIM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&self) -> CBMIM_R {
                CBMIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&self) -> TBTOIM_R {
                TBTOIM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&self) -> DMAAIM_R {
                DMAAIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&self) -> TAMIM_R {
                TAMIM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&self) -> RTCIM_R {
                RTCIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&self) -> CAEIM_R {
                CAEIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&self) -> CAMIM_R {
                CAMIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&self) -> TATOIM_R {
                TATOIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&mut self) -> WUMIS_W {
                WUMIS_W { w: self }
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&mut self) -> DMABIM_W {
                DMABIM_W { w: self }
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&mut self) -> TBMIM_W {
                TBMIM_W { w: self }
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&mut self) -> CBEIM_W {
                CBEIM_W { w: self }
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&mut self) -> CBMIM_W {
                CBMIM_W { w: self }
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&mut self) -> TBTOIM_W {
                TBTOIM_W { w: self }
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&mut self) -> DMAAIM_W {
                DMAAIM_W { w: self }
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&mut self) -> TAMIM_W {
                TAMIM_W { w: self }
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&mut self) -> RTCIM_W {
                RTCIM_W { w: self }
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&mut self) -> CAEIM_W {
                CAEIM_W { w: self }
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&mut self) -> CAMIM_W {
                CAMIM_W { w: self }
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&mut self) -> TATOIM_W {
                TATOIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `WURIS`"]
        pub type WURIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABRIS`"]
        pub type DMABRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMRIS`"]
        pub type TBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBERIS`"]
        pub type CBERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMRIS`"]
        pub type CBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTORIS`"]
        pub type TBTORIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAARIS`"]
        pub type DMAARIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMRIS`"]
        pub type TAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCRIS`"]
        pub type RTCRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAERIS`"]
        pub type CAERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMRIS`"]
        pub type CAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATORIS`"]
        pub type TATORIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WURIS"]
            #[inline(always)]
            pub fn wuris(&self) -> WURIS_R {
                WURIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABRIS"]
            #[inline(always)]
            pub fn dmabris(&self) -> DMABRIS_R {
                DMABRIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMRIS"]
            #[inline(always)]
            pub fn tbmris(&self) -> TBMRIS_R {
                TBMRIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBERIS"]
            #[inline(always)]
            pub fn cberis(&self) -> CBERIS_R {
                CBERIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMRIS"]
            #[inline(always)]
            pub fn cbmris(&self) -> CBMRIS_R {
                CBMRIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTORIS"]
            #[inline(always)]
            pub fn tbtoris(&self) -> TBTORIS_R {
                TBTORIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAARIS"]
            #[inline(always)]
            pub fn dmaaris(&self) -> DMAARIS_R {
                DMAARIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMRIS"]
            #[inline(always)]
            pub fn tamris(&self) -> TAMRIS_R {
                TAMRIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCRIS"]
            #[inline(always)]
            pub fn rtcris(&self) -> RTCRIS_R {
                RTCRIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAERIS"]
            #[inline(always)]
            pub fn caeris(&self) -> CAERIS_R {
                CAERIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMRIS"]
            #[inline(always)]
            pub fn camris(&self) -> CAMRIS_R {
                CAMRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATORIS"]
            #[inline(always)]
            pub fn tatoris(&self) -> TATORIS_R {
                TATORIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABMIS`"]
        pub type DMABMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMMIS`"]
        pub type TBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBEMIS`"]
        pub type CBEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMMIS`"]
        pub type CBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTOMIS`"]
        pub type TBTOMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAAMIS`"]
        pub type DMAAMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMMIS`"]
        pub type TAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCMIS`"]
        pub type RTCMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAEMIS`"]
        pub type CAEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMMIS`"]
        pub type CAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATOMIS`"]
        pub type TATOMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABMIS"]
            #[inline(always)]
            pub fn dmabmis(&self) -> DMABMIS_R {
                DMABMIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMMIS"]
            #[inline(always)]
            pub fn tbmmis(&self) -> TBMMIS_R {
                TBMMIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEMIS"]
            #[inline(always)]
            pub fn cbemis(&self) -> CBEMIS_R {
                CBEMIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMMIS"]
            #[inline(always)]
            pub fn cbmmis(&self) -> CBMMIS_R {
                CBMMIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOMIS"]
            #[inline(always)]
            pub fn tbtomis(&self) -> TBTOMIS_R {
                TBTOMIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAMIS"]
            #[inline(always)]
            pub fn dmaamis(&self) -> DMAAMIS_R {
                DMAAMIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMMIS"]
            #[inline(always)]
            pub fn tammis(&self) -> TAMMIS_R {
                TAMMIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCMIS"]
            #[inline(always)]
            pub fn rtcmis(&self) -> RTCMIS_R {
                RTCMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEMIS"]
            #[inline(always)]
            pub fn caemis(&self) -> CAEMIS_R {
                CAEMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMMIS"]
            #[inline(always)]
            pub fn cammis(&self) -> CAMMIS_R {
                CAMMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOMIS"]
            #[inline(always)]
            pub fn tatomis(&self) -> TATOMIS_R {
                TATOMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iclr](iclr) module"]
    pub type ICLR = crate::Reg<u32, _ICLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICLR;
    #[doc = "`read()` method returns [iclr::R](iclr::R) reader structure"]
    impl crate::Readable for ICLR {}
    #[doc = "`write(|w| ..)` method takes [iclr::W](iclr::W) writer structure"]
    impl crate::Writable for ICLR {}
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
    pub mod iclr {
        #[doc = "Reader of register ICLR"]
        pub type R = crate::R<u32, super::ICLR>;
        #[doc = "Writer for register ICLR"]
        pub type W = crate::W<u32, super::ICLR>;
        #[doc = "Register ICLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUECINT`"]
        pub type WUECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUECINT`"]
        pub struct WUECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABINT`"]
        pub type DMABINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABINT`"]
        pub struct DMABINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMCINT`"]
        pub type TBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMCINT`"]
        pub struct TBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBECINT`"]
        pub type CBECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBECINT`"]
        pub struct CBECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMCINT`"]
        pub type CBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMCINT`"]
        pub struct CBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOCINT`"]
        pub type TBTOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOCINT`"]
        pub struct TBTOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAINT`"]
        pub type DMAAINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAINT`"]
        pub struct DMAAINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMCINT`"]
        pub type TAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMCINT`"]
        pub struct TAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCCINT`"]
        pub type RTCCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCCINT`"]
        pub struct RTCCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAECINT`"]
        pub type CAECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAECINT`"]
        pub struct CAECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMCINT`"]
        pub type CAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMCINT`"]
        pub struct CAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOCINT`"]
        pub type TATOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOCINT`"]
        pub struct TATOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&self) -> WUECINT_R {
                WUECINT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&self) -> DMABINT_R {
                DMABINT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&self) -> TBMCINT_R {
                TBMCINT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&self) -> CBECINT_R {
                CBECINT_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&self) -> CBMCINT_R {
                CBMCINT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&self) -> TBTOCINT_R {
                TBTOCINT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&self) -> DMAAINT_R {
                DMAAINT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&self) -> TAMCINT_R {
                TAMCINT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&self) -> RTCCINT_R {
                RTCCINT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&self) -> CAECINT_R {
                CAECINT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&self) -> CAMCINT_R {
                CAMCINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&self) -> TATOCINT_R {
                TATOCINT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&mut self) -> WUECINT_W {
                WUECINT_W { w: self }
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&mut self) -> DMABINT_W {
                DMABINT_W { w: self }
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&mut self) -> TBMCINT_W {
                TBMCINT_W { w: self }
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&mut self) -> CBECINT_W {
                CBECINT_W { w: self }
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&mut self) -> CBMCINT_W {
                CBMCINT_W { w: self }
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&mut self) -> TBTOCINT_W {
                TBTOCINT_W { w: self }
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&mut self) -> DMAAINT_W {
                DMAAINT_W { w: self }
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&mut self) -> TAMCINT_W {
                TAMCINT_W { w: self }
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&mut self) -> RTCCINT_W {
                RTCCINT_W { w: self }
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&mut self) -> CAECINT_W {
                CAECINT_W { w: self }
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&mut self) -> CAMCINT_W {
                CAMCINT_W { w: self }
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&mut self) -> TATOCINT_W {
                TATOCINT_W { w: self }
            }
        }
    }
    #[doc = "Timer A Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tailr](tailr) module"]
    pub type TAILR = crate::Reg<u32, _TAILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAILR;
    #[doc = "`read()` method returns [tailr::R](tailr::R) reader structure"]
    impl crate::Readable for TAILR {}
    #[doc = "`write(|w| ..)` method takes [tailr::W](tailr::W) writer structure"]
    impl crate::Writable for TAILR {}
    #[doc = "Timer A Interval Load Register"]
    pub mod tailr {
        #[doc = "Reader of register TAILR"]
        pub type R = crate::R<u32, super::TAILR>;
        #[doc = "Writer for register TAILR"]
        pub type W = crate::W<u32, super::TAILR>;
        #[doc = "Register TAILR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAILR`"]
        pub type TAILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAILR`"]
        pub struct TAILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&self) -> TAILR_R {
                TAILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&mut self) -> TAILR_W {
                TAILR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbilr](tbilr) module"]
    pub type TBILR = crate::Reg<u32, _TBILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBILR;
    #[doc = "`read()` method returns [tbilr::R](tbilr::R) reader structure"]
    impl crate::Readable for TBILR {}
    #[doc = "`write(|w| ..)` method takes [tbilr::W](tbilr::W) writer structure"]
    impl crate::Writable for TBILR {}
    #[doc = "Timer B Interval Load Register"]
    pub mod tbilr {
        #[doc = "Reader of register TBILR"]
        pub type R = crate::R<u32, super::TBILR>;
        #[doc = "Writer for register TBILR"]
        pub type W = crate::W<u32, super::TBILR>;
        #[doc = "Register TBILR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBILR`"]
        pub type TBILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBILR`"]
        pub struct TBILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&self) -> TBILR_R {
                TBILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&mut self) -> TBILR_W {
                TBILR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamatchr](tamatchr) module"]
    pub type TAMATCHR = crate::Reg<u32, _TAMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMATCHR;
    #[doc = "`read()` method returns [tamatchr::R](tamatchr::R) reader structure"]
    impl crate::Readable for TAMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tamatchr::W](tamatchr::W) writer structure"]
    impl crate::Writable for TAMATCHR {}
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
    pub mod tamatchr {
        #[doc = "Reader of register TAMATCHR"]
        pub type R = crate::R<u32, super::TAMATCHR>;
        #[doc = "Writer for register TAMATCHR"]
        pub type W = crate::W<u32, super::TAMATCHR>;
        #[doc = "Register TAMATCHR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAMATCHR`"]
        pub type TAMATCHR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAMATCHR`"]
        pub struct TAMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&self) -> TAMATCHR_R {
                TAMATCHR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&mut self) -> TAMATCHR_W {
                TAMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmatchr](tbmatchr) module"]
    pub type TBMATCHR = crate::Reg<u32, _TBMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMATCHR;
    #[doc = "`read()` method returns [tbmatchr::R](tbmatchr::R) reader structure"]
    impl crate::Readable for TBMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tbmatchr::W](tbmatchr::W) writer structure"]
    impl crate::Writable for TBMATCHR {}
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
    pub mod tbmatchr {
        #[doc = "Reader of register TBMATCHR"]
        pub type R = crate::R<u32, super::TBMATCHR>;
        #[doc = "Writer for register TBMATCHR"]
        pub type W = crate::W<u32, super::TBMATCHR>;
        #[doc = "Register TBMATCHR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBMATCHR`"]
        pub type TBMATCHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TBMATCHR`"]
        pub struct TBMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&self) -> TBMATCHR_R {
                TBMATCHR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&mut self) -> TBMATCHR_W {
                TBMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapr](tapr) module"]
    pub type TAPR = crate::Reg<u32, _TAPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPR;
    #[doc = "`read()` method returns [tapr::R](tapr::R) reader structure"]
    impl crate::Readable for TAPR {}
    #[doc = "`write(|w| ..)` method takes [tapr::W](tapr::W) writer structure"]
    impl crate::Writable for TAPR {}
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tapr {
        #[doc = "Reader of register TAPR"]
        pub type R = crate::R<u32, super::TAPR>;
        #[doc = "Writer for register TAPR"]
        pub type W = crate::W<u32, super::TAPR>;
        #[doc = "Register TAPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSR`"]
        pub type TAPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSR`"]
        pub struct TAPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&self) -> TAPSR_R {
                TAPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&mut self) -> TAPSR_W {
                TAPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpr](tbpr) module"]
    pub type TBPR = crate::Reg<u32, _TBPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPR;
    #[doc = "`read()` method returns [tbpr::R](tbpr::R) reader structure"]
    impl crate::Readable for TBPR {}
    #[doc = "`write(|w| ..)` method takes [tbpr::W](tbpr::W) writer structure"]
    impl crate::Writable for TBPR {}
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tbpr {
        #[doc = "Reader of register TBPR"]
        pub type R = crate::R<u32, super::TBPR>;
        #[doc = "Writer for register TBPR"]
        pub type W = crate::W<u32, super::TBPR>;
        #[doc = "Register TBPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSR`"]
        pub type TBPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSR`"]
        pub struct TBPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&self) -> TBPSR_R {
                TBPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&mut self) -> TBPSR_W {
                TBPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapmr](tapmr) module"]
    pub type TAPMR = crate::Reg<u32, _TAPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPMR;
    #[doc = "`read()` method returns [tapmr::R](tapmr::R) reader structure"]
    impl crate::Readable for TAPMR {}
    #[doc = "`write(|w| ..)` method takes [tapmr::W](tapmr::W) writer structure"]
    impl crate::Writable for TAPMR {}
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
    pub mod tapmr {
        #[doc = "Reader of register TAPMR"]
        pub type R = crate::R<u32, super::TAPMR>;
        #[doc = "Writer for register TAPMR"]
        pub type W = crate::W<u32, super::TAPMR>;
        #[doc = "Register TAPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSMR`"]
        pub type TAPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSMR`"]
        pub struct TAPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&self) -> TAPSMR_R {
                TAPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&mut self) -> TAPSMR_W {
                TAPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpmr](tbpmr) module"]
    pub type TBPMR = crate::Reg<u32, _TBPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPMR;
    #[doc = "`read()` method returns [tbpmr::R](tbpmr::R) reader structure"]
    impl crate::Readable for TBPMR {}
    #[doc = "`write(|w| ..)` method takes [tbpmr::W](tbpmr::W) writer structure"]
    impl crate::Writable for TBPMR {}
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
    pub mod tbpmr {
        #[doc = "Reader of register TBPMR"]
        pub type R = crate::R<u32, super::TBPMR>;
        #[doc = "Writer for register TBPMR"]
        pub type W = crate::W<u32, super::TBPMR>;
        #[doc = "Register TBPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSMR`"]
        pub type TBPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSMR`"]
        pub struct TBPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&self) -> TBPSMR_R {
                TBPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&mut self) -> TBPSMR_W {
                TBPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tar](tar) module"]
    pub type TAR = crate::Reg<u32, _TAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAR;
    #[doc = "`read()` method returns [tar::R](tar::R) reader structure"]
    impl crate::Readable for TAR {}
    #[doc = "Timer A Register"]
    pub mod tar {
        #[doc = "Reader of register TAR"]
        pub type R = crate::R<u32, super::TAR>;
        #[doc = "Reader of field `TAR`"]
        pub type TAR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TAR"]
            #[inline(always)]
            pub fn tar(&self) -> TAR_R {
                TAR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer B Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbr](tbr) module"]
    pub type TBR = crate::Reg<u32, _TBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBR;
    #[doc = "`read()` method returns [tbr::R](tbr::R) reader structure"]
    impl crate::Readable for TBR {}
    #[doc = "Timer B Register"]
    pub mod tbr {
        #[doc = "Reader of register TBR"]
        pub type R = crate::R<u32, super::TBR>;
        #[doc = "Reader of field `TBR`"]
        pub type TBR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TBR"]
            #[inline(always)]
            pub fn tbr(&self) -> TBR_R {
                TBR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tav](tav) module"]
    pub type TAV = crate::Reg<u32, _TAV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAV;
    #[doc = "`read()` method returns [tav::R](tav::R) reader structure"]
    impl crate::Readable for TAV {}
    #[doc = "`write(|w| ..)` method takes [tav::W](tav::W) writer structure"]
    impl crate::Writable for TAV {}
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
    pub mod tav {
        #[doc = "Reader of register TAV"]
        pub type R = crate::R<u32, super::TAV>;
        #[doc = "Writer for register TAV"]
        pub type W = crate::W<u32, super::TAV>;
        #[doc = "Register TAV `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAV`"]
        pub type TAV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAV`"]
        pub struct TAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&self) -> TAV_R {
                TAV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&mut self) -> TAV_W {
                TAV_W { w: self }
            }
        }
    }
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbv](tbv) module"]
    pub type TBV = crate::Reg<u32, _TBV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBV;
    #[doc = "`read()` method returns [tbv::R](tbv::R) reader structure"]
    impl crate::Readable for TBV {}
    #[doc = "`write(|w| ..)` method takes [tbv::W](tbv::W) writer structure"]
    impl crate::Writable for TBV {}
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tbv {
        #[doc = "Reader of register TBV"]
        pub type R = crate::R<u32, super::TBV>;
        #[doc = "Writer for register TBV"]
        pub type W = crate::W<u32, super::TBV>;
        #[doc = "Register TBV `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBV`"]
        pub type TBV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBV`"]
        pub struct TBV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&self) -> TBV_R {
                TBV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&mut self) -> TBV_W {
                TBV_W { w: self }
            }
        }
    }
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcpd](rtcpd) module"]
    pub type RTCPD = crate::Reg<u32, _RTCPD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCPD;
    #[doc = "`read()` method returns [rtcpd::R](rtcpd::R) reader structure"]
    impl crate::Readable for RTCPD {}
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
    pub mod rtcpd {
        #[doc = "Reader of register RTCPD"]
        pub type R = crate::R<u32, super::RTCPD>;
        #[doc = "Reader of field `RTCPD`"]
        pub type RTCPD_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTCPD"]
            #[inline(always)]
            pub fn rtcpd(&self) -> RTCPD_R {
                RTCPD_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taps](taps) module"]
    pub type TAPS = crate::Reg<u32, _TAPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPS;
    #[doc = "`read()` method returns [taps::R](taps::R) reader structure"]
    impl crate::Readable for TAPS {}
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod taps {
        #[doc = "Reader of register TAPS"]
        pub type R = crate::R<u32, super::TAPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbps](tbps) module"]
    pub type TBPS = crate::Reg<u32, _TBPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPS;
    #[doc = "`read()` method returns [tbps::R](tbps::R) reader structure"]
    impl crate::Readable for TBPS {}
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod tbps {
        #[doc = "Reader of register TBPS"]
        pub type R = crate::R<u32, super::TBPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapv](tapv) module"]
    pub type TAPV = crate::Reg<u32, _TAPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPV;
    #[doc = "`read()` method returns [tapv::R](tapv::R) reader structure"]
    impl crate::Readable for TAPV {}
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tapv {
        #[doc = "Reader of register TAPV"]
        pub type R = crate::R<u32, super::TAPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpv](tbpv) module"]
    pub type TBPV = crate::Reg<u32, _TBPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPV;
    #[doc = "`read()` method returns [tbpv::R](tbpv::R) reader structure"]
    impl crate::Readable for TBPV {}
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
    pub mod tbpv {
        #[doc = "Reader of register TBPV"]
        pub type R = crate::R<u32, super::TBPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaev](dmaev) module"]
    pub type DMAEV = crate::Reg<u32, _DMAEV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAEV;
    #[doc = "`read()` method returns [dmaev::R](dmaev::R) reader structure"]
    impl crate::Readable for DMAEV {}
    #[doc = "`write(|w| ..)` method takes [dmaev::W](dmaev::W) writer structure"]
    impl crate::Writable for DMAEV {}
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events."]
    pub mod dmaev {
        #[doc = "Reader of register DMAEV"]
        pub type R = crate::R<u32, super::DMAEV>;
        #[doc = "Writer for register DMAEV"]
        pub type W = crate::W<u32, super::DMAEV>;
        #[doc = "Register DMAEV `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAEV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBMDMAEN`"]
        pub type TBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMDMAEN`"]
        pub struct TBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEDMAEN`"]
        pub type CBEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEDMAEN`"]
        pub struct CBEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMDMAEN`"]
        pub type CBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMDMAEN`"]
        pub struct CBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTODMAEN`"]
        pub type TBTODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTODMAEN`"]
        pub struct TBTODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAMDMAEN`"]
        pub type TAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMDMAEN`"]
        pub struct TAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCDMAEN`"]
        pub type RTCDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCDMAEN`"]
        pub struct RTCDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEDMAEN`"]
        pub type CAEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEDMAEN`"]
        pub struct CAEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMDMAEN`"]
        pub type CAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMDMAEN`"]
        pub struct CAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATODMAEN`"]
        pub type TATODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATODMAEN`"]
        pub struct TATODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&self) -> TBMDMAEN_R {
                TBMDMAEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&self) -> CBEDMAEN_R {
                CBEDMAEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&self) -> CBMDMAEN_R {
                CBMDMAEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&self) -> TBTODMAEN_R {
                TBTODMAEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&self) -> TAMDMAEN_R {
                TAMDMAEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&self) -> RTCDMAEN_R {
                RTCDMAEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&self) -> CAEDMAEN_R {
                CAEDMAEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&self) -> CAMDMAEN_R {
                CAMDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&self) -> TATODMAEN_R {
                TATODMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&mut self) -> TBMDMAEN_W {
                TBMDMAEN_W { w: self }
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&mut self) -> CBEDMAEN_W {
                CBEDMAEN_W { w: self }
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&mut self) -> CBMDMAEN_W {
                CBMDMAEN_W { w: self }
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&mut self) -> TBTODMAEN_W {
                TBTODMAEN_W { w: self }
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&mut self) -> TAMDMAEN_W {
                TAMDMAEN_W { w: self }
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&mut self) -> RTCDMAEN_W {
                RTCDMAEN_W { w: self }
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&mut self) -> CAEDMAEN_W {
                CAEDMAEN_W { w: self }
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&mut self) -> CAMDMAEN_W {
                CAMDMAEN_W { w: self }
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&mut self) -> TATODMAEN_W {
                TATODMAEN_W { w: self }
            }
        }
    }
    #[doc = "Peripheral Version This register provides information regarding the GPT version\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [version](version) module"]
    pub type VERSION = crate::Reg<u32, _VERSION>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VERSION;
    #[doc = "`read()` method returns [version::R](version::R) reader structure"]
    impl crate::Readable for VERSION {}
    #[doc = "Peripheral Version This register provides information regarding the GPT version"]
    pub mod version {
        #[doc = "Reader of register VERSION"]
        pub type R = crate::R<u32, super::VERSION>;
        #[doc = "Reader of field `VERSION`"]
        pub type VERSION_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - VERSION"]
            #[inline(always)]
            pub fn version(&self) -> VERSION_R {
                VERSION_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [andccp](andccp) module"]
    pub type ANDCCP = crate::Reg<u32, _ANDCCP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANDCCP;
    #[doc = "`read()` method returns [andccp::R](andccp::R) reader structure"]
    impl crate::Readable for ANDCCP {}
    #[doc = "`write(|w| ..)` method takes [andccp::W](andccp::W) writer structure"]
    impl crate::Writable for ANDCCP {}
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
    pub mod andccp {
        #[doc = "Reader of register ANDCCP"]
        pub type R = crate::R<u32, super::ANDCCP>;
        #[doc = "Writer for register ANDCCP"]
        pub type W = crate::W<u32, super::ANDCCP>;
        #[doc = "Register ANDCCP `reset()`'s with value 0"]
        impl crate::ResetValue for super::ANDCCP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCP_AND_EN`"]
        pub type CCP_AND_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCP_AND_EN`"]
        pub struct CCP_AND_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCP_AND_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&self) -> CCP_AND_EN_R {
                CCP_AND_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&mut self) -> CCP_AND_EN_W {
                CCP_AND_EN_W { w: self }
            }
        }
    }
}
#[doc = "General Purpose Timer."]
pub struct GPT2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPT2 {}
impl GPT2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpt2::RegisterBlock {
        0x4001_2000 as *const _
    }
}
impl Deref for GPT2 {
    type Target = gpt2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPT2::ptr() }
    }
}
#[doc = "General Purpose Timer."]
pub mod gpt2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Configuration"]
        pub cfg: CFG,
        #[doc = "0x04 - Timer A Mode"]
        pub tamr: TAMR,
        #[doc = "0x08 - Timer B Mode"]
        pub tbmr: TBMR,
        #[doc = "0x0c - Control"]
        pub ctl: CTL,
        #[doc = "0x10 - Synch Register"]
        pub sync: SYNC,
        _reserved5: [u8; 4usize],
        #[doc = "0x18 - Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
        pub imr: IMR,
        #[doc = "0x1c - Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
        pub ris: RIS,
        #[doc = "0x20 - Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
        pub mis: MIS,
        #[doc = "0x24 - Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
        pub iclr: ICLR,
        #[doc = "0x28 - Timer A Interval Load Register"]
        pub tailr: TAILR,
        #[doc = "0x2c - Timer B Interval Load Register"]
        pub tbilr: TBILR,
        #[doc = "0x30 - Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
        pub tamatchr: TAMATCHR,
        #[doc = "0x34 - Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
        pub tbmatchr: TBMATCHR,
        #[doc = "0x38 - Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tapr: TAPR,
        #[doc = "0x3c - Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tbpr: TBPR,
        #[doc = "0x40 - Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
        pub tapmr: TAPMR,
        #[doc = "0x44 - Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
        pub tbpmr: TBPMR,
        #[doc = "0x48 - Timer A Register"]
        pub tar: TAR,
        #[doc = "0x4c - Timer B Register"]
        pub tbr: TBR,
        #[doc = "0x50 - Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
        pub tav: TAV,
        #[doc = "0x54 - Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tbv: TBV,
        #[doc = "0x58 - RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
        pub rtcpd: RTCPD,
        #[doc = "0x5c - Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub taps: TAPS,
        #[doc = "0x60 - Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub tbps: TBPS,
        #[doc = "0x64 - Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tapv: TAPV,
        #[doc = "0x68 - Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
        pub tbpv: TBPV,
        #[doc = "0x6c - DMA Event This register allows software to enable/disable GPT DMA trigger events."]
        pub dmaev: DMAEV,
        _reserved27: [u8; 3904usize],
        #[doc = "0xfb0 - Peripheral Version This register provides information regarding the GPT version"]
        pub version: VERSION,
        #[doc = "0xfb4 - Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
        pub andccp: ANDCCP,
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
    pub type CFG = crate::Reg<u32, _CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG;
    #[doc = "`read()` method returns [cfg::R](cfg::R) reader structure"]
    impl crate::Readable for CFG {}
    #[doc = "`write(|w| ..)` method takes [cfg::W](cfg::W) writer structure"]
    impl crate::Writable for CFG {}
    #[doc = "Configuration"]
    pub mod cfg {
        #[doc = "Reader of register CFG"]
        pub type R = crate::R<u32, super::CFG>;
        #[doc = "Writer for register CFG"]
        pub type W = crate::W<u32, super::CFG>;
        #[doc = "Register CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Timer A Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamr](tamr) module"]
    pub type TAMR = crate::Reg<u32, _TAMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMR;
    #[doc = "`read()` method returns [tamr::R](tamr::R) reader structure"]
    impl crate::Readable for TAMR {}
    #[doc = "`write(|w| ..)` method takes [tamr::W](tamr::W) writer structure"]
    impl crate::Writable for TAMR {}
    #[doc = "Timer A Mode"]
    pub mod tamr {
        #[doc = "Reader of register TAMR"]
        pub type R = crate::R<u32, super::TAMR>;
        #[doc = "Writer for register TAMR"]
        pub type W = crate::W<u32, super::TAMR>;
        #[doc = "Register TAMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TACINTD`"]
        pub type TACINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACINTD`"]
        pub struct TACINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TAPLO`"]
        pub type TAPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPLO`"]
        pub struct TAPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TAMRSU`"]
        pub type TAMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMRSU`"]
        pub struct TAMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWMIE`"]
        pub type TAPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWMIE`"]
        pub struct TAPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TAILD`"]
        pub type TAILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAILD`"]
        pub struct TAILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TASNAPS`"]
        pub type TASNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASNAPS`"]
        pub struct TASNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TAWOT`"]
        pub type TAWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAWOT`"]
        pub struct TAWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIE`"]
        pub type TAMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIE`"]
        pub struct TAMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TACDIR`"]
        pub type TACDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACDIR`"]
        pub struct TACDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAAMS`"]
        pub type TAAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAAMS`"]
        pub struct TAAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TACM`"]
        pub type TACM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACM`"]
        pub struct TACM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TAMR`"]
        pub type TAMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMR`"]
        pub struct TAMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&self) -> TACINTD_R {
                TACINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&self) -> TAPLO_R {
                TAPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&self) -> TAMRSU_R {
                TAMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&self) -> TAPWMIE_R {
                TAPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&self) -> TAILD_R {
                TAILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&self) -> TASNAPS_R {
                TASNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&self) -> TAWOT_R {
                TAWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&self) -> TAMIE_R {
                TAMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&self) -> TACDIR_R {
                TACDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&self) -> TAAMS_R {
                TAAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&self) -> TACM_R {
                TACM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&self) -> TAMR_R {
                TAMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&mut self) -> TACINTD_W {
                TACINTD_W { w: self }
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&mut self) -> TAPLO_W {
                TAPLO_W { w: self }
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&mut self) -> TAMRSU_W {
                TAMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&mut self) -> TAPWMIE_W {
                TAPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&mut self) -> TAILD_W {
                TAILD_W { w: self }
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&mut self) -> TASNAPS_W {
                TASNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&mut self) -> TAWOT_W {
                TAWOT_W { w: self }
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&mut self) -> TAMIE_W {
                TAMIE_W { w: self }
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&mut self) -> TACDIR_W {
                TACDIR_W { w: self }
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&mut self) -> TAAMS_W {
                TAAMS_W { w: self }
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&mut self) -> TACM_W {
                TACM_W { w: self }
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&mut self) -> TAMR_W {
                TAMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmr](tbmr) module"]
    pub type TBMR = crate::Reg<u32, _TBMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMR;
    #[doc = "`read()` method returns [tbmr::R](tbmr::R) reader structure"]
    impl crate::Readable for TBMR {}
    #[doc = "`write(|w| ..)` method takes [tbmr::W](tbmr::W) writer structure"]
    impl crate::Writable for TBMR {}
    #[doc = "Timer B Mode"]
    pub mod tbmr {
        #[doc = "Reader of register TBMR"]
        pub type R = crate::R<u32, super::TBMR>;
        #[doc = "Writer for register TBMR"]
        pub type W = crate::W<u32, super::TBMR>;
        #[doc = "Register TBMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBCINTD`"]
        pub type TBCINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCINTD`"]
        pub struct TBCINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TBPLO`"]
        pub type TBPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPLO`"]
        pub struct TBPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TBMRSU`"]
        pub type TBMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMRSU`"]
        pub struct TBMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBPWMIE`"]
        pub type TBPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWMIE`"]
        pub struct TBPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBILD`"]
        pub type TBILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBILD`"]
        pub struct TBILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TBSNAPS`"]
        pub type TBSNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSNAPS`"]
        pub struct TBSNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TBWOT`"]
        pub type TBWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBWOT`"]
        pub struct TBWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIE`"]
        pub type TBMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIE`"]
        pub struct TBMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TBCDIR`"]
        pub type TBCDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCDIR`"]
        pub struct TBCDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TBAMS`"]
        pub type TBAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBAMS`"]
        pub struct TBAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TBCM`"]
        pub type TBCM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCM`"]
        pub struct TBCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TBMR`"]
        pub type TBMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBMR`"]
        pub struct TBMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&self) -> TBCINTD_R {
                TBCINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&self) -> TBPLO_R {
                TBPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&self) -> TBMRSU_R {
                TBMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&self) -> TBPWMIE_R {
                TBPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&self) -> TBILD_R {
                TBILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&self) -> TBSNAPS_R {
                TBSNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&self) -> TBWOT_R {
                TBWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&self) -> TBMIE_R {
                TBMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&self) -> TBCDIR_R {
                TBCDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&self) -> TBAMS_R {
                TBAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&self) -> TBCM_R {
                TBCM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&self) -> TBMR_R {
                TBMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&mut self) -> TBCINTD_W {
                TBCINTD_W { w: self }
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&mut self) -> TBPLO_W {
                TBPLO_W { w: self }
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&mut self) -> TBMRSU_W {
                TBMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&mut self) -> TBPWMIE_W {
                TBPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&mut self) -> TBILD_W {
                TBILD_W { w: self }
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&mut self) -> TBSNAPS_W {
                TBSNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&mut self) -> TBWOT_W {
                TBWOT_W { w: self }
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&mut self) -> TBMIE_W {
                TBMIE_W { w: self }
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&mut self) -> TBCDIR_W {
                TBCDIR_W { w: self }
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&mut self) -> TBAMS_W {
                TBAMS_W { w: self }
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&mut self) -> TBCM_W {
                TBCM_W { w: self }
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&mut self) -> TBMR_W {
                TBMR_W { w: self }
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPWML`"]
        pub type TBPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWML`"]
        pub struct TBPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TBEVENT`"]
        pub type TBEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBEVENT`"]
        pub struct TBEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBSTALL`"]
        pub type TBSTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSTALL`"]
        pub struct TBSTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBEN`"]
        pub type TBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBEN`"]
        pub struct TBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWML`"]
        pub type TAPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWML`"]
        pub struct TAPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAEVENT`"]
        pub type TAEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAEVENT`"]
        pub struct TAEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TASTALL`"]
        pub type TASTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASTALL`"]
        pub struct TASTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAEN`"]
        pub type TAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAEN`"]
        pub struct TAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&self) -> TBPWML_R {
                TBPWML_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&self) -> TBEVENT_R {
                TBEVENT_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&self) -> TBSTALL_R {
                TBSTALL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&self) -> TBEN_R {
                TBEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&self) -> TAPWML_R {
                TAPWML_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&self) -> TAEVENT_R {
                TAEVENT_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&self) -> TASTALL_R {
                TASTALL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&self) -> TAEN_R {
                TAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&mut self) -> TBPWML_W {
                TBPWML_W { w: self }
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&mut self) -> TBEVENT_W {
                TBEVENT_W { w: self }
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&mut self) -> TBSTALL_W {
                TBSTALL_W { w: self }
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&mut self) -> TBEN_W {
                TBEN_W { w: self }
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&mut self) -> TAPWML_W {
                TAPWML_W { w: self }
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&mut self) -> TAEVENT_W {
                TAEVENT_W { w: self }
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&mut self) -> TASTALL_W {
                TASTALL_W { w: self }
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&mut self) -> TAEN_W {
                TAEN_W { w: self }
            }
        }
    }
    #[doc = "Synch Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "Synch Register"]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYNC3`"]
        pub type SYNC3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC3`"]
        pub struct SYNC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC2`"]
        pub type SYNC2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC2`"]
        pub struct SYNC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC1`"]
        pub type SYNC1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC1`"]
        pub struct SYNC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC0`"]
        pub type SYNC0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC0`"]
        pub struct SYNC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&self) -> SYNC3_R {
                SYNC3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&self) -> SYNC2_R {
                SYNC2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&self) -> SYNC1_R {
                SYNC1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&self) -> SYNC0_R {
                SYNC0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&mut self) -> SYNC3_W {
                SYNC3_W { w: self }
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&mut self) -> SYNC2_W {
                SYNC2_W { w: self }
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&mut self) -> SYNC1_W {
                SYNC1_W { w: self }
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&mut self) -> SYNC0_W {
                SYNC0_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr](imr) module"]
    pub type IMR = crate::Reg<u32, _IMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR;
    #[doc = "`read()` method returns [imr::R](imr::R) reader structure"]
    impl crate::Readable for IMR {}
    #[doc = "`write(|w| ..)` method takes [imr::W](imr::W) writer structure"]
    impl crate::Writable for IMR {}
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
    pub mod imr {
        #[doc = "Reader of register IMR"]
        pub type R = crate::R<u32, super::IMR>;
        #[doc = "Writer for register IMR"]
        pub type W = crate::W<u32, super::IMR>;
        #[doc = "Register IMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUMIS`"]
        pub struct WUMIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUMIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABIM`"]
        pub type DMABIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABIM`"]
        pub struct DMABIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIM`"]
        pub type TBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIM`"]
        pub struct TBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEIM`"]
        pub type CBEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEIM`"]
        pub struct CBEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMIM`"]
        pub type CBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMIM`"]
        pub struct CBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOIM`"]
        pub type TBTOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOIM`"]
        pub struct TBTOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAIM`"]
        pub type DMAAIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAIM`"]
        pub struct DMAAIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIM`"]
        pub type TAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIM`"]
        pub struct TAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCIM`"]
        pub type RTCIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCIM`"]
        pub struct RTCIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEIM`"]
        pub type CAEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEIM`"]
        pub struct CAEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMIM`"]
        pub type CAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMIM`"]
        pub struct CAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOIM`"]
        pub type TATOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOIM`"]
        pub struct TATOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&self) -> DMABIM_R {
                DMABIM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&self) -> TBMIM_R {
                TBMIM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&self) -> CBEIM_R {
                CBEIM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&self) -> CBMIM_R {
                CBMIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&self) -> TBTOIM_R {
                TBTOIM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&self) -> DMAAIM_R {
                DMAAIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&self) -> TAMIM_R {
                TAMIM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&self) -> RTCIM_R {
                RTCIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&self) -> CAEIM_R {
                CAEIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&self) -> CAMIM_R {
                CAMIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&self) -> TATOIM_R {
                TATOIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&mut self) -> WUMIS_W {
                WUMIS_W { w: self }
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&mut self) -> DMABIM_W {
                DMABIM_W { w: self }
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&mut self) -> TBMIM_W {
                TBMIM_W { w: self }
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&mut self) -> CBEIM_W {
                CBEIM_W { w: self }
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&mut self) -> CBMIM_W {
                CBMIM_W { w: self }
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&mut self) -> TBTOIM_W {
                TBTOIM_W { w: self }
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&mut self) -> DMAAIM_W {
                DMAAIM_W { w: self }
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&mut self) -> TAMIM_W {
                TAMIM_W { w: self }
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&mut self) -> RTCIM_W {
                RTCIM_W { w: self }
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&mut self) -> CAEIM_W {
                CAEIM_W { w: self }
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&mut self) -> CAMIM_W {
                CAMIM_W { w: self }
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&mut self) -> TATOIM_W {
                TATOIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `WURIS`"]
        pub type WURIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABRIS`"]
        pub type DMABRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMRIS`"]
        pub type TBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBERIS`"]
        pub type CBERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMRIS`"]
        pub type CBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTORIS`"]
        pub type TBTORIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAARIS`"]
        pub type DMAARIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMRIS`"]
        pub type TAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCRIS`"]
        pub type RTCRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAERIS`"]
        pub type CAERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMRIS`"]
        pub type CAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATORIS`"]
        pub type TATORIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WURIS"]
            #[inline(always)]
            pub fn wuris(&self) -> WURIS_R {
                WURIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABRIS"]
            #[inline(always)]
            pub fn dmabris(&self) -> DMABRIS_R {
                DMABRIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMRIS"]
            #[inline(always)]
            pub fn tbmris(&self) -> TBMRIS_R {
                TBMRIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBERIS"]
            #[inline(always)]
            pub fn cberis(&self) -> CBERIS_R {
                CBERIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMRIS"]
            #[inline(always)]
            pub fn cbmris(&self) -> CBMRIS_R {
                CBMRIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTORIS"]
            #[inline(always)]
            pub fn tbtoris(&self) -> TBTORIS_R {
                TBTORIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAARIS"]
            #[inline(always)]
            pub fn dmaaris(&self) -> DMAARIS_R {
                DMAARIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMRIS"]
            #[inline(always)]
            pub fn tamris(&self) -> TAMRIS_R {
                TAMRIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCRIS"]
            #[inline(always)]
            pub fn rtcris(&self) -> RTCRIS_R {
                RTCRIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAERIS"]
            #[inline(always)]
            pub fn caeris(&self) -> CAERIS_R {
                CAERIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMRIS"]
            #[inline(always)]
            pub fn camris(&self) -> CAMRIS_R {
                CAMRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATORIS"]
            #[inline(always)]
            pub fn tatoris(&self) -> TATORIS_R {
                TATORIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABMIS`"]
        pub type DMABMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMMIS`"]
        pub type TBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBEMIS`"]
        pub type CBEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMMIS`"]
        pub type CBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTOMIS`"]
        pub type TBTOMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAAMIS`"]
        pub type DMAAMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMMIS`"]
        pub type TAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCMIS`"]
        pub type RTCMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAEMIS`"]
        pub type CAEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMMIS`"]
        pub type CAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATOMIS`"]
        pub type TATOMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABMIS"]
            #[inline(always)]
            pub fn dmabmis(&self) -> DMABMIS_R {
                DMABMIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMMIS"]
            #[inline(always)]
            pub fn tbmmis(&self) -> TBMMIS_R {
                TBMMIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEMIS"]
            #[inline(always)]
            pub fn cbemis(&self) -> CBEMIS_R {
                CBEMIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMMIS"]
            #[inline(always)]
            pub fn cbmmis(&self) -> CBMMIS_R {
                CBMMIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOMIS"]
            #[inline(always)]
            pub fn tbtomis(&self) -> TBTOMIS_R {
                TBTOMIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAMIS"]
            #[inline(always)]
            pub fn dmaamis(&self) -> DMAAMIS_R {
                DMAAMIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMMIS"]
            #[inline(always)]
            pub fn tammis(&self) -> TAMMIS_R {
                TAMMIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCMIS"]
            #[inline(always)]
            pub fn rtcmis(&self) -> RTCMIS_R {
                RTCMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEMIS"]
            #[inline(always)]
            pub fn caemis(&self) -> CAEMIS_R {
                CAEMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMMIS"]
            #[inline(always)]
            pub fn cammis(&self) -> CAMMIS_R {
                CAMMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOMIS"]
            #[inline(always)]
            pub fn tatomis(&self) -> TATOMIS_R {
                TATOMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iclr](iclr) module"]
    pub type ICLR = crate::Reg<u32, _ICLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICLR;
    #[doc = "`read()` method returns [iclr::R](iclr::R) reader structure"]
    impl crate::Readable for ICLR {}
    #[doc = "`write(|w| ..)` method takes [iclr::W](iclr::W) writer structure"]
    impl crate::Writable for ICLR {}
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
    pub mod iclr {
        #[doc = "Reader of register ICLR"]
        pub type R = crate::R<u32, super::ICLR>;
        #[doc = "Writer for register ICLR"]
        pub type W = crate::W<u32, super::ICLR>;
        #[doc = "Register ICLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUECINT`"]
        pub type WUECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUECINT`"]
        pub struct WUECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABINT`"]
        pub type DMABINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABINT`"]
        pub struct DMABINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMCINT`"]
        pub type TBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMCINT`"]
        pub struct TBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBECINT`"]
        pub type CBECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBECINT`"]
        pub struct CBECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMCINT`"]
        pub type CBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMCINT`"]
        pub struct CBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOCINT`"]
        pub type TBTOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOCINT`"]
        pub struct TBTOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAINT`"]
        pub type DMAAINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAINT`"]
        pub struct DMAAINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMCINT`"]
        pub type TAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMCINT`"]
        pub struct TAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCCINT`"]
        pub type RTCCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCCINT`"]
        pub struct RTCCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAECINT`"]
        pub type CAECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAECINT`"]
        pub struct CAECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMCINT`"]
        pub type CAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMCINT`"]
        pub struct CAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOCINT`"]
        pub type TATOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOCINT`"]
        pub struct TATOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&self) -> WUECINT_R {
                WUECINT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&self) -> DMABINT_R {
                DMABINT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&self) -> TBMCINT_R {
                TBMCINT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&self) -> CBECINT_R {
                CBECINT_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&self) -> CBMCINT_R {
                CBMCINT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&self) -> TBTOCINT_R {
                TBTOCINT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&self) -> DMAAINT_R {
                DMAAINT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&self) -> TAMCINT_R {
                TAMCINT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&self) -> RTCCINT_R {
                RTCCINT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&self) -> CAECINT_R {
                CAECINT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&self) -> CAMCINT_R {
                CAMCINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&self) -> TATOCINT_R {
                TATOCINT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&mut self) -> WUECINT_W {
                WUECINT_W { w: self }
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&mut self) -> DMABINT_W {
                DMABINT_W { w: self }
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&mut self) -> TBMCINT_W {
                TBMCINT_W { w: self }
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&mut self) -> CBECINT_W {
                CBECINT_W { w: self }
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&mut self) -> CBMCINT_W {
                CBMCINT_W { w: self }
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&mut self) -> TBTOCINT_W {
                TBTOCINT_W { w: self }
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&mut self) -> DMAAINT_W {
                DMAAINT_W { w: self }
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&mut self) -> TAMCINT_W {
                TAMCINT_W { w: self }
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&mut self) -> RTCCINT_W {
                RTCCINT_W { w: self }
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&mut self) -> CAECINT_W {
                CAECINT_W { w: self }
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&mut self) -> CAMCINT_W {
                CAMCINT_W { w: self }
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&mut self) -> TATOCINT_W {
                TATOCINT_W { w: self }
            }
        }
    }
    #[doc = "Timer A Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tailr](tailr) module"]
    pub type TAILR = crate::Reg<u32, _TAILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAILR;
    #[doc = "`read()` method returns [tailr::R](tailr::R) reader structure"]
    impl crate::Readable for TAILR {}
    #[doc = "`write(|w| ..)` method takes [tailr::W](tailr::W) writer structure"]
    impl crate::Writable for TAILR {}
    #[doc = "Timer A Interval Load Register"]
    pub mod tailr {
        #[doc = "Reader of register TAILR"]
        pub type R = crate::R<u32, super::TAILR>;
        #[doc = "Writer for register TAILR"]
        pub type W = crate::W<u32, super::TAILR>;
        #[doc = "Register TAILR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAILR`"]
        pub type TAILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAILR`"]
        pub struct TAILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&self) -> TAILR_R {
                TAILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&mut self) -> TAILR_W {
                TAILR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbilr](tbilr) module"]
    pub type TBILR = crate::Reg<u32, _TBILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBILR;
    #[doc = "`read()` method returns [tbilr::R](tbilr::R) reader structure"]
    impl crate::Readable for TBILR {}
    #[doc = "`write(|w| ..)` method takes [tbilr::W](tbilr::W) writer structure"]
    impl crate::Writable for TBILR {}
    #[doc = "Timer B Interval Load Register"]
    pub mod tbilr {
        #[doc = "Reader of register TBILR"]
        pub type R = crate::R<u32, super::TBILR>;
        #[doc = "Writer for register TBILR"]
        pub type W = crate::W<u32, super::TBILR>;
        #[doc = "Register TBILR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBILR`"]
        pub type TBILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBILR`"]
        pub struct TBILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&self) -> TBILR_R {
                TBILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&mut self) -> TBILR_W {
                TBILR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamatchr](tamatchr) module"]
    pub type TAMATCHR = crate::Reg<u32, _TAMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMATCHR;
    #[doc = "`read()` method returns [tamatchr::R](tamatchr::R) reader structure"]
    impl crate::Readable for TAMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tamatchr::W](tamatchr::W) writer structure"]
    impl crate::Writable for TAMATCHR {}
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
    pub mod tamatchr {
        #[doc = "Reader of register TAMATCHR"]
        pub type R = crate::R<u32, super::TAMATCHR>;
        #[doc = "Writer for register TAMATCHR"]
        pub type W = crate::W<u32, super::TAMATCHR>;
        #[doc = "Register TAMATCHR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAMATCHR`"]
        pub type TAMATCHR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAMATCHR`"]
        pub struct TAMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&self) -> TAMATCHR_R {
                TAMATCHR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&mut self) -> TAMATCHR_W {
                TAMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmatchr](tbmatchr) module"]
    pub type TBMATCHR = crate::Reg<u32, _TBMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMATCHR;
    #[doc = "`read()` method returns [tbmatchr::R](tbmatchr::R) reader structure"]
    impl crate::Readable for TBMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tbmatchr::W](tbmatchr::W) writer structure"]
    impl crate::Writable for TBMATCHR {}
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
    pub mod tbmatchr {
        #[doc = "Reader of register TBMATCHR"]
        pub type R = crate::R<u32, super::TBMATCHR>;
        #[doc = "Writer for register TBMATCHR"]
        pub type W = crate::W<u32, super::TBMATCHR>;
        #[doc = "Register TBMATCHR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBMATCHR`"]
        pub type TBMATCHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TBMATCHR`"]
        pub struct TBMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&self) -> TBMATCHR_R {
                TBMATCHR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&mut self) -> TBMATCHR_W {
                TBMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapr](tapr) module"]
    pub type TAPR = crate::Reg<u32, _TAPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPR;
    #[doc = "`read()` method returns [tapr::R](tapr::R) reader structure"]
    impl crate::Readable for TAPR {}
    #[doc = "`write(|w| ..)` method takes [tapr::W](tapr::W) writer structure"]
    impl crate::Writable for TAPR {}
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tapr {
        #[doc = "Reader of register TAPR"]
        pub type R = crate::R<u32, super::TAPR>;
        #[doc = "Writer for register TAPR"]
        pub type W = crate::W<u32, super::TAPR>;
        #[doc = "Register TAPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSR`"]
        pub type TAPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSR`"]
        pub struct TAPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&self) -> TAPSR_R {
                TAPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&mut self) -> TAPSR_W {
                TAPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpr](tbpr) module"]
    pub type TBPR = crate::Reg<u32, _TBPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPR;
    #[doc = "`read()` method returns [tbpr::R](tbpr::R) reader structure"]
    impl crate::Readable for TBPR {}
    #[doc = "`write(|w| ..)` method takes [tbpr::W](tbpr::W) writer structure"]
    impl crate::Writable for TBPR {}
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tbpr {
        #[doc = "Reader of register TBPR"]
        pub type R = crate::R<u32, super::TBPR>;
        #[doc = "Writer for register TBPR"]
        pub type W = crate::W<u32, super::TBPR>;
        #[doc = "Register TBPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSR`"]
        pub type TBPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSR`"]
        pub struct TBPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&self) -> TBPSR_R {
                TBPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&mut self) -> TBPSR_W {
                TBPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapmr](tapmr) module"]
    pub type TAPMR = crate::Reg<u32, _TAPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPMR;
    #[doc = "`read()` method returns [tapmr::R](tapmr::R) reader structure"]
    impl crate::Readable for TAPMR {}
    #[doc = "`write(|w| ..)` method takes [tapmr::W](tapmr::W) writer structure"]
    impl crate::Writable for TAPMR {}
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
    pub mod tapmr {
        #[doc = "Reader of register TAPMR"]
        pub type R = crate::R<u32, super::TAPMR>;
        #[doc = "Writer for register TAPMR"]
        pub type W = crate::W<u32, super::TAPMR>;
        #[doc = "Register TAPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSMR`"]
        pub type TAPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSMR`"]
        pub struct TAPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&self) -> TAPSMR_R {
                TAPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&mut self) -> TAPSMR_W {
                TAPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpmr](tbpmr) module"]
    pub type TBPMR = crate::Reg<u32, _TBPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPMR;
    #[doc = "`read()` method returns [tbpmr::R](tbpmr::R) reader structure"]
    impl crate::Readable for TBPMR {}
    #[doc = "`write(|w| ..)` method takes [tbpmr::W](tbpmr::W) writer structure"]
    impl crate::Writable for TBPMR {}
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
    pub mod tbpmr {
        #[doc = "Reader of register TBPMR"]
        pub type R = crate::R<u32, super::TBPMR>;
        #[doc = "Writer for register TBPMR"]
        pub type W = crate::W<u32, super::TBPMR>;
        #[doc = "Register TBPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSMR`"]
        pub type TBPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSMR`"]
        pub struct TBPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&self) -> TBPSMR_R {
                TBPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&mut self) -> TBPSMR_W {
                TBPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tar](tar) module"]
    pub type TAR = crate::Reg<u32, _TAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAR;
    #[doc = "`read()` method returns [tar::R](tar::R) reader structure"]
    impl crate::Readable for TAR {}
    #[doc = "Timer A Register"]
    pub mod tar {
        #[doc = "Reader of register TAR"]
        pub type R = crate::R<u32, super::TAR>;
        #[doc = "Reader of field `TAR`"]
        pub type TAR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TAR"]
            #[inline(always)]
            pub fn tar(&self) -> TAR_R {
                TAR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer B Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbr](tbr) module"]
    pub type TBR = crate::Reg<u32, _TBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBR;
    #[doc = "`read()` method returns [tbr::R](tbr::R) reader structure"]
    impl crate::Readable for TBR {}
    #[doc = "Timer B Register"]
    pub mod tbr {
        #[doc = "Reader of register TBR"]
        pub type R = crate::R<u32, super::TBR>;
        #[doc = "Reader of field `TBR`"]
        pub type TBR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TBR"]
            #[inline(always)]
            pub fn tbr(&self) -> TBR_R {
                TBR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tav](tav) module"]
    pub type TAV = crate::Reg<u32, _TAV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAV;
    #[doc = "`read()` method returns [tav::R](tav::R) reader structure"]
    impl crate::Readable for TAV {}
    #[doc = "`write(|w| ..)` method takes [tav::W](tav::W) writer structure"]
    impl crate::Writable for TAV {}
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
    pub mod tav {
        #[doc = "Reader of register TAV"]
        pub type R = crate::R<u32, super::TAV>;
        #[doc = "Writer for register TAV"]
        pub type W = crate::W<u32, super::TAV>;
        #[doc = "Register TAV `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAV`"]
        pub type TAV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAV`"]
        pub struct TAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&self) -> TAV_R {
                TAV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&mut self) -> TAV_W {
                TAV_W { w: self }
            }
        }
    }
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbv](tbv) module"]
    pub type TBV = crate::Reg<u32, _TBV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBV;
    #[doc = "`read()` method returns [tbv::R](tbv::R) reader structure"]
    impl crate::Readable for TBV {}
    #[doc = "`write(|w| ..)` method takes [tbv::W](tbv::W) writer structure"]
    impl crate::Writable for TBV {}
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tbv {
        #[doc = "Reader of register TBV"]
        pub type R = crate::R<u32, super::TBV>;
        #[doc = "Writer for register TBV"]
        pub type W = crate::W<u32, super::TBV>;
        #[doc = "Register TBV `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBV`"]
        pub type TBV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBV`"]
        pub struct TBV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&self) -> TBV_R {
                TBV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&mut self) -> TBV_W {
                TBV_W { w: self }
            }
        }
    }
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcpd](rtcpd) module"]
    pub type RTCPD = crate::Reg<u32, _RTCPD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCPD;
    #[doc = "`read()` method returns [rtcpd::R](rtcpd::R) reader structure"]
    impl crate::Readable for RTCPD {}
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
    pub mod rtcpd {
        #[doc = "Reader of register RTCPD"]
        pub type R = crate::R<u32, super::RTCPD>;
        #[doc = "Reader of field `RTCPD`"]
        pub type RTCPD_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTCPD"]
            #[inline(always)]
            pub fn rtcpd(&self) -> RTCPD_R {
                RTCPD_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taps](taps) module"]
    pub type TAPS = crate::Reg<u32, _TAPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPS;
    #[doc = "`read()` method returns [taps::R](taps::R) reader structure"]
    impl crate::Readable for TAPS {}
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod taps {
        #[doc = "Reader of register TAPS"]
        pub type R = crate::R<u32, super::TAPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbps](tbps) module"]
    pub type TBPS = crate::Reg<u32, _TBPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPS;
    #[doc = "`read()` method returns [tbps::R](tbps::R) reader structure"]
    impl crate::Readable for TBPS {}
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod tbps {
        #[doc = "Reader of register TBPS"]
        pub type R = crate::R<u32, super::TBPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapv](tapv) module"]
    pub type TAPV = crate::Reg<u32, _TAPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPV;
    #[doc = "`read()` method returns [tapv::R](tapv::R) reader structure"]
    impl crate::Readable for TAPV {}
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tapv {
        #[doc = "Reader of register TAPV"]
        pub type R = crate::R<u32, super::TAPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpv](tbpv) module"]
    pub type TBPV = crate::Reg<u32, _TBPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPV;
    #[doc = "`read()` method returns [tbpv::R](tbpv::R) reader structure"]
    impl crate::Readable for TBPV {}
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
    pub mod tbpv {
        #[doc = "Reader of register TBPV"]
        pub type R = crate::R<u32, super::TBPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaev](dmaev) module"]
    pub type DMAEV = crate::Reg<u32, _DMAEV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAEV;
    #[doc = "`read()` method returns [dmaev::R](dmaev::R) reader structure"]
    impl crate::Readable for DMAEV {}
    #[doc = "`write(|w| ..)` method takes [dmaev::W](dmaev::W) writer structure"]
    impl crate::Writable for DMAEV {}
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events."]
    pub mod dmaev {
        #[doc = "Reader of register DMAEV"]
        pub type R = crate::R<u32, super::DMAEV>;
        #[doc = "Writer for register DMAEV"]
        pub type W = crate::W<u32, super::DMAEV>;
        #[doc = "Register DMAEV `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAEV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBMDMAEN`"]
        pub type TBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMDMAEN`"]
        pub struct TBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEDMAEN`"]
        pub type CBEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEDMAEN`"]
        pub struct CBEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMDMAEN`"]
        pub type CBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMDMAEN`"]
        pub struct CBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTODMAEN`"]
        pub type TBTODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTODMAEN`"]
        pub struct TBTODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAMDMAEN`"]
        pub type TAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMDMAEN`"]
        pub struct TAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCDMAEN`"]
        pub type RTCDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCDMAEN`"]
        pub struct RTCDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEDMAEN`"]
        pub type CAEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEDMAEN`"]
        pub struct CAEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMDMAEN`"]
        pub type CAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMDMAEN`"]
        pub struct CAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATODMAEN`"]
        pub type TATODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATODMAEN`"]
        pub struct TATODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&self) -> TBMDMAEN_R {
                TBMDMAEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&self) -> CBEDMAEN_R {
                CBEDMAEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&self) -> CBMDMAEN_R {
                CBMDMAEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&self) -> TBTODMAEN_R {
                TBTODMAEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&self) -> TAMDMAEN_R {
                TAMDMAEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&self) -> RTCDMAEN_R {
                RTCDMAEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&self) -> CAEDMAEN_R {
                CAEDMAEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&self) -> CAMDMAEN_R {
                CAMDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&self) -> TATODMAEN_R {
                TATODMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&mut self) -> TBMDMAEN_W {
                TBMDMAEN_W { w: self }
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&mut self) -> CBEDMAEN_W {
                CBEDMAEN_W { w: self }
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&mut self) -> CBMDMAEN_W {
                CBMDMAEN_W { w: self }
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&mut self) -> TBTODMAEN_W {
                TBTODMAEN_W { w: self }
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&mut self) -> TAMDMAEN_W {
                TAMDMAEN_W { w: self }
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&mut self) -> RTCDMAEN_W {
                RTCDMAEN_W { w: self }
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&mut self) -> CAEDMAEN_W {
                CAEDMAEN_W { w: self }
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&mut self) -> CAMDMAEN_W {
                CAMDMAEN_W { w: self }
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&mut self) -> TATODMAEN_W {
                TATODMAEN_W { w: self }
            }
        }
    }
    #[doc = "Peripheral Version This register provides information regarding the GPT version\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [version](version) module"]
    pub type VERSION = crate::Reg<u32, _VERSION>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VERSION;
    #[doc = "`read()` method returns [version::R](version::R) reader structure"]
    impl crate::Readable for VERSION {}
    #[doc = "Peripheral Version This register provides information regarding the GPT version"]
    pub mod version {
        #[doc = "Reader of register VERSION"]
        pub type R = crate::R<u32, super::VERSION>;
        #[doc = "Reader of field `VERSION`"]
        pub type VERSION_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - VERSION"]
            #[inline(always)]
            pub fn version(&self) -> VERSION_R {
                VERSION_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [andccp](andccp) module"]
    pub type ANDCCP = crate::Reg<u32, _ANDCCP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANDCCP;
    #[doc = "`read()` method returns [andccp::R](andccp::R) reader structure"]
    impl crate::Readable for ANDCCP {}
    #[doc = "`write(|w| ..)` method takes [andccp::W](andccp::W) writer structure"]
    impl crate::Writable for ANDCCP {}
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
    pub mod andccp {
        #[doc = "Reader of register ANDCCP"]
        pub type R = crate::R<u32, super::ANDCCP>;
        #[doc = "Writer for register ANDCCP"]
        pub type W = crate::W<u32, super::ANDCCP>;
        #[doc = "Register ANDCCP `reset()`'s with value 0"]
        impl crate::ResetValue for super::ANDCCP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCP_AND_EN`"]
        pub type CCP_AND_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCP_AND_EN`"]
        pub struct CCP_AND_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCP_AND_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&self) -> CCP_AND_EN_R {
                CCP_AND_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&mut self) -> CCP_AND_EN_W {
                CCP_AND_EN_W { w: self }
            }
        }
    }
}
#[doc = "General Purpose Timer."]
pub struct GPT3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPT3 {}
impl GPT3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpt3::RegisterBlock {
        0x4001_3000 as *const _
    }
}
impl Deref for GPT3 {
    type Target = gpt3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPT3::ptr() }
    }
}
#[doc = "General Purpose Timer."]
pub mod gpt3 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Configuration"]
        pub cfg: CFG,
        #[doc = "0x04 - Timer A Mode"]
        pub tamr: TAMR,
        #[doc = "0x08 - Timer B Mode"]
        pub tbmr: TBMR,
        #[doc = "0x0c - Control"]
        pub ctl: CTL,
        #[doc = "0x10 - Synch Register"]
        pub sync: SYNC,
        _reserved5: [u8; 4usize],
        #[doc = "0x18 - Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
        pub imr: IMR,
        #[doc = "0x1c - Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
        pub ris: RIS,
        #[doc = "0x20 - Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
        pub mis: MIS,
        #[doc = "0x24 - Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
        pub iclr: ICLR,
        #[doc = "0x28 - Timer A Interval Load Register"]
        pub tailr: TAILR,
        #[doc = "0x2c - Timer B Interval Load Register"]
        pub tbilr: TBILR,
        #[doc = "0x30 - Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
        pub tamatchr: TAMATCHR,
        #[doc = "0x34 - Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
        pub tbmatchr: TBMATCHR,
        #[doc = "0x38 - Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tapr: TAPR,
        #[doc = "0x3c - Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
        pub tbpr: TBPR,
        #[doc = "0x40 - Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
        pub tapmr: TAPMR,
        #[doc = "0x44 - Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
        pub tbpmr: TBPMR,
        #[doc = "0x48 - Timer A Register"]
        pub tar: TAR,
        #[doc = "0x4c - Timer B Register"]
        pub tbr: TBR,
        #[doc = "0x50 - Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
        pub tav: TAV,
        #[doc = "0x54 - Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tbv: TBV,
        #[doc = "0x58 - RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
        pub rtcpd: RTCPD,
        #[doc = "0x5c - Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub taps: TAPS,
        #[doc = "0x60 - Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
        pub tbps: TBPS,
        #[doc = "0x64 - Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
        pub tapv: TAPV,
        #[doc = "0x68 - Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
        pub tbpv: TBPV,
        #[doc = "0x6c - DMA Event This register allows software to enable/disable GPT DMA trigger events."]
        pub dmaev: DMAEV,
        _reserved27: [u8; 3904usize],
        #[doc = "0xfb0 - Peripheral Version This register provides information regarding the GPT version"]
        pub version: VERSION,
        #[doc = "0xfb4 - Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
        pub andccp: ANDCCP,
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
    pub type CFG = crate::Reg<u32, _CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG;
    #[doc = "`read()` method returns [cfg::R](cfg::R) reader structure"]
    impl crate::Readable for CFG {}
    #[doc = "`write(|w| ..)` method takes [cfg::W](cfg::W) writer structure"]
    impl crate::Writable for CFG {}
    #[doc = "Configuration"]
    pub mod cfg {
        #[doc = "Reader of register CFG"]
        pub type R = crate::R<u32, super::CFG>;
        #[doc = "Writer for register CFG"]
        pub type W = crate::W<u32, super::CFG>;
        #[doc = "Register CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CFG`"]
        pub type CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CFG`"]
        pub struct CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&self) -> CFG_R {
                CFG_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - CFG"]
            #[inline(always)]
            pub fn cfg(&mut self) -> CFG_W {
                CFG_W { w: self }
            }
        }
    }
    #[doc = "Timer A Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamr](tamr) module"]
    pub type TAMR = crate::Reg<u32, _TAMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMR;
    #[doc = "`read()` method returns [tamr::R](tamr::R) reader structure"]
    impl crate::Readable for TAMR {}
    #[doc = "`write(|w| ..)` method takes [tamr::W](tamr::W) writer structure"]
    impl crate::Writable for TAMR {}
    #[doc = "Timer A Mode"]
    pub mod tamr {
        #[doc = "Reader of register TAMR"]
        pub type R = crate::R<u32, super::TAMR>;
        #[doc = "Writer for register TAMR"]
        pub type W = crate::W<u32, super::TAMR>;
        #[doc = "Register TAMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TACINTD`"]
        pub type TACINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACINTD`"]
        pub struct TACINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TAPLO`"]
        pub type TAPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPLO`"]
        pub struct TAPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TAMRSU`"]
        pub type TAMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMRSU`"]
        pub struct TAMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWMIE`"]
        pub type TAPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWMIE`"]
        pub struct TAPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TAILD`"]
        pub type TAILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAILD`"]
        pub struct TAILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TASNAPS`"]
        pub type TASNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASNAPS`"]
        pub struct TASNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TAWOT`"]
        pub type TAWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAWOT`"]
        pub struct TAWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIE`"]
        pub type TAMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIE`"]
        pub struct TAMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TACDIR`"]
        pub type TACDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACDIR`"]
        pub struct TACDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAAMS`"]
        pub type TAAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAAMS`"]
        pub struct TAAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TACM`"]
        pub type TACM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TACM`"]
        pub struct TACM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TAMR`"]
        pub type TAMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMR`"]
        pub struct TAMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&self) -> TACINTD_R {
                TACINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&self) -> TAPLO_R {
                TAPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&self) -> TAMRSU_R {
                TAMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&self) -> TAPWMIE_R {
                TAPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&self) -> TAILD_R {
                TAILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&self) -> TASNAPS_R {
                TASNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&self) -> TAWOT_R {
                TAWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&self) -> TAMIE_R {
                TAMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&self) -> TACDIR_R {
                TACDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&self) -> TAAMS_R {
                TAAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&self) -> TACM_R {
                TACM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&self) -> TAMR_R {
                TAMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TACINTD"]
            #[inline(always)]
            pub fn tacintd(&mut self) -> TACINTD_W {
                TACINTD_W { w: self }
            }
            #[doc = "Bit 11 - TAPLO"]
            #[inline(always)]
            pub fn taplo(&mut self) -> TAPLO_W {
                TAPLO_W { w: self }
            }
            #[doc = "Bit 10 - TAMRSU"]
            #[inline(always)]
            pub fn tamrsu(&mut self) -> TAMRSU_W {
                TAMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TAPWMIE"]
            #[inline(always)]
            pub fn tapwmie(&mut self) -> TAPWMIE_W {
                TAPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TAILD"]
            #[inline(always)]
            pub fn taild(&mut self) -> TAILD_W {
                TAILD_W { w: self }
            }
            #[doc = "Bit 7 - TASNAPS"]
            #[inline(always)]
            pub fn tasnaps(&mut self) -> TASNAPS_W {
                TASNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TAWOT"]
            #[inline(always)]
            pub fn tawot(&mut self) -> TAWOT_W {
                TAWOT_W { w: self }
            }
            #[doc = "Bit 5 - TAMIE"]
            #[inline(always)]
            pub fn tamie(&mut self) -> TAMIE_W {
                TAMIE_W { w: self }
            }
            #[doc = "Bit 4 - TACDIR"]
            #[inline(always)]
            pub fn tacdir(&mut self) -> TACDIR_W {
                TACDIR_W { w: self }
            }
            #[doc = "Bit 3 - TAAMS"]
            #[inline(always)]
            pub fn taams(&mut self) -> TAAMS_W {
                TAAMS_W { w: self }
            }
            #[doc = "Bit 2 - TACM"]
            #[inline(always)]
            pub fn tacm(&mut self) -> TACM_W {
                TACM_W { w: self }
            }
            #[doc = "Bits 0:1 - TAMR"]
            #[inline(always)]
            pub fn tamr(&mut self) -> TAMR_W {
                TAMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmr](tbmr) module"]
    pub type TBMR = crate::Reg<u32, _TBMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMR;
    #[doc = "`read()` method returns [tbmr::R](tbmr::R) reader structure"]
    impl crate::Readable for TBMR {}
    #[doc = "`write(|w| ..)` method takes [tbmr::W](tbmr::W) writer structure"]
    impl crate::Writable for TBMR {}
    #[doc = "Timer B Mode"]
    pub mod tbmr {
        #[doc = "Reader of register TBMR"]
        pub type R = crate::R<u32, super::TBMR>;
        #[doc = "Writer for register TBMR"]
        pub type W = crate::W<u32, super::TBMR>;
        #[doc = "Register TBMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TCACT`"]
        pub type TCACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TCACT`"]
        pub struct TCACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBCINTD`"]
        pub type TBCINTD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCINTD`"]
        pub struct TBCINTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCINTD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TBPLO`"]
        pub type TBPLO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPLO`"]
        pub struct TBPLO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPLO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TBMRSU`"]
        pub type TBMRSU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMRSU`"]
        pub struct TBMRSU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMRSU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBPWMIE`"]
        pub type TBPWMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWMIE`"]
        pub struct TBPWMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBILD`"]
        pub type TBILD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBILD`"]
        pub struct TBILD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TBSNAPS`"]
        pub type TBSNAPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSNAPS`"]
        pub struct TBSNAPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSNAPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TBWOT`"]
        pub type TBWOT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBWOT`"]
        pub struct TBWOT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBWOT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIE`"]
        pub type TBMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIE`"]
        pub struct TBMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TBCDIR`"]
        pub type TBCDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCDIR`"]
        pub struct TBCDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TBAMS`"]
        pub type TBAMS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBAMS`"]
        pub struct TBAMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBAMS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TBCM`"]
        pub type TBCM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBCM`"]
        pub struct TBCM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBCM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TBMR`"]
        pub type TBMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBMR`"]
        pub struct TBMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&self) -> TCACT_R {
                TCACT_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&self) -> TBCINTD_R {
                TBCINTD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&self) -> TBPLO_R {
                TBPLO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&self) -> TBMRSU_R {
                TBMRSU_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&self) -> TBPWMIE_R {
                TBPWMIE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&self) -> TBILD_R {
                TBILD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&self) -> TBSNAPS_R {
                TBSNAPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&self) -> TBWOT_R {
                TBWOT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&self) -> TBMIE_R {
                TBMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&self) -> TBCDIR_R {
                TBCDIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&self) -> TBAMS_R {
                TBAMS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&self) -> TBCM_R {
                TBCM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&self) -> TBMR_R {
                TBMR_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 13:15 - TCACT"]
            #[inline(always)]
            pub fn tcact(&mut self) -> TCACT_W {
                TCACT_W { w: self }
            }
            #[doc = "Bit 12 - TBCINTD"]
            #[inline(always)]
            pub fn tbcintd(&mut self) -> TBCINTD_W {
                TBCINTD_W { w: self }
            }
            #[doc = "Bit 11 - TBPLO"]
            #[inline(always)]
            pub fn tbplo(&mut self) -> TBPLO_W {
                TBPLO_W { w: self }
            }
            #[doc = "Bit 10 - TBMRSU"]
            #[inline(always)]
            pub fn tbmrsu(&mut self) -> TBMRSU_W {
                TBMRSU_W { w: self }
            }
            #[doc = "Bit 9 - TBPWMIE"]
            #[inline(always)]
            pub fn tbpwmie(&mut self) -> TBPWMIE_W {
                TBPWMIE_W { w: self }
            }
            #[doc = "Bit 8 - TBILD"]
            #[inline(always)]
            pub fn tbild(&mut self) -> TBILD_W {
                TBILD_W { w: self }
            }
            #[doc = "Bit 7 - TBSNAPS"]
            #[inline(always)]
            pub fn tbsnaps(&mut self) -> TBSNAPS_W {
                TBSNAPS_W { w: self }
            }
            #[doc = "Bit 6 - TBWOT"]
            #[inline(always)]
            pub fn tbwot(&mut self) -> TBWOT_W {
                TBWOT_W { w: self }
            }
            #[doc = "Bit 5 - TBMIE"]
            #[inline(always)]
            pub fn tbmie(&mut self) -> TBMIE_W {
                TBMIE_W { w: self }
            }
            #[doc = "Bit 4 - TBCDIR"]
            #[inline(always)]
            pub fn tbcdir(&mut self) -> TBCDIR_W {
                TBCDIR_W { w: self }
            }
            #[doc = "Bit 3 - TBAMS"]
            #[inline(always)]
            pub fn tbams(&mut self) -> TBAMS_W {
                TBAMS_W { w: self }
            }
            #[doc = "Bit 2 - TBCM"]
            #[inline(always)]
            pub fn tbcm(&mut self) -> TBCM_W {
                TBCM_W { w: self }
            }
            #[doc = "Bits 0:1 - TBMR"]
            #[inline(always)]
            pub fn tbmr(&mut self) -> TBMR_W {
                TBMR_W { w: self }
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPWML`"]
        pub type TBPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBPWML`"]
        pub struct TBPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TBEVENT`"]
        pub type TBEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBEVENT`"]
        pub struct TBEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TBSTALL`"]
        pub type TBSTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBSTALL`"]
        pub struct TBSTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBSTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBEN`"]
        pub type TBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBEN`"]
        pub struct TBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAPWML`"]
        pub type TAPWML_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAPWML`"]
        pub struct TAPWML_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPWML_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TAEVENT`"]
        pub type TAEVENT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAEVENT`"]
        pub struct TAEVENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEVENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TASTALL`"]
        pub type TASTALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TASTALL`"]
        pub struct TASTALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASTALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAEN`"]
        pub type TAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAEN`"]
        pub struct TAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&self) -> TBPWML_R {
                TBPWML_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&self) -> TBEVENT_R {
                TBEVENT_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&self) -> TBSTALL_R {
                TBSTALL_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&self) -> TBEN_R {
                TBEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&self) -> TAPWML_R {
                TAPWML_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&self) -> TAEVENT_R {
                TAEVENT_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&self) -> TASTALL_R {
                TASTALL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&self) -> TAEN_R {
                TAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - TBPWML"]
            #[inline(always)]
            pub fn tbpwml(&mut self) -> TBPWML_W {
                TBPWML_W { w: self }
            }
            #[doc = "Bits 10:11 - TBEVENT"]
            #[inline(always)]
            pub fn tbevent(&mut self) -> TBEVENT_W {
                TBEVENT_W { w: self }
            }
            #[doc = "Bit 9 - TBSTALL"]
            #[inline(always)]
            pub fn tbstall(&mut self) -> TBSTALL_W {
                TBSTALL_W { w: self }
            }
            #[doc = "Bit 8 - TBEN"]
            #[inline(always)]
            pub fn tben(&mut self) -> TBEN_W {
                TBEN_W { w: self }
            }
            #[doc = "Bit 6 - TAPWML"]
            #[inline(always)]
            pub fn tapwml(&mut self) -> TAPWML_W {
                TAPWML_W { w: self }
            }
            #[doc = "Bit 4 - RTCEN"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bits 2:3 - TAEVENT"]
            #[inline(always)]
            pub fn taevent(&mut self) -> TAEVENT_W {
                TAEVENT_W { w: self }
            }
            #[doc = "Bit 1 - TASTALL"]
            #[inline(always)]
            pub fn tastall(&mut self) -> TASTALL_W {
                TASTALL_W { w: self }
            }
            #[doc = "Bit 0 - TAEN"]
            #[inline(always)]
            pub fn taen(&mut self) -> TAEN_W {
                TAEN_W { w: self }
            }
        }
    }
    #[doc = "Synch Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sync](sync) module"]
    pub type SYNC = crate::Reg<u32, _SYNC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYNC;
    #[doc = "`read()` method returns [sync::R](sync::R) reader structure"]
    impl crate::Readable for SYNC {}
    #[doc = "`write(|w| ..)` method takes [sync::W](sync::W) writer structure"]
    impl crate::Writable for SYNC {}
    #[doc = "Synch Register"]
    pub mod sync {
        #[doc = "Reader of register SYNC"]
        pub type R = crate::R<u32, super::SYNC>;
        #[doc = "Writer for register SYNC"]
        pub type W = crate::W<u32, super::SYNC>;
        #[doc = "Register SYNC `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYNC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYNC3`"]
        pub type SYNC3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC3`"]
        pub struct SYNC3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC2`"]
        pub type SYNC2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC2`"]
        pub struct SYNC2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC1`"]
        pub type SYNC1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC1`"]
        pub struct SYNC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC0`"]
        pub type SYNC0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC0`"]
        pub struct SYNC0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&self) -> SYNC3_R {
                SYNC3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&self) -> SYNC2_R {
                SYNC2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&self) -> SYNC1_R {
                SYNC1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&self) -> SYNC0_R {
                SYNC0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 6:7 - SYNC3"]
            #[inline(always)]
            pub fn sync3(&mut self) -> SYNC3_W {
                SYNC3_W { w: self }
            }
            #[doc = "Bits 4:5 - SYNC2"]
            #[inline(always)]
            pub fn sync2(&mut self) -> SYNC2_W {
                SYNC2_W { w: self }
            }
            #[doc = "Bits 2:3 - SYNC1"]
            #[inline(always)]
            pub fn sync1(&mut self) -> SYNC1_W {
                SYNC1_W { w: self }
            }
            #[doc = "Bits 0:1 - SYNC0"]
            #[inline(always)]
            pub fn sync0(&mut self) -> SYNC0_W {
                SYNC0_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr](imr) module"]
    pub type IMR = crate::Reg<u32, _IMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR;
    #[doc = "`read()` method returns [imr::R](imr::R) reader structure"]
    impl crate::Readable for IMR {}
    #[doc = "`write(|w| ..)` method takes [imr::W](imr::W) writer structure"]
    impl crate::Writable for IMR {}
    #[doc = "Interrupt Mask This register is used to enable the interrupts. Associated registers: RIS, MIS, ICLR"]
    pub mod imr {
        #[doc = "Reader of register IMR"]
        pub type R = crate::R<u32, super::IMR>;
        #[doc = "Writer for register IMR"]
        pub type W = crate::W<u32, super::IMR>;
        #[doc = "Register IMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUMIS`"]
        pub struct WUMIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUMIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABIM`"]
        pub type DMABIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABIM`"]
        pub struct DMABIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMIM`"]
        pub type TBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMIM`"]
        pub struct TBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEIM`"]
        pub type CBEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEIM`"]
        pub struct CBEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMIM`"]
        pub type CBMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMIM`"]
        pub struct CBMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOIM`"]
        pub type TBTOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOIM`"]
        pub struct TBTOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAIM`"]
        pub type DMAAIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAIM`"]
        pub struct DMAAIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMIM`"]
        pub type TAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMIM`"]
        pub struct TAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCIM`"]
        pub type RTCIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCIM`"]
        pub struct RTCIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEIM`"]
        pub type CAEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEIM`"]
        pub struct CAEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMIM`"]
        pub type CAMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMIM`"]
        pub struct CAMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOIM`"]
        pub type TATOIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOIM`"]
        pub struct TATOIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&self) -> DMABIM_R {
                DMABIM_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&self) -> TBMIM_R {
                TBMIM_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&self) -> CBEIM_R {
                CBEIM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&self) -> CBMIM_R {
                CBMIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&self) -> TBTOIM_R {
                TBTOIM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&self) -> DMAAIM_R {
                DMAAIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&self) -> TAMIM_R {
                TAMIM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&self) -> RTCIM_R {
                RTCIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&self) -> CAEIM_R {
                CAEIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&self) -> CAMIM_R {
                CAMIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&self) -> TATOIM_R {
                TATOIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&mut self) -> WUMIS_W {
                WUMIS_W { w: self }
            }
            #[doc = "Bit 13 - DMABIM"]
            #[inline(always)]
            pub fn dmabim(&mut self) -> DMABIM_W {
                DMABIM_W { w: self }
            }
            #[doc = "Bit 11 - TBMIM"]
            #[inline(always)]
            pub fn tbmim(&mut self) -> TBMIM_W {
                TBMIM_W { w: self }
            }
            #[doc = "Bit 10 - CBEIM"]
            #[inline(always)]
            pub fn cbeim(&mut self) -> CBEIM_W {
                CBEIM_W { w: self }
            }
            #[doc = "Bit 9 - CBMIM"]
            #[inline(always)]
            pub fn cbmim(&mut self) -> CBMIM_W {
                CBMIM_W { w: self }
            }
            #[doc = "Bit 8 - TBTOIM"]
            #[inline(always)]
            pub fn tbtoim(&mut self) -> TBTOIM_W {
                TBTOIM_W { w: self }
            }
            #[doc = "Bit 5 - DMAAIM"]
            #[inline(always)]
            pub fn dmaaim(&mut self) -> DMAAIM_W {
                DMAAIM_W { w: self }
            }
            #[doc = "Bit 4 - TAMIM"]
            #[inline(always)]
            pub fn tamim(&mut self) -> TAMIM_W {
                TAMIM_W { w: self }
            }
            #[doc = "Bit 3 - RTCIM"]
            #[inline(always)]
            pub fn rtcim(&mut self) -> RTCIM_W {
                RTCIM_W { w: self }
            }
            #[doc = "Bit 2 - CAEIM"]
            #[inline(always)]
            pub fn caeim(&mut self) -> CAEIM_W {
                CAEIM_W { w: self }
            }
            #[doc = "Bit 1 - CAMIM"]
            #[inline(always)]
            pub fn camim(&mut self) -> CAMIM_W {
                CAMIM_W { w: self }
            }
            #[doc = "Bit 0 - TATOIM"]
            #[inline(always)]
            pub fn tatoim(&mut self) -> TATOIM_W {
                TATOIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status Associated registers: IMR, MIS, ICLR"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `WURIS`"]
        pub type WURIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABRIS`"]
        pub type DMABRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMRIS`"]
        pub type TBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBERIS`"]
        pub type CBERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMRIS`"]
        pub type CBMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTORIS`"]
        pub type TBTORIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAARIS`"]
        pub type DMAARIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMRIS`"]
        pub type TAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCRIS`"]
        pub type RTCRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAERIS`"]
        pub type CAERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMRIS`"]
        pub type CAMRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATORIS`"]
        pub type TATORIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WURIS"]
            #[inline(always)]
            pub fn wuris(&self) -> WURIS_R {
                WURIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABRIS"]
            #[inline(always)]
            pub fn dmabris(&self) -> DMABRIS_R {
                DMABRIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMRIS"]
            #[inline(always)]
            pub fn tbmris(&self) -> TBMRIS_R {
                TBMRIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBERIS"]
            #[inline(always)]
            pub fn cberis(&self) -> CBERIS_R {
                CBERIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMRIS"]
            #[inline(always)]
            pub fn cbmris(&self) -> CBMRIS_R {
                CBMRIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTORIS"]
            #[inline(always)]
            pub fn tbtoris(&self) -> TBTORIS_R {
                TBTORIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAARIS"]
            #[inline(always)]
            pub fn dmaaris(&self) -> DMAARIS_R {
                DMAARIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMRIS"]
            #[inline(always)]
            pub fn tamris(&self) -> TAMRIS_R {
                TAMRIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCRIS"]
            #[inline(always)]
            pub fn rtcris(&self) -> RTCRIS_R {
                RTCRIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAERIS"]
            #[inline(always)]
            pub fn caeris(&self) -> CAERIS_R {
                CAERIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMRIS"]
            #[inline(always)]
            pub fn camris(&self) -> CAMRIS_R {
                CAMRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATORIS"]
            #[inline(always)]
            pub fn tatoris(&self) -> TATORIS_R {
                TATORIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status Values are result of bitwise AND operation between RIS and IMR Assosciated clear register: ICLR"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `WUMIS`"]
        pub type WUMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMABMIS`"]
        pub type DMABMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBMMIS`"]
        pub type TBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBEMIS`"]
        pub type CBEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CBMMIS`"]
        pub type CBMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TBTOMIS`"]
        pub type TBTOMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMAAMIS`"]
        pub type DMAAMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMMIS`"]
        pub type TAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTCMIS`"]
        pub type RTCMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAEMIS`"]
        pub type CAEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAMMIS`"]
        pub type CAMMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TATOMIS`"]
        pub type TATOMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 16 - WUMIS"]
            #[inline(always)]
            pub fn wumis(&self) -> WUMIS_R {
                WUMIS_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABMIS"]
            #[inline(always)]
            pub fn dmabmis(&self) -> DMABMIS_R {
                DMABMIS_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMMIS"]
            #[inline(always)]
            pub fn tbmmis(&self) -> TBMMIS_R {
                TBMMIS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEMIS"]
            #[inline(always)]
            pub fn cbemis(&self) -> CBEMIS_R {
                CBEMIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMMIS"]
            #[inline(always)]
            pub fn cbmmis(&self) -> CBMMIS_R {
                CBMMIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOMIS"]
            #[inline(always)]
            pub fn tbtomis(&self) -> TBTOMIS_R {
                TBTOMIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAMIS"]
            #[inline(always)]
            pub fn dmaamis(&self) -> DMAAMIS_R {
                DMAAMIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMMIS"]
            #[inline(always)]
            pub fn tammis(&self) -> TAMMIS_R {
                TAMMIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCMIS"]
            #[inline(always)]
            pub fn rtcmis(&self) -> RTCMIS_R {
                RTCMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEMIS"]
            #[inline(always)]
            pub fn caemis(&self) -> CAEMIS_R {
                CAEMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMMIS"]
            #[inline(always)]
            pub fn cammis(&self) -> CAMMIS_R {
                CAMMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOMIS"]
            #[inline(always)]
            pub fn tatomis(&self) -> TATOMIS_R {
                TATOMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iclr](iclr) module"]
    pub type ICLR = crate::Reg<u32, _ICLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICLR;
    #[doc = "`read()` method returns [iclr::R](iclr::R) reader structure"]
    impl crate::Readable for ICLR {}
    #[doc = "`write(|w| ..)` method takes [iclr::W](iclr::W) writer structure"]
    impl crate::Writable for ICLR {}
    #[doc = "Interrupt Clear This register is used to clear status bits in the RIS and MIS registers"]
    pub mod iclr {
        #[doc = "Reader of register ICLR"]
        pub type R = crate::R<u32, super::ICLR>;
        #[doc = "Writer for register ICLR"]
        pub type W = crate::W<u32, super::ICLR>;
        #[doc = "Register ICLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUECINT`"]
        pub type WUECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUECINT`"]
        pub struct WUECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DMABINT`"]
        pub type DMABINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMABINT`"]
        pub struct DMABINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMABINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TBMCINT`"]
        pub type TBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMCINT`"]
        pub struct TBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBECINT`"]
        pub type CBECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBECINT`"]
        pub struct CBECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMCINT`"]
        pub type CBMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMCINT`"]
        pub struct CBMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTOCINT`"]
        pub type TBTOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTOCINT`"]
        pub struct TBTOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAAINT`"]
        pub type DMAAINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAAINT`"]
        pub struct DMAAINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAAINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMCINT`"]
        pub type TAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMCINT`"]
        pub struct TAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCCINT`"]
        pub type RTCCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCCINT`"]
        pub struct RTCCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAECINT`"]
        pub type CAECINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAECINT`"]
        pub struct CAECINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAECINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMCINT`"]
        pub type CAMCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMCINT`"]
        pub struct CAMCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATOCINT`"]
        pub type TATOCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATOCINT`"]
        pub struct TATOCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATOCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&self) -> WUECINT_R {
                WUECINT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&self) -> DMABINT_R {
                DMABINT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&self) -> TBMCINT_R {
                TBMCINT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&self) -> CBECINT_R {
                CBECINT_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&self) -> CBMCINT_R {
                CBMCINT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&self) -> TBTOCINT_R {
                TBTOCINT_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&self) -> DMAAINT_R {
                DMAAINT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&self) -> TAMCINT_R {
                TAMCINT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&self) -> RTCCINT_R {
                RTCCINT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&self) -> CAECINT_R {
                CAECINT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&self) -> CAMCINT_R {
                CAMCINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&self) -> TATOCINT_R {
                TATOCINT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - WUECINT"]
            #[inline(always)]
            pub fn wuecint(&mut self) -> WUECINT_W {
                WUECINT_W { w: self }
            }
            #[doc = "Bit 13 - DMABINT"]
            #[inline(always)]
            pub fn dmabint(&mut self) -> DMABINT_W {
                DMABINT_W { w: self }
            }
            #[doc = "Bit 11 - TBMCINT"]
            #[inline(always)]
            pub fn tbmcint(&mut self) -> TBMCINT_W {
                TBMCINT_W { w: self }
            }
            #[doc = "Bit 10 - CBECINT"]
            #[inline(always)]
            pub fn cbecint(&mut self) -> CBECINT_W {
                CBECINT_W { w: self }
            }
            #[doc = "Bit 9 - CBMCINT"]
            #[inline(always)]
            pub fn cbmcint(&mut self) -> CBMCINT_W {
                CBMCINT_W { w: self }
            }
            #[doc = "Bit 8 - TBTOCINT"]
            #[inline(always)]
            pub fn tbtocint(&mut self) -> TBTOCINT_W {
                TBTOCINT_W { w: self }
            }
            #[doc = "Bit 5 - DMAAINT"]
            #[inline(always)]
            pub fn dmaaint(&mut self) -> DMAAINT_W {
                DMAAINT_W { w: self }
            }
            #[doc = "Bit 4 - TAMCINT"]
            #[inline(always)]
            pub fn tamcint(&mut self) -> TAMCINT_W {
                TAMCINT_W { w: self }
            }
            #[doc = "Bit 3 - RTCCINT"]
            #[inline(always)]
            pub fn rtccint(&mut self) -> RTCCINT_W {
                RTCCINT_W { w: self }
            }
            #[doc = "Bit 2 - CAECINT"]
            #[inline(always)]
            pub fn caecint(&mut self) -> CAECINT_W {
                CAECINT_W { w: self }
            }
            #[doc = "Bit 1 - CAMCINT"]
            #[inline(always)]
            pub fn camcint(&mut self) -> CAMCINT_W {
                CAMCINT_W { w: self }
            }
            #[doc = "Bit 0 - TATOCINT"]
            #[inline(always)]
            pub fn tatocint(&mut self) -> TATOCINT_W {
                TATOCINT_W { w: self }
            }
        }
    }
    #[doc = "Timer A Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tailr](tailr) module"]
    pub type TAILR = crate::Reg<u32, _TAILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAILR;
    #[doc = "`read()` method returns [tailr::R](tailr::R) reader structure"]
    impl crate::Readable for TAILR {}
    #[doc = "`write(|w| ..)` method takes [tailr::W](tailr::W) writer structure"]
    impl crate::Writable for TAILR {}
    #[doc = "Timer A Interval Load Register"]
    pub mod tailr {
        #[doc = "Reader of register TAILR"]
        pub type R = crate::R<u32, super::TAILR>;
        #[doc = "Writer for register TAILR"]
        pub type W = crate::W<u32, super::TAILR>;
        #[doc = "Register TAILR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAILR`"]
        pub type TAILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAILR`"]
        pub struct TAILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&self) -> TAILR_R {
                TAILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAILR"]
            #[inline(always)]
            pub fn tailr(&mut self) -> TAILR_W {
                TAILR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Interval Load Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbilr](tbilr) module"]
    pub type TBILR = crate::Reg<u32, _TBILR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBILR;
    #[doc = "`read()` method returns [tbilr::R](tbilr::R) reader structure"]
    impl crate::Readable for TBILR {}
    #[doc = "`write(|w| ..)` method takes [tbilr::W](tbilr::W) writer structure"]
    impl crate::Writable for TBILR {}
    #[doc = "Timer B Interval Load Register"]
    pub mod tbilr {
        #[doc = "Reader of register TBILR"]
        pub type R = crate::R<u32, super::TBILR>;
        #[doc = "Writer for register TBILR"]
        pub type W = crate::W<u32, super::TBILR>;
        #[doc = "Register TBILR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBILR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBILR`"]
        pub type TBILR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBILR`"]
        pub struct TBILR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBILR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&self) -> TBILR_R {
                TBILR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBILR"]
            #[inline(always)]
            pub fn tbilr(&mut self) -> TBILR_W {
                TBILR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tamatchr](tamatchr) module"]
    pub type TAMATCHR = crate::Reg<u32, _TAMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAMATCHR;
    #[doc = "`read()` method returns [tamatchr::R](tamatchr::R) reader structure"]
    impl crate::Readable for TAMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tamatchr::W](tamatchr::W) writer structure"]
    impl crate::Writable for TAMATCHR {}
    #[doc = "Timer A Match Register Interrupts can be generated when the timer value is equal to the value in this register in one-shot or periodic mode. In Edge-Count mode, this register along with TAILR, determines how many edge events are counted. The total number of edge events counted is equal to the value in TAILR minus this value. Note that in edge-count mode, when executing an up-count, the value of TAPR and TAILR must be greater than the value of TAPMR and TAMATCHR. In PWM mode, this value along with TAILR, determines the duty cycle of the output PWM signal. When a 16/32-bit GPT is configured to one of the 32-bit modes, TAMATCHR appears as a 32-bit register. (The upper 16-bits correspond to the contents TBMATCHR). In a 16-bit mode, the upper 16 bits of this register read as 0s and have no effect on the state of TBMATCHR. Note : This register is updated internally (takes effect) based on TAMR.TAMRSU"]
    pub mod tamatchr {
        #[doc = "Reader of register TAMATCHR"]
        pub type R = crate::R<u32, super::TAMATCHR>;
        #[doc = "Writer for register TAMATCHR"]
        pub type W = crate::W<u32, super::TAMATCHR>;
        #[doc = "Register TAMATCHR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAMATCHR`"]
        pub type TAMATCHR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAMATCHR`"]
        pub struct TAMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&self) -> TAMATCHR_R {
                TAMATCHR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAMATCHR"]
            #[inline(always)]
            pub fn tamatchr(&mut self) -> TAMATCHR_W {
                TAMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbmatchr](tbmatchr) module"]
    pub type TBMATCHR = crate::Reg<u32, _TBMATCHR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBMATCHR;
    #[doc = "`read()` method returns [tbmatchr::R](tbmatchr::R) reader structure"]
    impl crate::Readable for TBMATCHR {}
    #[doc = "`write(|w| ..)` method takes [tbmatchr::W](tbmatchr::W) writer structure"]
    impl crate::Writable for TBMATCHR {}
    #[doc = "Timer B Match Register When a GPT is configured to one of the 32-bit modes, the contents of bits 15:0 in this register are loaded into the upper 16 bits of TAMATCHR. Reads from this register return the current match value of Timer B and writes are ignored. In a 16-bit mode, bits 15:0 are used for the match value. Bits 31:16 are reserved in both cases. Note : This register is updated internally (takes effect) based on TBMR.TBMRSU"]
    pub mod tbmatchr {
        #[doc = "Reader of register TBMATCHR"]
        pub type R = crate::R<u32, super::TBMATCHR>;
        #[doc = "Writer for register TBMATCHR"]
        pub type W = crate::W<u32, super::TBMATCHR>;
        #[doc = "Register TBMATCHR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBMATCHR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBMATCHR`"]
        pub type TBMATCHR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TBMATCHR`"]
        pub struct TBMATCHR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMATCHR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&self) -> TBMATCHR_R {
                TBMATCHR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - TBMATCHR"]
            #[inline(always)]
            pub fn tbmatchr(&mut self) -> TBMATCHR_W {
                TBMATCHR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapr](tapr) module"]
    pub type TAPR = crate::Reg<u32, _TAPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPR;
    #[doc = "`read()` method returns [tapr::R](tapr::R) reader structure"]
    impl crate::Readable for TAPR {}
    #[doc = "`write(|w| ..)` method takes [tapr::W](tapr::W) writer structure"]
    impl crate::Writable for TAPR {}
    #[doc = "Timer A Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TAR and TAV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tapr {
        #[doc = "Reader of register TAPR"]
        pub type R = crate::R<u32, super::TAPR>;
        #[doc = "Writer for register TAPR"]
        pub type W = crate::W<u32, super::TAPR>;
        #[doc = "Register TAPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSR`"]
        pub type TAPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSR`"]
        pub struct TAPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&self) -> TAPSR_R {
                TAPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSR"]
            #[inline(always)]
            pub fn tapsr(&mut self) -> TAPSR_W {
                TAPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpr](tbpr) module"]
    pub type TBPR = crate::Reg<u32, _TBPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPR;
    #[doc = "`read()` method returns [tbpr::R](tbpr::R) reader structure"]
    impl crate::Readable for TBPR {}
    #[doc = "`write(|w| ..)` method takes [tbpr::W](tbpr::W) writer structure"]
    impl crate::Writable for TBPR {}
    #[doc = "Timer B Pre-scale This register allows software to extend the range of the timers when they are used individually. When in one-shot or periodic down count modes, this register acts as a true prescaler for the timer counter. When acting as a true prescaler, the prescaler counts down to 0 before the value in TBR and TBV registers are incremented. In all other individual/split modes, this register is a linear extension of the upper range of the timer counter, holding bits 23:16 in the 16-bit modes of the 16/32-bit GPT."]
    pub mod tbpr {
        #[doc = "Reader of register TBPR"]
        pub type R = crate::R<u32, super::TBPR>;
        #[doc = "Writer for register TBPR"]
        pub type W = crate::W<u32, super::TBPR>;
        #[doc = "Register TBPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSR`"]
        pub type TBPSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSR`"]
        pub struct TBPSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&self) -> TBPSR_R {
                TBPSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSR"]
            #[inline(always)]
            pub fn tbpsr(&mut self) -> TBPSR_W {
                TBPSR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapmr](tapmr) module"]
    pub type TAPMR = crate::Reg<u32, _TAPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPMR;
    #[doc = "`read()` method returns [tapmr::R](tapmr::R) reader structure"]
    impl crate::Readable for TAPMR {}
    #[doc = "`write(|w| ..)` method takes [tapmr::W](tapmr::W) writer structure"]
    impl crate::Writable for TAPMR {}
    #[doc = "Timer A Pre-scale Match This register allows software to extend the range of the TAMATCHR when used individually."]
    pub mod tapmr {
        #[doc = "Reader of register TAPMR"]
        pub type R = crate::R<u32, super::TAPMR>;
        #[doc = "Writer for register TAPMR"]
        pub type W = crate::W<u32, super::TAPMR>;
        #[doc = "Register TAPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TAPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAPSMR`"]
        pub type TAPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAPSMR`"]
        pub struct TAPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&self) -> TAPSMR_R {
                TAPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TAPSMR"]
            #[inline(always)]
            pub fn tapsmr(&mut self) -> TAPSMR_W {
                TAPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpmr](tbpmr) module"]
    pub type TBPMR = crate::Reg<u32, _TBPMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPMR;
    #[doc = "`read()` method returns [tbpmr::R](tbpmr::R) reader structure"]
    impl crate::Readable for TBPMR {}
    #[doc = "`write(|w| ..)` method takes [tbpmr::W](tbpmr::W) writer structure"]
    impl crate::Writable for TBPMR {}
    #[doc = "Timer B Pre-scale Match This register allows software to extend the range of the TBMATCHR when used individually."]
    pub mod tbpmr {
        #[doc = "Reader of register TBPMR"]
        pub type R = crate::R<u32, super::TBPMR>;
        #[doc = "Writer for register TBPMR"]
        pub type W = crate::W<u32, super::TBPMR>;
        #[doc = "Register TBPMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TBPMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBPSMR`"]
        pub type TBPSMR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TBPSMR`"]
        pub struct TBPSMR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBPSMR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&self) -> TBPSMR_R {
                TBPSMR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - TBPSMR"]
            #[inline(always)]
            pub fn tbpsmr(&mut self) -> TBPSMR_W {
                TBPSMR_W { w: self }
            }
        }
    }
    #[doc = "Timer A Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tar](tar) module"]
    pub type TAR = crate::Reg<u32, _TAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAR;
    #[doc = "`read()` method returns [tar::R](tar::R) reader structure"]
    impl crate::Readable for TAR {}
    #[doc = "Timer A Register"]
    pub mod tar {
        #[doc = "Reader of register TAR"]
        pub type R = crate::R<u32, super::TAR>;
        #[doc = "Reader of field `TAR`"]
        pub type TAR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TAR"]
            #[inline(always)]
            pub fn tar(&self) -> TAR_R {
                TAR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer B Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbr](tbr) module"]
    pub type TBR = crate::Reg<u32, _TBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBR;
    #[doc = "`read()` method returns [tbr::R](tbr::R) reader structure"]
    impl crate::Readable for TBR {}
    #[doc = "Timer B Register"]
    pub mod tbr {
        #[doc = "Reader of register TBR"]
        pub type R = crate::R<u32, super::TBR>;
        #[doc = "Reader of field `TBR`"]
        pub type TBR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - TBR"]
            #[inline(always)]
            pub fn tbr(&self) -> TBR_R {
                TBR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tav](tav) module"]
    pub type TAV = crate::Reg<u32, _TAV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAV;
    #[doc = "`read()` method returns [tav::R](tav::R) reader structure"]
    impl crate::Readable for TAV {}
    #[doc = "`write(|w| ..)` method takes [tav::W](tav::W) writer structure"]
    impl crate::Writable for TAV {}
    #[doc = "Timer A Value This register shows the current value of the free running 16-bit Timer A. In the 32-bit mode"]
    pub mod tav {
        #[doc = "Reader of register TAV"]
        pub type R = crate::R<u32, super::TAV>;
        #[doc = "Writer for register TAV"]
        pub type W = crate::W<u32, super::TAV>;
        #[doc = "Register TAV `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::TAV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `TAV`"]
        pub type TAV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TAV`"]
        pub struct TAV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&self) -> TAV_R {
                TAV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TAV"]
            #[inline(always)]
            pub fn tav(&mut self) -> TAV_W {
                TAV_W { w: self }
            }
        }
    }
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbv](tbv) module"]
    pub type TBV = crate::Reg<u32, _TBV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBV;
    #[doc = "`read()` method returns [tbv::R](tbv::R) reader structure"]
    impl crate::Readable for TBV {}
    #[doc = "`write(|w| ..)` method takes [tbv::W](tbv::W) writer structure"]
    impl crate::Writable for TBV {}
    #[doc = "Timer B Value This register shows the current value of the free running 16-bit Timer B. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tbv {
        #[doc = "Reader of register TBV"]
        pub type R = crate::R<u32, super::TBV>;
        #[doc = "Writer for register TBV"]
        pub type W = crate::W<u32, super::TBV>;
        #[doc = "Register TBV `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::TBV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `TBV`"]
        pub type TBV_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TBV`"]
        pub struct TBV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&self) -> TBV_R {
                TBV_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - TBV"]
            #[inline(always)]
            pub fn tbv(&mut self) -> TBV_W {
                TBV_W { w: self }
            }
        }
    }
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtcpd](rtcpd) module"]
    pub type RTCPD = crate::Reg<u32, _RTCPD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTCPD;
    #[doc = "`read()` method returns [rtcpd::R](rtcpd::R) reader structure"]
    impl crate::Readable for RTCPD {}
    #[doc = "RTC Pre-divide Value This register shows the current value of the RTC pre-divider in RTC mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count -1."]
    pub mod rtcpd {
        #[doc = "Reader of register RTCPD"]
        pub type R = crate::R<u32, super::RTCPD>;
        #[doc = "Reader of field `RTCPD`"]
        pub type RTCPD_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTCPD"]
            #[inline(always)]
            pub fn rtcpd(&self) -> RTCPD_R {
                RTCPD_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taps](taps) module"]
    pub type TAPS = crate::Reg<u32, _TAPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPS;
    #[doc = "`read()` method returns [taps::R](taps::R) reader structure"]
    impl crate::Readable for TAPS {}
    #[doc = "Timer A Pre-scale Snap-shot Based on the value in the register field TAMR.TAILD, this register is updated with the value from TAPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer A pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod taps {
        #[doc = "Reader of register TAPS"]
        pub type R = crate::R<u32, super::TAPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbps](tbps) module"]
    pub type TBPS = crate::Reg<u32, _TBPS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPS;
    #[doc = "`read()` method returns [tbps::R](tbps::R) reader structure"]
    impl crate::Readable for TBPS {}
    #[doc = "Timer B Pre-scale Snap-shot Based on the value in the register field TBMR.TBILD, this register is updated with the value from TBPR register either on the next cycle or on the next timeout. This register shows the current value of the Timer B pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled a read of a timer value will return the current count -1."]
    pub mod tbps {
        #[doc = "Reader of register TBPS"]
        pub type R = crate::R<u32, super::TBPS>;
        #[doc = "Reader of field `PSS`"]
        pub type PSS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSS"]
            #[inline(always)]
            pub fn pss(&self) -> PSS_R {
                PSS_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tapv](tapv) module"]
    pub type TAPV = crate::Reg<u32, _TAPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TAPV;
    #[doc = "`read()` method returns [tapv::R](tapv::R) reader structure"]
    impl crate::Readable for TAPV {}
    #[doc = "Timer A Pre-scale Value This register shows the current value of the Timer A free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count 1."]
    pub mod tapv {
        #[doc = "Reader of register TAPV"]
        pub type R = crate::R<u32, super::TAPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tbpv](tbpv) module"]
    pub type TBPV = crate::Reg<u32, _TBPV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TBPV;
    #[doc = "`read()` method returns [tbpv::R](tbpv::R) reader structure"]
    impl crate::Readable for TBPV {}
    #[doc = "Timer B Pre-scale Value This register shows the current value of the Timer B free running pre-scaler in the 16-bit mode. Note: When the alternate timer clock (TIMCLK) is enabled, a read of a timer value will return the current count-1."]
    pub mod tbpv {
        #[doc = "Reader of register TBPV"]
        pub type R = crate::R<u32, super::TBPV>;
        #[doc = "Reader of field `PSV`"]
        pub type PSV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PSV"]
            #[inline(always)]
            pub fn psv(&self) -> PSV_R {
                PSV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmaev](dmaev) module"]
    pub type DMAEV = crate::Reg<u32, _DMAEV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAEV;
    #[doc = "`read()` method returns [dmaev::R](dmaev::R) reader structure"]
    impl crate::Readable for DMAEV {}
    #[doc = "`write(|w| ..)` method takes [dmaev::W](dmaev::W) writer structure"]
    impl crate::Writable for DMAEV {}
    #[doc = "DMA Event This register allows software to enable/disable GPT DMA trigger events."]
    pub mod dmaev {
        #[doc = "Reader of register DMAEV"]
        pub type R = crate::R<u32, super::DMAEV>;
        #[doc = "Writer for register DMAEV"]
        pub type W = crate::W<u32, super::DMAEV>;
        #[doc = "Register DMAEV `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAEV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TBMDMAEN`"]
        pub type TBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBMDMAEN`"]
        pub struct TBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CBEDMAEN`"]
        pub type CBEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBEDMAEN`"]
        pub struct CBEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CBMDMAEN`"]
        pub type CBMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CBMDMAEN`"]
        pub struct CBMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CBMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TBTODMAEN`"]
        pub type TBTODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TBTODMAEN`"]
        pub struct TBTODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TBTODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TAMDMAEN`"]
        pub type TAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMDMAEN`"]
        pub struct TAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `RTCDMAEN`"]
        pub type RTCDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCDMAEN`"]
        pub struct RTCDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CAEDMAEN`"]
        pub type CAEDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAEDMAEN`"]
        pub struct CAEDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAEDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CAMDMAEN`"]
        pub type CAMDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CAMDMAEN`"]
        pub struct CAMDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAMDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TATODMAEN`"]
        pub type TATODMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TATODMAEN`"]
        pub struct TATODMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TATODMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&self) -> TBMDMAEN_R {
                TBMDMAEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&self) -> CBEDMAEN_R {
                CBEDMAEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&self) -> CBMDMAEN_R {
                CBMDMAEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&self) -> TBTODMAEN_R {
                TBTODMAEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&self) -> TAMDMAEN_R {
                TAMDMAEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&self) -> RTCDMAEN_R {
                RTCDMAEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&self) -> CAEDMAEN_R {
                CAEDMAEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&self) -> CAMDMAEN_R {
                CAMDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&self) -> TATODMAEN_R {
                TATODMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - TBMDMAEN"]
            #[inline(always)]
            pub fn tbmdmaen(&mut self) -> TBMDMAEN_W {
                TBMDMAEN_W { w: self }
            }
            #[doc = "Bit 10 - CBEDMAEN"]
            #[inline(always)]
            pub fn cbedmaen(&mut self) -> CBEDMAEN_W {
                CBEDMAEN_W { w: self }
            }
            #[doc = "Bit 9 - CBMDMAEN"]
            #[inline(always)]
            pub fn cbmdmaen(&mut self) -> CBMDMAEN_W {
                CBMDMAEN_W { w: self }
            }
            #[doc = "Bit 8 - TBTODMAEN"]
            #[inline(always)]
            pub fn tbtodmaen(&mut self) -> TBTODMAEN_W {
                TBTODMAEN_W { w: self }
            }
            #[doc = "Bit 4 - TAMDMAEN"]
            #[inline(always)]
            pub fn tamdmaen(&mut self) -> TAMDMAEN_W {
                TAMDMAEN_W { w: self }
            }
            #[doc = "Bit 3 - RTCDMAEN"]
            #[inline(always)]
            pub fn rtcdmaen(&mut self) -> RTCDMAEN_W {
                RTCDMAEN_W { w: self }
            }
            #[doc = "Bit 2 - CAEDMAEN"]
            #[inline(always)]
            pub fn caedmaen(&mut self) -> CAEDMAEN_W {
                CAEDMAEN_W { w: self }
            }
            #[doc = "Bit 1 - CAMDMAEN"]
            #[inline(always)]
            pub fn camdmaen(&mut self) -> CAMDMAEN_W {
                CAMDMAEN_W { w: self }
            }
            #[doc = "Bit 0 - TATODMAEN"]
            #[inline(always)]
            pub fn tatodmaen(&mut self) -> TATODMAEN_W {
                TATODMAEN_W { w: self }
            }
        }
    }
    #[doc = "Peripheral Version This register provides information regarding the GPT version\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [version](version) module"]
    pub type VERSION = crate::Reg<u32, _VERSION>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VERSION;
    #[doc = "`read()` method returns [version::R](version::R) reader structure"]
    impl crate::Readable for VERSION {}
    #[doc = "Peripheral Version This register provides information regarding the GPT version"]
    pub mod version {
        #[doc = "Reader of register VERSION"]
        pub type R = crate::R<u32, super::VERSION>;
        #[doc = "Reader of field `VERSION`"]
        pub type VERSION_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - VERSION"]
            #[inline(always)]
            pub fn version(&self) -> VERSION_R {
                VERSION_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [andccp](andccp) module"]
    pub type ANDCCP = crate::Reg<u32, _ANDCCP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ANDCCP;
    #[doc = "`read()` method returns [andccp::R](andccp::R) reader structure"]
    impl crate::Readable for ANDCCP {}
    #[doc = "`write(|w| ..)` method takes [andccp::W](andccp::W) writer structure"]
    impl crate::Writable for ANDCCP {}
    #[doc = "Combined CCP Output This register is used to logically AND CCP output pairs for each timer"]
    pub mod andccp {
        #[doc = "Reader of register ANDCCP"]
        pub type R = crate::R<u32, super::ANDCCP>;
        #[doc = "Writer for register ANDCCP"]
        pub type W = crate::W<u32, super::ANDCCP>;
        #[doc = "Register ANDCCP `reset()`'s with value 0"]
        impl crate::ResetValue for super::ANDCCP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCP_AND_EN`"]
        pub type CCP_AND_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCP_AND_EN`"]
        pub struct CCP_AND_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCP_AND_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&self) -> CCP_AND_EN_R {
                CCP_AND_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CCP_AND_EN"]
            #[inline(always)]
            pub fn ccp_and_en(&mut self) -> CCP_AND_EN_W {
                CCP_AND_EN_W { w: self }
            }
        }
    }
}
#[doc = "I2CMaster/Slave Serial Controler"]
pub struct I2C0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C0 {}
impl I2C0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        0x4000_2000 as *const _
    }
}
impl Deref for I2C0 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C0::ptr() }
    }
}
#[doc = "I2CMaster/Slave Serial Controler"]
pub mod i2c0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Slave Own Address This register consists of seven address bits that identify this I2C device on the I2C bus."]
        pub soar: SOAR,
        _reserved_1_sctl: [u8; 4usize],
        #[doc = "0x08 - Slave Data This register contains the data to be transmitted when in the Slave Transmit state, and the data received when in the Slave Receive state."]
        pub sdr: SDR,
        #[doc = "0x0c - Slave Interrupt Mask This register controls whether a raw interrupt is promoted to a controller interrupt."]
        pub simr: SIMR,
        #[doc = "0x10 - Slave Raw Interrupt Status This register shows the unmasked interrupt status."]
        pub sris: SRIS,
        #[doc = "0x14 - Slave Masked Interrupt Status This register show which interrupt is active (based on result from SRIS and SIMR)."]
        pub smis: SMIS,
        #[doc = "0x18 - Slave Interrupt Clear This register clears the raw interrupt SRIS."]
        pub sicr: SICR,
        _reserved7: [u8; 2020usize],
        #[doc = "0x800 - Master Salve Address This register contains seven address bits of the slave to be accessed by the master (a6-a0), and an RS bit determining if the next operation is a receive or transmit."]
        pub msa: MSA,
        _reserved_8_mctrl: [u8; 4usize],
        #[doc = "0x808 - Master Data This register contains the data to be transmitted when in the Master Transmit state and the data received when in the Master Receive state."]
        pub mdr: MDR,
        #[doc = "0x80c - I2C Master Timer Period This register specifies the period of the SCL clock."]
        pub mtpr: MTPR,
        #[doc = "0x810 - Master Interrupt Mask This register controls whether a raw interrupt is promoted to a controller interrupt."]
        pub mimr: MIMR,
        #[doc = "0x814 - Master Raw Interrupt Status This register show the unmasked interrupt status."]
        pub mris: MRIS,
        #[doc = "0x818 - Master Masked Interrupt Status This register show which interrupt is active (based on result from MRIS and MIMR)."]
        pub mmis: MMIS,
        #[doc = "0x81c - Master Interrupt Clear This register clears the raw and masked interrupt."]
        pub micr: MICR,
        #[doc = "0x820 - Master Configuration This register configures the mode (Master or Slave) and sets the interface for test mode loopback."]
        pub mcr: MCR,
    }
    impl RegisterBlock {
        #[doc = "0x04 - Slave Control Note: This register shares address with SSTAT, meaning that this register functions as a control register when written, and a status register when read."]
        #[inline(always)]
        pub fn sctl(&self) -> &SCTL {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const SCTL) }
        }
        #[doc = "0x04 - Slave Control Note: This register shares address with SSTAT, meaning that this register functions as a control register when written, and a status register when read."]
        #[inline(always)]
        pub fn sctl_mut(&self) -> &mut SCTL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut SCTL) }
        }
        #[doc = "0x04 - Slave Status Note: This register shares address with SCTL, meaning that this register functions as a control register when written, and a status register when read."]
        #[inline(always)]
        pub fn sstat(&self) -> &SSTAT {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const SSTAT) }
        }
        #[doc = "0x04 - Slave Status Note: This register shares address with SCTL, meaning that this register functions as a control register when written, and a status register when read."]
        #[inline(always)]
        pub fn sstat_mut(&self) -> &mut SSTAT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut SSTAT) }
        }
        #[doc = "0x804 - Master Control This register accesses status bits when read and control bits when written. When read, the status register indicates the state of the I2C bus controller as stated in MSTAT. When written, the control register configures the I2C controller operation. To generate a single transmit cycle, the I2C Master Slave Address (MSA) register is written with the desired address, the MSA.RS bit is cleared, and this register is written with * ACK=X (0 or 1), * STOP=1, * START=1, * RUN=1 to perform the operation and stop. When the operation is completed (or aborted due an error), an interrupt becomes active and the data may be read from the MDR register."]
        #[inline(always)]
        pub fn mctrl(&self) -> &MCTRL {
            unsafe { &*(((self as *const Self) as *const u8).add(2052usize) as *const MCTRL) }
        }
        #[doc = "0x804 - Master Control This register accesses status bits when read and control bits when written. When read, the status register indicates the state of the I2C bus controller as stated in MSTAT. When written, the control register configures the I2C controller operation. To generate a single transmit cycle, the I2C Master Slave Address (MSA) register is written with the desired address, the MSA.RS bit is cleared, and this register is written with * ACK=X (0 or 1), * STOP=1, * START=1, * RUN=1 to perform the operation and stop. When the operation is completed (or aborted due an error), an interrupt becomes active and the data may be read from the MDR register."]
        #[inline(always)]
        pub fn mctrl_mut(&self) -> &mut MCTRL {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(2052usize) as *mut MCTRL) }
        }
        #[doc = "0x804 - Master Status"]
        #[inline(always)]
        pub fn mstat(&self) -> &MSTAT {
            unsafe { &*(((self as *const Self) as *const u8).add(2052usize) as *const MSTAT) }
        }
        #[doc = "0x804 - Master Status"]
        #[inline(always)]
        pub fn mstat_mut(&self) -> &mut MSTAT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(2052usize) as *mut MSTAT) }
        }
    }
    #[doc = "Slave Own Address This register consists of seven address bits that identify this I2C device on the I2C bus.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [soar](soar) module"]
    pub type SOAR = crate::Reg<u32, _SOAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOAR;
    #[doc = "`read()` method returns [soar::R](soar::R) reader structure"]
    impl crate::Readable for SOAR {}
    #[doc = "`write(|w| ..)` method takes [soar::W](soar::W) writer structure"]
    impl crate::Writable for SOAR {}
    #[doc = "Slave Own Address This register consists of seven address bits that identify this I2C device on the I2C bus."]
    pub mod soar {
        #[doc = "Reader of register SOAR"]
        pub type R = crate::R<u32, super::SOAR>;
        #[doc = "Writer for register SOAR"]
        pub type W = crate::W<u32, super::SOAR>;
        #[doc = "Register SOAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SOAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OAR`"]
        pub type OAR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OAR`"]
        pub struct OAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - OAR"]
            #[inline(always)]
            pub fn oar(&self) -> OAR_R {
                OAR_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - OAR"]
            #[inline(always)]
            pub fn oar(&mut self) -> OAR_W {
                OAR_W { w: self }
            }
        }
    }
    #[doc = "Slave Status Note: This register shares address with SCTL, meaning that this register functions as a control register when written, and a status register when read.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sstat](sstat) module"]
    pub type SSTAT = crate::Reg<u32, _SSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSTAT;
    #[doc = "`read()` method returns [sstat::R](sstat::R) reader structure"]
    impl crate::Readable for SSTAT {}
    #[doc = "Slave Status Note: This register shares address with SCTL, meaning that this register functions as a control register when written, and a status register when read."]
    pub mod sstat {
        #[doc = "Reader of register SSTAT"]
        pub type R = crate::R<u32, super::SSTAT>;
        #[doc = "Reader of field `FBR`"]
        pub type FBR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TREQ`"]
        pub type TREQ_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RREQ`"]
        pub type RREQ_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - FBR"]
            #[inline(always)]
            pub fn fbr(&self) -> FBR_R {
                FBR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TREQ"]
            #[inline(always)]
            pub fn treq(&self) -> TREQ_R {
                TREQ_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RREQ"]
            #[inline(always)]
            pub fn rreq(&self) -> RREQ_R {
                RREQ_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Slave Control Note: This register shares address with SSTAT, meaning that this register functions as a control register when written, and a status register when read.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sctl](sctl) module"]
    pub type SCTL = crate::Reg<u32, _SCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SCTL;
    #[doc = "`write(|w| ..)` method takes [sctl::W](sctl::W) writer structure"]
    impl crate::Writable for SCTL {}
    #[doc = "Slave Control Note: This register shares address with SSTAT, meaning that this register functions as a control register when written, and a status register when read."]
    pub mod sctl {
        #[doc = "Writer for register SCTL"]
        pub type W = crate::W<u32, super::SCTL>;
        #[doc = "Register SCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DA`"]
        pub struct DA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - DA"]
            #[inline(always)]
            pub fn da(&mut self) -> DA_W {
                DA_W { w: self }
            }
        }
    }
    #[doc = "Slave Data This register contains the data to be transmitted when in the Slave Transmit state, and the data received when in the Slave Receive state.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sdr](sdr) module"]
    pub type SDR = crate::Reg<u32, _SDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SDR;
    #[doc = "`read()` method returns [sdr::R](sdr::R) reader structure"]
    impl crate::Readable for SDR {}
    #[doc = "`write(|w| ..)` method takes [sdr::W](sdr::W) writer structure"]
    impl crate::Writable for SDR {}
    #[doc = "Slave Data This register contains the data to be transmitted when in the Slave Transmit state, and the data received when in the Slave Receive state."]
    pub mod sdr {
        #[doc = "Reader of register SDR"]
        pub type R = crate::R<u32, super::SDR>;
        #[doc = "Writer for register SDR"]
        pub type W = crate::W<u32, super::SDR>;
        #[doc = "Register SDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "Slave Interrupt Mask This register controls whether a raw interrupt is promoted to a controller interrupt.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [simr](simr) module"]
    pub type SIMR = crate::Reg<u32, _SIMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SIMR;
    #[doc = "`read()` method returns [simr::R](simr::R) reader structure"]
    impl crate::Readable for SIMR {}
    #[doc = "`write(|w| ..)` method takes [simr::W](simr::W) writer structure"]
    impl crate::Writable for SIMR {}
    #[doc = "Slave Interrupt Mask This register controls whether a raw interrupt is promoted to a controller interrupt."]
    pub mod simr {
        #[doc = "Reader of register SIMR"]
        pub type R = crate::R<u32, super::SIMR>;
        #[doc = "Writer for register SIMR"]
        pub type W = crate::W<u32, super::SIMR>;
        #[doc = "Register SIMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SIMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STOPIM`"]
        pub type STOPIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STOPIM`"]
        pub struct STOPIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `STARTIM`"]
        pub type STARTIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STARTIM`"]
        pub struct STARTIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STARTIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DATAIM`"]
        pub type DATAIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DATAIM`"]
        pub struct DATAIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - STOPIM"]
            #[inline(always)]
            pub fn stopim(&self) -> STOPIM_R {
                STOPIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - STARTIM"]
            #[inline(always)]
            pub fn startim(&self) -> STARTIM_R {
                STARTIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DATAIM"]
            #[inline(always)]
            pub fn dataim(&self) -> DATAIM_R {
                DATAIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - STOPIM"]
            #[inline(always)]
            pub fn stopim(&mut self) -> STOPIM_W {
                STOPIM_W { w: self }
            }
            #[doc = "Bit 1 - STARTIM"]
            #[inline(always)]
            pub fn startim(&mut self) -> STARTIM_W {
                STARTIM_W { w: self }
            }
            #[doc = "Bit 0 - DATAIM"]
            #[inline(always)]
            pub fn dataim(&mut self) -> DATAIM_W {
                DATAIM_W { w: self }
            }
        }
    }
    #[doc = "Slave Raw Interrupt Status This register shows the unmasked interrupt status.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sris](sris) module"]
    pub type SRIS = crate::Reg<u32, _SRIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SRIS;
    #[doc = "`read()` method returns [sris::R](sris::R) reader structure"]
    impl crate::Readable for SRIS {}
    #[doc = "Slave Raw Interrupt Status This register shows the unmasked interrupt status."]
    pub mod sris {
        #[doc = "Reader of register SRIS"]
        pub type R = crate::R<u32, super::SRIS>;
        #[doc = "Reader of field `STOPRIS`"]
        pub type STOPRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STARTRIS`"]
        pub type STARTRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DATARIS`"]
        pub type DATARIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - STOPRIS"]
            #[inline(always)]
            pub fn stopris(&self) -> STOPRIS_R {
                STOPRIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - STARTRIS"]
            #[inline(always)]
            pub fn startris(&self) -> STARTRIS_R {
                STARTRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DATARIS"]
            #[inline(always)]
            pub fn dataris(&self) -> DATARIS_R {
                DATARIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Slave Masked Interrupt Status This register show which interrupt is active (based on result from SRIS and SIMR).\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smis](smis) module"]
    pub type SMIS = crate::Reg<u32, _SMIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMIS;
    #[doc = "`read()` method returns [smis::R](smis::R) reader structure"]
    impl crate::Readable for SMIS {}
    #[doc = "Slave Masked Interrupt Status This register show which interrupt is active (based on result from SRIS and SIMR)."]
    pub mod smis {
        #[doc = "Reader of register SMIS"]
        pub type R = crate::R<u32, super::SMIS>;
        #[doc = "Reader of field `STOPMIS`"]
        pub type STOPMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STARTMIS`"]
        pub type STARTMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DATAMIS`"]
        pub type DATAMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - STOPMIS"]
            #[inline(always)]
            pub fn stopmis(&self) -> STOPMIS_R {
                STOPMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - STARTMIS"]
            #[inline(always)]
            pub fn startmis(&self) -> STARTMIS_R {
                STARTMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - DATAMIS"]
            #[inline(always)]
            pub fn datamis(&self) -> DATAMIS_R {
                DATAMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Slave Interrupt Clear This register clears the raw interrupt SRIS.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sicr](sicr) module"]
    pub type SICR = crate::Reg<u32, _SICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SICR;
    #[doc = "`write(|w| ..)` method takes [sicr::W](sicr::W) writer structure"]
    impl crate::Writable for SICR {}
    #[doc = "Slave Interrupt Clear This register clears the raw interrupt SRIS."]
    pub mod sicr {
        #[doc = "Writer for register SICR"]
        pub type W = crate::W<u32, super::SICR>;
        #[doc = "Register SICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `STOPIC`"]
        pub struct STOPIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `STARTIC`"]
        pub struct STARTIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STARTIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `DATAIC`"]
        pub struct DATAIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATAIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 2 - STOPIC"]
            #[inline(always)]
            pub fn stopic(&mut self) -> STOPIC_W {
                STOPIC_W { w: self }
            }
            #[doc = "Bit 1 - STARTIC"]
            #[inline(always)]
            pub fn startic(&mut self) -> STARTIC_W {
                STARTIC_W { w: self }
            }
            #[doc = "Bit 0 - DATAIC"]
            #[inline(always)]
            pub fn dataic(&mut self) -> DATAIC_W {
                DATAIC_W { w: self }
            }
        }
    }
    #[doc = "Master Salve Address This register contains seven address bits of the slave to be accessed by the master (a6-a0), and an RS bit determining if the next operation is a receive or transmit.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [msa](msa) module"]
    pub type MSA = crate::Reg<u32, _MSA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MSA;
    #[doc = "`read()` method returns [msa::R](msa::R) reader structure"]
    impl crate::Readable for MSA {}
    #[doc = "`write(|w| ..)` method takes [msa::W](msa::W) writer structure"]
    impl crate::Writable for MSA {}
    #[doc = "Master Salve Address This register contains seven address bits of the slave to be accessed by the master (a6-a0), and an RS bit determining if the next operation is a receive or transmit."]
    pub mod msa {
        #[doc = "Reader of register MSA"]
        pub type R = crate::R<u32, super::MSA>;
        #[doc = "Writer for register MSA"]
        pub type W = crate::W<u32, super::MSA>;
        #[doc = "Register MSA `reset()`'s with value 0"]
        impl crate::ResetValue for super::MSA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SA`"]
        pub type SA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SA`"]
        pub struct SA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u32) & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RS`"]
        pub type RS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RS`"]
        pub struct RS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - SA"]
            #[inline(always)]
            pub fn sa(&self) -> SA_R {
                SA_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bit 0 - RS"]
            #[inline(always)]
            pub fn rs(&self) -> RS_R {
                RS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - SA"]
            #[inline(always)]
            pub fn sa(&mut self) -> SA_W {
                SA_W { w: self }
            }
            #[doc = "Bit 0 - RS"]
            #[inline(always)]
            pub fn rs(&mut self) -> RS_W {
                RS_W { w: self }
            }
        }
    }
    #[doc = "Master Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mstat](mstat) module"]
    pub type MSTAT = crate::Reg<u32, _MSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MSTAT;
    #[doc = "`read()` method returns [mstat::R](mstat::R) reader structure"]
    impl crate::Readable for MSTAT {}
    #[doc = "Master Status"]
    pub mod mstat {
        #[doc = "Reader of register MSTAT"]
        pub type R = crate::R<u32, super::MSTAT>;
        #[doc = "Reader of field `BUSBSY`"]
        pub type BUSBSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDLE`"]
        pub type IDLE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ARBLST`"]
        pub type ARBLST_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DATACK_N`"]
        pub type DATACK_N_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADRACK_N`"]
        pub type ADRACK_N_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ERR`"]
        pub type ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 6 - BUSBSY"]
            #[inline(always)]
            pub fn busbsy(&self) -> BUSBSY_R {
                BUSBSY_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IDLE"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ARBLST"]
            #[inline(always)]
            pub fn arblst(&self) -> ARBLST_R {
                ARBLST_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - DATACK_N"]
            #[inline(always)]
            pub fn datack_n(&self) -> DATACK_N_R {
                DATACK_N_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADRACK_N"]
            #[inline(always)]
            pub fn adrack_n(&self) -> ADRACK_N_R {
                ADRACK_N_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ERR"]
            #[inline(always)]
            pub fn err(&self) -> ERR_R {
                ERR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Master Control This register accesses status bits when read and control bits when written. When read, the status register indicates the state of the I2C bus controller as stated in MSTAT. When written, the control register configures the I2C controller operation. To generate a single transmit cycle, the I2C Master Slave Address (MSA) register is written with the desired address, the MSA.RS bit is cleared, and this register is written with * ACK=X (0 or 1), * STOP=1, * START=1, * RUN=1 to perform the operation and stop. When the operation is completed (or aborted due an error), an interrupt becomes active and the data may be read from the MDR register.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mctrl](mctrl) module"]
    pub type MCTRL = crate::Reg<u32, _MCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCTRL;
    #[doc = "`write(|w| ..)` method takes [mctrl::W](mctrl::W) writer structure"]
    impl crate::Writable for MCTRL {}
    #[doc = "Master Control This register accesses status bits when read and control bits when written. When read, the status register indicates the state of the I2C bus controller as stated in MSTAT. When written, the control register configures the I2C controller operation. To generate a single transmit cycle, the I2C Master Slave Address (MSA) register is written with the desired address, the MSA.RS bit is cleared, and this register is written with * ACK=X (0 or 1), * STOP=1, * START=1, * RUN=1 to perform the operation and stop. When the operation is completed (or aborted due an error), an interrupt becomes active and the data may be read from the MDR register."]
    pub mod mctrl {
        #[doc = "Writer for register MCTRL"]
        pub type W = crate::W<u32, super::MCTRL>;
        #[doc = "Register MCTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::MCTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ACK`"]
        pub struct ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `START`"]
        pub struct START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RUN`"]
        pub struct RUN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RUN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 3 - ACK"]
            #[inline(always)]
            pub fn ack(&mut self) -> ACK_W {
                ACK_W { w: self }
            }
            #[doc = "Bit 2 - STOP"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 1 - START"]
            #[inline(always)]
            pub fn start(&mut self) -> START_W {
                START_W { w: self }
            }
            #[doc = "Bit 0 - RUN"]
            #[inline(always)]
            pub fn run(&mut self) -> RUN_W {
                RUN_W { w: self }
            }
        }
    }
    #[doc = "Master Data This register contains the data to be transmitted when in the Master Transmit state and the data received when in the Master Receive state.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mdr](mdr) module"]
    pub type MDR = crate::Reg<u32, _MDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MDR;
    #[doc = "`read()` method returns [mdr::R](mdr::R) reader structure"]
    impl crate::Readable for MDR {}
    #[doc = "`write(|w| ..)` method takes [mdr::W](mdr::W) writer structure"]
    impl crate::Writable for MDR {}
    #[doc = "Master Data This register contains the data to be transmitted when in the Master Transmit state and the data received when in the Master Receive state."]
    pub mod mdr {
        #[doc = "Reader of register MDR"]
        pub type R = crate::R<u32, super::MDR>;
        #[doc = "Writer for register MDR"]
        pub type W = crate::W<u32, super::MDR>;
        #[doc = "Register MDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::MDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "I2C Master Timer Period This register specifies the period of the SCL clock.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mtpr](mtpr) module"]
    pub type MTPR = crate::Reg<u32, _MTPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MTPR;
    #[doc = "`read()` method returns [mtpr::R](mtpr::R) reader structure"]
    impl crate::Readable for MTPR {}
    #[doc = "`write(|w| ..)` method takes [mtpr::W](mtpr::W) writer structure"]
    impl crate::Writable for MTPR {}
    #[doc = "I2C Master Timer Period This register specifies the period of the SCL clock."]
    pub mod mtpr {
        #[doc = "Reader of register MTPR"]
        pub type R = crate::R<u32, super::MTPR>;
        #[doc = "Writer for register MTPR"]
        pub type W = crate::W<u32, super::MTPR>;
        #[doc = "Register MTPR `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::MTPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `TPR_7`"]
        pub type TPR_7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TPR_7`"]
        pub struct TPR_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TPR_7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TPR`"]
        pub type TPR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TPR`"]
        pub struct TPR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TPR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - TPR_7"]
            #[inline(always)]
            pub fn tpr_7(&self) -> TPR_7_R {
                TPR_7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - TPR"]
            #[inline(always)]
            pub fn tpr(&self) -> TPR_R {
                TPR_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - TPR_7"]
            #[inline(always)]
            pub fn tpr_7(&mut self) -> TPR_7_W {
                TPR_7_W { w: self }
            }
            #[doc = "Bits 0:6 - TPR"]
            #[inline(always)]
            pub fn tpr(&mut self) -> TPR_W {
                TPR_W { w: self }
            }
        }
    }
    #[doc = "Master Interrupt Mask This register controls whether a raw interrupt is promoted to a controller interrupt.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mimr](mimr) module"]
    pub type MIMR = crate::Reg<u32, _MIMR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIMR;
    #[doc = "`read()` method returns [mimr::R](mimr::R) reader structure"]
    impl crate::Readable for MIMR {}
    #[doc = "`write(|w| ..)` method takes [mimr::W](mimr::W) writer structure"]
    impl crate::Writable for MIMR {}
    #[doc = "Master Interrupt Mask This register controls whether a raw interrupt is promoted to a controller interrupt."]
    pub mod mimr {
        #[doc = "Reader of register MIMR"]
        pub type R = crate::R<u32, super::MIMR>;
        #[doc = "Writer for register MIMR"]
        pub type W = crate::W<u32, super::MIMR>;
        #[doc = "Register MIMR `reset()`'s with value 0"]
        impl crate::ResetValue for super::MIMR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IM`"]
        pub type IM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IM`"]
        pub struct IM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - IM"]
            #[inline(always)]
            pub fn im(&self) -> IM_R {
                IM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - IM"]
            #[inline(always)]
            pub fn im(&mut self) -> IM_W {
                IM_W { w: self }
            }
        }
    }
    #[doc = "Master Raw Interrupt Status This register show the unmasked interrupt status.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mris](mris) module"]
    pub type MRIS = crate::Reg<u32, _MRIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MRIS;
    #[doc = "`read()` method returns [mris::R](mris::R) reader structure"]
    impl crate::Readable for MRIS {}
    #[doc = "Master Raw Interrupt Status This register show the unmasked interrupt status."]
    pub mod mris {
        #[doc = "Reader of register MRIS"]
        pub type R = crate::R<u32, super::MRIS>;
        #[doc = "Reader of field `RIS`"]
        pub type RIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - RIS"]
            #[inline(always)]
            pub fn ris(&self) -> RIS_R {
                RIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Master Masked Interrupt Status This register show which interrupt is active (based on result from MRIS and MIMR).\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mmis](mmis) module"]
    pub type MMIS = crate::Reg<u32, _MMIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MMIS;
    #[doc = "`read()` method returns [mmis::R](mmis::R) reader structure"]
    impl crate::Readable for MMIS {}
    #[doc = "Master Masked Interrupt Status This register show which interrupt is active (based on result from MRIS and MIMR)."]
    pub mod mmis {
        #[doc = "Reader of register MMIS"]
        pub type R = crate::R<u32, super::MMIS>;
        #[doc = "Reader of field `MIS`"]
        pub type MIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - MIS"]
            #[inline(always)]
            pub fn mis(&self) -> MIS_R {
                MIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Master Interrupt Clear This register clears the raw and masked interrupt.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [micr](micr) module"]
    pub type MICR = crate::Reg<u32, _MICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MICR;
    #[doc = "`write(|w| ..)` method takes [micr::W](micr::W) writer structure"]
    impl crate::Writable for MICR {}
    #[doc = "Master Interrupt Clear This register clears the raw and masked interrupt."]
    pub mod micr {
        #[doc = "Writer for register MICR"]
        pub type W = crate::W<u32, super::MICR>;
        #[doc = "Register MICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::MICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `IC`"]
        pub struct IC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - IC"]
            #[inline(always)]
            pub fn ic(&mut self) -> IC_W {
                IC_W { w: self }
            }
        }
    }
    #[doc = "Master Configuration This register configures the mode (Master or Slave) and sets the interface for test mode loopback.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mcr](mcr) module"]
    pub type MCR = crate::Reg<u32, _MCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MCR;
    #[doc = "`read()` method returns [mcr::R](mcr::R) reader structure"]
    impl crate::Readable for MCR {}
    #[doc = "`write(|w| ..)` method takes [mcr::W](mcr::W) writer structure"]
    impl crate::Writable for MCR {}
    #[doc = "Master Configuration This register configures the mode (Master or Slave) and sets the interface for test mode loopback."]
    pub mod mcr {
        #[doc = "Reader of register MCR"]
        pub type R = crate::R<u32, super::MCR>;
        #[doc = "Writer for register MCR"]
        pub type W = crate::W<u32, super::MCR>;
        #[doc = "Register MCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::MCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SFE`"]
        pub type SFE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SFE`"]
        pub struct SFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `MFE`"]
        pub type MFE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MFE`"]
        pub struct MFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `LPBK`"]
        pub type LPBK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPBK`"]
        pub struct LPBK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPBK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 5 - SFE"]
            #[inline(always)]
            pub fn sfe(&self) -> SFE_R {
                SFE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - MFE"]
            #[inline(always)]
            pub fn mfe(&self) -> MFE_R {
                MFE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LPBK"]
            #[inline(always)]
            pub fn lpbk(&self) -> LPBK_R {
                LPBK_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - SFE"]
            #[inline(always)]
            pub fn sfe(&mut self) -> SFE_W {
                SFE_W { w: self }
            }
            #[doc = "Bit 4 - MFE"]
            #[inline(always)]
            pub fn mfe(&mut self) -> MFE_W {
                MFE_W { w: self }
            }
            #[doc = "Bit 0 - LPBK"]
            #[inline(always)]
            pub fn lpbk(&mut self) -> LPBK_W {
                LPBK_W { w: self }
            }
        }
    }
}
#[doc = "I2S Audio DMA module supporting formats I2S, LJF, RJF and DSP"]
pub struct I2S0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2S0 {}
impl I2S0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2s0::RegisterBlock {
        0x4002_1000 as *const _
    }
}
impl Deref for I2S0 {
    type Target = i2s0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2S0::ptr() }
    }
}
#[doc = "I2S Audio DMA module supporting formats I2S, LJF, RJF and DSP"]
pub mod i2s0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - WCLK Source Selection"]
        pub aifwclksrc: AIFWCLKSRC,
        #[doc = "0x04 - DMA Buffer Size Configuration"]
        pub aifdmacfg: AIFDMACFG,
        #[doc = "0x08 - Pin Direction"]
        pub aifdircfg: AIFDIRCFG,
        #[doc = "0x0c - Serial Interface Format Configuration"]
        pub aiffmtcfg: AIFFMTCFG,
        #[doc = "0x10 - Word Selection Bit Mask for Pin 0"]
        pub aifwmask0: AIFWMASK0,
        #[doc = "0x14 - Word Selection Bit Mask for Pin 1"]
        pub aifwmask1: AIFWMASK1,
        #[doc = "0x18 - Word Selection Bit Mask for Pin 2"]
        pub aifwmask2: AIFWMASK2,
        #[doc = "0x1c - Audio Interface PWM Debug Value"]
        pub aifpwmvalue: AIFPWMVALUE,
        #[doc = "0x20 - DMA Input Buffer Next Pointer"]
        pub aifinptrnext: AIFINPTRNEXT,
        #[doc = "0x24 - DMA Input Buffer Current Pointer"]
        pub aifinptr: AIFINPTR,
        #[doc = "0x28 - DMA Output Buffer Next Pointer"]
        pub aifoutptrnext: AIFOUTPTRNEXT,
        #[doc = "0x2c - DMA Output Buffer Current Pointer"]
        pub aifoutptr: AIFOUTPTR,
        _reserved12: [u8; 4usize],
        #[doc = "0x34 - SampleStaMP Generator Control Register"]
        pub stmpctl: STMPCTL,
        #[doc = "0x38 - Captured XOSC Counter Value, Capture Channel 0"]
        pub stmpxcntcapt0: STMPXCNTCAPT0,
        #[doc = "0x3c - XOSC Period Value"]
        pub stmpxper: STMPXPER,
        #[doc = "0x40 - Captured WCLK Counter Value, Capture Channel 0"]
        pub stmpwcntcapt0: STMPWCNTCAPT0,
        #[doc = "0x44 - WCLK Counter Period Value"]
        pub stmpwper: STMPWPER,
        #[doc = "0x48 - WCLK Counter Trigger Value for Input Pins"]
        pub stmpintrig: STMPINTRIG,
        #[doc = "0x4c - WCLK Counter Trigger Value for Output Pins"]
        pub stmpouttrig: STMPOUTTRIG,
        #[doc = "0x50 - WCLK Counter Set Operation"]
        pub stmpwset: STMPWSET,
        #[doc = "0x54 - WCLK Counter Add Operation"]
        pub stmpwadd: STMPWADD,
        #[doc = "0x58 - XOSC Minimum Period Value Minimum Value of STMPXPER"]
        pub stmpxpermin: STMPXPERMIN,
        #[doc = "0x5c - Current Value of WCNT"]
        pub stmpwcnt: STMPWCNT,
        #[doc = "0x60 - Current Value of XCNT"]
        pub stmpxcnt: STMPXCNT,
        #[doc = "0x64 - Captured XOSC Counter Value, Capture Channel 1"]
        pub stmpxcntcapt1: STMPXCNTCAPT1,
        #[doc = "0x68 - Captured WCLK Counter Value, Capture Channel 1"]
        pub stmpwcntcapt1: STMPWCNTCAPT1,
        _reserved26: [u8; 4usize],
        #[doc = "0x70 - Masked Interrupt Status Register"]
        pub irqmask: IRQMASK,
        #[doc = "0x74 - Raw Interrupt Status Register"]
        pub irqflags: IRQFLAGS,
        #[doc = "0x78 - Interrupt Set Register"]
        pub irqset: IRQSET,
        #[doc = "0x7c - Interrupt Clear Register"]
        pub irqclr: IRQCLR,
    }
    #[doc = "WCLK Source Selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifwclksrc](aifwclksrc) module"]
    pub type AIFWCLKSRC = crate::Reg<u32, _AIFWCLKSRC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFWCLKSRC;
    #[doc = "`read()` method returns [aifwclksrc::R](aifwclksrc::R) reader structure"]
    impl crate::Readable for AIFWCLKSRC {}
    #[doc = "`write(|w| ..)` method takes [aifwclksrc::W](aifwclksrc::W) writer structure"]
    impl crate::Writable for AIFWCLKSRC {}
    #[doc = "WCLK Source Selection"]
    pub mod aifwclksrc {
        #[doc = "Reader of register AIFWCLKSRC"]
        pub type R = crate::R<u32, super::AIFWCLKSRC>;
        #[doc = "Writer for register AIFWCLKSRC"]
        pub type W = crate::W<u32, super::AIFWCLKSRC>;
        #[doc = "Register AIFWCLKSRC `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFWCLKSRC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WCLK_INV`"]
        pub type WCLK_INV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WCLK_INV`"]
        pub struct WCLK_INV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_INV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `WCLK_SRC`"]
        pub type WCLK_SRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WCLK_SRC`"]
        pub struct WCLK_SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_SRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - WCLK_INV"]
            #[inline(always)]
            pub fn wclk_inv(&self) -> WCLK_INV_R {
                WCLK_INV_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - WCLK_SRC"]
            #[inline(always)]
            pub fn wclk_src(&self) -> WCLK_SRC_R {
                WCLK_SRC_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 2 - WCLK_INV"]
            #[inline(always)]
            pub fn wclk_inv(&mut self) -> WCLK_INV_W {
                WCLK_INV_W { w: self }
            }
            #[doc = "Bits 0:1 - WCLK_SRC"]
            #[inline(always)]
            pub fn wclk_src(&mut self) -> WCLK_SRC_W {
                WCLK_SRC_W { w: self }
            }
        }
    }
    #[doc = "DMA Buffer Size Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifdmacfg](aifdmacfg) module"]
    pub type AIFDMACFG = crate::Reg<u32, _AIFDMACFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFDMACFG;
    #[doc = "`read()` method returns [aifdmacfg::R](aifdmacfg::R) reader structure"]
    impl crate::Readable for AIFDMACFG {}
    #[doc = "`write(|w| ..)` method takes [aifdmacfg::W](aifdmacfg::W) writer structure"]
    impl crate::Writable for AIFDMACFG {}
    #[doc = "DMA Buffer Size Configuration"]
    pub mod aifdmacfg {
        #[doc = "Reader of register AIFDMACFG"]
        pub type R = crate::R<u32, super::AIFDMACFG>;
        #[doc = "Writer for register AIFDMACFG"]
        pub type W = crate::W<u32, super::AIFDMACFG>;
        #[doc = "Register AIFDMACFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFDMACFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `END_FRAME_IDX`"]
        pub type END_FRAME_IDX_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `END_FRAME_IDX`"]
        pub struct END_FRAME_IDX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> END_FRAME_IDX_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - END_FRAME_IDX"]
            #[inline(always)]
            pub fn end_frame_idx(&self) -> END_FRAME_IDX_R {
                END_FRAME_IDX_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - END_FRAME_IDX"]
            #[inline(always)]
            pub fn end_frame_idx(&mut self) -> END_FRAME_IDX_W {
                END_FRAME_IDX_W { w: self }
            }
        }
    }
    #[doc = "Pin Direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifdircfg](aifdircfg) module"]
    pub type AIFDIRCFG = crate::Reg<u32, _AIFDIRCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFDIRCFG;
    #[doc = "`read()` method returns [aifdircfg::R](aifdircfg::R) reader structure"]
    impl crate::Readable for AIFDIRCFG {}
    #[doc = "`write(|w| ..)` method takes [aifdircfg::W](aifdircfg::W) writer structure"]
    impl crate::Writable for AIFDIRCFG {}
    #[doc = "Pin Direction"]
    pub mod aifdircfg {
        #[doc = "Reader of register AIFDIRCFG"]
        pub type R = crate::R<u32, super::AIFDIRCFG>;
        #[doc = "Writer for register AIFDIRCFG"]
        pub type W = crate::W<u32, super::AIFDIRCFG>;
        #[doc = "Register AIFDIRCFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFDIRCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AD2`"]
        pub type AD2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AD2`"]
        pub struct AD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AD2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AD1`"]
        pub type AD1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AD1`"]
        pub struct AD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AD1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AD0`"]
        pub type AD0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AD0`"]
        pub struct AD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AD0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:9 - AD2"]
            #[inline(always)]
            pub fn ad2(&self) -> AD2_R {
                AD2_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - AD1"]
            #[inline(always)]
            pub fn ad1(&self) -> AD1_R {
                AD1_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - AD0"]
            #[inline(always)]
            pub fn ad0(&self) -> AD0_R {
                AD0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:9 - AD2"]
            #[inline(always)]
            pub fn ad2(&mut self) -> AD2_W {
                AD2_W { w: self }
            }
            #[doc = "Bits 4:5 - AD1"]
            #[inline(always)]
            pub fn ad1(&mut self) -> AD1_W {
                AD1_W { w: self }
            }
            #[doc = "Bits 0:1 - AD0"]
            #[inline(always)]
            pub fn ad0(&mut self) -> AD0_W {
                AD0_W { w: self }
            }
        }
    }
    #[doc = "Serial Interface Format Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aiffmtcfg](aiffmtcfg) module"]
    pub type AIFFMTCFG = crate::Reg<u32, _AIFFMTCFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFFMTCFG;
    #[doc = "`read()` method returns [aiffmtcfg::R](aiffmtcfg::R) reader structure"]
    impl crate::Readable for AIFFMTCFG {}
    #[doc = "`write(|w| ..)` method takes [aiffmtcfg::W](aiffmtcfg::W) writer structure"]
    impl crate::Writable for AIFFMTCFG {}
    #[doc = "Serial Interface Format Configuration"]
    pub mod aiffmtcfg {
        #[doc = "Reader of register AIFFMTCFG"]
        pub type R = crate::R<u32, super::AIFFMTCFG>;
        #[doc = "Writer for register AIFFMTCFG"]
        pub type W = crate::W<u32, super::AIFFMTCFG>;
        #[doc = "Register AIFFMTCFG `reset()`'s with value 0x0170"]
        impl crate::ResetValue for super::AIFFMTCFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0170
            }
        }
        #[doc = "Reader of field `DATA_DELAY`"]
        pub type DATA_DELAY_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATA_DELAY`"]
        pub struct DATA_DELAY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_DELAY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MEM_LEN_24`"]
        pub type MEM_LEN_24_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MEM_LEN_24`"]
        pub struct MEM_LEN_24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM_LEN_24_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SMPL_EDGE`"]
        pub type SMPL_EDGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPL_EDGE`"]
        pub struct SMPL_EDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPL_EDGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `DUAL_PHASE`"]
        pub type DUAL_PHASE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DUAL_PHASE`"]
        pub struct DUAL_PHASE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DUAL_PHASE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `WORD_LEN`"]
        pub type WORD_LEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WORD_LEN`"]
        pub struct WORD_LEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WORD_LEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - DATA_DELAY"]
            #[inline(always)]
            pub fn data_delay(&self) -> DATA_DELAY_R {
                DATA_DELAY_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 7 - MEM_LEN_24"]
            #[inline(always)]
            pub fn mem_len_24(&self) -> MEM_LEN_24_R {
                MEM_LEN_24_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SMPL_EDGE"]
            #[inline(always)]
            pub fn smpl_edge(&self) -> SMPL_EDGE_R {
                SMPL_EDGE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - DUAL_PHASE"]
            #[inline(always)]
            pub fn dual_phase(&self) -> DUAL_PHASE_R {
                DUAL_PHASE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - WORD_LEN"]
            #[inline(always)]
            pub fn word_len(&self) -> WORD_LEN_R {
                WORD_LEN_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - DATA_DELAY"]
            #[inline(always)]
            pub fn data_delay(&mut self) -> DATA_DELAY_W {
                DATA_DELAY_W { w: self }
            }
            #[doc = "Bit 7 - MEM_LEN_24"]
            #[inline(always)]
            pub fn mem_len_24(&mut self) -> MEM_LEN_24_W {
                MEM_LEN_24_W { w: self }
            }
            #[doc = "Bit 6 - SMPL_EDGE"]
            #[inline(always)]
            pub fn smpl_edge(&mut self) -> SMPL_EDGE_W {
                SMPL_EDGE_W { w: self }
            }
            #[doc = "Bit 5 - DUAL_PHASE"]
            #[inline(always)]
            pub fn dual_phase(&mut self) -> DUAL_PHASE_W {
                DUAL_PHASE_W { w: self }
            }
            #[doc = "Bits 0:4 - WORD_LEN"]
            #[inline(always)]
            pub fn word_len(&mut self) -> WORD_LEN_W {
                WORD_LEN_W { w: self }
            }
        }
    }
    #[doc = "Word Selection Bit Mask for Pin 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifwmask0](aifwmask0) module"]
    pub type AIFWMASK0 = crate::Reg<u32, _AIFWMASK0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFWMASK0;
    #[doc = "`read()` method returns [aifwmask0::R](aifwmask0::R) reader structure"]
    impl crate::Readable for AIFWMASK0 {}
    #[doc = "`write(|w| ..)` method takes [aifwmask0::W](aifwmask0::W) writer structure"]
    impl crate::Writable for AIFWMASK0 {}
    #[doc = "Word Selection Bit Mask for Pin 0"]
    pub mod aifwmask0 {
        #[doc = "Reader of register AIFWMASK0"]
        pub type R = crate::R<u32, super::AIFWMASK0>;
        #[doc = "Writer for register AIFWMASK0"]
        pub type W = crate::W<u32, super::AIFWMASK0>;
        #[doc = "Register AIFWMASK0 `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::AIFWMASK0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Reader of field `MASK`"]
        pub type MASK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASK`"]
        pub struct MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - MASK"]
            #[inline(always)]
            pub fn mask(&self) -> MASK_R {
                MASK_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - MASK"]
            #[inline(always)]
            pub fn mask(&mut self) -> MASK_W {
                MASK_W { w: self }
            }
        }
    }
    #[doc = "Word Selection Bit Mask for Pin 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifwmask1](aifwmask1) module"]
    pub type AIFWMASK1 = crate::Reg<u32, _AIFWMASK1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFWMASK1;
    #[doc = "`read()` method returns [aifwmask1::R](aifwmask1::R) reader structure"]
    impl crate::Readable for AIFWMASK1 {}
    #[doc = "`write(|w| ..)` method takes [aifwmask1::W](aifwmask1::W) writer structure"]
    impl crate::Writable for AIFWMASK1 {}
    #[doc = "Word Selection Bit Mask for Pin 1"]
    pub mod aifwmask1 {
        #[doc = "Reader of register AIFWMASK1"]
        pub type R = crate::R<u32, super::AIFWMASK1>;
        #[doc = "Writer for register AIFWMASK1"]
        pub type W = crate::W<u32, super::AIFWMASK1>;
        #[doc = "Register AIFWMASK1 `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::AIFWMASK1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Reader of field `MASK`"]
        pub type MASK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASK`"]
        pub struct MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - MASK"]
            #[inline(always)]
            pub fn mask(&self) -> MASK_R {
                MASK_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - MASK"]
            #[inline(always)]
            pub fn mask(&mut self) -> MASK_W {
                MASK_W { w: self }
            }
        }
    }
    #[doc = "Word Selection Bit Mask for Pin 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifwmask2](aifwmask2) module"]
    pub type AIFWMASK2 = crate::Reg<u32, _AIFWMASK2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFWMASK2;
    #[doc = "`read()` method returns [aifwmask2::R](aifwmask2::R) reader structure"]
    impl crate::Readable for AIFWMASK2 {}
    #[doc = "`write(|w| ..)` method takes [aifwmask2::W](aifwmask2::W) writer structure"]
    impl crate::Writable for AIFWMASK2 {}
    #[doc = "Word Selection Bit Mask for Pin 2"]
    pub mod aifwmask2 {
        #[doc = "Reader of register AIFWMASK2"]
        pub type R = crate::R<u32, super::AIFWMASK2>;
        #[doc = "Writer for register AIFWMASK2"]
        pub type W = crate::W<u32, super::AIFWMASK2>;
        #[doc = "Register AIFWMASK2 `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::AIFWMASK2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Reader of field `MASK`"]
        pub type MASK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASK`"]
        pub struct MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - MASK"]
            #[inline(always)]
            pub fn mask(&self) -> MASK_R {
                MASK_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - MASK"]
            #[inline(always)]
            pub fn mask(&mut self) -> MASK_W {
                MASK_W { w: self }
            }
        }
    }
    #[doc = "Audio Interface PWM Debug Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifpwmvalue](aifpwmvalue) module"]
    pub type AIFPWMVALUE = crate::Reg<u32, _AIFPWMVALUE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFPWMVALUE;
    #[doc = "`read()` method returns [aifpwmvalue::R](aifpwmvalue::R) reader structure"]
    impl crate::Readable for AIFPWMVALUE {}
    #[doc = "`write(|w| ..)` method takes [aifpwmvalue::W](aifpwmvalue::W) writer structure"]
    impl crate::Writable for AIFPWMVALUE {}
    #[doc = "Audio Interface PWM Debug Value"]
    pub mod aifpwmvalue {
        #[doc = "Reader of register AIFPWMVALUE"]
        pub type R = crate::R<u32, super::AIFPWMVALUE>;
        #[doc = "Writer for register AIFPWMVALUE"]
        pub type W = crate::W<u32, super::AIFPWMVALUE>;
        #[doc = "Register AIFPWMVALUE `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFPWMVALUE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PULSE_WIDTH`"]
        pub type PULSE_WIDTH_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PULSE_WIDTH`"]
        pub struct PULSE_WIDTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULSE_WIDTH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - PULSE_WIDTH"]
            #[inline(always)]
            pub fn pulse_width(&self) -> PULSE_WIDTH_R {
                PULSE_WIDTH_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - PULSE_WIDTH"]
            #[inline(always)]
            pub fn pulse_width(&mut self) -> PULSE_WIDTH_W {
                PULSE_WIDTH_W { w: self }
            }
        }
    }
    #[doc = "DMA Input Buffer Next Pointer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifinptrnext](aifinptrnext) module"]
    pub type AIFINPTRNEXT = crate::Reg<u32, _AIFINPTRNEXT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFINPTRNEXT;
    #[doc = "`read()` method returns [aifinptrnext::R](aifinptrnext::R) reader structure"]
    impl crate::Readable for AIFINPTRNEXT {}
    #[doc = "`write(|w| ..)` method takes [aifinptrnext::W](aifinptrnext::W) writer structure"]
    impl crate::Writable for AIFINPTRNEXT {}
    #[doc = "DMA Input Buffer Next Pointer"]
    pub mod aifinptrnext {
        #[doc = "Reader of register AIFINPTRNEXT"]
        pub type R = crate::R<u32, super::AIFINPTRNEXT>;
        #[doc = "Writer for register AIFINPTRNEXT"]
        pub type W = crate::W<u32, super::AIFINPTRNEXT>;
        #[doc = "Register AIFINPTRNEXT `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFINPTRNEXT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PTR`"]
        pub type PTR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PTR`"]
        pub struct PTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&self) -> PTR_R {
                PTR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&mut self) -> PTR_W {
                PTR_W { w: self }
            }
        }
    }
    #[doc = "DMA Input Buffer Current Pointer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifinptr](aifinptr) module"]
    pub type AIFINPTR = crate::Reg<u32, _AIFINPTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFINPTR;
    #[doc = "`read()` method returns [aifinptr::R](aifinptr::R) reader structure"]
    impl crate::Readable for AIFINPTR {}
    #[doc = "`write(|w| ..)` method takes [aifinptr::W](aifinptr::W) writer structure"]
    impl crate::Writable for AIFINPTR {}
    #[doc = "DMA Input Buffer Current Pointer"]
    pub mod aifinptr {
        #[doc = "Reader of register AIFINPTR"]
        pub type R = crate::R<u32, super::AIFINPTR>;
        #[doc = "Writer for register AIFINPTR"]
        pub type W = crate::W<u32, super::AIFINPTR>;
        #[doc = "Register AIFINPTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFINPTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PTR`"]
        pub type PTR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PTR`"]
        pub struct PTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&self) -> PTR_R {
                PTR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&mut self) -> PTR_W {
                PTR_W { w: self }
            }
        }
    }
    #[doc = "DMA Output Buffer Next Pointer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifoutptrnext](aifoutptrnext) module"]
    pub type AIFOUTPTRNEXT = crate::Reg<u32, _AIFOUTPTRNEXT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFOUTPTRNEXT;
    #[doc = "`read()` method returns [aifoutptrnext::R](aifoutptrnext::R) reader structure"]
    impl crate::Readable for AIFOUTPTRNEXT {}
    #[doc = "`write(|w| ..)` method takes [aifoutptrnext::W](aifoutptrnext::W) writer structure"]
    impl crate::Writable for AIFOUTPTRNEXT {}
    #[doc = "DMA Output Buffer Next Pointer"]
    pub mod aifoutptrnext {
        #[doc = "Reader of register AIFOUTPTRNEXT"]
        pub type R = crate::R<u32, super::AIFOUTPTRNEXT>;
        #[doc = "Writer for register AIFOUTPTRNEXT"]
        pub type W = crate::W<u32, super::AIFOUTPTRNEXT>;
        #[doc = "Register AIFOUTPTRNEXT `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFOUTPTRNEXT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PTR`"]
        pub type PTR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PTR`"]
        pub struct PTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&self) -> PTR_R {
                PTR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&mut self) -> PTR_W {
                PTR_W { w: self }
            }
        }
    }
    #[doc = "DMA Output Buffer Current Pointer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [aifoutptr](aifoutptr) module"]
    pub type AIFOUTPTR = crate::Reg<u32, _AIFOUTPTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AIFOUTPTR;
    #[doc = "`read()` method returns [aifoutptr::R](aifoutptr::R) reader structure"]
    impl crate::Readable for AIFOUTPTR {}
    #[doc = "`write(|w| ..)` method takes [aifoutptr::W](aifoutptr::W) writer structure"]
    impl crate::Writable for AIFOUTPTR {}
    #[doc = "DMA Output Buffer Current Pointer"]
    pub mod aifoutptr {
        #[doc = "Reader of register AIFOUTPTR"]
        pub type R = crate::R<u32, super::AIFOUTPTR>;
        #[doc = "Writer for register AIFOUTPTR"]
        pub type W = crate::W<u32, super::AIFOUTPTR>;
        #[doc = "Register AIFOUTPTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AIFOUTPTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PTR`"]
        pub type PTR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `PTR`"]
        pub struct PTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&self) -> PTR_R {
                PTR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - PTR"]
            #[inline(always)]
            pub fn ptr(&mut self) -> PTR_W {
                PTR_W { w: self }
            }
        }
    }
    #[doc = "SampleStaMP Generator Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpctl](stmpctl) module"]
    pub type STMPCTL = crate::Reg<u32, _STMPCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPCTL;
    #[doc = "`read()` method returns [stmpctl::R](stmpctl::R) reader structure"]
    impl crate::Readable for STMPCTL {}
    #[doc = "`write(|w| ..)` method takes [stmpctl::W](stmpctl::W) writer structure"]
    impl crate::Writable for STMPCTL {}
    #[doc = "SampleStaMP Generator Control Register"]
    pub mod stmpctl {
        #[doc = "Reader of register STMPCTL"]
        pub type R = crate::R<u32, super::STMPCTL>;
        #[doc = "Writer for register STMPCTL"]
        pub type W = crate::W<u32, super::STMPCTL>;
        #[doc = "Register STMPCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::STMPCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OUT_RDY`"]
        pub type OUT_RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OUT_RDY`"]
        pub struct OUT_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUT_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IN_RDY`"]
        pub type IN_RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IN_RDY`"]
        pub struct IN_RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IN_RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `STMP_EN`"]
        pub type STMP_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STMP_EN`"]
        pub struct STMP_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STMP_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - OUT_RDY"]
            #[inline(always)]
            pub fn out_rdy(&self) -> OUT_RDY_R {
                OUT_RDY_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - IN_RDY"]
            #[inline(always)]
            pub fn in_rdy(&self) -> IN_RDY_R {
                IN_RDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - STMP_EN"]
            #[inline(always)]
            pub fn stmp_en(&self) -> STMP_EN_R {
                STMP_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - OUT_RDY"]
            #[inline(always)]
            pub fn out_rdy(&mut self) -> OUT_RDY_W {
                OUT_RDY_W { w: self }
            }
            #[doc = "Bit 1 - IN_RDY"]
            #[inline(always)]
            pub fn in_rdy(&mut self) -> IN_RDY_W {
                IN_RDY_W { w: self }
            }
            #[doc = "Bit 0 - STMP_EN"]
            #[inline(always)]
            pub fn stmp_en(&mut self) -> STMP_EN_W {
                STMP_EN_W { w: self }
            }
        }
    }
    #[doc = "Captured XOSC Counter Value, Capture Channel 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpxcntcapt0](stmpxcntcapt0) module"]
    pub type STMPXCNTCAPT0 = crate::Reg<u32, _STMPXCNTCAPT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPXCNTCAPT0;
    #[doc = "`read()` method returns [stmpxcntcapt0::R](stmpxcntcapt0::R) reader structure"]
    impl crate::Readable for STMPXCNTCAPT0 {}
    #[doc = "Captured XOSC Counter Value, Capture Channel 0"]
    pub mod stmpxcntcapt0 {
        #[doc = "Reader of register STMPXCNTCAPT0"]
        pub type R = crate::R<u32, super::STMPXCNTCAPT0>;
        #[doc = "Reader of field `CAPT_VALUE`"]
        pub type CAPT_VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CAPT_VALUE"]
            #[inline(always)]
            pub fn capt_value(&self) -> CAPT_VALUE_R {
                CAPT_VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "XOSC Period Value\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpxper](stmpxper) module"]
    pub type STMPXPER = crate::Reg<u32, _STMPXPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPXPER;
    #[doc = "`read()` method returns [stmpxper::R](stmpxper::R) reader structure"]
    impl crate::Readable for STMPXPER {}
    #[doc = "XOSC Period Value"]
    pub mod stmpxper {
        #[doc = "Reader of register STMPXPER"]
        pub type R = crate::R<u32, super::STMPXPER>;
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Captured WCLK Counter Value, Capture Channel 0\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpwcntcapt0](stmpwcntcapt0) module"]
    pub type STMPWCNTCAPT0 = crate::Reg<u32, _STMPWCNTCAPT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPWCNTCAPT0;
    #[doc = "`read()` method returns [stmpwcntcapt0::R](stmpwcntcapt0::R) reader structure"]
    impl crate::Readable for STMPWCNTCAPT0 {}
    #[doc = "Captured WCLK Counter Value, Capture Channel 0"]
    pub mod stmpwcntcapt0 {
        #[doc = "Reader of register STMPWCNTCAPT0"]
        pub type R = crate::R<u32, super::STMPWCNTCAPT0>;
        #[doc = "Reader of field `CAPT_VALUE`"]
        pub type CAPT_VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CAPT_VALUE"]
            #[inline(always)]
            pub fn capt_value(&self) -> CAPT_VALUE_R {
                CAPT_VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "WCLK Counter Period Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpwper](stmpwper) module"]
    pub type STMPWPER = crate::Reg<u32, _STMPWPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPWPER;
    #[doc = "`read()` method returns [stmpwper::R](stmpwper::R) reader structure"]
    impl crate::Readable for STMPWPER {}
    #[doc = "`write(|w| ..)` method takes [stmpwper::W](stmpwper::W) writer structure"]
    impl crate::Writable for STMPWPER {}
    #[doc = "WCLK Counter Period Value"]
    pub mod stmpwper {
        #[doc = "Reader of register STMPWPER"]
        pub type R = crate::R<u32, super::STMPWPER>;
        #[doc = "Writer for register STMPWPER"]
        pub type W = crate::W<u32, super::STMPWPER>;
        #[doc = "Register STMPWPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::STMPWPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "WCLK Counter Trigger Value for Input Pins\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpintrig](stmpintrig) module"]
    pub type STMPINTRIG = crate::Reg<u32, _STMPINTRIG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPINTRIG;
    #[doc = "`read()` method returns [stmpintrig::R](stmpintrig::R) reader structure"]
    impl crate::Readable for STMPINTRIG {}
    #[doc = "`write(|w| ..)` method takes [stmpintrig::W](stmpintrig::W) writer structure"]
    impl crate::Writable for STMPINTRIG {}
    #[doc = "WCLK Counter Trigger Value for Input Pins"]
    pub mod stmpintrig {
        #[doc = "Reader of register STMPINTRIG"]
        pub type R = crate::R<u32, super::STMPINTRIG>;
        #[doc = "Writer for register STMPINTRIG"]
        pub type W = crate::W<u32, super::STMPINTRIG>;
        #[doc = "Register STMPINTRIG `reset()`'s with value 0"]
        impl crate::ResetValue for super::STMPINTRIG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IN_START_WCNT`"]
        pub type IN_START_WCNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `IN_START_WCNT`"]
        pub struct IN_START_WCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IN_START_WCNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - IN_START_WCNT"]
            #[inline(always)]
            pub fn in_start_wcnt(&self) -> IN_START_WCNT_R {
                IN_START_WCNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - IN_START_WCNT"]
            #[inline(always)]
            pub fn in_start_wcnt(&mut self) -> IN_START_WCNT_W {
                IN_START_WCNT_W { w: self }
            }
        }
    }
    #[doc = "WCLK Counter Trigger Value for Output Pins\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpouttrig](stmpouttrig) module"]
    pub type STMPOUTTRIG = crate::Reg<u32, _STMPOUTTRIG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPOUTTRIG;
    #[doc = "`read()` method returns [stmpouttrig::R](stmpouttrig::R) reader structure"]
    impl crate::Readable for STMPOUTTRIG {}
    #[doc = "`write(|w| ..)` method takes [stmpouttrig::W](stmpouttrig::W) writer structure"]
    impl crate::Writable for STMPOUTTRIG {}
    #[doc = "WCLK Counter Trigger Value for Output Pins"]
    pub mod stmpouttrig {
        #[doc = "Reader of register STMPOUTTRIG"]
        pub type R = crate::R<u32, super::STMPOUTTRIG>;
        #[doc = "Writer for register STMPOUTTRIG"]
        pub type W = crate::W<u32, super::STMPOUTTRIG>;
        #[doc = "Register STMPOUTTRIG `reset()`'s with value 0"]
        impl crate::ResetValue for super::STMPOUTTRIG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OUT_START_WCNT`"]
        pub type OUT_START_WCNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `OUT_START_WCNT`"]
        pub struct OUT_START_WCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUT_START_WCNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - OUT_START_WCNT"]
            #[inline(always)]
            pub fn out_start_wcnt(&self) -> OUT_START_WCNT_R {
                OUT_START_WCNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - OUT_START_WCNT"]
            #[inline(always)]
            pub fn out_start_wcnt(&mut self) -> OUT_START_WCNT_W {
                OUT_START_WCNT_W { w: self }
            }
        }
    }
    #[doc = "WCLK Counter Set Operation\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpwset](stmpwset) module"]
    pub type STMPWSET = crate::Reg<u32, _STMPWSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPWSET;
    #[doc = "`read()` method returns [stmpwset::R](stmpwset::R) reader structure"]
    impl crate::Readable for STMPWSET {}
    #[doc = "`write(|w| ..)` method takes [stmpwset::W](stmpwset::W) writer structure"]
    impl crate::Writable for STMPWSET {}
    #[doc = "WCLK Counter Set Operation"]
    pub mod stmpwset {
        #[doc = "Reader of register STMPWSET"]
        pub type R = crate::R<u32, super::STMPWSET>;
        #[doc = "Writer for register STMPWSET"]
        pub type W = crate::W<u32, super::STMPWSET>;
        #[doc = "Register STMPWSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::STMPWSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "WCLK Counter Add Operation\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpwadd](stmpwadd) module"]
    pub type STMPWADD = crate::Reg<u32, _STMPWADD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPWADD;
    #[doc = "`read()` method returns [stmpwadd::R](stmpwadd::R) reader structure"]
    impl crate::Readable for STMPWADD {}
    #[doc = "`write(|w| ..)` method takes [stmpwadd::W](stmpwadd::W) writer structure"]
    impl crate::Writable for STMPWADD {}
    #[doc = "WCLK Counter Add Operation"]
    pub mod stmpwadd {
        #[doc = "Reader of register STMPWADD"]
        pub type R = crate::R<u32, super::STMPWADD>;
        #[doc = "Writer for register STMPWADD"]
        pub type W = crate::W<u32, super::STMPWADD>;
        #[doc = "Register STMPWADD `reset()`'s with value 0"]
        impl crate::ResetValue for super::STMPWADD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VALUE_INC`"]
        pub type VALUE_INC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VALUE_INC`"]
        pub struct VALUE_INC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_INC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - VALUE_INC"]
            #[inline(always)]
            pub fn value_inc(&self) -> VALUE_INC_R {
                VALUE_INC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - VALUE_INC"]
            #[inline(always)]
            pub fn value_inc(&mut self) -> VALUE_INC_W {
                VALUE_INC_W { w: self }
            }
        }
    }
    #[doc = "XOSC Minimum Period Value Minimum Value of STMPXPER\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpxpermin](stmpxpermin) module"]
    pub type STMPXPERMIN = crate::Reg<u32, _STMPXPERMIN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPXPERMIN;
    #[doc = "`read()` method returns [stmpxpermin::R](stmpxpermin::R) reader structure"]
    impl crate::Readable for STMPXPERMIN {}
    #[doc = "`write(|w| ..)` method takes [stmpxpermin::W](stmpxpermin::W) writer structure"]
    impl crate::Writable for STMPXPERMIN {}
    #[doc = "XOSC Minimum Period Value Minimum Value of STMPXPER"]
    pub mod stmpxpermin {
        #[doc = "Reader of register STMPXPERMIN"]
        pub type R = crate::R<u32, super::STMPXPERMIN>;
        #[doc = "Writer for register STMPXPERMIN"]
        pub type W = crate::W<u32, super::STMPXPERMIN>;
        #[doc = "Register STMPXPERMIN `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::STMPXPERMIN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `VALUE`"]
        pub type VALUE_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `VALUE`"]
        pub struct VALUE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VALUE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&self) -> VALUE_R {
                VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - VALUE"]
            #[inline(always)]
            pub fn value(&mut self) -> VALUE_W {
                VALUE_W { w: self }
            }
        }
    }
    #[doc = "Current Value of WCNT\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpwcnt](stmpwcnt) module"]
    pub type STMPWCNT = crate::Reg<u32, _STMPWCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPWCNT;
    #[doc = "`read()` method returns [stmpwcnt::R](stmpwcnt::R) reader structure"]
    impl crate::Readable for STMPWCNT {}
    #[doc = "Current Value of WCNT"]
    pub mod stmpwcnt {
        #[doc = "Reader of register STMPWCNT"]
        pub type R = crate::R<u32, super::STMPWCNT>;
        #[doc = "Reader of field `CURR_VALUE`"]
        pub type CURR_VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CURR_VALUE"]
            #[inline(always)]
            pub fn curr_value(&self) -> CURR_VALUE_R {
                CURR_VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Current Value of XCNT\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpxcnt](stmpxcnt) module"]
    pub type STMPXCNT = crate::Reg<u32, _STMPXCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPXCNT;
    #[doc = "`read()` method returns [stmpxcnt::R](stmpxcnt::R) reader structure"]
    impl crate::Readable for STMPXCNT {}
    #[doc = "Current Value of XCNT"]
    pub mod stmpxcnt {
        #[doc = "Reader of register STMPXCNT"]
        pub type R = crate::R<u32, super::STMPXCNT>;
        #[doc = "Reader of field `CURR_VALUE`"]
        pub type CURR_VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CURR_VALUE"]
            #[inline(always)]
            pub fn curr_value(&self) -> CURR_VALUE_R {
                CURR_VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Captured XOSC Counter Value, Capture Channel 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpxcntcapt1](stmpxcntcapt1) module"]
    pub type STMPXCNTCAPT1 = crate::Reg<u32, _STMPXCNTCAPT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPXCNTCAPT1;
    #[doc = "`read()` method returns [stmpxcntcapt1::R](stmpxcntcapt1::R) reader structure"]
    impl crate::Readable for STMPXCNTCAPT1 {}
    #[doc = "Captured XOSC Counter Value, Capture Channel 1"]
    pub mod stmpxcntcapt1 {
        #[doc = "Reader of register STMPXCNTCAPT1"]
        pub type R = crate::R<u32, super::STMPXCNTCAPT1>;
        #[doc = "Reader of field `CAPT_VALUE`"]
        pub type CAPT_VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CAPT_VALUE"]
            #[inline(always)]
            pub fn capt_value(&self) -> CAPT_VALUE_R {
                CAPT_VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Captured WCLK Counter Value, Capture Channel 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stmpwcntcapt1](stmpwcntcapt1) module"]
    pub type STMPWCNTCAPT1 = crate::Reg<u32, _STMPWCNTCAPT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STMPWCNTCAPT1;
    #[doc = "`read()` method returns [stmpwcntcapt1::R](stmpwcntcapt1::R) reader structure"]
    impl crate::Readable for STMPWCNTCAPT1 {}
    #[doc = "Captured WCLK Counter Value, Capture Channel 1"]
    pub mod stmpwcntcapt1 {
        #[doc = "Reader of register STMPWCNTCAPT1"]
        pub type R = crate::R<u32, super::STMPWCNTCAPT1>;
        #[doc = "Reader of field `CAPT_VALUE`"]
        pub type CAPT_VALUE_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CAPT_VALUE"]
            #[inline(always)]
            pub fn capt_value(&self) -> CAPT_VALUE_R {
                CAPT_VALUE_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "Masked Interrupt Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqmask](irqmask) module"]
    pub type IRQMASK = crate::Reg<u32, _IRQMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQMASK;
    #[doc = "`read()` method returns [irqmask::R](irqmask::R) reader structure"]
    impl crate::Readable for IRQMASK {}
    #[doc = "`write(|w| ..)` method takes [irqmask::W](irqmask::W) writer structure"]
    impl crate::Writable for IRQMASK {}
    #[doc = "Masked Interrupt Status Register"]
    pub mod irqmask {
        #[doc = "Reader of register IRQMASK"]
        pub type R = crate::R<u32, super::IRQMASK>;
        #[doc = "Writer for register IRQMASK"]
        pub type W = crate::W<u32, super::IRQMASK>;
        #[doc = "Register IRQMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AIF_DMA_IN`"]
        pub type AIF_DMA_IN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AIF_DMA_IN`"]
        pub struct AIF_DMA_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIF_DMA_IN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `AIF_DMA_OUT`"]
        pub type AIF_DMA_OUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AIF_DMA_OUT`"]
        pub struct AIF_DMA_OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIF_DMA_OUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `WCLK_TIMEOUT`"]
        pub type WCLK_TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WCLK_TIMEOUT`"]
        pub struct WCLK_TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `BUS_ERR`"]
        pub type BUS_ERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BUS_ERR`"]
        pub struct BUS_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUS_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `WCLK_ERR`"]
        pub type WCLK_ERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WCLK_ERR`"]
        pub struct WCLK_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PTR_ERR`"]
        pub type PTR_ERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PTR_ERR`"]
        pub struct PTR_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 5 - AIF_DMA_IN"]
            #[inline(always)]
            pub fn aif_dma_in(&self) -> AIF_DMA_IN_R {
                AIF_DMA_IN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - AIF_DMA_OUT"]
            #[inline(always)]
            pub fn aif_dma_out(&self) -> AIF_DMA_OUT_R {
                AIF_DMA_OUT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WCLK_TIMEOUT"]
            #[inline(always)]
            pub fn wclk_timeout(&self) -> WCLK_TIMEOUT_R {
                WCLK_TIMEOUT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BUS_ERR"]
            #[inline(always)]
            pub fn bus_err(&self) -> BUS_ERR_R {
                BUS_ERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - WCLK_ERR"]
            #[inline(always)]
            pub fn wclk_err(&self) -> WCLK_ERR_R {
                WCLK_ERR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - PTR_ERR"]
            #[inline(always)]
            pub fn ptr_err(&self) -> PTR_ERR_R {
                PTR_ERR_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - AIF_DMA_IN"]
            #[inline(always)]
            pub fn aif_dma_in(&mut self) -> AIF_DMA_IN_W {
                AIF_DMA_IN_W { w: self }
            }
            #[doc = "Bit 4 - AIF_DMA_OUT"]
            #[inline(always)]
            pub fn aif_dma_out(&mut self) -> AIF_DMA_OUT_W {
                AIF_DMA_OUT_W { w: self }
            }
            #[doc = "Bit 3 - WCLK_TIMEOUT"]
            #[inline(always)]
            pub fn wclk_timeout(&mut self) -> WCLK_TIMEOUT_W {
                WCLK_TIMEOUT_W { w: self }
            }
            #[doc = "Bit 2 - BUS_ERR"]
            #[inline(always)]
            pub fn bus_err(&mut self) -> BUS_ERR_W {
                BUS_ERR_W { w: self }
            }
            #[doc = "Bit 1 - WCLK_ERR"]
            #[inline(always)]
            pub fn wclk_err(&mut self) -> WCLK_ERR_W {
                WCLK_ERR_W { w: self }
            }
            #[doc = "Bit 0 - PTR_ERR"]
            #[inline(always)]
            pub fn ptr_err(&mut self) -> PTR_ERR_W {
                PTR_ERR_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqflags](irqflags) module"]
    pub type IRQFLAGS = crate::Reg<u32, _IRQFLAGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQFLAGS;
    #[doc = "`read()` method returns [irqflags::R](irqflags::R) reader structure"]
    impl crate::Readable for IRQFLAGS {}
    #[doc = "Raw Interrupt Status Register"]
    pub mod irqflags {
        #[doc = "Reader of register IRQFLAGS"]
        pub type R = crate::R<u32, super::IRQFLAGS>;
        #[doc = "Reader of field `AIF_DMA_IN`"]
        pub type AIF_DMA_IN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `AIF_DMA_OUT`"]
        pub type AIF_DMA_OUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WCLK_TIMEOUT`"]
        pub type WCLK_TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUS_ERR`"]
        pub type BUS_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WCLK_ERR`"]
        pub type WCLK_ERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PTR_ERR`"]
        pub type PTR_ERR_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 5 - AIF_DMA_IN"]
            #[inline(always)]
            pub fn aif_dma_in(&self) -> AIF_DMA_IN_R {
                AIF_DMA_IN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - AIF_DMA_OUT"]
            #[inline(always)]
            pub fn aif_dma_out(&self) -> AIF_DMA_OUT_R {
                AIF_DMA_OUT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WCLK_TIMEOUT"]
            #[inline(always)]
            pub fn wclk_timeout(&self) -> WCLK_TIMEOUT_R {
                WCLK_TIMEOUT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BUS_ERR"]
            #[inline(always)]
            pub fn bus_err(&self) -> BUS_ERR_R {
                BUS_ERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - WCLK_ERR"]
            #[inline(always)]
            pub fn wclk_err(&self) -> WCLK_ERR_R {
                WCLK_ERR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - PTR_ERR"]
            #[inline(always)]
            pub fn ptr_err(&self) -> PTR_ERR_R {
                PTR_ERR_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Set Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqset](irqset) module"]
    pub type IRQSET = crate::Reg<u32, _IRQSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQSET;
    #[doc = "`write(|w| ..)` method takes [irqset::W](irqset::W) writer structure"]
    impl crate::Writable for IRQSET {}
    #[doc = "Interrupt Set Register"]
    pub mod irqset {
        #[doc = "Writer for register IRQSET"]
        pub type W = crate::W<u32, super::IRQSET>;
        #[doc = "Register IRQSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `AIF_DMA_IN`"]
        pub struct AIF_DMA_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIF_DMA_IN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `AIF_DMA_OUT`"]
        pub struct AIF_DMA_OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIF_DMA_OUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `WCLK_TIMEOUT`"]
        pub struct WCLK_TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BUS_ERR`"]
        pub struct BUS_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUS_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `WCLK_ERR`"]
        pub struct WCLK_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `PTR_ERR`"]
        pub struct PTR_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 5 - AIF_DMA_IN"]
            #[inline(always)]
            pub fn aif_dma_in(&mut self) -> AIF_DMA_IN_W {
                AIF_DMA_IN_W { w: self }
            }
            #[doc = "Bit 4 - AIF_DMA_OUT"]
            #[inline(always)]
            pub fn aif_dma_out(&mut self) -> AIF_DMA_OUT_W {
                AIF_DMA_OUT_W { w: self }
            }
            #[doc = "Bit 3 - WCLK_TIMEOUT"]
            #[inline(always)]
            pub fn wclk_timeout(&mut self) -> WCLK_TIMEOUT_W {
                WCLK_TIMEOUT_W { w: self }
            }
            #[doc = "Bit 2 - BUS_ERR"]
            #[inline(always)]
            pub fn bus_err(&mut self) -> BUS_ERR_W {
                BUS_ERR_W { w: self }
            }
            #[doc = "Bit 1 - WCLK_ERR"]
            #[inline(always)]
            pub fn wclk_err(&mut self) -> WCLK_ERR_W {
                WCLK_ERR_W { w: self }
            }
            #[doc = "Bit 0 - PTR_ERR"]
            #[inline(always)]
            pub fn ptr_err(&mut self) -> PTR_ERR_W {
                PTR_ERR_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Clear Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqclr](irqclr) module"]
    pub type IRQCLR = crate::Reg<u32, _IRQCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQCLR;
    #[doc = "`write(|w| ..)` method takes [irqclr::W](irqclr::W) writer structure"]
    impl crate::Writable for IRQCLR {}
    #[doc = "Interrupt Clear Register"]
    pub mod irqclr {
        #[doc = "Writer for register IRQCLR"]
        pub type W = crate::W<u32, super::IRQCLR>;
        #[doc = "Register IRQCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `AIF_DMA_IN`"]
        pub struct AIF_DMA_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIF_DMA_IN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `AIF_DMA_OUT`"]
        pub struct AIF_DMA_OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AIF_DMA_OUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `WCLK_TIMEOUT`"]
        pub struct WCLK_TIMEOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_TIMEOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BUS_ERR`"]
        pub struct BUS_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUS_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `WCLK_ERR`"]
        pub struct WCLK_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `PTR_ERR`"]
        pub struct PTR_ERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PTR_ERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 5 - AIF_DMA_IN"]
            #[inline(always)]
            pub fn aif_dma_in(&mut self) -> AIF_DMA_IN_W {
                AIF_DMA_IN_W { w: self }
            }
            #[doc = "Bit 4 - AIF_DMA_OUT"]
            #[inline(always)]
            pub fn aif_dma_out(&mut self) -> AIF_DMA_OUT_W {
                AIF_DMA_OUT_W { w: self }
            }
            #[doc = "Bit 3 - WCLK_TIMEOUT"]
            #[inline(always)]
            pub fn wclk_timeout(&mut self) -> WCLK_TIMEOUT_W {
                WCLK_TIMEOUT_W { w: self }
            }
            #[doc = "Bit 2 - BUS_ERR"]
            #[inline(always)]
            pub fn bus_err(&mut self) -> BUS_ERR_W {
                BUS_ERR_W { w: self }
            }
            #[doc = "Bit 1 - WCLK_ERR"]
            #[inline(always)]
            pub fn wclk_err(&mut self) -> WCLK_ERR_W {
                WCLK_ERR_W { w: self }
            }
            #[doc = "Bit 0 - PTR_ERR"]
            #[inline(always)]
            pub fn ptr_err(&mut self) -> PTR_ERR_W {
                PTR_ERR_W { w: self }
            }
        }
    }
}
#[doc = "IO Controller (IOC) - configures all the DIOs and resides in the MCU domain."]
pub struct IOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IOC {}
impl IOC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ioc::RegisterBlock {
        0x4008_1000 as *const _
    }
}
impl Deref for IOC {
    type Target = ioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*IOC::ptr() }
    }
}
#[doc = "IO Controller (IOC) - configures all the DIOs and resides in the MCU domain."]
pub mod ioc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Configuration of DIO0"]
        pub iocfg0: IOCFG0,
        #[doc = "0x04 - Configuration of DIO1"]
        pub iocfg1: IOCFG1,
        #[doc = "0x08 - Configuration of DIO2"]
        pub iocfg2: IOCFG2,
        #[doc = "0x0c - Configuration of DIO3"]
        pub iocfg3: IOCFG3,
        #[doc = "0x10 - Configuration of DIO4"]
        pub iocfg4: IOCFG4,
        #[doc = "0x14 - Configuration of DIO5"]
        pub iocfg5: IOCFG5,
        #[doc = "0x18 - Configuration of DIO6"]
        pub iocfg6: IOCFG6,
        #[doc = "0x1c - Configuration of DIO7"]
        pub iocfg7: IOCFG7,
        #[doc = "0x20 - Configuration of DIO8"]
        pub iocfg8: IOCFG8,
        #[doc = "0x24 - Configuration of DIO9"]
        pub iocfg9: IOCFG9,
        #[doc = "0x28 - Configuration of DIO10"]
        pub iocfg10: IOCFG10,
        #[doc = "0x2c - Configuration of DIO11"]
        pub iocfg11: IOCFG11,
        #[doc = "0x30 - Configuration of DIO12"]
        pub iocfg12: IOCFG12,
        #[doc = "0x34 - Configuration of DIO13"]
        pub iocfg13: IOCFG13,
        #[doc = "0x38 - Configuration of DIO14"]
        pub iocfg14: IOCFG14,
        #[doc = "0x3c - Configuration of DIO15"]
        pub iocfg15: IOCFG15,
        #[doc = "0x40 - Configuration of DIO16"]
        pub iocfg16: IOCFG16,
        #[doc = "0x44 - Configuration of DIO17"]
        pub iocfg17: IOCFG17,
        #[doc = "0x48 - Configuration of DIO18"]
        pub iocfg18: IOCFG18,
        #[doc = "0x4c - Configuration of DIO19"]
        pub iocfg19: IOCFG19,
        #[doc = "0x50 - Configuration of DIO20"]
        pub iocfg20: IOCFG20,
        #[doc = "0x54 - Configuration of DIO21"]
        pub iocfg21: IOCFG21,
        #[doc = "0x58 - Configuration of DIO22"]
        pub iocfg22: IOCFG22,
        #[doc = "0x5c - Configuration of DIO23"]
        pub iocfg23: IOCFG23,
        #[doc = "0x60 - Configuration of DIO24"]
        pub iocfg24: IOCFG24,
        #[doc = "0x64 - Configuration of DIO25"]
        pub iocfg25: IOCFG25,
        #[doc = "0x68 - Configuration of DIO26"]
        pub iocfg26: IOCFG26,
        #[doc = "0x6c - Configuration of DIO27"]
        pub iocfg27: IOCFG27,
        #[doc = "0x70 - Configuration of DIO28"]
        pub iocfg28: IOCFG28,
        #[doc = "0x74 - Configuration of DIO29"]
        pub iocfg29: IOCFG29,
        #[doc = "0x78 - Configuration of DIO30"]
        pub iocfg30: IOCFG30,
        #[doc = "0x7c - Configuration of DIO31"]
        pub iocfg31: IOCFG31,
    }
    #[doc = "Configuration of DIO0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg0](iocfg0) module"]
    pub type IOCFG0 = crate::Reg<u32, _IOCFG0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG0;
    #[doc = "`read()` method returns [iocfg0::R](iocfg0::R) reader structure"]
    impl crate::Readable for IOCFG0 {}
    #[doc = "`write(|w| ..)` method takes [iocfg0::W](iocfg0::W) writer structure"]
    impl crate::Writable for IOCFG0 {}
    #[doc = "Configuration of DIO0"]
    pub mod iocfg0 {
        #[doc = "Reader of register IOCFG0"]
        pub type R = crate::R<u32, super::IOCFG0>;
        #[doc = "Writer for register IOCFG0"]
        pub type W = crate::W<u32, super::IOCFG0>;
        #[doc = "Register IOCFG0 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg1](iocfg1) module"]
    pub type IOCFG1 = crate::Reg<u32, _IOCFG1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG1;
    #[doc = "`read()` method returns [iocfg1::R](iocfg1::R) reader structure"]
    impl crate::Readable for IOCFG1 {}
    #[doc = "`write(|w| ..)` method takes [iocfg1::W](iocfg1::W) writer structure"]
    impl crate::Writable for IOCFG1 {}
    #[doc = "Configuration of DIO1"]
    pub mod iocfg1 {
        #[doc = "Reader of register IOCFG1"]
        pub type R = crate::R<u32, super::IOCFG1>;
        #[doc = "Writer for register IOCFG1"]
        pub type W = crate::W<u32, super::IOCFG1>;
        #[doc = "Register IOCFG1 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg2](iocfg2) module"]
    pub type IOCFG2 = crate::Reg<u32, _IOCFG2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG2;
    #[doc = "`read()` method returns [iocfg2::R](iocfg2::R) reader structure"]
    impl crate::Readable for IOCFG2 {}
    #[doc = "`write(|w| ..)` method takes [iocfg2::W](iocfg2::W) writer structure"]
    impl crate::Writable for IOCFG2 {}
    #[doc = "Configuration of DIO2"]
    pub mod iocfg2 {
        #[doc = "Reader of register IOCFG2"]
        pub type R = crate::R<u32, super::IOCFG2>;
        #[doc = "Writer for register IOCFG2"]
        pub type W = crate::W<u32, super::IOCFG2>;
        #[doc = "Register IOCFG2 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg3](iocfg3) module"]
    pub type IOCFG3 = crate::Reg<u32, _IOCFG3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG3;
    #[doc = "`read()` method returns [iocfg3::R](iocfg3::R) reader structure"]
    impl crate::Readable for IOCFG3 {}
    #[doc = "`write(|w| ..)` method takes [iocfg3::W](iocfg3::W) writer structure"]
    impl crate::Writable for IOCFG3 {}
    #[doc = "Configuration of DIO3"]
    pub mod iocfg3 {
        #[doc = "Reader of register IOCFG3"]
        pub type R = crate::R<u32, super::IOCFG3>;
        #[doc = "Writer for register IOCFG3"]
        pub type W = crate::W<u32, super::IOCFG3>;
        #[doc = "Register IOCFG3 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg4](iocfg4) module"]
    pub type IOCFG4 = crate::Reg<u32, _IOCFG4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG4;
    #[doc = "`read()` method returns [iocfg4::R](iocfg4::R) reader structure"]
    impl crate::Readable for IOCFG4 {}
    #[doc = "`write(|w| ..)` method takes [iocfg4::W](iocfg4::W) writer structure"]
    impl crate::Writable for IOCFG4 {}
    #[doc = "Configuration of DIO4"]
    pub mod iocfg4 {
        #[doc = "Reader of register IOCFG4"]
        pub type R = crate::R<u32, super::IOCFG4>;
        #[doc = "Writer for register IOCFG4"]
        pub type W = crate::W<u32, super::IOCFG4>;
        #[doc = "Register IOCFG4 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO5\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg5](iocfg5) module"]
    pub type IOCFG5 = crate::Reg<u32, _IOCFG5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG5;
    #[doc = "`read()` method returns [iocfg5::R](iocfg5::R) reader structure"]
    impl crate::Readable for IOCFG5 {}
    #[doc = "`write(|w| ..)` method takes [iocfg5::W](iocfg5::W) writer structure"]
    impl crate::Writable for IOCFG5 {}
    #[doc = "Configuration of DIO5"]
    pub mod iocfg5 {
        #[doc = "Reader of register IOCFG5"]
        pub type R = crate::R<u32, super::IOCFG5>;
        #[doc = "Writer for register IOCFG5"]
        pub type W = crate::W<u32, super::IOCFG5>;
        #[doc = "Register IOCFG5 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO6\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg6](iocfg6) module"]
    pub type IOCFG6 = crate::Reg<u32, _IOCFG6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG6;
    #[doc = "`read()` method returns [iocfg6::R](iocfg6::R) reader structure"]
    impl crate::Readable for IOCFG6 {}
    #[doc = "`write(|w| ..)` method takes [iocfg6::W](iocfg6::W) writer structure"]
    impl crate::Writable for IOCFG6 {}
    #[doc = "Configuration of DIO6"]
    pub mod iocfg6 {
        #[doc = "Reader of register IOCFG6"]
        pub type R = crate::R<u32, super::IOCFG6>;
        #[doc = "Writer for register IOCFG6"]
        pub type W = crate::W<u32, super::IOCFG6>;
        #[doc = "Register IOCFG6 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO7\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg7](iocfg7) module"]
    pub type IOCFG7 = crate::Reg<u32, _IOCFG7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG7;
    #[doc = "`read()` method returns [iocfg7::R](iocfg7::R) reader structure"]
    impl crate::Readable for IOCFG7 {}
    #[doc = "`write(|w| ..)` method takes [iocfg7::W](iocfg7::W) writer structure"]
    impl crate::Writable for IOCFG7 {}
    #[doc = "Configuration of DIO7"]
    pub mod iocfg7 {
        #[doc = "Reader of register IOCFG7"]
        pub type R = crate::R<u32, super::IOCFG7>;
        #[doc = "Writer for register IOCFG7"]
        pub type W = crate::W<u32, super::IOCFG7>;
        #[doc = "Register IOCFG7 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO8\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg8](iocfg8) module"]
    pub type IOCFG8 = crate::Reg<u32, _IOCFG8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG8;
    #[doc = "`read()` method returns [iocfg8::R](iocfg8::R) reader structure"]
    impl crate::Readable for IOCFG8 {}
    #[doc = "`write(|w| ..)` method takes [iocfg8::W](iocfg8::W) writer structure"]
    impl crate::Writable for IOCFG8 {}
    #[doc = "Configuration of DIO8"]
    pub mod iocfg8 {
        #[doc = "Reader of register IOCFG8"]
        pub type R = crate::R<u32, super::IOCFG8>;
        #[doc = "Writer for register IOCFG8"]
        pub type W = crate::W<u32, super::IOCFG8>;
        #[doc = "Register IOCFG8 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG8 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO9\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg9](iocfg9) module"]
    pub type IOCFG9 = crate::Reg<u32, _IOCFG9>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG9;
    #[doc = "`read()` method returns [iocfg9::R](iocfg9::R) reader structure"]
    impl crate::Readable for IOCFG9 {}
    #[doc = "`write(|w| ..)` method takes [iocfg9::W](iocfg9::W) writer structure"]
    impl crate::Writable for IOCFG9 {}
    #[doc = "Configuration of DIO9"]
    pub mod iocfg9 {
        #[doc = "Reader of register IOCFG9"]
        pub type R = crate::R<u32, super::IOCFG9>;
        #[doc = "Writer for register IOCFG9"]
        pub type W = crate::W<u32, super::IOCFG9>;
        #[doc = "Register IOCFG9 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG9 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO10\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg10](iocfg10) module"]
    pub type IOCFG10 = crate::Reg<u32, _IOCFG10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG10;
    #[doc = "`read()` method returns [iocfg10::R](iocfg10::R) reader structure"]
    impl crate::Readable for IOCFG10 {}
    #[doc = "`write(|w| ..)` method takes [iocfg10::W](iocfg10::W) writer structure"]
    impl crate::Writable for IOCFG10 {}
    #[doc = "Configuration of DIO10"]
    pub mod iocfg10 {
        #[doc = "Reader of register IOCFG10"]
        pub type R = crate::R<u32, super::IOCFG10>;
        #[doc = "Writer for register IOCFG10"]
        pub type W = crate::W<u32, super::IOCFG10>;
        #[doc = "Register IOCFG10 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG10 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO11\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg11](iocfg11) module"]
    pub type IOCFG11 = crate::Reg<u32, _IOCFG11>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG11;
    #[doc = "`read()` method returns [iocfg11::R](iocfg11::R) reader structure"]
    impl crate::Readable for IOCFG11 {}
    #[doc = "`write(|w| ..)` method takes [iocfg11::W](iocfg11::W) writer structure"]
    impl crate::Writable for IOCFG11 {}
    #[doc = "Configuration of DIO11"]
    pub mod iocfg11 {
        #[doc = "Reader of register IOCFG11"]
        pub type R = crate::R<u32, super::IOCFG11>;
        #[doc = "Writer for register IOCFG11"]
        pub type W = crate::W<u32, super::IOCFG11>;
        #[doc = "Register IOCFG11 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG11 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO12\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg12](iocfg12) module"]
    pub type IOCFG12 = crate::Reg<u32, _IOCFG12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG12;
    #[doc = "`read()` method returns [iocfg12::R](iocfg12::R) reader structure"]
    impl crate::Readable for IOCFG12 {}
    #[doc = "`write(|w| ..)` method takes [iocfg12::W](iocfg12::W) writer structure"]
    impl crate::Writable for IOCFG12 {}
    #[doc = "Configuration of DIO12"]
    pub mod iocfg12 {
        #[doc = "Reader of register IOCFG12"]
        pub type R = crate::R<u32, super::IOCFG12>;
        #[doc = "Writer for register IOCFG12"]
        pub type W = crate::W<u32, super::IOCFG12>;
        #[doc = "Register IOCFG12 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG12 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO13\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg13](iocfg13) module"]
    pub type IOCFG13 = crate::Reg<u32, _IOCFG13>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG13;
    #[doc = "`read()` method returns [iocfg13::R](iocfg13::R) reader structure"]
    impl crate::Readable for IOCFG13 {}
    #[doc = "`write(|w| ..)` method takes [iocfg13::W](iocfg13::W) writer structure"]
    impl crate::Writable for IOCFG13 {}
    #[doc = "Configuration of DIO13"]
    pub mod iocfg13 {
        #[doc = "Reader of register IOCFG13"]
        pub type R = crate::R<u32, super::IOCFG13>;
        #[doc = "Writer for register IOCFG13"]
        pub type W = crate::W<u32, super::IOCFG13>;
        #[doc = "Register IOCFG13 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG13 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO14\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg14](iocfg14) module"]
    pub type IOCFG14 = crate::Reg<u32, _IOCFG14>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG14;
    #[doc = "`read()` method returns [iocfg14::R](iocfg14::R) reader structure"]
    impl crate::Readable for IOCFG14 {}
    #[doc = "`write(|w| ..)` method takes [iocfg14::W](iocfg14::W) writer structure"]
    impl crate::Writable for IOCFG14 {}
    #[doc = "Configuration of DIO14"]
    pub mod iocfg14 {
        #[doc = "Reader of register IOCFG14"]
        pub type R = crate::R<u32, super::IOCFG14>;
        #[doc = "Writer for register IOCFG14"]
        pub type W = crate::W<u32, super::IOCFG14>;
        #[doc = "Register IOCFG14 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG14 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO15\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg15](iocfg15) module"]
    pub type IOCFG15 = crate::Reg<u32, _IOCFG15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG15;
    #[doc = "`read()` method returns [iocfg15::R](iocfg15::R) reader structure"]
    impl crate::Readable for IOCFG15 {}
    #[doc = "`write(|w| ..)` method takes [iocfg15::W](iocfg15::W) writer structure"]
    impl crate::Writable for IOCFG15 {}
    #[doc = "Configuration of DIO15"]
    pub mod iocfg15 {
        #[doc = "Reader of register IOCFG15"]
        pub type R = crate::R<u32, super::IOCFG15>;
        #[doc = "Writer for register IOCFG15"]
        pub type W = crate::W<u32, super::IOCFG15>;
        #[doc = "Register IOCFG15 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG15 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO16\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg16](iocfg16) module"]
    pub type IOCFG16 = crate::Reg<u32, _IOCFG16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG16;
    #[doc = "`read()` method returns [iocfg16::R](iocfg16::R) reader structure"]
    impl crate::Readable for IOCFG16 {}
    #[doc = "`write(|w| ..)` method takes [iocfg16::W](iocfg16::W) writer structure"]
    impl crate::Writable for IOCFG16 {}
    #[doc = "Configuration of DIO16"]
    pub mod iocfg16 {
        #[doc = "Reader of register IOCFG16"]
        pub type R = crate::R<u32, super::IOCFG16>;
        #[doc = "Writer for register IOCFG16"]
        pub type W = crate::W<u32, super::IOCFG16>;
        #[doc = "Register IOCFG16 `reset()`'s with value 0x0008_6000"]
        impl crate::ResetValue for super::IOCFG16 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0008_6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO17\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg17](iocfg17) module"]
    pub type IOCFG17 = crate::Reg<u32, _IOCFG17>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG17;
    #[doc = "`read()` method returns [iocfg17::R](iocfg17::R) reader structure"]
    impl crate::Readable for IOCFG17 {}
    #[doc = "`write(|w| ..)` method takes [iocfg17::W](iocfg17::W) writer structure"]
    impl crate::Writable for IOCFG17 {}
    #[doc = "Configuration of DIO17"]
    pub mod iocfg17 {
        #[doc = "Reader of register IOCFG17"]
        pub type R = crate::R<u32, super::IOCFG17>;
        #[doc = "Writer for register IOCFG17"]
        pub type W = crate::W<u32, super::IOCFG17>;
        #[doc = "Register IOCFG17 `reset()`'s with value 0"]
        impl crate::ResetValue for super::IOCFG17 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO18\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg18](iocfg18) module"]
    pub type IOCFG18 = crate::Reg<u32, _IOCFG18>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG18;
    #[doc = "`read()` method returns [iocfg18::R](iocfg18::R) reader structure"]
    impl crate::Readable for IOCFG18 {}
    #[doc = "`write(|w| ..)` method takes [iocfg18::W](iocfg18::W) writer structure"]
    impl crate::Writable for IOCFG18 {}
    #[doc = "Configuration of DIO18"]
    pub mod iocfg18 {
        #[doc = "Reader of register IOCFG18"]
        pub type R = crate::R<u32, super::IOCFG18>;
        #[doc = "Writer for register IOCFG18"]
        pub type W = crate::W<u32, super::IOCFG18>;
        #[doc = "Register IOCFG18 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG18 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO19\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg19](iocfg19) module"]
    pub type IOCFG19 = crate::Reg<u32, _IOCFG19>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG19;
    #[doc = "`read()` method returns [iocfg19::R](iocfg19::R) reader structure"]
    impl crate::Readable for IOCFG19 {}
    #[doc = "`write(|w| ..)` method takes [iocfg19::W](iocfg19::W) writer structure"]
    impl crate::Writable for IOCFG19 {}
    #[doc = "Configuration of DIO19"]
    pub mod iocfg19 {
        #[doc = "Reader of register IOCFG19"]
        pub type R = crate::R<u32, super::IOCFG19>;
        #[doc = "Writer for register IOCFG19"]
        pub type W = crate::W<u32, super::IOCFG19>;
        #[doc = "Register IOCFG19 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG19 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO20\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg20](iocfg20) module"]
    pub type IOCFG20 = crate::Reg<u32, _IOCFG20>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG20;
    #[doc = "`read()` method returns [iocfg20::R](iocfg20::R) reader structure"]
    impl crate::Readable for IOCFG20 {}
    #[doc = "`write(|w| ..)` method takes [iocfg20::W](iocfg20::W) writer structure"]
    impl crate::Writable for IOCFG20 {}
    #[doc = "Configuration of DIO20"]
    pub mod iocfg20 {
        #[doc = "Reader of register IOCFG20"]
        pub type R = crate::R<u32, super::IOCFG20>;
        #[doc = "Writer for register IOCFG20"]
        pub type W = crate::W<u32, super::IOCFG20>;
        #[doc = "Register IOCFG20 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG20 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO21\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg21](iocfg21) module"]
    pub type IOCFG21 = crate::Reg<u32, _IOCFG21>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG21;
    #[doc = "`read()` method returns [iocfg21::R](iocfg21::R) reader structure"]
    impl crate::Readable for IOCFG21 {}
    #[doc = "`write(|w| ..)` method takes [iocfg21::W](iocfg21::W) writer structure"]
    impl crate::Writable for IOCFG21 {}
    #[doc = "Configuration of DIO21"]
    pub mod iocfg21 {
        #[doc = "Reader of register IOCFG21"]
        pub type R = crate::R<u32, super::IOCFG21>;
        #[doc = "Writer for register IOCFG21"]
        pub type W = crate::W<u32, super::IOCFG21>;
        #[doc = "Register IOCFG21 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG21 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO22\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg22](iocfg22) module"]
    pub type IOCFG22 = crate::Reg<u32, _IOCFG22>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG22;
    #[doc = "`read()` method returns [iocfg22::R](iocfg22::R) reader structure"]
    impl crate::Readable for IOCFG22 {}
    #[doc = "`write(|w| ..)` method takes [iocfg22::W](iocfg22::W) writer structure"]
    impl crate::Writable for IOCFG22 {}
    #[doc = "Configuration of DIO22"]
    pub mod iocfg22 {
        #[doc = "Reader of register IOCFG22"]
        pub type R = crate::R<u32, super::IOCFG22>;
        #[doc = "Writer for register IOCFG22"]
        pub type W = crate::W<u32, super::IOCFG22>;
        #[doc = "Register IOCFG22 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG22 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO23\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg23](iocfg23) module"]
    pub type IOCFG23 = crate::Reg<u32, _IOCFG23>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG23;
    #[doc = "`read()` method returns [iocfg23::R](iocfg23::R) reader structure"]
    impl crate::Readable for IOCFG23 {}
    #[doc = "`write(|w| ..)` method takes [iocfg23::W](iocfg23::W) writer structure"]
    impl crate::Writable for IOCFG23 {}
    #[doc = "Configuration of DIO23"]
    pub mod iocfg23 {
        #[doc = "Reader of register IOCFG23"]
        pub type R = crate::R<u32, super::IOCFG23>;
        #[doc = "Writer for register IOCFG23"]
        pub type W = crate::W<u32, super::IOCFG23>;
        #[doc = "Register IOCFG23 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG23 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO24\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg24](iocfg24) module"]
    pub type IOCFG24 = crate::Reg<u32, _IOCFG24>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG24;
    #[doc = "`read()` method returns [iocfg24::R](iocfg24::R) reader structure"]
    impl crate::Readable for IOCFG24 {}
    #[doc = "`write(|w| ..)` method takes [iocfg24::W](iocfg24::W) writer structure"]
    impl crate::Writable for IOCFG24 {}
    #[doc = "Configuration of DIO24"]
    pub mod iocfg24 {
        #[doc = "Reader of register IOCFG24"]
        pub type R = crate::R<u32, super::IOCFG24>;
        #[doc = "Writer for register IOCFG24"]
        pub type W = crate::W<u32, super::IOCFG24>;
        #[doc = "Register IOCFG24 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG24 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO25\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg25](iocfg25) module"]
    pub type IOCFG25 = crate::Reg<u32, _IOCFG25>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG25;
    #[doc = "`read()` method returns [iocfg25::R](iocfg25::R) reader structure"]
    impl crate::Readable for IOCFG25 {}
    #[doc = "`write(|w| ..)` method takes [iocfg25::W](iocfg25::W) writer structure"]
    impl crate::Writable for IOCFG25 {}
    #[doc = "Configuration of DIO25"]
    pub mod iocfg25 {
        #[doc = "Reader of register IOCFG25"]
        pub type R = crate::R<u32, super::IOCFG25>;
        #[doc = "Writer for register IOCFG25"]
        pub type W = crate::W<u32, super::IOCFG25>;
        #[doc = "Register IOCFG25 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG25 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO26\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg26](iocfg26) module"]
    pub type IOCFG26 = crate::Reg<u32, _IOCFG26>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG26;
    #[doc = "`read()` method returns [iocfg26::R](iocfg26::R) reader structure"]
    impl crate::Readable for IOCFG26 {}
    #[doc = "`write(|w| ..)` method takes [iocfg26::W](iocfg26::W) writer structure"]
    impl crate::Writable for IOCFG26 {}
    #[doc = "Configuration of DIO26"]
    pub mod iocfg26 {
        #[doc = "Reader of register IOCFG26"]
        pub type R = crate::R<u32, super::IOCFG26>;
        #[doc = "Writer for register IOCFG26"]
        pub type W = crate::W<u32, super::IOCFG26>;
        #[doc = "Register IOCFG26 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG26 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO27\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg27](iocfg27) module"]
    pub type IOCFG27 = crate::Reg<u32, _IOCFG27>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG27;
    #[doc = "`read()` method returns [iocfg27::R](iocfg27::R) reader structure"]
    impl crate::Readable for IOCFG27 {}
    #[doc = "`write(|w| ..)` method takes [iocfg27::W](iocfg27::W) writer structure"]
    impl crate::Writable for IOCFG27 {}
    #[doc = "Configuration of DIO27"]
    pub mod iocfg27 {
        #[doc = "Reader of register IOCFG27"]
        pub type R = crate::R<u32, super::IOCFG27>;
        #[doc = "Writer for register IOCFG27"]
        pub type W = crate::W<u32, super::IOCFG27>;
        #[doc = "Register IOCFG27 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG27 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO28\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg28](iocfg28) module"]
    pub type IOCFG28 = crate::Reg<u32, _IOCFG28>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG28;
    #[doc = "`read()` method returns [iocfg28::R](iocfg28::R) reader structure"]
    impl crate::Readable for IOCFG28 {}
    #[doc = "`write(|w| ..)` method takes [iocfg28::W](iocfg28::W) writer structure"]
    impl crate::Writable for IOCFG28 {}
    #[doc = "Configuration of DIO28"]
    pub mod iocfg28 {
        #[doc = "Reader of register IOCFG28"]
        pub type R = crate::R<u32, super::IOCFG28>;
        #[doc = "Writer for register IOCFG28"]
        pub type W = crate::W<u32, super::IOCFG28>;
        #[doc = "Register IOCFG28 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG28 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO29\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg29](iocfg29) module"]
    pub type IOCFG29 = crate::Reg<u32, _IOCFG29>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG29;
    #[doc = "`read()` method returns [iocfg29::R](iocfg29::R) reader structure"]
    impl crate::Readable for IOCFG29 {}
    #[doc = "`write(|w| ..)` method takes [iocfg29::W](iocfg29::W) writer structure"]
    impl crate::Writable for IOCFG29 {}
    #[doc = "Configuration of DIO29"]
    pub mod iocfg29 {
        #[doc = "Reader of register IOCFG29"]
        pub type R = crate::R<u32, super::IOCFG29>;
        #[doc = "Writer for register IOCFG29"]
        pub type W = crate::W<u32, super::IOCFG29>;
        #[doc = "Register IOCFG29 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG29 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO30\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg30](iocfg30) module"]
    pub type IOCFG30 = crate::Reg<u32, _IOCFG30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG30;
    #[doc = "`read()` method returns [iocfg30::R](iocfg30::R) reader structure"]
    impl crate::Readable for IOCFG30 {}
    #[doc = "`write(|w| ..)` method takes [iocfg30::W](iocfg30::W) writer structure"]
    impl crate::Writable for IOCFG30 {}
    #[doc = "Configuration of DIO30"]
    pub mod iocfg30 {
        #[doc = "Reader of register IOCFG30"]
        pub type R = crate::R<u32, super::IOCFG30>;
        #[doc = "Writer for register IOCFG30"]
        pub type W = crate::W<u32, super::IOCFG30>;
        #[doc = "Register IOCFG30 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG30 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
    #[doc = "Configuration of DIO31\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iocfg31](iocfg31) module"]
    pub type IOCFG31 = crate::Reg<u32, _IOCFG31>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOCFG31;
    #[doc = "`read()` method returns [iocfg31::R](iocfg31::R) reader structure"]
    impl crate::Readable for IOCFG31 {}
    #[doc = "`write(|w| ..)` method takes [iocfg31::W](iocfg31::W) writer structure"]
    impl crate::Writable for IOCFG31 {}
    #[doc = "Configuration of DIO31"]
    pub mod iocfg31 {
        #[doc = "Reader of register IOCFG31"]
        pub type R = crate::R<u32, super::IOCFG31>;
        #[doc = "Writer for register IOCFG31"]
        pub type W = crate::W<u32, super::IOCFG31>;
        #[doc = "Register IOCFG31 `reset()`'s with value 0x6000"]
        impl crate::ResetValue for super::IOCFG31 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x6000
            }
        }
        #[doc = "Reader of field `HYST_EN`"]
        pub type HYST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HYST_EN`"]
        pub struct HYST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HYST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `IE`"]
        pub type IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IE`"]
        pub struct IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WU_CFG`"]
        pub type WU_CFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WU_CFG`"]
        pub struct WU_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WU_CFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IOMODE`"]
        pub type IOMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOMODE`"]
        pub struct IOMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_IRQ_EN`"]
        pub type EDGE_IRQ_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EDGE_IRQ_EN`"]
        pub struct EDGE_IRQ_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_IRQ_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EDGE_DET`"]
        pub type EDGE_DET_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EDGE_DET`"]
        pub struct EDGE_DET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EDGE_DET_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PULL_CTL`"]
        pub type PULL_CTL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PULL_CTL`"]
        pub struct PULL_CTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PULL_CTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 13)) | (((value as u32) & 0x03) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `SLEW_RED`"]
        pub type SLEW_RED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLEW_RED`"]
        pub struct SLEW_RED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLEW_RED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IOCURR`"]
        pub type IOCURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOCURR`"]
        pub struct IOCURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `IOSTR`"]
        pub type IOSTR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IOSTR`"]
        pub struct IOSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOSTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PORT_ID`"]
        pub type PORT_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PORT_ID`"]
        pub struct PORT_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORT_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&self) -> HYST_EN_R {
                HYST_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&self) -> IE_R {
                IE_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&self) -> WU_CFG_R {
                WU_CFG_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&self) -> IOMODE_R {
                IOMODE_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&self) -> EDGE_IRQ_EN_R {
                EDGE_IRQ_EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&self) -> EDGE_DET_R {
                EDGE_DET_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&self) -> PULL_CTL_R {
                PULL_CTL_R::new(((self.bits >> 13) & 0x03) as u8)
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&self) -> SLEW_RED_R {
                SLEW_RED_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&self) -> IOCURR_R {
                IOCURR_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&self) -> IOSTR_R {
                IOSTR_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&self) -> PORT_ID_R {
                PORT_ID_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 30 - HYST_EN"]
            #[inline(always)]
            pub fn hyst_en(&mut self) -> HYST_EN_W {
                HYST_EN_W { w: self }
            }
            #[doc = "Bit 29 - IE"]
            #[inline(always)]
            pub fn ie(&mut self) -> IE_W {
                IE_W { w: self }
            }
            #[doc = "Bits 27:28 - WU_CFG"]
            #[inline(always)]
            pub fn wu_cfg(&mut self) -> WU_CFG_W {
                WU_CFG_W { w: self }
            }
            #[doc = "Bits 24:26 - IOMODE"]
            #[inline(always)]
            pub fn iomode(&mut self) -> IOMODE_W {
                IOMODE_W { w: self }
            }
            #[doc = "Bit 18 - EDGE_IRQ_EN"]
            #[inline(always)]
            pub fn edge_irq_en(&mut self) -> EDGE_IRQ_EN_W {
                EDGE_IRQ_EN_W { w: self }
            }
            #[doc = "Bits 16:17 - EDGE_DET"]
            #[inline(always)]
            pub fn edge_det(&mut self) -> EDGE_DET_W {
                EDGE_DET_W { w: self }
            }
            #[doc = "Bits 13:14 - PULL_CTL"]
            #[inline(always)]
            pub fn pull_ctl(&mut self) -> PULL_CTL_W {
                PULL_CTL_W { w: self }
            }
            #[doc = "Bit 12 - SLEW_RED"]
            #[inline(always)]
            pub fn slew_red(&mut self) -> SLEW_RED_W {
                SLEW_RED_W { w: self }
            }
            #[doc = "Bits 10:11 - IOCURR"]
            #[inline(always)]
            pub fn iocurr(&mut self) -> IOCURR_W {
                IOCURR_W { w: self }
            }
            #[doc = "Bits 8:9 - IOSTR"]
            #[inline(always)]
            pub fn iostr(&mut self) -> IOSTR_W {
                IOSTR_W { w: self }
            }
            #[doc = "Bits 0:5 - PORT_ID"]
            #[inline(always)]
            pub fn port_id(&mut self) -> PORT_ID_W {
                PORT_ID_W { w: self }
            }
        }
    }
}
#[doc = "Power, Reset and Clock Management"]
pub struct PRCM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PRCM {}
impl PRCM {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const prcm::RegisterBlock {
        0x4008_2000 as *const _
    }
}
impl Deref for PRCM {
    type Target = prcm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PRCM::ptr() }
    }
}
#[doc = "Power, Reset and Clock Management"]
pub mod prcm {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Infrastructure Clock Division Factor For Run Mode"]
        pub infrclkdivr: INFRCLKDIVR,
        #[doc = "0x04 - Infrastructure Clock Division Factor For Sleep Mode"]
        pub infrclkdivs: INFRCLKDIVS,
        #[doc = "0x08 - Infrastructure Clock Division Factor For DeepSleep Mode"]
        pub infrclkdivds: INFRCLKDIVDS,
        #[doc = "0x0c - MCU Voltage Domain Control"]
        pub vdctl: VDCTL,
        _reserved4: [u8; 24usize],
        #[doc = "0x28 - Clock Load Control"]
        pub clkloadctl: CLKLOADCTL,
        #[doc = "0x2c - RFC Clock Gate"]
        pub rfcclkg: RFCCLKG,
        #[doc = "0x30 - VIMS Clock Gate"]
        pub vimsclkg: VIMSCLKG,
        _reserved7: [u8; 8usize],
        #[doc = "0x3c - TRNG, CRYPTO And UDMA Clock Gate For Run Mode"]
        pub secdmaclkgr: SECDMACLKGR,
        #[doc = "0x40 - TRNG, CRYPTO And UDMA Clock Gate For Sleep Mode"]
        pub secdmaclkgs: SECDMACLKGS,
        #[doc = "0x44 - TRNG, CRYPTO And UDMA Clock Gate For Deep Sleep Mode"]
        pub secdmaclkgds: SECDMACLKGDS,
        #[doc = "0x48 - GPIO Clock Gate For Run Mode"]
        pub gpioclkgr: GPIOCLKGR,
        #[doc = "0x4c - GPIO Clock Gate For Sleep Mode"]
        pub gpioclkgs: GPIOCLKGS,
        #[doc = "0x50 - GPIO Clock Gate For Deep Sleep Mode"]
        pub gpioclkgds: GPIOCLKGDS,
        #[doc = "0x54 - GPT Clock Gate For Run Mode"]
        pub gptclkgr: GPTCLKGR,
        #[doc = "0x58 - GPT Clock Gate For Sleep Mode"]
        pub gptclkgs: GPTCLKGS,
        #[doc = "0x5c - GPT Clock Gate For Deep Sleep Mode"]
        pub gptclkgds: GPTCLKGDS,
        #[doc = "0x60 - I2C Clock Gate For Run Mode"]
        pub i2cclkgr: I2CCLKGR,
        #[doc = "0x64 - I2C Clock Gate For Sleep Mode"]
        pub i2cclkgs: I2CCLKGS,
        #[doc = "0x68 - I2C Clock Gate For Deep Sleep Mode"]
        pub i2cclkgds: I2CCLKGDS,
        #[doc = "0x6c - UART Clock Gate For Run Mode"]
        pub uartclkgr: UARTCLKGR,
        #[doc = "0x70 - UART Clock Gate For Sleep Mode"]
        pub uartclkgs: UARTCLKGS,
        #[doc = "0x74 - UART Clock Gate For Deep Sleep Mode"]
        pub uartclkgds: UARTCLKGDS,
        #[doc = "0x78 - SSI Clock Gate For Run Mode"]
        pub ssiclkgr: SSICLKGR,
        #[doc = "0x7c - SSI Clock Gate For Sleep Mode"]
        pub ssiclkgs: SSICLKGS,
        #[doc = "0x80 - SSI Clock Gate For Deep Sleep Mode"]
        pub ssiclkgds: SSICLKGDS,
        #[doc = "0x84 - I2S Clock Gate For Run Mode"]
        pub i2sclkgr: I2SCLKGR,
        #[doc = "0x88 - I2S Clock Gate For Sleep Mode"]
        pub i2sclkgs: I2SCLKGS,
        #[doc = "0x8c - I2S Clock Gate For Deep Sleep Mode"]
        pub i2sclkgds: I2SCLKGDS,
        _reserved28: [u8; 40usize],
        #[doc = "0xb8 - Internal. Only to be used through TI provided API."]
        pub cpuclkdiv: CPUCLKDIV,
        _reserved29: [u8; 12usize],
        #[doc = "0xc8 - I2S Clock Control"]
        pub i2sbclksel: I2SBCLKSEL,
        #[doc = "0xcc - GPT Scalar"]
        pub gptclkdiv: GPTCLKDIV,
        #[doc = "0xd0 - I2S Clock Control"]
        pub i2sclkctl: I2SCLKCTL,
        #[doc = "0xd4 - MCLK Division Ratio"]
        pub i2smclkdiv: I2SMCLKDIV,
        #[doc = "0xd8 - BCLK Division Ratio"]
        pub i2sbclkdiv: I2SBCLKDIV,
        #[doc = "0xdc - WCLK Division Ratio"]
        pub i2swclkdiv: I2SWCLKDIV,
        _reserved35: [u8; 44usize],
        #[doc = "0x10c - SW Initiated Resets"]
        pub swreset: SWRESET,
        #[doc = "0x110 - WARM Reset Control And Status"]
        pub warmreset: WARMRESET,
        _reserved37: [u8; 24usize],
        #[doc = "0x12c - Power Domain Control"]
        pub pdctl0: PDCTL0,
        #[doc = "0x130 - RFC Power Domain Control"]
        pub pdctl0rfc: PDCTL0RFC,
        #[doc = "0x134 - SERIAL Power Domain Control"]
        pub pdctl0serial: PDCTL0SERIAL,
        #[doc = "0x138 - PERIPH Power Domain Control"]
        pub pdctl0periph: PDCTL0PERIPH,
        _reserved41: [u8; 4usize],
        #[doc = "0x140 - Power Domain Status"]
        pub pdstat0: PDSTAT0,
        #[doc = "0x144 - RFC Power Domain Status"]
        pub pdstat0rfc: PDSTAT0RFC,
        #[doc = "0x148 - SERIAL Power Domain Status"]
        pub pdstat0serial: PDSTAT0SERIAL,
        #[doc = "0x14c - PERIPH Power Domain Status"]
        pub pdstat0periph: PDSTAT0PERIPH,
        _reserved45: [u8; 44usize],
        #[doc = "0x17c - Power Domain Control"]
        pub pdctl1: PDCTL1,
        _reserved46: [u8; 4usize],
        #[doc = "0x184 - CPU Power Domain Control"]
        pub pdctl1cpu: PDCTL1CPU,
        #[doc = "0x188 - RFC Power Domain Control"]
        pub pdctl1rfc: PDCTL1RFC,
        #[doc = "0x18c - VIMS Power Domain Control"]
        pub pdctl1vims: PDCTL1VIMS,
        _reserved49: [u8; 4usize],
        #[doc = "0x194 - Power Domain Status"]
        pub pdstat1: PDSTAT1,
        #[doc = "0x198 - BUS Power Domain Status"]
        pub pdstat1bus: PDSTAT1BUS,
        #[doc = "0x19c - RFC Power Domain Status"]
        pub pdstat1rfc: PDSTAT1RFC,
        #[doc = "0x1a0 - CPU Power Domain Status"]
        pub pdstat1cpu: PDSTAT1CPU,
        #[doc = "0x1a4 - VIMS Power Domain Status"]
        pub pdstat1vims: PDSTAT1VIMS,
        _reserved54: [u8; 40usize],
        #[doc = "0x1d0 - Selected RFC Mode"]
        pub rfcmodesel: RFCMODESEL,
        _reserved55: [u8; 80usize],
        #[doc = "0x224 - Memory Retention Control"]
        pub ramreten: RAMRETEN,
    }
    #[doc = "Infrastructure Clock Division Factor For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [infrclkdivr](infrclkdivr) module"]
    pub type INFRCLKDIVR = crate::Reg<u32, _INFRCLKDIVR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INFRCLKDIVR;
    #[doc = "`read()` method returns [infrclkdivr::R](infrclkdivr::R) reader structure"]
    impl crate::Readable for INFRCLKDIVR {}
    #[doc = "`write(|w| ..)` method takes [infrclkdivr::W](infrclkdivr::W) writer structure"]
    impl crate::Writable for INFRCLKDIVR {}
    #[doc = "Infrastructure Clock Division Factor For Run Mode"]
    pub mod infrclkdivr {
        #[doc = "Reader of register INFRCLKDIVR"]
        pub type R = crate::R<u32, super::INFRCLKDIVR>;
        #[doc = "Writer for register INFRCLKDIVR"]
        pub type W = crate::W<u32, super::INFRCLKDIVR>;
        #[doc = "Register INFRCLKDIVR `reset()`'s with value 0"]
        impl crate::ResetValue for super::INFRCLKDIVR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATIO`"]
        pub type RATIO_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RATIO`"]
        pub struct RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATIO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - RATIO"]
            #[inline(always)]
            pub fn ratio(&self) -> RATIO_R {
                RATIO_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - RATIO"]
            #[inline(always)]
            pub fn ratio(&mut self) -> RATIO_W {
                RATIO_W { w: self }
            }
        }
    }
    #[doc = "Infrastructure Clock Division Factor For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [infrclkdivs](infrclkdivs) module"]
    pub type INFRCLKDIVS = crate::Reg<u32, _INFRCLKDIVS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INFRCLKDIVS;
    #[doc = "`read()` method returns [infrclkdivs::R](infrclkdivs::R) reader structure"]
    impl crate::Readable for INFRCLKDIVS {}
    #[doc = "`write(|w| ..)` method takes [infrclkdivs::W](infrclkdivs::W) writer structure"]
    impl crate::Writable for INFRCLKDIVS {}
    #[doc = "Infrastructure Clock Division Factor For Sleep Mode"]
    pub mod infrclkdivs {
        #[doc = "Reader of register INFRCLKDIVS"]
        pub type R = crate::R<u32, super::INFRCLKDIVS>;
        #[doc = "Writer for register INFRCLKDIVS"]
        pub type W = crate::W<u32, super::INFRCLKDIVS>;
        #[doc = "Register INFRCLKDIVS `reset()`'s with value 0"]
        impl crate::ResetValue for super::INFRCLKDIVS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATIO`"]
        pub type RATIO_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RATIO`"]
        pub struct RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATIO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - RATIO"]
            #[inline(always)]
            pub fn ratio(&self) -> RATIO_R {
                RATIO_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - RATIO"]
            #[inline(always)]
            pub fn ratio(&mut self) -> RATIO_W {
                RATIO_W { w: self }
            }
        }
    }
    #[doc = "Infrastructure Clock Division Factor For DeepSleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [infrclkdivds](infrclkdivds) module"]
    pub type INFRCLKDIVDS = crate::Reg<u32, _INFRCLKDIVDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INFRCLKDIVDS;
    #[doc = "`read()` method returns [infrclkdivds::R](infrclkdivds::R) reader structure"]
    impl crate::Readable for INFRCLKDIVDS {}
    #[doc = "`write(|w| ..)` method takes [infrclkdivds::W](infrclkdivds::W) writer structure"]
    impl crate::Writable for INFRCLKDIVDS {}
    #[doc = "Infrastructure Clock Division Factor For DeepSleep Mode"]
    pub mod infrclkdivds {
        #[doc = "Reader of register INFRCLKDIVDS"]
        pub type R = crate::R<u32, super::INFRCLKDIVDS>;
        #[doc = "Writer for register INFRCLKDIVDS"]
        pub type W = crate::W<u32, super::INFRCLKDIVDS>;
        #[doc = "Register INFRCLKDIVDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::INFRCLKDIVDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATIO`"]
        pub type RATIO_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RATIO`"]
        pub struct RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATIO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - RATIO"]
            #[inline(always)]
            pub fn ratio(&self) -> RATIO_R {
                RATIO_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - RATIO"]
            #[inline(always)]
            pub fn ratio(&mut self) -> RATIO_W {
                RATIO_W { w: self }
            }
        }
    }
    #[doc = "MCU Voltage Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vdctl](vdctl) module"]
    pub type VDCTL = crate::Reg<u32, _VDCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VDCTL;
    #[doc = "`read()` method returns [vdctl::R](vdctl::R) reader structure"]
    impl crate::Readable for VDCTL {}
    #[doc = "`write(|w| ..)` method takes [vdctl::W](vdctl::W) writer structure"]
    impl crate::Writable for VDCTL {}
    #[doc = "MCU Voltage Domain Control"]
    pub mod vdctl {
        #[doc = "Reader of register VDCTL"]
        pub type R = crate::R<u32, super::VDCTL>;
        #[doc = "Writer for register VDCTL"]
        pub type W = crate::W<u32, super::VDCTL>;
        #[doc = "Register VDCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::VDCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MCU_VD`"]
        pub type MCU_VD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCU_VD`"]
        pub struct MCU_VD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCU_VD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ULDO`"]
        pub type ULDO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ULDO`"]
        pub struct ULDO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULDO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - MCU_VD"]
            #[inline(always)]
            pub fn mcu_vd(&self) -> MCU_VD_R {
                MCU_VD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ULDO"]
            #[inline(always)]
            pub fn uldo(&self) -> ULDO_R {
                ULDO_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - MCU_VD"]
            #[inline(always)]
            pub fn mcu_vd(&mut self) -> MCU_VD_W {
                MCU_VD_W { w: self }
            }
            #[doc = "Bit 0 - ULDO"]
            #[inline(always)]
            pub fn uldo(&mut self) -> ULDO_W {
                ULDO_W { w: self }
            }
        }
    }
    #[doc = "Clock Load Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clkloadctl](clkloadctl) module"]
    pub type CLKLOADCTL = crate::Reg<u32, _CLKLOADCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLKLOADCTL;
    #[doc = "`read()` method returns [clkloadctl::R](clkloadctl::R) reader structure"]
    impl crate::Readable for CLKLOADCTL {}
    #[doc = "`write(|w| ..)` method takes [clkloadctl::W](clkloadctl::W) writer structure"]
    impl crate::Writable for CLKLOADCTL {}
    #[doc = "Clock Load Control"]
    pub mod clkloadctl {
        #[doc = "Reader of register CLKLOADCTL"]
        pub type R = crate::R<u32, super::CLKLOADCTL>;
        #[doc = "Writer for register CLKLOADCTL"]
        pub type W = crate::W<u32, super::CLKLOADCTL>;
        #[doc = "Register CLKLOADCTL `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::CLKLOADCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `LOAD_DONE`"]
        pub type LOAD_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LOAD_DONE`"]
        pub struct LOAD_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOAD_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LOAD`"]
        pub type LOAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LOAD`"]
        pub struct LOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - LOAD_DONE"]
            #[inline(always)]
            pub fn load_done(&self) -> LOAD_DONE_R {
                LOAD_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LOAD"]
            #[inline(always)]
            pub fn load(&self) -> LOAD_R {
                LOAD_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - LOAD_DONE"]
            #[inline(always)]
            pub fn load_done(&mut self) -> LOAD_DONE_W {
                LOAD_DONE_W { w: self }
            }
            #[doc = "Bit 0 - LOAD"]
            #[inline(always)]
            pub fn load(&mut self) -> LOAD_W {
                LOAD_W { w: self }
            }
        }
    }
    #[doc = "RFC Clock Gate\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcclkg](rfcclkg) module"]
    pub type RFCCLKG = crate::Reg<u32, _RFCCLKG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCCLKG;
    #[doc = "`read()` method returns [rfcclkg::R](rfcclkg::R) reader structure"]
    impl crate::Readable for RFCCLKG {}
    #[doc = "`write(|w| ..)` method takes [rfcclkg::W](rfcclkg::W) writer structure"]
    impl crate::Writable for RFCCLKG {}
    #[doc = "RFC Clock Gate"]
    pub mod rfcclkg {
        #[doc = "Reader of register RFCCLKG"]
        pub type R = crate::R<u32, super::RFCCLKG>;
        #[doc = "Writer for register RFCCLKG"]
        pub type W = crate::W<u32, super::RFCCLKG>;
        #[doc = "Register RFCCLKG `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::RFCCLKG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "VIMS Clock Gate\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [vimsclkg](vimsclkg) module"]
    pub type VIMSCLKG = crate::Reg<u32, _VIMSCLKG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VIMSCLKG;
    #[doc = "`read()` method returns [vimsclkg::R](vimsclkg::R) reader structure"]
    impl crate::Readable for VIMSCLKG {}
    #[doc = "`write(|w| ..)` method takes [vimsclkg::W](vimsclkg::W) writer structure"]
    impl crate::Writable for VIMSCLKG {}
    #[doc = "VIMS Clock Gate"]
    pub mod vimsclkg {
        #[doc = "Reader of register VIMSCLKG"]
        pub type R = crate::R<u32, super::VIMSCLKG>;
        #[doc = "Writer for register VIMSCLKG"]
        pub type W = crate::W<u32, super::VIMSCLKG>;
        #[doc = "Register VIMSCLKG `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::VIMSCLKG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "TRNG, CRYPTO And UDMA Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [secdmaclkgr](secdmaclkgr) module"]
    pub type SECDMACLKGR = crate::Reg<u32, _SECDMACLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SECDMACLKGR;
    #[doc = "`read()` method returns [secdmaclkgr::R](secdmaclkgr::R) reader structure"]
    impl crate::Readable for SECDMACLKGR {}
    #[doc = "`write(|w| ..)` method takes [secdmaclkgr::W](secdmaclkgr::W) writer structure"]
    impl crate::Writable for SECDMACLKGR {}
    #[doc = "TRNG, CRYPTO And UDMA Clock Gate For Run Mode"]
    pub mod secdmaclkgr {
        #[doc = "Reader of register SECDMACLKGR"]
        pub type R = crate::R<u32, super::SECDMACLKGR>;
        #[doc = "Writer for register SECDMACLKGR"]
        pub type W = crate::W<u32, super::SECDMACLKGR>;
        #[doc = "Register SECDMACLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SECDMACLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMA_CLK_EN`"]
        pub type DMA_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA_CLK_EN`"]
        pub struct DMA_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TRNG_CLK_EN`"]
        pub type TRNG_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRNG_CLK_EN`"]
        pub struct TRNG_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRNG_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CRYPTO_CLK_EN`"]
        pub type CRYPTO_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRYPTO_CLK_EN`"]
        pub struct CRYPTO_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRYPTO_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - DMA_CLK_EN"]
            #[inline(always)]
            pub fn dma_clk_en(&self) -> DMA_CLK_EN_R {
                DMA_CLK_EN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TRNG_CLK_EN"]
            #[inline(always)]
            pub fn trng_clk_en(&self) -> TRNG_CLK_EN_R {
                TRNG_CLK_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CRYPTO_CLK_EN"]
            #[inline(always)]
            pub fn crypto_clk_en(&self) -> CRYPTO_CLK_EN_R {
                CRYPTO_CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - DMA_CLK_EN"]
            #[inline(always)]
            pub fn dma_clk_en(&mut self) -> DMA_CLK_EN_W {
                DMA_CLK_EN_W { w: self }
            }
            #[doc = "Bit 1 - TRNG_CLK_EN"]
            #[inline(always)]
            pub fn trng_clk_en(&mut self) -> TRNG_CLK_EN_W {
                TRNG_CLK_EN_W { w: self }
            }
            #[doc = "Bit 0 - CRYPTO_CLK_EN"]
            #[inline(always)]
            pub fn crypto_clk_en(&mut self) -> CRYPTO_CLK_EN_W {
                CRYPTO_CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "TRNG, CRYPTO And UDMA Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [secdmaclkgs](secdmaclkgs) module"]
    pub type SECDMACLKGS = crate::Reg<u32, _SECDMACLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SECDMACLKGS;
    #[doc = "`read()` method returns [secdmaclkgs::R](secdmaclkgs::R) reader structure"]
    impl crate::Readable for SECDMACLKGS {}
    #[doc = "`write(|w| ..)` method takes [secdmaclkgs::W](secdmaclkgs::W) writer structure"]
    impl crate::Writable for SECDMACLKGS {}
    #[doc = "TRNG, CRYPTO And UDMA Clock Gate For Sleep Mode"]
    pub mod secdmaclkgs {
        #[doc = "Reader of register SECDMACLKGS"]
        pub type R = crate::R<u32, super::SECDMACLKGS>;
        #[doc = "Writer for register SECDMACLKGS"]
        pub type W = crate::W<u32, super::SECDMACLKGS>;
        #[doc = "Register SECDMACLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::SECDMACLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMA_CLK_EN`"]
        pub type DMA_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA_CLK_EN`"]
        pub struct DMA_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TRNG_CLK_EN`"]
        pub type TRNG_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRNG_CLK_EN`"]
        pub struct TRNG_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRNG_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CRYPTO_CLK_EN`"]
        pub type CRYPTO_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRYPTO_CLK_EN`"]
        pub struct CRYPTO_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRYPTO_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - DMA_CLK_EN"]
            #[inline(always)]
            pub fn dma_clk_en(&self) -> DMA_CLK_EN_R {
                DMA_CLK_EN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TRNG_CLK_EN"]
            #[inline(always)]
            pub fn trng_clk_en(&self) -> TRNG_CLK_EN_R {
                TRNG_CLK_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CRYPTO_CLK_EN"]
            #[inline(always)]
            pub fn crypto_clk_en(&self) -> CRYPTO_CLK_EN_R {
                CRYPTO_CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - DMA_CLK_EN"]
            #[inline(always)]
            pub fn dma_clk_en(&mut self) -> DMA_CLK_EN_W {
                DMA_CLK_EN_W { w: self }
            }
            #[doc = "Bit 1 - TRNG_CLK_EN"]
            #[inline(always)]
            pub fn trng_clk_en(&mut self) -> TRNG_CLK_EN_W {
                TRNG_CLK_EN_W { w: self }
            }
            #[doc = "Bit 0 - CRYPTO_CLK_EN"]
            #[inline(always)]
            pub fn crypto_clk_en(&mut self) -> CRYPTO_CLK_EN_W {
                CRYPTO_CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "TRNG, CRYPTO And UDMA Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [secdmaclkgds](secdmaclkgds) module"]
    pub type SECDMACLKGDS = crate::Reg<u32, _SECDMACLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SECDMACLKGDS;
    #[doc = "`read()` method returns [secdmaclkgds::R](secdmaclkgds::R) reader structure"]
    impl crate::Readable for SECDMACLKGDS {}
    #[doc = "`write(|w| ..)` method takes [secdmaclkgds::W](secdmaclkgds::W) writer structure"]
    impl crate::Writable for SECDMACLKGDS {}
    #[doc = "TRNG, CRYPTO And UDMA Clock Gate For Deep Sleep Mode"]
    pub mod secdmaclkgds {
        #[doc = "Reader of register SECDMACLKGDS"]
        pub type R = crate::R<u32, super::SECDMACLKGDS>;
        #[doc = "Writer for register SECDMACLKGDS"]
        pub type W = crate::W<u32, super::SECDMACLKGDS>;
        #[doc = "Register SECDMACLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::SECDMACLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMA_CLK_EN`"]
        pub type DMA_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMA_CLK_EN`"]
        pub struct DMA_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMA_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TRNG_CLK_EN`"]
        pub type TRNG_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRNG_CLK_EN`"]
        pub struct TRNG_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRNG_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CRYPTO_CLK_EN`"]
        pub type CRYPTO_CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRYPTO_CLK_EN`"]
        pub struct CRYPTO_CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRYPTO_CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - DMA_CLK_EN"]
            #[inline(always)]
            pub fn dma_clk_en(&self) -> DMA_CLK_EN_R {
                DMA_CLK_EN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TRNG_CLK_EN"]
            #[inline(always)]
            pub fn trng_clk_en(&self) -> TRNG_CLK_EN_R {
                TRNG_CLK_EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CRYPTO_CLK_EN"]
            #[inline(always)]
            pub fn crypto_clk_en(&self) -> CRYPTO_CLK_EN_R {
                CRYPTO_CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - DMA_CLK_EN"]
            #[inline(always)]
            pub fn dma_clk_en(&mut self) -> DMA_CLK_EN_W {
                DMA_CLK_EN_W { w: self }
            }
            #[doc = "Bit 1 - TRNG_CLK_EN"]
            #[inline(always)]
            pub fn trng_clk_en(&mut self) -> TRNG_CLK_EN_W {
                TRNG_CLK_EN_W { w: self }
            }
            #[doc = "Bit 0 - CRYPTO_CLK_EN"]
            #[inline(always)]
            pub fn crypto_clk_en(&mut self) -> CRYPTO_CLK_EN_W {
                CRYPTO_CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "GPIO Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioclkgr](gpioclkgr) module"]
    pub type GPIOCLKGR = crate::Reg<u32, _GPIOCLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIOCLKGR;
    #[doc = "`read()` method returns [gpioclkgr::R](gpioclkgr::R) reader structure"]
    impl crate::Readable for GPIOCLKGR {}
    #[doc = "`write(|w| ..)` method takes [gpioclkgr::W](gpioclkgr::W) writer structure"]
    impl crate::Writable for GPIOCLKGR {}
    #[doc = "GPIO Clock Gate For Run Mode"]
    pub mod gpioclkgr {
        #[doc = "Reader of register GPIOCLKGR"]
        pub type R = crate::R<u32, super::GPIOCLKGR>;
        #[doc = "Writer for register GPIOCLKGR"]
        pub type W = crate::W<u32, super::GPIOCLKGR>;
        #[doc = "Register GPIOCLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIOCLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "GPIO Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioclkgs](gpioclkgs) module"]
    pub type GPIOCLKGS = crate::Reg<u32, _GPIOCLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIOCLKGS;
    #[doc = "`read()` method returns [gpioclkgs::R](gpioclkgs::R) reader structure"]
    impl crate::Readable for GPIOCLKGS {}
    #[doc = "`write(|w| ..)` method takes [gpioclkgs::W](gpioclkgs::W) writer structure"]
    impl crate::Writable for GPIOCLKGS {}
    #[doc = "GPIO Clock Gate For Sleep Mode"]
    pub mod gpioclkgs {
        #[doc = "Reader of register GPIOCLKGS"]
        pub type R = crate::R<u32, super::GPIOCLKGS>;
        #[doc = "Writer for register GPIOCLKGS"]
        pub type W = crate::W<u32, super::GPIOCLKGS>;
        #[doc = "Register GPIOCLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIOCLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "GPIO Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gpioclkgds](gpioclkgds) module"]
    pub type GPIOCLKGDS = crate::Reg<u32, _GPIOCLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPIOCLKGDS;
    #[doc = "`read()` method returns [gpioclkgds::R](gpioclkgds::R) reader structure"]
    impl crate::Readable for GPIOCLKGDS {}
    #[doc = "`write(|w| ..)` method takes [gpioclkgds::W](gpioclkgds::W) writer structure"]
    impl crate::Writable for GPIOCLKGDS {}
    #[doc = "GPIO Clock Gate For Deep Sleep Mode"]
    pub mod gpioclkgds {
        #[doc = "Reader of register GPIOCLKGDS"]
        pub type R = crate::R<u32, super::GPIOCLKGDS>;
        #[doc = "Writer for register GPIOCLKGDS"]
        pub type W = crate::W<u32, super::GPIOCLKGDS>;
        #[doc = "Register GPIOCLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPIOCLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "GPT Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gptclkgr](gptclkgr) module"]
    pub type GPTCLKGR = crate::Reg<u32, _GPTCLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPTCLKGR;
    #[doc = "`read()` method returns [gptclkgr::R](gptclkgr::R) reader structure"]
    impl crate::Readable for GPTCLKGR {}
    #[doc = "`write(|w| ..)` method takes [gptclkgr::W](gptclkgr::W) writer structure"]
    impl crate::Writable for GPTCLKGR {}
    #[doc = "GPT Clock Gate For Run Mode"]
    pub mod gptclkgr {
        #[doc = "Reader of register GPTCLKGR"]
        pub type R = crate::R<u32, super::GPTCLKGR>;
        #[doc = "Writer for register GPTCLKGR"]
        pub type W = crate::W<u32, super::GPTCLKGR>;
        #[doc = "Register GPTCLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPTCLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "GPT Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gptclkgs](gptclkgs) module"]
    pub type GPTCLKGS = crate::Reg<u32, _GPTCLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPTCLKGS;
    #[doc = "`read()` method returns [gptclkgs::R](gptclkgs::R) reader structure"]
    impl crate::Readable for GPTCLKGS {}
    #[doc = "`write(|w| ..)` method takes [gptclkgs::W](gptclkgs::W) writer structure"]
    impl crate::Writable for GPTCLKGS {}
    #[doc = "GPT Clock Gate For Sleep Mode"]
    pub mod gptclkgs {
        #[doc = "Reader of register GPTCLKGS"]
        pub type R = crate::R<u32, super::GPTCLKGS>;
        #[doc = "Writer for register GPTCLKGS"]
        pub type W = crate::W<u32, super::GPTCLKGS>;
        #[doc = "Register GPTCLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPTCLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "GPT Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gptclkgds](gptclkgds) module"]
    pub type GPTCLKGDS = crate::Reg<u32, _GPTCLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPTCLKGDS;
    #[doc = "`read()` method returns [gptclkgds::R](gptclkgds::R) reader structure"]
    impl crate::Readable for GPTCLKGDS {}
    #[doc = "`write(|w| ..)` method takes [gptclkgds::W](gptclkgds::W) writer structure"]
    impl crate::Writable for GPTCLKGDS {}
    #[doc = "GPT Clock Gate For Deep Sleep Mode"]
    pub mod gptclkgds {
        #[doc = "Reader of register GPTCLKGDS"]
        pub type R = crate::R<u32, super::GPTCLKGDS>;
        #[doc = "Writer for register GPTCLKGDS"]
        pub type W = crate::W<u32, super::GPTCLKGDS>;
        #[doc = "Register GPTCLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPTCLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "I2C Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cclkgr](i2cclkgr) module"]
    pub type I2CCLKGR = crate::Reg<u32, _I2CCLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2CCLKGR;
    #[doc = "`read()` method returns [i2cclkgr::R](i2cclkgr::R) reader structure"]
    impl crate::Readable for I2CCLKGR {}
    #[doc = "`write(|w| ..)` method takes [i2cclkgr::W](i2cclkgr::W) writer structure"]
    impl crate::Writable for I2CCLKGR {}
    #[doc = "I2C Clock Gate For Run Mode"]
    pub mod i2cclkgr {
        #[doc = "Reader of register I2CCLKGR"]
        pub type R = crate::R<u32, super::I2CCLKGR>;
        #[doc = "Writer for register I2CCLKGR"]
        pub type W = crate::W<u32, super::I2CCLKGR>;
        #[doc = "Register I2CCLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2CCLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "I2C Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cclkgs](i2cclkgs) module"]
    pub type I2CCLKGS = crate::Reg<u32, _I2CCLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2CCLKGS;
    #[doc = "`read()` method returns [i2cclkgs::R](i2cclkgs::R) reader structure"]
    impl crate::Readable for I2CCLKGS {}
    #[doc = "`write(|w| ..)` method takes [i2cclkgs::W](i2cclkgs::W) writer structure"]
    impl crate::Writable for I2CCLKGS {}
    #[doc = "I2C Clock Gate For Sleep Mode"]
    pub mod i2cclkgs {
        #[doc = "Reader of register I2CCLKGS"]
        pub type R = crate::R<u32, super::I2CCLKGS>;
        #[doc = "Writer for register I2CCLKGS"]
        pub type W = crate::W<u32, super::I2CCLKGS>;
        #[doc = "Register I2CCLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2CCLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "I2C Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2cclkgds](i2cclkgds) module"]
    pub type I2CCLKGDS = crate::Reg<u32, _I2CCLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2CCLKGDS;
    #[doc = "`read()` method returns [i2cclkgds::R](i2cclkgds::R) reader structure"]
    impl crate::Readable for I2CCLKGDS {}
    #[doc = "`write(|w| ..)` method takes [i2cclkgds::W](i2cclkgds::W) writer structure"]
    impl crate::Writable for I2CCLKGDS {}
    #[doc = "I2C Clock Gate For Deep Sleep Mode"]
    pub mod i2cclkgds {
        #[doc = "Reader of register I2CCLKGDS"]
        pub type R = crate::R<u32, super::I2CCLKGDS>;
        #[doc = "Writer for register I2CCLKGDS"]
        pub type W = crate::W<u32, super::I2CCLKGDS>;
        #[doc = "Register I2CCLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2CCLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "UART Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uartclkgr](uartclkgr) module"]
    pub type UARTCLKGR = crate::Reg<u32, _UARTCLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UARTCLKGR;
    #[doc = "`read()` method returns [uartclkgr::R](uartclkgr::R) reader structure"]
    impl crate::Readable for UARTCLKGR {}
    #[doc = "`write(|w| ..)` method takes [uartclkgr::W](uartclkgr::W) writer structure"]
    impl crate::Writable for UARTCLKGR {}
    #[doc = "UART Clock Gate For Run Mode"]
    pub mod uartclkgr {
        #[doc = "Reader of register UARTCLKGR"]
        pub type R = crate::R<u32, super::UARTCLKGR>;
        #[doc = "Writer for register UARTCLKGR"]
        pub type W = crate::W<u32, super::UARTCLKGR>;
        #[doc = "Register UARTCLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::UARTCLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "UART Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uartclkgs](uartclkgs) module"]
    pub type UARTCLKGS = crate::Reg<u32, _UARTCLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UARTCLKGS;
    #[doc = "`read()` method returns [uartclkgs::R](uartclkgs::R) reader structure"]
    impl crate::Readable for UARTCLKGS {}
    #[doc = "`write(|w| ..)` method takes [uartclkgs::W](uartclkgs::W) writer structure"]
    impl crate::Writable for UARTCLKGS {}
    #[doc = "UART Clock Gate For Sleep Mode"]
    pub mod uartclkgs {
        #[doc = "Reader of register UARTCLKGS"]
        pub type R = crate::R<u32, super::UARTCLKGS>;
        #[doc = "Writer for register UARTCLKGS"]
        pub type W = crate::W<u32, super::UARTCLKGS>;
        #[doc = "Register UARTCLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::UARTCLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "UART Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uartclkgds](uartclkgds) module"]
    pub type UARTCLKGDS = crate::Reg<u32, _UARTCLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _UARTCLKGDS;
    #[doc = "`read()` method returns [uartclkgds::R](uartclkgds::R) reader structure"]
    impl crate::Readable for UARTCLKGDS {}
    #[doc = "`write(|w| ..)` method takes [uartclkgds::W](uartclkgds::W) writer structure"]
    impl crate::Writable for UARTCLKGDS {}
    #[doc = "UART Clock Gate For Deep Sleep Mode"]
    pub mod uartclkgds {
        #[doc = "Reader of register UARTCLKGDS"]
        pub type R = crate::R<u32, super::UARTCLKGDS>;
        #[doc = "Writer for register UARTCLKGDS"]
        pub type W = crate::W<u32, super::UARTCLKGDS>;
        #[doc = "Register UARTCLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::UARTCLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "SSI Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssiclkgr](ssiclkgr) module"]
    pub type SSICLKGR = crate::Reg<u32, _SSICLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSICLKGR;
    #[doc = "`read()` method returns [ssiclkgr::R](ssiclkgr::R) reader structure"]
    impl crate::Readable for SSICLKGR {}
    #[doc = "`write(|w| ..)` method takes [ssiclkgr::W](ssiclkgr::W) writer structure"]
    impl crate::Writable for SSICLKGR {}
    #[doc = "SSI Clock Gate For Run Mode"]
    pub mod ssiclkgr {
        #[doc = "Reader of register SSICLKGR"]
        pub type R = crate::R<u32, super::SSICLKGR>;
        #[doc = "Writer for register SSICLKGR"]
        pub type W = crate::W<u32, super::SSICLKGR>;
        #[doc = "Register SSICLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SSICLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "SSI Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssiclkgs](ssiclkgs) module"]
    pub type SSICLKGS = crate::Reg<u32, _SSICLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSICLKGS;
    #[doc = "`read()` method returns [ssiclkgs::R](ssiclkgs::R) reader structure"]
    impl crate::Readable for SSICLKGS {}
    #[doc = "`write(|w| ..)` method takes [ssiclkgs::W](ssiclkgs::W) writer structure"]
    impl crate::Writable for SSICLKGS {}
    #[doc = "SSI Clock Gate For Sleep Mode"]
    pub mod ssiclkgs {
        #[doc = "Reader of register SSICLKGS"]
        pub type R = crate::R<u32, super::SSICLKGS>;
        #[doc = "Writer for register SSICLKGS"]
        pub type W = crate::W<u32, super::SSICLKGS>;
        #[doc = "Register SSICLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::SSICLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "SSI Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssiclkgds](ssiclkgds) module"]
    pub type SSICLKGDS = crate::Reg<u32, _SSICLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSICLKGDS;
    #[doc = "`read()` method returns [ssiclkgds::R](ssiclkgds::R) reader structure"]
    impl crate::Readable for SSICLKGDS {}
    #[doc = "`write(|w| ..)` method takes [ssiclkgds::W](ssiclkgds::W) writer structure"]
    impl crate::Writable for SSICLKGDS {}
    #[doc = "SSI Clock Gate For Deep Sleep Mode"]
    pub mod ssiclkgds {
        #[doc = "Reader of register SSICLKGDS"]
        pub type R = crate::R<u32, super::SSICLKGDS>;
        #[doc = "Writer for register SSICLKGDS"]
        pub type W = crate::W<u32, super::SSICLKGDS>;
        #[doc = "Register SSICLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::SSICLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "I2S Clock Gate For Run Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sclkgr](i2sclkgr) module"]
    pub type I2SCLKGR = crate::Reg<u32, _I2SCLKGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCLKGR;
    #[doc = "`read()` method returns [i2sclkgr::R](i2sclkgr::R) reader structure"]
    impl crate::Readable for I2SCLKGR {}
    #[doc = "`write(|w| ..)` method takes [i2sclkgr::W](i2sclkgr::W) writer structure"]
    impl crate::Writable for I2SCLKGR {}
    #[doc = "I2S Clock Gate For Run Mode"]
    pub mod i2sclkgr {
        #[doc = "Reader of register I2SCLKGR"]
        pub type R = crate::R<u32, super::I2SCLKGR>;
        #[doc = "Writer for register I2SCLKGR"]
        pub type W = crate::W<u32, super::I2SCLKGR>;
        #[doc = "Register I2SCLKGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCLKGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "I2S Clock Gate For Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sclkgs](i2sclkgs) module"]
    pub type I2SCLKGS = crate::Reg<u32, _I2SCLKGS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCLKGS;
    #[doc = "`read()` method returns [i2sclkgs::R](i2sclkgs::R) reader structure"]
    impl crate::Readable for I2SCLKGS {}
    #[doc = "`write(|w| ..)` method takes [i2sclkgs::W](i2sclkgs::W) writer structure"]
    impl crate::Writable for I2SCLKGS {}
    #[doc = "I2S Clock Gate For Sleep Mode"]
    pub mod i2sclkgs {
        #[doc = "Reader of register I2SCLKGS"]
        pub type R = crate::R<u32, super::I2SCLKGS>;
        #[doc = "Writer for register I2SCLKGS"]
        pub type W = crate::W<u32, super::I2SCLKGS>;
        #[doc = "Register I2SCLKGS `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCLKGS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "I2S Clock Gate For Deep Sleep Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sclkgds](i2sclkgds) module"]
    pub type I2SCLKGDS = crate::Reg<u32, _I2SCLKGDS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCLKGDS;
    #[doc = "`read()` method returns [i2sclkgds::R](i2sclkgds::R) reader structure"]
    impl crate::Readable for I2SCLKGDS {}
    #[doc = "`write(|w| ..)` method takes [i2sclkgds::W](i2sclkgds::W) writer structure"]
    impl crate::Writable for I2SCLKGDS {}
    #[doc = "I2S Clock Gate For Deep Sleep Mode"]
    pub mod i2sclkgds {
        #[doc = "Reader of register I2SCLKGDS"]
        pub type R = crate::R<u32, super::I2SCLKGDS>;
        #[doc = "Writer for register I2SCLKGDS"]
        pub type W = crate::W<u32, super::I2SCLKGDS>;
        #[doc = "Register I2SCLKGDS `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCLKGDS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CLK_EN`"]
        pub type CLK_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLK_EN`"]
        pub struct CLK_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLK_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&self) -> CLK_EN_R {
                CLK_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CLK_EN"]
            #[inline(always)]
            pub fn clk_en(&mut self) -> CLK_EN_W {
                CLK_EN_W { w: self }
            }
        }
    }
    #[doc = "Internal. Only to be used through TI provided API.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpuclkdiv](cpuclkdiv) module"]
    pub type CPUCLKDIV = crate::Reg<u32, _CPUCLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPUCLKDIV;
    #[doc = "`read()` method returns [cpuclkdiv::R](cpuclkdiv::R) reader structure"]
    impl crate::Readable for CPUCLKDIV {}
    #[doc = "`write(|w| ..)` method takes [cpuclkdiv::W](cpuclkdiv::W) writer structure"]
    impl crate::Writable for CPUCLKDIV {}
    #[doc = "Internal. Only to be used through TI provided API."]
    pub mod cpuclkdiv {
        #[doc = "Reader of register CPUCLKDIV"]
        pub type R = crate::R<u32, super::CPUCLKDIV>;
        #[doc = "Writer for register CPUCLKDIV"]
        pub type W = crate::W<u32, super::CPUCLKDIV>;
        #[doc = "Register CPUCLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPUCLKDIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATIO`"]
        pub type RATIO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATIO`"]
        pub struct RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATIO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RATIO"]
            #[inline(always)]
            pub fn ratio(&self) -> RATIO_R {
                RATIO_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RATIO"]
            #[inline(always)]
            pub fn ratio(&mut self) -> RATIO_W {
                RATIO_W { w: self }
            }
        }
    }
    #[doc = "I2S Clock Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sbclksel](i2sbclksel) module"]
    pub type I2SBCLKSEL = crate::Reg<u32, _I2SBCLKSEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SBCLKSEL;
    #[doc = "`read()` method returns [i2sbclksel::R](i2sbclksel::R) reader structure"]
    impl crate::Readable for I2SBCLKSEL {}
    #[doc = "`write(|w| ..)` method takes [i2sbclksel::W](i2sbclksel::W) writer structure"]
    impl crate::Writable for I2SBCLKSEL {}
    #[doc = "I2S Clock Control"]
    pub mod i2sbclksel {
        #[doc = "Reader of register I2SBCLKSEL"]
        pub type R = crate::R<u32, super::I2SBCLKSEL>;
        #[doc = "Writer for register I2SBCLKSEL"]
        pub type W = crate::W<u32, super::I2SBCLKSEL>;
        #[doc = "Register I2SBCLKSEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SBCLKSEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SRC`"]
        pub type SRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SRC`"]
        pub struct SRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SRC"]
            #[inline(always)]
            pub fn src(&self) -> SRC_R {
                SRC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SRC"]
            #[inline(always)]
            pub fn src(&mut self) -> SRC_W {
                SRC_W { w: self }
            }
        }
    }
    #[doc = "GPT Scalar\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gptclkdiv](gptclkdiv) module"]
    pub type GPTCLKDIV = crate::Reg<u32, _GPTCLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GPTCLKDIV;
    #[doc = "`read()` method returns [gptclkdiv::R](gptclkdiv::R) reader structure"]
    impl crate::Readable for GPTCLKDIV {}
    #[doc = "`write(|w| ..)` method takes [gptclkdiv::W](gptclkdiv::W) writer structure"]
    impl crate::Writable for GPTCLKDIV {}
    #[doc = "GPT Scalar"]
    pub mod gptclkdiv {
        #[doc = "Reader of register GPTCLKDIV"]
        pub type R = crate::R<u32, super::GPTCLKDIV>;
        #[doc = "Writer for register GPTCLKDIV"]
        pub type W = crate::W<u32, super::GPTCLKDIV>;
        #[doc = "Register GPTCLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::GPTCLKDIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATIO`"]
        pub type RATIO_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RATIO`"]
        pub struct RATIO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATIO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - RATIO"]
            #[inline(always)]
            pub fn ratio(&self) -> RATIO_R {
                RATIO_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - RATIO"]
            #[inline(always)]
            pub fn ratio(&mut self) -> RATIO_W {
                RATIO_W { w: self }
            }
        }
    }
    #[doc = "I2S Clock Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sclkctl](i2sclkctl) module"]
    pub type I2SCLKCTL = crate::Reg<u32, _I2SCLKCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCLKCTL;
    #[doc = "`read()` method returns [i2sclkctl::R](i2sclkctl::R) reader structure"]
    impl crate::Readable for I2SCLKCTL {}
    #[doc = "`write(|w| ..)` method takes [i2sclkctl::W](i2sclkctl::W) writer structure"]
    impl crate::Writable for I2SCLKCTL {}
    #[doc = "I2S Clock Control"]
    pub mod i2sclkctl {
        #[doc = "Reader of register I2SCLKCTL"]
        pub type R = crate::R<u32, super::I2SCLKCTL>;
        #[doc = "Writer for register I2SCLKCTL"]
        pub type W = crate::W<u32, super::I2SCLKCTL>;
        #[doc = "Register I2SCLKCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCLKCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMPL_ON_POSEDGE`"]
        pub type SMPL_ON_POSEDGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMPL_ON_POSEDGE`"]
        pub struct SMPL_ON_POSEDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPL_ON_POSEDGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `WCLK_PHASE`"]
        pub type WCLK_PHASE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WCLK_PHASE`"]
        pub struct WCLK_PHASE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WCLK_PHASE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | (((value as u32) & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EN`"]
        pub type EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EN`"]
        pub struct EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - SMPL_ON_POSEDGE"]
            #[inline(always)]
            pub fn smpl_on_posedge(&self) -> SMPL_ON_POSEDGE_R {
                SMPL_ON_POSEDGE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - WCLK_PHASE"]
            #[inline(always)]
            pub fn wclk_phase(&self) -> WCLK_PHASE_R {
                WCLK_PHASE_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&self) -> EN_R {
                EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - SMPL_ON_POSEDGE"]
            #[inline(always)]
            pub fn smpl_on_posedge(&mut self) -> SMPL_ON_POSEDGE_W {
                SMPL_ON_POSEDGE_W { w: self }
            }
            #[doc = "Bits 1:2 - WCLK_PHASE"]
            #[inline(always)]
            pub fn wclk_phase(&mut self) -> WCLK_PHASE_W {
                WCLK_PHASE_W { w: self }
            }
            #[doc = "Bit 0 - EN"]
            #[inline(always)]
            pub fn en(&mut self) -> EN_W {
                EN_W { w: self }
            }
        }
    }
    #[doc = "MCLK Division Ratio\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2smclkdiv](i2smclkdiv) module"]
    pub type I2SMCLKDIV = crate::Reg<u32, _I2SMCLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SMCLKDIV;
    #[doc = "`read()` method returns [i2smclkdiv::R](i2smclkdiv::R) reader structure"]
    impl crate::Readable for I2SMCLKDIV {}
    #[doc = "`write(|w| ..)` method takes [i2smclkdiv::W](i2smclkdiv::W) writer structure"]
    impl crate::Writable for I2SMCLKDIV {}
    #[doc = "MCLK Division Ratio"]
    pub mod i2smclkdiv {
        #[doc = "Reader of register I2SMCLKDIV"]
        pub type R = crate::R<u32, super::I2SMCLKDIV>;
        #[doc = "Writer for register I2SMCLKDIV"]
        pub type W = crate::W<u32, super::I2SMCLKDIV>;
        #[doc = "Register I2SMCLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SMCLKDIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MDIV`"]
        pub type MDIV_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MDIV`"]
        pub struct MDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:9 - MDIV"]
            #[inline(always)]
            pub fn mdiv(&self) -> MDIV_R {
                MDIV_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:9 - MDIV"]
            #[inline(always)]
            pub fn mdiv(&mut self) -> MDIV_W {
                MDIV_W { w: self }
            }
        }
    }
    #[doc = "BCLK Division Ratio\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2sbclkdiv](i2sbclkdiv) module"]
    pub type I2SBCLKDIV = crate::Reg<u32, _I2SBCLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SBCLKDIV;
    #[doc = "`read()` method returns [i2sbclkdiv::R](i2sbclkdiv::R) reader structure"]
    impl crate::Readable for I2SBCLKDIV {}
    #[doc = "`write(|w| ..)` method takes [i2sbclkdiv::W](i2sbclkdiv::W) writer structure"]
    impl crate::Writable for I2SBCLKDIV {}
    #[doc = "BCLK Division Ratio"]
    pub mod i2sbclkdiv {
        #[doc = "Reader of register I2SBCLKDIV"]
        pub type R = crate::R<u32, super::I2SBCLKDIV>;
        #[doc = "Writer for register I2SBCLKDIV"]
        pub type W = crate::W<u32, super::I2SBCLKDIV>;
        #[doc = "Register I2SBCLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SBCLKDIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BDIV`"]
        pub type BDIV_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `BDIV`"]
        pub struct BDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:9 - BDIV"]
            #[inline(always)]
            pub fn bdiv(&self) -> BDIV_R {
                BDIV_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:9 - BDIV"]
            #[inline(always)]
            pub fn bdiv(&mut self) -> BDIV_W {
                BDIV_W { w: self }
            }
        }
    }
    #[doc = "WCLK Division Ratio\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2swclkdiv](i2swclkdiv) module"]
    pub type I2SWCLKDIV = crate::Reg<u32, _I2SWCLKDIV>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SWCLKDIV;
    #[doc = "`read()` method returns [i2swclkdiv::R](i2swclkdiv::R) reader structure"]
    impl crate::Readable for I2SWCLKDIV {}
    #[doc = "`write(|w| ..)` method takes [i2swclkdiv::W](i2swclkdiv::W) writer structure"]
    impl crate::Writable for I2SWCLKDIV {}
    #[doc = "WCLK Division Ratio"]
    pub mod i2swclkdiv {
        #[doc = "Reader of register I2SWCLKDIV"]
        pub type R = crate::R<u32, super::I2SWCLKDIV>;
        #[doc = "Writer for register I2SWCLKDIV"]
        pub type W = crate::W<u32, super::I2SWCLKDIV>;
        #[doc = "Register I2SWCLKDIV `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SWCLKDIV {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WDIV`"]
        pub type WDIV_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `WDIV`"]
        pub struct WDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - WDIV"]
            #[inline(always)]
            pub fn wdiv(&self) -> WDIV_R {
                WDIV_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - WDIV"]
            #[inline(always)]
            pub fn wdiv(&mut self) -> WDIV_W {
                WDIV_W { w: self }
            }
        }
    }
    #[doc = "SW Initiated Resets\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swreset](swreset) module"]
    pub type SWRESET = crate::Reg<u32, _SWRESET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWRESET;
    #[doc = "`read()` method returns [swreset::R](swreset::R) reader structure"]
    impl crate::Readable for SWRESET {}
    #[doc = "`write(|w| ..)` method takes [swreset::W](swreset::W) writer structure"]
    impl crate::Writable for SWRESET {}
    #[doc = "SW Initiated Resets"]
    pub mod swreset {
        #[doc = "Reader of register SWRESET"]
        pub type R = crate::R<u32, super::SWRESET>;
        #[doc = "Writer for register SWRESET"]
        pub type W = crate::W<u32, super::SWRESET>;
        #[doc = "Register SWRESET `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWRESET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MCU`"]
        pub type MCU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCU`"]
        pub struct MCU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - MCU"]
            #[inline(always)]
            pub fn mcu(&self) -> MCU_R {
                MCU_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - MCU"]
            #[inline(always)]
            pub fn mcu(&mut self) -> MCU_W {
                MCU_W { w: self }
            }
        }
    }
    #[doc = "WARM Reset Control And Status\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [warmreset](warmreset) module"]
    pub type WARMRESET = crate::Reg<u32, _WARMRESET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WARMRESET;
    #[doc = "`read()` method returns [warmreset::R](warmreset::R) reader structure"]
    impl crate::Readable for WARMRESET {}
    #[doc = "`write(|w| ..)` method takes [warmreset::W](warmreset::W) writer structure"]
    impl crate::Writable for WARMRESET {}
    #[doc = "WARM Reset Control And Status"]
    pub mod warmreset {
        #[doc = "Reader of register WARMRESET"]
        pub type R = crate::R<u32, super::WARMRESET>;
        #[doc = "Writer for register WARMRESET"]
        pub type W = crate::W<u32, super::WARMRESET>;
        #[doc = "Register WARMRESET `reset()`'s with value 0"]
        impl crate::ResetValue for super::WARMRESET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WR_TO_PINRESET`"]
        pub type WR_TO_PINRESET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WR_TO_PINRESET`"]
        pub struct WR_TO_PINRESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WR_TO_PINRESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LOCKUP_STAT`"]
        pub type LOCKUP_STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LOCKUP_STAT`"]
        pub struct LOCKUP_STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCKUP_STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `WDT_STAT`"]
        pub type WDT_STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDT_STAT`"]
        pub struct WDT_STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDT_STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - WR_TO_PINRESET"]
            #[inline(always)]
            pub fn wr_to_pinreset(&self) -> WR_TO_PINRESET_R {
                WR_TO_PINRESET_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - LOCKUP_STAT"]
            #[inline(always)]
            pub fn lockup_stat(&self) -> LOCKUP_STAT_R {
                LOCKUP_STAT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - WDT_STAT"]
            #[inline(always)]
            pub fn wdt_stat(&self) -> WDT_STAT_R {
                WDT_STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - WR_TO_PINRESET"]
            #[inline(always)]
            pub fn wr_to_pinreset(&mut self) -> WR_TO_PINRESET_W {
                WR_TO_PINRESET_W { w: self }
            }
            #[doc = "Bit 1 - LOCKUP_STAT"]
            #[inline(always)]
            pub fn lockup_stat(&mut self) -> LOCKUP_STAT_W {
                LOCKUP_STAT_W { w: self }
            }
            #[doc = "Bit 0 - WDT_STAT"]
            #[inline(always)]
            pub fn wdt_stat(&mut self) -> WDT_STAT_W {
                WDT_STAT_W { w: self }
            }
        }
    }
    #[doc = "Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl0](pdctl0) module"]
    pub type PDCTL0 = crate::Reg<u32, _PDCTL0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL0;
    #[doc = "`read()` method returns [pdctl0::R](pdctl0::R) reader structure"]
    impl crate::Readable for PDCTL0 {}
    #[doc = "`write(|w| ..)` method takes [pdctl0::W](pdctl0::W) writer structure"]
    impl crate::Writable for PDCTL0 {}
    #[doc = "Power Domain Control"]
    pub mod pdctl0 {
        #[doc = "Reader of register PDCTL0"]
        pub type R = crate::R<u32, super::PDCTL0>;
        #[doc = "Writer for register PDCTL0"]
        pub type W = crate::W<u32, super::PDCTL0>;
        #[doc = "Register PDCTL0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCTL0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PERIPH_ON`"]
        pub type PERIPH_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PERIPH_ON`"]
        pub struct PERIPH_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PERIPH_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SERIAL_ON`"]
        pub type SERIAL_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SERIAL_ON`"]
        pub struct SERIAL_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SERIAL_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RFC_ON`"]
        pub type RFC_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFC_ON`"]
        pub struct RFC_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFC_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - PERIPH_ON"]
            #[inline(always)]
            pub fn periph_on(&self) -> PERIPH_ON_R {
                PERIPH_ON_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SERIAL_ON"]
            #[inline(always)]
            pub fn serial_on(&self) -> SERIAL_ON_R {
                SERIAL_ON_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RFC_ON"]
            #[inline(always)]
            pub fn rfc_on(&self) -> RFC_ON_R {
                RFC_ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - PERIPH_ON"]
            #[inline(always)]
            pub fn periph_on(&mut self) -> PERIPH_ON_W {
                PERIPH_ON_W { w: self }
            }
            #[doc = "Bit 1 - SERIAL_ON"]
            #[inline(always)]
            pub fn serial_on(&mut self) -> SERIAL_ON_W {
                SERIAL_ON_W { w: self }
            }
            #[doc = "Bit 0 - RFC_ON"]
            #[inline(always)]
            pub fn rfc_on(&mut self) -> RFC_ON_W {
                RFC_ON_W { w: self }
            }
        }
    }
    #[doc = "RFC Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl0rfc](pdctl0rfc) module"]
    pub type PDCTL0RFC = crate::Reg<u32, _PDCTL0RFC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL0RFC;
    #[doc = "`read()` method returns [pdctl0rfc::R](pdctl0rfc::R) reader structure"]
    impl crate::Readable for PDCTL0RFC {}
    #[doc = "`write(|w| ..)` method takes [pdctl0rfc::W](pdctl0rfc::W) writer structure"]
    impl crate::Writable for PDCTL0RFC {}
    #[doc = "RFC Power Domain Control"]
    pub mod pdctl0rfc {
        #[doc = "Reader of register PDCTL0RFC"]
        pub type R = crate::R<u32, super::PDCTL0RFC>;
        #[doc = "Writer for register PDCTL0RFC"]
        pub type W = crate::W<u32, super::PDCTL0RFC>;
        #[doc = "Register PDCTL0RFC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCTL0RFC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ON`"]
        pub struct ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&mut self) -> ON_W {
                ON_W { w: self }
            }
        }
    }
    #[doc = "SERIAL Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl0serial](pdctl0serial) module"]
    pub type PDCTL0SERIAL = crate::Reg<u32, _PDCTL0SERIAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL0SERIAL;
    #[doc = "`read()` method returns [pdctl0serial::R](pdctl0serial::R) reader structure"]
    impl crate::Readable for PDCTL0SERIAL {}
    #[doc = "`write(|w| ..)` method takes [pdctl0serial::W](pdctl0serial::W) writer structure"]
    impl crate::Writable for PDCTL0SERIAL {}
    #[doc = "SERIAL Power Domain Control"]
    pub mod pdctl0serial {
        #[doc = "Reader of register PDCTL0SERIAL"]
        pub type R = crate::R<u32, super::PDCTL0SERIAL>;
        #[doc = "Writer for register PDCTL0SERIAL"]
        pub type W = crate::W<u32, super::PDCTL0SERIAL>;
        #[doc = "Register PDCTL0SERIAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCTL0SERIAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ON`"]
        pub struct ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&mut self) -> ON_W {
                ON_W { w: self }
            }
        }
    }
    #[doc = "PERIPH Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl0periph](pdctl0periph) module"]
    pub type PDCTL0PERIPH = crate::Reg<u32, _PDCTL0PERIPH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL0PERIPH;
    #[doc = "`read()` method returns [pdctl0periph::R](pdctl0periph::R) reader structure"]
    impl crate::Readable for PDCTL0PERIPH {}
    #[doc = "`write(|w| ..)` method takes [pdctl0periph::W](pdctl0periph::W) writer structure"]
    impl crate::Writable for PDCTL0PERIPH {}
    #[doc = "PERIPH Power Domain Control"]
    pub mod pdctl0periph {
        #[doc = "Reader of register PDCTL0PERIPH"]
        pub type R = crate::R<u32, super::PDCTL0PERIPH>;
        #[doc = "Writer for register PDCTL0PERIPH"]
        pub type W = crate::W<u32, super::PDCTL0PERIPH>;
        #[doc = "Register PDCTL0PERIPH `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCTL0PERIPH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ON`"]
        pub struct ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&mut self) -> ON_W {
                ON_W { w: self }
            }
        }
    }
    #[doc = "Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat0](pdstat0) module"]
    pub type PDSTAT0 = crate::Reg<u32, _PDSTAT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT0;
    #[doc = "`read()` method returns [pdstat0::R](pdstat0::R) reader structure"]
    impl crate::Readable for PDSTAT0 {}
    #[doc = "Power Domain Status"]
    pub mod pdstat0 {
        #[doc = "Reader of register PDSTAT0"]
        pub type R = crate::R<u32, super::PDSTAT0>;
        #[doc = "Reader of field `PERIPH_ON`"]
        pub type PERIPH_ON_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SERIAL_ON`"]
        pub type SERIAL_ON_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RFC_ON`"]
        pub type RFC_ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - PERIPH_ON"]
            #[inline(always)]
            pub fn periph_on(&self) -> PERIPH_ON_R {
                PERIPH_ON_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SERIAL_ON"]
            #[inline(always)]
            pub fn serial_on(&self) -> SERIAL_ON_R {
                SERIAL_ON_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RFC_ON"]
            #[inline(always)]
            pub fn rfc_on(&self) -> RFC_ON_R {
                RFC_ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "RFC Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat0rfc](pdstat0rfc) module"]
    pub type PDSTAT0RFC = crate::Reg<u32, _PDSTAT0RFC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT0RFC;
    #[doc = "`read()` method returns [pdstat0rfc::R](pdstat0rfc::R) reader structure"]
    impl crate::Readable for PDSTAT0RFC {}
    #[doc = "RFC Power Domain Status"]
    pub mod pdstat0rfc {
        #[doc = "Reader of register PDSTAT0RFC"]
        pub type R = crate::R<u32, super::PDSTAT0RFC>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "SERIAL Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat0serial](pdstat0serial) module"]
    pub type PDSTAT0SERIAL = crate::Reg<u32, _PDSTAT0SERIAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT0SERIAL;
    #[doc = "`read()` method returns [pdstat0serial::R](pdstat0serial::R) reader structure"]
    impl crate::Readable for PDSTAT0SERIAL {}
    #[doc = "SERIAL Power Domain Status"]
    pub mod pdstat0serial {
        #[doc = "Reader of register PDSTAT0SERIAL"]
        pub type R = crate::R<u32, super::PDSTAT0SERIAL>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "PERIPH Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat0periph](pdstat0periph) module"]
    pub type PDSTAT0PERIPH = crate::Reg<u32, _PDSTAT0PERIPH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT0PERIPH;
    #[doc = "`read()` method returns [pdstat0periph::R](pdstat0periph::R) reader structure"]
    impl crate::Readable for PDSTAT0PERIPH {}
    #[doc = "PERIPH Power Domain Status"]
    pub mod pdstat0periph {
        #[doc = "Reader of register PDSTAT0PERIPH"]
        pub type R = crate::R<u32, super::PDSTAT0PERIPH>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl1](pdctl1) module"]
    pub type PDCTL1 = crate::Reg<u32, _PDCTL1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL1;
    #[doc = "`read()` method returns [pdctl1::R](pdctl1::R) reader structure"]
    impl crate::Readable for PDCTL1 {}
    #[doc = "`write(|w| ..)` method takes [pdctl1::W](pdctl1::W) writer structure"]
    impl crate::Writable for PDCTL1 {}
    #[doc = "Power Domain Control"]
    pub mod pdctl1 {
        #[doc = "Reader of register PDCTL1"]
        pub type R = crate::R<u32, super::PDCTL1>;
        #[doc = "Writer for register PDCTL1"]
        pub type W = crate::W<u32, super::PDCTL1>;
        #[doc = "Register PDCTL1 `reset()`'s with value 0x0a"]
        impl crate::ResetValue for super::PDCTL1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0a
            }
        }
        #[doc = "Reader of field `VIMS_MODE`"]
        pub type VIMS_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VIMS_MODE`"]
        pub struct VIMS_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VIMS_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RFC_ON`"]
        pub type RFC_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFC_ON`"]
        pub struct RFC_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFC_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CPU_ON`"]
        pub type CPU_ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPU_ON`"]
        pub struct CPU_ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPU_ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - VIMS_MODE"]
            #[inline(always)]
            pub fn vims_mode(&self) -> VIMS_MODE_R {
                VIMS_MODE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RFC_ON"]
            #[inline(always)]
            pub fn rfc_on(&self) -> RFC_ON_R {
                RFC_ON_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CPU_ON"]
            #[inline(always)]
            pub fn cpu_on(&self) -> CPU_ON_R {
                CPU_ON_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - VIMS_MODE"]
            #[inline(always)]
            pub fn vims_mode(&mut self) -> VIMS_MODE_W {
                VIMS_MODE_W { w: self }
            }
            #[doc = "Bit 2 - RFC_ON"]
            #[inline(always)]
            pub fn rfc_on(&mut self) -> RFC_ON_W {
                RFC_ON_W { w: self }
            }
            #[doc = "Bit 1 - CPU_ON"]
            #[inline(always)]
            pub fn cpu_on(&mut self) -> CPU_ON_W {
                CPU_ON_W { w: self }
            }
        }
    }
    #[doc = "CPU Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl1cpu](pdctl1cpu) module"]
    pub type PDCTL1CPU = crate::Reg<u32, _PDCTL1CPU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL1CPU;
    #[doc = "`read()` method returns [pdctl1cpu::R](pdctl1cpu::R) reader structure"]
    impl crate::Readable for PDCTL1CPU {}
    #[doc = "`write(|w| ..)` method takes [pdctl1cpu::W](pdctl1cpu::W) writer structure"]
    impl crate::Writable for PDCTL1CPU {}
    #[doc = "CPU Power Domain Control"]
    pub mod pdctl1cpu {
        #[doc = "Reader of register PDCTL1CPU"]
        pub type R = crate::R<u32, super::PDCTL1CPU>;
        #[doc = "Writer for register PDCTL1CPU"]
        pub type W = crate::W<u32, super::PDCTL1CPU>;
        #[doc = "Register PDCTL1CPU `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::PDCTL1CPU {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ON`"]
        pub struct ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&mut self) -> ON_W {
                ON_W { w: self }
            }
        }
    }
    #[doc = "RFC Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl1rfc](pdctl1rfc) module"]
    pub type PDCTL1RFC = crate::Reg<u32, _PDCTL1RFC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL1RFC;
    #[doc = "`read()` method returns [pdctl1rfc::R](pdctl1rfc::R) reader structure"]
    impl crate::Readable for PDCTL1RFC {}
    #[doc = "`write(|w| ..)` method takes [pdctl1rfc::W](pdctl1rfc::W) writer structure"]
    impl crate::Writable for PDCTL1RFC {}
    #[doc = "RFC Power Domain Control"]
    pub mod pdctl1rfc {
        #[doc = "Reader of register PDCTL1RFC"]
        pub type R = crate::R<u32, super::PDCTL1RFC>;
        #[doc = "Writer for register PDCTL1RFC"]
        pub type W = crate::W<u32, super::PDCTL1RFC>;
        #[doc = "Register PDCTL1RFC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCTL1RFC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ON`"]
        pub struct ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&mut self) -> ON_W {
                ON_W { w: self }
            }
        }
    }
    #[doc = "VIMS Power Domain Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdctl1vims](pdctl1vims) module"]
    pub type PDCTL1VIMS = crate::Reg<u32, _PDCTL1VIMS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCTL1VIMS;
    #[doc = "`read()` method returns [pdctl1vims::R](pdctl1vims::R) reader structure"]
    impl crate::Readable for PDCTL1VIMS {}
    #[doc = "`write(|w| ..)` method takes [pdctl1vims::W](pdctl1vims::W) writer structure"]
    impl crate::Writable for PDCTL1VIMS {}
    #[doc = "VIMS Power Domain Control"]
    pub mod pdctl1vims {
        #[doc = "Reader of register PDCTL1VIMS"]
        pub type R = crate::R<u32, super::PDCTL1VIMS>;
        #[doc = "Writer for register PDCTL1VIMS"]
        pub type W = crate::W<u32, super::PDCTL1VIMS>;
        #[doc = "Register PDCTL1VIMS `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::PDCTL1VIMS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ON`"]
        pub struct ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&mut self) -> ON_W {
                ON_W { w: self }
            }
        }
    }
    #[doc = "Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat1](pdstat1) module"]
    pub type PDSTAT1 = crate::Reg<u32, _PDSTAT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT1;
    #[doc = "`read()` method returns [pdstat1::R](pdstat1::R) reader structure"]
    impl crate::Readable for PDSTAT1 {}
    #[doc = "Power Domain Status"]
    pub mod pdstat1 {
        #[doc = "Reader of register PDSTAT1"]
        pub type R = crate::R<u32, super::PDSTAT1>;
        #[doc = "Reader of field `BUS_ON`"]
        pub type BUS_ON_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VIMS_MODE`"]
        pub type VIMS_MODE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RFC_ON`"]
        pub type RFC_ON_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CPU_ON`"]
        pub type CPU_ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 4 - BUS_ON"]
            #[inline(always)]
            pub fn bus_on(&self) -> BUS_ON_R {
                BUS_ON_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - VIMS_MODE"]
            #[inline(always)]
            pub fn vims_mode(&self) -> VIMS_MODE_R {
                VIMS_MODE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RFC_ON"]
            #[inline(always)]
            pub fn rfc_on(&self) -> RFC_ON_R {
                RFC_ON_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CPU_ON"]
            #[inline(always)]
            pub fn cpu_on(&self) -> CPU_ON_R {
                CPU_ON_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "BUS Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat1bus](pdstat1bus) module"]
    pub type PDSTAT1BUS = crate::Reg<u32, _PDSTAT1BUS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT1BUS;
    #[doc = "`read()` method returns [pdstat1bus::R](pdstat1bus::R) reader structure"]
    impl crate::Readable for PDSTAT1BUS {}
    #[doc = "BUS Power Domain Status"]
    pub mod pdstat1bus {
        #[doc = "Reader of register PDSTAT1BUS"]
        pub type R = crate::R<u32, super::PDSTAT1BUS>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "RFC Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat1rfc](pdstat1rfc) module"]
    pub type PDSTAT1RFC = crate::Reg<u32, _PDSTAT1RFC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT1RFC;
    #[doc = "`read()` method returns [pdstat1rfc::R](pdstat1rfc::R) reader structure"]
    impl crate::Readable for PDSTAT1RFC {}
    #[doc = "RFC Power Domain Status"]
    pub mod pdstat1rfc {
        #[doc = "Reader of register PDSTAT1RFC"]
        pub type R = crate::R<u32, super::PDSTAT1RFC>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "CPU Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat1cpu](pdstat1cpu) module"]
    pub type PDSTAT1CPU = crate::Reg<u32, _PDSTAT1CPU>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT1CPU;
    #[doc = "`read()` method returns [pdstat1cpu::R](pdstat1cpu::R) reader structure"]
    impl crate::Readable for PDSTAT1CPU {}
    #[doc = "CPU Power Domain Status"]
    pub mod pdstat1cpu {
        #[doc = "Reader of register PDSTAT1CPU"]
        pub type R = crate::R<u32, super::PDSTAT1CPU>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "VIMS Power Domain Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdstat1vims](pdstat1vims) module"]
    pub type PDSTAT1VIMS = crate::Reg<u32, _PDSTAT1VIMS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDSTAT1VIMS;
    #[doc = "`read()` method returns [pdstat1vims::R](pdstat1vims::R) reader structure"]
    impl crate::Readable for PDSTAT1VIMS {}
    #[doc = "VIMS Power Domain Status"]
    pub mod pdstat1vims {
        #[doc = "Reader of register PDSTAT1VIMS"]
        pub type R = crate::R<u32, super::PDSTAT1VIMS>;
        #[doc = "Reader of field `ON`"]
        pub type ON_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ON"]
            #[inline(always)]
            pub fn on(&self) -> ON_R {
                ON_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Selected RFC Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcmodesel](rfcmodesel) module"]
    pub type RFCMODESEL = crate::Reg<u32, _RFCMODESEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCMODESEL;
    #[doc = "`read()` method returns [rfcmodesel::R](rfcmodesel::R) reader structure"]
    impl crate::Readable for RFCMODESEL {}
    #[doc = "`write(|w| ..)` method takes [rfcmodesel::W](rfcmodesel::W) writer structure"]
    impl crate::Writable for RFCMODESEL {}
    #[doc = "Selected RFC Mode"]
    pub mod rfcmodesel {
        #[doc = "Reader of register RFCMODESEL"]
        pub type R = crate::R<u32, super::RFCMODESEL>;
        #[doc = "Writer for register RFCMODESEL"]
        pub type W = crate::W<u32, super::RFCMODESEL>;
        #[doc = "Register RFCMODESEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RFCMODESEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CURR`"]
        pub type CURR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CURR`"]
        pub struct CURR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CURR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - CURR"]
            #[inline(always)]
            pub fn curr(&self) -> CURR_R {
                CURR_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - CURR"]
            #[inline(always)]
            pub fn curr(&mut self) -> CURR_W {
                CURR_W { w: self }
            }
        }
    }
    #[doc = "Memory Retention Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ramreten](ramreten) module"]
    pub type RAMRETEN = crate::Reg<u32, _RAMRETEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RAMRETEN;
    #[doc = "`read()` method returns [ramreten::R](ramreten::R) reader structure"]
    impl crate::Readable for RAMRETEN {}
    #[doc = "`write(|w| ..)` method takes [ramreten::W](ramreten::W) writer structure"]
    impl crate::Writable for RAMRETEN {}
    #[doc = "Memory Retention Control"]
    pub mod ramreten {
        #[doc = "Reader of register RAMRETEN"]
        pub type R = crate::R<u32, super::RAMRETEN>;
        #[doc = "Writer for register RAMRETEN"]
        pub type W = crate::W<u32, super::RAMRETEN>;
        #[doc = "Register RAMRETEN `reset()`'s with value 0x03"]
        impl crate::ResetValue for super::RAMRETEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x03
            }
        }
        #[doc = "Reader of field `RFC`"]
        pub type RFC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFC`"]
        pub struct RFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `VIMS`"]
        pub type VIMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VIMS`"]
        pub struct VIMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VIMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - RFC"]
            #[inline(always)]
            pub fn rfc(&self) -> RFC_R {
                RFC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - VIMS"]
            #[inline(always)]
            pub fn vims(&self) -> VIMS_R {
                VIMS_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 2 - RFC"]
            #[inline(always)]
            pub fn rfc(&mut self) -> RFC_W {
                RFC_W { w: self }
            }
            #[doc = "Bits 0:1 - VIMS"]
            #[inline(always)]
            pub fn vims(&mut self) -> VIMS_W {
                VIMS_W { w: self }
            }
        }
    }
}
#[doc = "RF Core Doorbell"]
pub struct RFC_DBELL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RFC_DBELL {}
impl RFC_DBELL {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rfc_dbell::RegisterBlock {
        0x4004_1000 as *const _
    }
}
impl Deref for RFC_DBELL {
    type Target = rfc_dbell::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RFC_DBELL::ptr() }
    }
}
#[doc = "RF Core Doorbell"]
pub mod rfc_dbell {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Doorbell Command Register"]
        pub cmdr: CMDR,
        #[doc = "0x04 - Doorbell Command Status Register"]
        pub cmdsta: CMDSTA,
        #[doc = "0x08 - Interrupt Flags From RF Hardware Modules"]
        pub rfhwifg: RFHWIFG,
        #[doc = "0x0c - Interrupt Enable For RF Hardware Modules"]
        pub rfhwien: RFHWIEN,
        #[doc = "0x10 - Interrupt Flags For Command and Packet Engine Generated Interrupts"]
        pub rfcpeifg: RFCPEIFG,
        #[doc = "0x14 - Interrupt Enable For Command and Packet Engine Generated Interrupts"]
        pub rfcpeien: RFCPEIEN,
        #[doc = "0x18 - Interrupt Vector Selection For Command and Packet Engine Generated Interrupts"]
        pub rfcpeisl: RFCPEISL,
        #[doc = "0x1c - Doorbell Command Acknowledgement Interrupt Flag"]
        pub rfackifg: RFACKIFG,
        #[doc = "0x20 - RF Core General Purpose Output Control"]
        pub sysgpoctl: SYSGPOCTL,
    }
    #[doc = "Doorbell Command Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmdr](cmdr) module"]
    pub type CMDR = crate::Reg<u32, _CMDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMDR;
    #[doc = "`read()` method returns [cmdr::R](cmdr::R) reader structure"]
    impl crate::Readable for CMDR {}
    #[doc = "`write(|w| ..)` method takes [cmdr::W](cmdr::W) writer structure"]
    impl crate::Writable for CMDR {}
    #[doc = "Doorbell Command Register"]
    pub mod cmdr {
        #[doc = "Reader of register CMDR"]
        pub type R = crate::R<u32, super::CMDR>;
        #[doc = "Writer for register CMDR"]
        pub type W = crate::W<u32, super::CMDR>;
        #[doc = "Register CMDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CMD`"]
        pub type CMD_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CMD`"]
        pub struct CMD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CMD"]
            #[inline(always)]
            pub fn cmd(&self) -> CMD_R {
                CMD_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CMD"]
            #[inline(always)]
            pub fn cmd(&mut self) -> CMD_W {
                CMD_W { w: self }
            }
        }
    }
    #[doc = "Doorbell Command Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmdsta](cmdsta) module"]
    pub type CMDSTA = crate::Reg<u32, _CMDSTA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMDSTA;
    #[doc = "`read()` method returns [cmdsta::R](cmdsta::R) reader structure"]
    impl crate::Readable for CMDSTA {}
    #[doc = "Doorbell Command Status Register"]
    pub mod cmdsta {
        #[doc = "Reader of register CMDSTA"]
        pub type R = crate::R<u32, super::CMDSTA>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Interrupt Flags From RF Hardware Modules\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfhwifg](rfhwifg) module"]
    pub type RFHWIFG = crate::Reg<u32, _RFHWIFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFHWIFG;
    #[doc = "`read()` method returns [rfhwifg::R](rfhwifg::R) reader structure"]
    impl crate::Readable for RFHWIFG {}
    #[doc = "`write(|w| ..)` method takes [rfhwifg::W](rfhwifg::W) writer structure"]
    impl crate::Writable for RFHWIFG {}
    #[doc = "Interrupt Flags From RF Hardware Modules"]
    pub mod rfhwifg {
        #[doc = "Reader of register RFHWIFG"]
        pub type R = crate::R<u32, super::RFHWIFG>;
        #[doc = "Writer for register RFHWIFG"]
        pub type W = crate::W<u32, super::RFHWIFG>;
        #[doc = "Register RFHWIFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::RFHWIFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATCH7`"]
        pub type RATCH7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH7`"]
        pub struct RATCH7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH6`"]
        pub type RATCH6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH6`"]
        pub struct RATCH6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH5`"]
        pub type RATCH5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH5`"]
        pub struct RATCH5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH4`"]
        pub type RATCH4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH4`"]
        pub struct RATCH4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH3`"]
        pub type RATCH3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH3`"]
        pub struct RATCH3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH2`"]
        pub type RATCH2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH2`"]
        pub struct RATCH2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH1`"]
        pub type RATCH1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH1`"]
        pub struct RATCH1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH0`"]
        pub type RATCH0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH0`"]
        pub struct RATCH0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `RFESOFT2`"]
        pub type RFESOFT2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFESOFT2`"]
        pub struct RFESOFT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFESOFT2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RFESOFT1`"]
        pub type RFESOFT1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFESOFT1`"]
        pub struct RFESOFT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFESOFT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `RFESOFT0`"]
        pub type RFESOFT0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFESOFT0`"]
        pub struct RFESOFT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFESOFT0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RFEDONE`"]
        pub type RFEDONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFEDONE`"]
        pub struct RFEDONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFEDONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TRCTK`"]
        pub type TRCTK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRCTK`"]
        pub struct TRCTK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRCTK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `MDMSOFT`"]
        pub type MDMSOFT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMSOFT`"]
        pub struct MDMSOFT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMSOFT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `MDMOUT`"]
        pub type MDMOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMOUT`"]
        pub struct MDMOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MDMIN`"]
        pub type MDMIN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMIN`"]
        pub struct MDMIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMIN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MDMDONE`"]
        pub type MDMDONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMDONE`"]
        pub struct MDMDONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMDONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `FSCA`"]
        pub type FSCA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSCA`"]
        pub struct FSCA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSCA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 19 - RATCH7"]
            #[inline(always)]
            pub fn ratch7(&self) -> RATCH7_R {
                RATCH7_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RATCH6"]
            #[inline(always)]
            pub fn ratch6(&self) -> RATCH6_R {
                RATCH6_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RATCH5"]
            #[inline(always)]
            pub fn ratch5(&self) -> RATCH5_R {
                RATCH5_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RATCH4"]
            #[inline(always)]
            pub fn ratch4(&self) -> RATCH4_R {
                RATCH4_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - RATCH3"]
            #[inline(always)]
            pub fn ratch3(&self) -> RATCH3_R {
                RATCH3_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - RATCH2"]
            #[inline(always)]
            pub fn ratch2(&self) -> RATCH2_R {
                RATCH2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - RATCH1"]
            #[inline(always)]
            pub fn ratch1(&self) -> RATCH1_R {
                RATCH1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - RATCH0"]
            #[inline(always)]
            pub fn ratch0(&self) -> RATCH0_R {
                RATCH0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - RFESOFT2"]
            #[inline(always)]
            pub fn rfesoft2(&self) -> RFESOFT2_R {
                RFESOFT2_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - RFESOFT1"]
            #[inline(always)]
            pub fn rfesoft1(&self) -> RFESOFT1_R {
                RFESOFT1_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - RFESOFT0"]
            #[inline(always)]
            pub fn rfesoft0(&self) -> RFESOFT0_R {
                RFESOFT0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RFEDONE"]
            #[inline(always)]
            pub fn rfedone(&self) -> RFEDONE_R {
                RFEDONE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TRCTK"]
            #[inline(always)]
            pub fn trctk(&self) -> TRCTK_R {
                TRCTK_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - MDMSOFT"]
            #[inline(always)]
            pub fn mdmsoft(&self) -> MDMSOFT_R {
                MDMSOFT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - MDMOUT"]
            #[inline(always)]
            pub fn mdmout(&self) -> MDMOUT_R {
                MDMOUT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - MDMIN"]
            #[inline(always)]
            pub fn mdmin(&self) -> MDMIN_R {
                MDMIN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - MDMDONE"]
            #[inline(always)]
            pub fn mdmdone(&self) -> MDMDONE_R {
                MDMDONE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - FSCA"]
            #[inline(always)]
            pub fn fsca(&self) -> FSCA_R {
                FSCA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 19 - RATCH7"]
            #[inline(always)]
            pub fn ratch7(&mut self) -> RATCH7_W {
                RATCH7_W { w: self }
            }
            #[doc = "Bit 18 - RATCH6"]
            #[inline(always)]
            pub fn ratch6(&mut self) -> RATCH6_W {
                RATCH6_W { w: self }
            }
            #[doc = "Bit 17 - RATCH5"]
            #[inline(always)]
            pub fn ratch5(&mut self) -> RATCH5_W {
                RATCH5_W { w: self }
            }
            #[doc = "Bit 16 - RATCH4"]
            #[inline(always)]
            pub fn ratch4(&mut self) -> RATCH4_W {
                RATCH4_W { w: self }
            }
            #[doc = "Bit 15 - RATCH3"]
            #[inline(always)]
            pub fn ratch3(&mut self) -> RATCH3_W {
                RATCH3_W { w: self }
            }
            #[doc = "Bit 14 - RATCH2"]
            #[inline(always)]
            pub fn ratch2(&mut self) -> RATCH2_W {
                RATCH2_W { w: self }
            }
            #[doc = "Bit 13 - RATCH1"]
            #[inline(always)]
            pub fn ratch1(&mut self) -> RATCH1_W {
                RATCH1_W { w: self }
            }
            #[doc = "Bit 12 - RATCH0"]
            #[inline(always)]
            pub fn ratch0(&mut self) -> RATCH0_W {
                RATCH0_W { w: self }
            }
            #[doc = "Bit 11 - RFESOFT2"]
            #[inline(always)]
            pub fn rfesoft2(&mut self) -> RFESOFT2_W {
                RFESOFT2_W { w: self }
            }
            #[doc = "Bit 10 - RFESOFT1"]
            #[inline(always)]
            pub fn rfesoft1(&mut self) -> RFESOFT1_W {
                RFESOFT1_W { w: self }
            }
            #[doc = "Bit 9 - RFESOFT0"]
            #[inline(always)]
            pub fn rfesoft0(&mut self) -> RFESOFT0_W {
                RFESOFT0_W { w: self }
            }
            #[doc = "Bit 8 - RFEDONE"]
            #[inline(always)]
            pub fn rfedone(&mut self) -> RFEDONE_W {
                RFEDONE_W { w: self }
            }
            #[doc = "Bit 6 - TRCTK"]
            #[inline(always)]
            pub fn trctk(&mut self) -> TRCTK_W {
                TRCTK_W { w: self }
            }
            #[doc = "Bit 5 - MDMSOFT"]
            #[inline(always)]
            pub fn mdmsoft(&mut self) -> MDMSOFT_W {
                MDMSOFT_W { w: self }
            }
            #[doc = "Bit 4 - MDMOUT"]
            #[inline(always)]
            pub fn mdmout(&mut self) -> MDMOUT_W {
                MDMOUT_W { w: self }
            }
            #[doc = "Bit 3 - MDMIN"]
            #[inline(always)]
            pub fn mdmin(&mut self) -> MDMIN_W {
                MDMIN_W { w: self }
            }
            #[doc = "Bit 2 - MDMDONE"]
            #[inline(always)]
            pub fn mdmdone(&mut self) -> MDMDONE_W {
                MDMDONE_W { w: self }
            }
            #[doc = "Bit 1 - FSCA"]
            #[inline(always)]
            pub fn fsca(&mut self) -> FSCA_W {
                FSCA_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Enable For RF Hardware Modules\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfhwien](rfhwien) module"]
    pub type RFHWIEN = crate::Reg<u32, _RFHWIEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFHWIEN;
    #[doc = "`read()` method returns [rfhwien::R](rfhwien::R) reader structure"]
    impl crate::Readable for RFHWIEN {}
    #[doc = "`write(|w| ..)` method takes [rfhwien::W](rfhwien::W) writer structure"]
    impl crate::Writable for RFHWIEN {}
    #[doc = "Interrupt Enable For RF Hardware Modules"]
    pub mod rfhwien {
        #[doc = "Reader of register RFHWIEN"]
        pub type R = crate::R<u32, super::RFHWIEN>;
        #[doc = "Writer for register RFHWIEN"]
        pub type W = crate::W<u32, super::RFHWIEN>;
        #[doc = "Register RFHWIEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::RFHWIEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RATCH7`"]
        pub type RATCH7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH7`"]
        pub struct RATCH7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH6`"]
        pub type RATCH6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH6`"]
        pub struct RATCH6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH5`"]
        pub type RATCH5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH5`"]
        pub struct RATCH5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH4`"]
        pub type RATCH4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH4`"]
        pub struct RATCH4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH3`"]
        pub type RATCH3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH3`"]
        pub struct RATCH3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH2`"]
        pub type RATCH2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH2`"]
        pub struct RATCH2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH1`"]
        pub type RATCH1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH1`"]
        pub struct RATCH1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `RATCH0`"]
        pub type RATCH0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RATCH0`"]
        pub struct RATCH0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RATCH0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `RFESOFT2`"]
        pub type RFESOFT2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFESOFT2`"]
        pub struct RFESOFT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFESOFT2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RFESOFT1`"]
        pub type RFESOFT1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFESOFT1`"]
        pub struct RFESOFT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFESOFT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `RFESOFT0`"]
        pub type RFESOFT0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFESOFT0`"]
        pub struct RFESOFT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFESOFT0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RFEDONE`"]
        pub type RFEDONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFEDONE`"]
        pub struct RFEDONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFEDONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TRCTK`"]
        pub type TRCTK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRCTK`"]
        pub struct TRCTK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRCTK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `MDMSOFT`"]
        pub type MDMSOFT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMSOFT`"]
        pub struct MDMSOFT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMSOFT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `MDMOUT`"]
        pub type MDMOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMOUT`"]
        pub struct MDMOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MDMIN`"]
        pub type MDMIN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMIN`"]
        pub struct MDMIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMIN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MDMDONE`"]
        pub type MDMDONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMDONE`"]
        pub struct MDMDONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMDONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `FSCA`"]
        pub type FSCA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSCA`"]
        pub struct FSCA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSCA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 19 - RATCH7"]
            #[inline(always)]
            pub fn ratch7(&self) -> RATCH7_R {
                RATCH7_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RATCH6"]
            #[inline(always)]
            pub fn ratch6(&self) -> RATCH6_R {
                RATCH6_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RATCH5"]
            #[inline(always)]
            pub fn ratch5(&self) -> RATCH5_R {
                RATCH5_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RATCH4"]
            #[inline(always)]
            pub fn ratch4(&self) -> RATCH4_R {
                RATCH4_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - RATCH3"]
            #[inline(always)]
            pub fn ratch3(&self) -> RATCH3_R {
                RATCH3_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - RATCH2"]
            #[inline(always)]
            pub fn ratch2(&self) -> RATCH2_R {
                RATCH2_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - RATCH1"]
            #[inline(always)]
            pub fn ratch1(&self) -> RATCH1_R {
                RATCH1_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - RATCH0"]
            #[inline(always)]
            pub fn ratch0(&self) -> RATCH0_R {
                RATCH0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - RFESOFT2"]
            #[inline(always)]
            pub fn rfesoft2(&self) -> RFESOFT2_R {
                RFESOFT2_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - RFESOFT1"]
            #[inline(always)]
            pub fn rfesoft1(&self) -> RFESOFT1_R {
                RFESOFT1_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - RFESOFT0"]
            #[inline(always)]
            pub fn rfesoft0(&self) -> RFESOFT0_R {
                RFESOFT0_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RFEDONE"]
            #[inline(always)]
            pub fn rfedone(&self) -> RFEDONE_R {
                RFEDONE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TRCTK"]
            #[inline(always)]
            pub fn trctk(&self) -> TRCTK_R {
                TRCTK_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - MDMSOFT"]
            #[inline(always)]
            pub fn mdmsoft(&self) -> MDMSOFT_R {
                MDMSOFT_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - MDMOUT"]
            #[inline(always)]
            pub fn mdmout(&self) -> MDMOUT_R {
                MDMOUT_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - MDMIN"]
            #[inline(always)]
            pub fn mdmin(&self) -> MDMIN_R {
                MDMIN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - MDMDONE"]
            #[inline(always)]
            pub fn mdmdone(&self) -> MDMDONE_R {
                MDMDONE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - FSCA"]
            #[inline(always)]
            pub fn fsca(&self) -> FSCA_R {
                FSCA_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 19 - RATCH7"]
            #[inline(always)]
            pub fn ratch7(&mut self) -> RATCH7_W {
                RATCH7_W { w: self }
            }
            #[doc = "Bit 18 - RATCH6"]
            #[inline(always)]
            pub fn ratch6(&mut self) -> RATCH6_W {
                RATCH6_W { w: self }
            }
            #[doc = "Bit 17 - RATCH5"]
            #[inline(always)]
            pub fn ratch5(&mut self) -> RATCH5_W {
                RATCH5_W { w: self }
            }
            #[doc = "Bit 16 - RATCH4"]
            #[inline(always)]
            pub fn ratch4(&mut self) -> RATCH4_W {
                RATCH4_W { w: self }
            }
            #[doc = "Bit 15 - RATCH3"]
            #[inline(always)]
            pub fn ratch3(&mut self) -> RATCH3_W {
                RATCH3_W { w: self }
            }
            #[doc = "Bit 14 - RATCH2"]
            #[inline(always)]
            pub fn ratch2(&mut self) -> RATCH2_W {
                RATCH2_W { w: self }
            }
            #[doc = "Bit 13 - RATCH1"]
            #[inline(always)]
            pub fn ratch1(&mut self) -> RATCH1_W {
                RATCH1_W { w: self }
            }
            #[doc = "Bit 12 - RATCH0"]
            #[inline(always)]
            pub fn ratch0(&mut self) -> RATCH0_W {
                RATCH0_W { w: self }
            }
            #[doc = "Bit 11 - RFESOFT2"]
            #[inline(always)]
            pub fn rfesoft2(&mut self) -> RFESOFT2_W {
                RFESOFT2_W { w: self }
            }
            #[doc = "Bit 10 - RFESOFT1"]
            #[inline(always)]
            pub fn rfesoft1(&mut self) -> RFESOFT1_W {
                RFESOFT1_W { w: self }
            }
            #[doc = "Bit 9 - RFESOFT0"]
            #[inline(always)]
            pub fn rfesoft0(&mut self) -> RFESOFT0_W {
                RFESOFT0_W { w: self }
            }
            #[doc = "Bit 8 - RFEDONE"]
            #[inline(always)]
            pub fn rfedone(&mut self) -> RFEDONE_W {
                RFEDONE_W { w: self }
            }
            #[doc = "Bit 6 - TRCTK"]
            #[inline(always)]
            pub fn trctk(&mut self) -> TRCTK_W {
                TRCTK_W { w: self }
            }
            #[doc = "Bit 5 - MDMSOFT"]
            #[inline(always)]
            pub fn mdmsoft(&mut self) -> MDMSOFT_W {
                MDMSOFT_W { w: self }
            }
            #[doc = "Bit 4 - MDMOUT"]
            #[inline(always)]
            pub fn mdmout(&mut self) -> MDMOUT_W {
                MDMOUT_W { w: self }
            }
            #[doc = "Bit 3 - MDMIN"]
            #[inline(always)]
            pub fn mdmin(&mut self) -> MDMIN_W {
                MDMIN_W { w: self }
            }
            #[doc = "Bit 2 - MDMDONE"]
            #[inline(always)]
            pub fn mdmdone(&mut self) -> MDMDONE_W {
                MDMDONE_W { w: self }
            }
            #[doc = "Bit 1 - FSCA"]
            #[inline(always)]
            pub fn fsca(&mut self) -> FSCA_W {
                FSCA_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Flags For Command and Packet Engine Generated Interrupts\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcpeifg](rfcpeifg) module"]
    pub type RFCPEIFG = crate::Reg<u32, _RFCPEIFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCPEIFG;
    #[doc = "`read()` method returns [rfcpeifg::R](rfcpeifg::R) reader structure"]
    impl crate::Readable for RFCPEIFG {}
    #[doc = "`write(|w| ..)` method takes [rfcpeifg::W](rfcpeifg::W) writer structure"]
    impl crate::Writable for RFCPEIFG {}
    #[doc = "Interrupt Flags For Command and Packet Engine Generated Interrupts"]
    pub mod rfcpeifg {
        #[doc = "Reader of register RFCPEIFG"]
        pub type R = crate::R<u32, super::RFCPEIFG>;
        #[doc = "Writer for register RFCPEIFG"]
        pub type W = crate::W<u32, super::RFCPEIFG>;
        #[doc = "Register RFCPEIFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::RFCPEIFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INTERNAL_ERROR`"]
        pub type INTERNAL_ERROR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INTERNAL_ERROR`"]
        pub struct INTERNAL_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTERNAL_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DONE`"]
        pub type BOOT_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DONE`"]
        pub struct BOOT_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `MODULES_UNLOCKED`"]
        pub type MODULES_UNLOCKED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MODULES_UNLOCKED`"]
        pub struct MODULES_UNLOCKED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODULES_UNLOCKED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `SYNTH_NO_LOCK`"]
        pub type SYNTH_NO_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYNTH_NO_LOCK`"]
        pub struct SYNTH_NO_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNTH_NO_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ27`"]
        pub type IRQ27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ27`"]
        pub struct IRQ27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `RX_ABORTED`"]
        pub type RX_ABORTED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_ABORTED`"]
        pub struct RX_ABORTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ABORTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `RX_N_DATA_WRITTEN`"]
        pub type RX_N_DATA_WRITTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_N_DATA_WRITTEN`"]
        pub struct RX_N_DATA_WRITTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_N_DATA_WRITTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `RX_DATA_WRITTEN`"]
        pub type RX_DATA_WRITTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_DATA_WRITTEN`"]
        pub struct RX_DATA_WRITTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_DATA_WRITTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RX_ENTRY_DONE`"]
        pub type RX_ENTRY_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_ENTRY_DONE`"]
        pub struct RX_ENTRY_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ENTRY_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `RX_BUF_FULL`"]
        pub type RX_BUF_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_BUF_FULL`"]
        pub struct RX_BUF_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_BUF_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `RX_CTRL_ACK`"]
        pub type RX_CTRL_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_CTRL_ACK`"]
        pub struct RX_CTRL_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_CTRL_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `RX_CTRL`"]
        pub type RX_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_CTRL`"]
        pub struct RX_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `RX_EMPTY`"]
        pub type RX_EMPTY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_EMPTY`"]
        pub struct RX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RX_IGNORED`"]
        pub type RX_IGNORED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_IGNORED`"]
        pub struct RX_IGNORED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_IGNORED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RX_NOK`"]
        pub type RX_NOK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_NOK`"]
        pub struct RX_NOK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_NOK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RX_OK`"]
        pub type RX_OK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_OK`"]
        pub struct RX_OK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_OK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ15`"]
        pub type IRQ15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ15`"]
        pub struct IRQ15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ14`"]
        pub type IRQ14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ14`"]
        pub struct IRQ14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ13`"]
        pub type IRQ13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ13`"]
        pub struct IRQ13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ12`"]
        pub type IRQ12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ12`"]
        pub struct IRQ12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TX_BUFFER_CHANGED`"]
        pub type TX_BUFFER_CHANGED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_BUFFER_CHANGED`"]
        pub struct TX_BUFFER_CHANGED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_BUFFER_CHANGED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TX_ENTRY_DONE`"]
        pub type TX_ENTRY_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_ENTRY_DONE`"]
        pub struct TX_ENTRY_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ENTRY_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TX_RETRANS`"]
        pub type TX_RETRANS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_RETRANS`"]
        pub struct TX_RETRANS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_RETRANS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL_ACK_ACK`"]
        pub type TX_CTRL_ACK_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL_ACK_ACK`"]
        pub struct TX_CTRL_ACK_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_ACK_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL_ACK`"]
        pub type TX_CTRL_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL_ACK`"]
        pub struct TX_CTRL_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL`"]
        pub type TX_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL`"]
        pub struct TX_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TX_ACK`"]
        pub type TX_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_ACK`"]
        pub struct TX_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TX_DONE`"]
        pub type TX_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_DONE`"]
        pub struct TX_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `LAST_FG_COMMAND_DONE`"]
        pub type LAST_FG_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LAST_FG_COMMAND_DONE`"]
        pub struct LAST_FG_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_FG_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `FG_COMMAND_DONE`"]
        pub type FG_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FG_COMMAND_DONE`"]
        pub struct FG_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FG_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LAST_COMMAND_DONE`"]
        pub type LAST_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LAST_COMMAND_DONE`"]
        pub struct LAST_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `COMMAND_DONE`"]
        pub type COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMMAND_DONE`"]
        pub struct COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - INTERNAL_ERROR"]
            #[inline(always)]
            pub fn internal_error(&self) -> INTERNAL_ERROR_R {
                INTERNAL_ERROR_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - BOOT_DONE"]
            #[inline(always)]
            pub fn boot_done(&self) -> BOOT_DONE_R {
                BOOT_DONE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - MODULES_UNLOCKED"]
            #[inline(always)]
            pub fn modules_unlocked(&self) -> MODULES_UNLOCKED_R {
                MODULES_UNLOCKED_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - SYNTH_NO_LOCK"]
            #[inline(always)]
            pub fn synth_no_lock(&self) -> SYNTH_NO_LOCK_R {
                SYNTH_NO_LOCK_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - IRQ27"]
            #[inline(always)]
            pub fn irq27(&self) -> IRQ27_R {
                IRQ27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - RX_ABORTED"]
            #[inline(always)]
            pub fn rx_aborted(&self) -> RX_ABORTED_R {
                RX_ABORTED_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - RX_N_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_n_data_written(&self) -> RX_N_DATA_WRITTEN_R {
                RX_N_DATA_WRITTEN_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - RX_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_data_written(&self) -> RX_DATA_WRITTEN_R {
                RX_DATA_WRITTEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - RX_ENTRY_DONE"]
            #[inline(always)]
            pub fn rx_entry_done(&self) -> RX_ENTRY_DONE_R {
                RX_ENTRY_DONE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - RX_BUF_FULL"]
            #[inline(always)]
            pub fn rx_buf_full(&self) -> RX_BUF_FULL_R {
                RX_BUF_FULL_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - RX_CTRL_ACK"]
            #[inline(always)]
            pub fn rx_ctrl_ack(&self) -> RX_CTRL_ACK_R {
                RX_CTRL_ACK_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - RX_CTRL"]
            #[inline(always)]
            pub fn rx_ctrl(&self) -> RX_CTRL_R {
                RX_CTRL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RX_EMPTY"]
            #[inline(always)]
            pub fn rx_empty(&self) -> RX_EMPTY_R {
                RX_EMPTY_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RX_IGNORED"]
            #[inline(always)]
            pub fn rx_ignored(&self) -> RX_IGNORED_R {
                RX_IGNORED_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RX_NOK"]
            #[inline(always)]
            pub fn rx_nok(&self) -> RX_NOK_R {
                RX_NOK_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RX_OK"]
            #[inline(always)]
            pub fn rx_ok(&self) -> RX_OK_R {
                RX_OK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - IRQ15"]
            #[inline(always)]
            pub fn irq15(&self) -> IRQ15_R {
                IRQ15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - IRQ14"]
            #[inline(always)]
            pub fn irq14(&self) -> IRQ14_R {
                IRQ14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - IRQ13"]
            #[inline(always)]
            pub fn irq13(&self) -> IRQ13_R {
                IRQ13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - IRQ12"]
            #[inline(always)]
            pub fn irq12(&self) -> IRQ12_R {
                IRQ12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TX_BUFFER_CHANGED"]
            #[inline(always)]
            pub fn tx_buffer_changed(&self) -> TX_BUFFER_CHANGED_R {
                TX_BUFFER_CHANGED_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TX_ENTRY_DONE"]
            #[inline(always)]
            pub fn tx_entry_done(&self) -> TX_ENTRY_DONE_R {
                TX_ENTRY_DONE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TX_RETRANS"]
            #[inline(always)]
            pub fn tx_retrans(&self) -> TX_RETRANS_R {
                TX_RETRANS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TX_CTRL_ACK_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack_ack(&self) -> TX_CTRL_ACK_ACK_R {
                TX_CTRL_ACK_ACK_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TX_CTRL_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack(&self) -> TX_CTRL_ACK_R {
                TX_CTRL_ACK_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TX_CTRL"]
            #[inline(always)]
            pub fn tx_ctrl(&self) -> TX_CTRL_R {
                TX_CTRL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TX_ACK"]
            #[inline(always)]
            pub fn tx_ack(&self) -> TX_ACK_R {
                TX_ACK_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TX_DONE"]
            #[inline(always)]
            pub fn tx_done(&self) -> TX_DONE_R {
                TX_DONE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - LAST_FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_fg_command_done(&self) -> LAST_FG_COMMAND_DONE_R {
                LAST_FG_COMMAND_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn fg_command_done(&self) -> FG_COMMAND_DONE_R {
                FG_COMMAND_DONE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - LAST_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_command_done(&self) -> LAST_COMMAND_DONE_R {
                LAST_COMMAND_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - COMMAND_DONE"]
            #[inline(always)]
            pub fn command_done(&self) -> COMMAND_DONE_R {
                COMMAND_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - INTERNAL_ERROR"]
            #[inline(always)]
            pub fn internal_error(&mut self) -> INTERNAL_ERROR_W {
                INTERNAL_ERROR_W { w: self }
            }
            #[doc = "Bit 30 - BOOT_DONE"]
            #[inline(always)]
            pub fn boot_done(&mut self) -> BOOT_DONE_W {
                BOOT_DONE_W { w: self }
            }
            #[doc = "Bit 29 - MODULES_UNLOCKED"]
            #[inline(always)]
            pub fn modules_unlocked(&mut self) -> MODULES_UNLOCKED_W {
                MODULES_UNLOCKED_W { w: self }
            }
            #[doc = "Bit 28 - SYNTH_NO_LOCK"]
            #[inline(always)]
            pub fn synth_no_lock(&mut self) -> SYNTH_NO_LOCK_W {
                SYNTH_NO_LOCK_W { w: self }
            }
            #[doc = "Bit 27 - IRQ27"]
            #[inline(always)]
            pub fn irq27(&mut self) -> IRQ27_W {
                IRQ27_W { w: self }
            }
            #[doc = "Bit 26 - RX_ABORTED"]
            #[inline(always)]
            pub fn rx_aborted(&mut self) -> RX_ABORTED_W {
                RX_ABORTED_W { w: self }
            }
            #[doc = "Bit 25 - RX_N_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_n_data_written(&mut self) -> RX_N_DATA_WRITTEN_W {
                RX_N_DATA_WRITTEN_W { w: self }
            }
            #[doc = "Bit 24 - RX_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_data_written(&mut self) -> RX_DATA_WRITTEN_W {
                RX_DATA_WRITTEN_W { w: self }
            }
            #[doc = "Bit 23 - RX_ENTRY_DONE"]
            #[inline(always)]
            pub fn rx_entry_done(&mut self) -> RX_ENTRY_DONE_W {
                RX_ENTRY_DONE_W { w: self }
            }
            #[doc = "Bit 22 - RX_BUF_FULL"]
            #[inline(always)]
            pub fn rx_buf_full(&mut self) -> RX_BUF_FULL_W {
                RX_BUF_FULL_W { w: self }
            }
            #[doc = "Bit 21 - RX_CTRL_ACK"]
            #[inline(always)]
            pub fn rx_ctrl_ack(&mut self) -> RX_CTRL_ACK_W {
                RX_CTRL_ACK_W { w: self }
            }
            #[doc = "Bit 20 - RX_CTRL"]
            #[inline(always)]
            pub fn rx_ctrl(&mut self) -> RX_CTRL_W {
                RX_CTRL_W { w: self }
            }
            #[doc = "Bit 19 - RX_EMPTY"]
            #[inline(always)]
            pub fn rx_empty(&mut self) -> RX_EMPTY_W {
                RX_EMPTY_W { w: self }
            }
            #[doc = "Bit 18 - RX_IGNORED"]
            #[inline(always)]
            pub fn rx_ignored(&mut self) -> RX_IGNORED_W {
                RX_IGNORED_W { w: self }
            }
            #[doc = "Bit 17 - RX_NOK"]
            #[inline(always)]
            pub fn rx_nok(&mut self) -> RX_NOK_W {
                RX_NOK_W { w: self }
            }
            #[doc = "Bit 16 - RX_OK"]
            #[inline(always)]
            pub fn rx_ok(&mut self) -> RX_OK_W {
                RX_OK_W { w: self }
            }
            #[doc = "Bit 15 - IRQ15"]
            #[inline(always)]
            pub fn irq15(&mut self) -> IRQ15_W {
                IRQ15_W { w: self }
            }
            #[doc = "Bit 14 - IRQ14"]
            #[inline(always)]
            pub fn irq14(&mut self) -> IRQ14_W {
                IRQ14_W { w: self }
            }
            #[doc = "Bit 13 - IRQ13"]
            #[inline(always)]
            pub fn irq13(&mut self) -> IRQ13_W {
                IRQ13_W { w: self }
            }
            #[doc = "Bit 12 - IRQ12"]
            #[inline(always)]
            pub fn irq12(&mut self) -> IRQ12_W {
                IRQ12_W { w: self }
            }
            #[doc = "Bit 11 - TX_BUFFER_CHANGED"]
            #[inline(always)]
            pub fn tx_buffer_changed(&mut self) -> TX_BUFFER_CHANGED_W {
                TX_BUFFER_CHANGED_W { w: self }
            }
            #[doc = "Bit 10 - TX_ENTRY_DONE"]
            #[inline(always)]
            pub fn tx_entry_done(&mut self) -> TX_ENTRY_DONE_W {
                TX_ENTRY_DONE_W { w: self }
            }
            #[doc = "Bit 9 - TX_RETRANS"]
            #[inline(always)]
            pub fn tx_retrans(&mut self) -> TX_RETRANS_W {
                TX_RETRANS_W { w: self }
            }
            #[doc = "Bit 8 - TX_CTRL_ACK_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack_ack(&mut self) -> TX_CTRL_ACK_ACK_W {
                TX_CTRL_ACK_ACK_W { w: self }
            }
            #[doc = "Bit 7 - TX_CTRL_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack(&mut self) -> TX_CTRL_ACK_W {
                TX_CTRL_ACK_W { w: self }
            }
            #[doc = "Bit 6 - TX_CTRL"]
            #[inline(always)]
            pub fn tx_ctrl(&mut self) -> TX_CTRL_W {
                TX_CTRL_W { w: self }
            }
            #[doc = "Bit 5 - TX_ACK"]
            #[inline(always)]
            pub fn tx_ack(&mut self) -> TX_ACK_W {
                TX_ACK_W { w: self }
            }
            #[doc = "Bit 4 - TX_DONE"]
            #[inline(always)]
            pub fn tx_done(&mut self) -> TX_DONE_W {
                TX_DONE_W { w: self }
            }
            #[doc = "Bit 3 - LAST_FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_fg_command_done(&mut self) -> LAST_FG_COMMAND_DONE_W {
                LAST_FG_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 2 - FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn fg_command_done(&mut self) -> FG_COMMAND_DONE_W {
                FG_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 1 - LAST_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_command_done(&mut self) -> LAST_COMMAND_DONE_W {
                LAST_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 0 - COMMAND_DONE"]
            #[inline(always)]
            pub fn command_done(&mut self) -> COMMAND_DONE_W {
                COMMAND_DONE_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Enable For Command and Packet Engine Generated Interrupts\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcpeien](rfcpeien) module"]
    pub type RFCPEIEN = crate::Reg<u32, _RFCPEIEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCPEIEN;
    #[doc = "`read()` method returns [rfcpeien::R](rfcpeien::R) reader structure"]
    impl crate::Readable for RFCPEIEN {}
    #[doc = "`write(|w| ..)` method takes [rfcpeien::W](rfcpeien::W) writer structure"]
    impl crate::Writable for RFCPEIEN {}
    #[doc = "Interrupt Enable For Command and Packet Engine Generated Interrupts"]
    pub mod rfcpeien {
        #[doc = "Reader of register RFCPEIEN"]
        pub type R = crate::R<u32, super::RFCPEIEN>;
        #[doc = "Writer for register RFCPEIEN"]
        pub type W = crate::W<u32, super::RFCPEIEN>;
        #[doc = "Register RFCPEIEN `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::RFCPEIEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `INTERNAL_ERROR`"]
        pub type INTERNAL_ERROR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INTERNAL_ERROR`"]
        pub struct INTERNAL_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTERNAL_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DONE`"]
        pub type BOOT_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DONE`"]
        pub struct BOOT_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `MODULES_UNLOCKED`"]
        pub type MODULES_UNLOCKED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MODULES_UNLOCKED`"]
        pub struct MODULES_UNLOCKED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODULES_UNLOCKED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `SYNTH_NO_LOCK`"]
        pub type SYNTH_NO_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYNTH_NO_LOCK`"]
        pub struct SYNTH_NO_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNTH_NO_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ27`"]
        pub type IRQ27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ27`"]
        pub struct IRQ27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `RX_ABORTED`"]
        pub type RX_ABORTED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_ABORTED`"]
        pub struct RX_ABORTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ABORTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `RX_N_DATA_WRITTEN`"]
        pub type RX_N_DATA_WRITTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_N_DATA_WRITTEN`"]
        pub struct RX_N_DATA_WRITTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_N_DATA_WRITTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `RX_DATA_WRITTEN`"]
        pub type RX_DATA_WRITTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_DATA_WRITTEN`"]
        pub struct RX_DATA_WRITTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_DATA_WRITTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RX_ENTRY_DONE`"]
        pub type RX_ENTRY_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_ENTRY_DONE`"]
        pub struct RX_ENTRY_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ENTRY_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `RX_BUF_FULL`"]
        pub type RX_BUF_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_BUF_FULL`"]
        pub struct RX_BUF_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_BUF_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `RX_CTRL_ACK`"]
        pub type RX_CTRL_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_CTRL_ACK`"]
        pub struct RX_CTRL_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_CTRL_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `RX_CTRL`"]
        pub type RX_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_CTRL`"]
        pub struct RX_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `RX_EMPTY`"]
        pub type RX_EMPTY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_EMPTY`"]
        pub struct RX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RX_IGNORED`"]
        pub type RX_IGNORED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_IGNORED`"]
        pub struct RX_IGNORED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_IGNORED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RX_NOK`"]
        pub type RX_NOK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_NOK`"]
        pub struct RX_NOK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_NOK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RX_OK`"]
        pub type RX_OK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_OK`"]
        pub struct RX_OK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_OK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ15`"]
        pub type IRQ15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ15`"]
        pub struct IRQ15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ14`"]
        pub type IRQ14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ14`"]
        pub struct IRQ14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ13`"]
        pub type IRQ13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ13`"]
        pub struct IRQ13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ12`"]
        pub type IRQ12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ12`"]
        pub struct IRQ12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TX_BUFFER_CHANGED`"]
        pub type TX_BUFFER_CHANGED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_BUFFER_CHANGED`"]
        pub struct TX_BUFFER_CHANGED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_BUFFER_CHANGED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TX_ENTRY_DONE`"]
        pub type TX_ENTRY_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_ENTRY_DONE`"]
        pub struct TX_ENTRY_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ENTRY_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TX_RETRANS`"]
        pub type TX_RETRANS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_RETRANS`"]
        pub struct TX_RETRANS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_RETRANS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL_ACK_ACK`"]
        pub type TX_CTRL_ACK_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL_ACK_ACK`"]
        pub struct TX_CTRL_ACK_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_ACK_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL_ACK`"]
        pub type TX_CTRL_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL_ACK`"]
        pub struct TX_CTRL_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL`"]
        pub type TX_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL`"]
        pub struct TX_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TX_ACK`"]
        pub type TX_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_ACK`"]
        pub struct TX_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TX_DONE`"]
        pub type TX_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_DONE`"]
        pub struct TX_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `LAST_FG_COMMAND_DONE`"]
        pub type LAST_FG_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LAST_FG_COMMAND_DONE`"]
        pub struct LAST_FG_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_FG_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `FG_COMMAND_DONE`"]
        pub type FG_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FG_COMMAND_DONE`"]
        pub struct FG_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FG_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LAST_COMMAND_DONE`"]
        pub type LAST_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LAST_COMMAND_DONE`"]
        pub struct LAST_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `COMMAND_DONE`"]
        pub type COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMMAND_DONE`"]
        pub struct COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - INTERNAL_ERROR"]
            #[inline(always)]
            pub fn internal_error(&self) -> INTERNAL_ERROR_R {
                INTERNAL_ERROR_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - BOOT_DONE"]
            #[inline(always)]
            pub fn boot_done(&self) -> BOOT_DONE_R {
                BOOT_DONE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - MODULES_UNLOCKED"]
            #[inline(always)]
            pub fn modules_unlocked(&self) -> MODULES_UNLOCKED_R {
                MODULES_UNLOCKED_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - SYNTH_NO_LOCK"]
            #[inline(always)]
            pub fn synth_no_lock(&self) -> SYNTH_NO_LOCK_R {
                SYNTH_NO_LOCK_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - IRQ27"]
            #[inline(always)]
            pub fn irq27(&self) -> IRQ27_R {
                IRQ27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - RX_ABORTED"]
            #[inline(always)]
            pub fn rx_aborted(&self) -> RX_ABORTED_R {
                RX_ABORTED_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - RX_N_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_n_data_written(&self) -> RX_N_DATA_WRITTEN_R {
                RX_N_DATA_WRITTEN_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - RX_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_data_written(&self) -> RX_DATA_WRITTEN_R {
                RX_DATA_WRITTEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - RX_ENTRY_DONE"]
            #[inline(always)]
            pub fn rx_entry_done(&self) -> RX_ENTRY_DONE_R {
                RX_ENTRY_DONE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - RX_BUF_FULL"]
            #[inline(always)]
            pub fn rx_buf_full(&self) -> RX_BUF_FULL_R {
                RX_BUF_FULL_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - RX_CTRL_ACK"]
            #[inline(always)]
            pub fn rx_ctrl_ack(&self) -> RX_CTRL_ACK_R {
                RX_CTRL_ACK_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - RX_CTRL"]
            #[inline(always)]
            pub fn rx_ctrl(&self) -> RX_CTRL_R {
                RX_CTRL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RX_EMPTY"]
            #[inline(always)]
            pub fn rx_empty(&self) -> RX_EMPTY_R {
                RX_EMPTY_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RX_IGNORED"]
            #[inline(always)]
            pub fn rx_ignored(&self) -> RX_IGNORED_R {
                RX_IGNORED_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RX_NOK"]
            #[inline(always)]
            pub fn rx_nok(&self) -> RX_NOK_R {
                RX_NOK_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RX_OK"]
            #[inline(always)]
            pub fn rx_ok(&self) -> RX_OK_R {
                RX_OK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - IRQ15"]
            #[inline(always)]
            pub fn irq15(&self) -> IRQ15_R {
                IRQ15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - IRQ14"]
            #[inline(always)]
            pub fn irq14(&self) -> IRQ14_R {
                IRQ14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - IRQ13"]
            #[inline(always)]
            pub fn irq13(&self) -> IRQ13_R {
                IRQ13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - IRQ12"]
            #[inline(always)]
            pub fn irq12(&self) -> IRQ12_R {
                IRQ12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TX_BUFFER_CHANGED"]
            #[inline(always)]
            pub fn tx_buffer_changed(&self) -> TX_BUFFER_CHANGED_R {
                TX_BUFFER_CHANGED_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TX_ENTRY_DONE"]
            #[inline(always)]
            pub fn tx_entry_done(&self) -> TX_ENTRY_DONE_R {
                TX_ENTRY_DONE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TX_RETRANS"]
            #[inline(always)]
            pub fn tx_retrans(&self) -> TX_RETRANS_R {
                TX_RETRANS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TX_CTRL_ACK_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack_ack(&self) -> TX_CTRL_ACK_ACK_R {
                TX_CTRL_ACK_ACK_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TX_CTRL_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack(&self) -> TX_CTRL_ACK_R {
                TX_CTRL_ACK_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TX_CTRL"]
            #[inline(always)]
            pub fn tx_ctrl(&self) -> TX_CTRL_R {
                TX_CTRL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TX_ACK"]
            #[inline(always)]
            pub fn tx_ack(&self) -> TX_ACK_R {
                TX_ACK_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TX_DONE"]
            #[inline(always)]
            pub fn tx_done(&self) -> TX_DONE_R {
                TX_DONE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - LAST_FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_fg_command_done(&self) -> LAST_FG_COMMAND_DONE_R {
                LAST_FG_COMMAND_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn fg_command_done(&self) -> FG_COMMAND_DONE_R {
                FG_COMMAND_DONE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - LAST_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_command_done(&self) -> LAST_COMMAND_DONE_R {
                LAST_COMMAND_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - COMMAND_DONE"]
            #[inline(always)]
            pub fn command_done(&self) -> COMMAND_DONE_R {
                COMMAND_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - INTERNAL_ERROR"]
            #[inline(always)]
            pub fn internal_error(&mut self) -> INTERNAL_ERROR_W {
                INTERNAL_ERROR_W { w: self }
            }
            #[doc = "Bit 30 - BOOT_DONE"]
            #[inline(always)]
            pub fn boot_done(&mut self) -> BOOT_DONE_W {
                BOOT_DONE_W { w: self }
            }
            #[doc = "Bit 29 - MODULES_UNLOCKED"]
            #[inline(always)]
            pub fn modules_unlocked(&mut self) -> MODULES_UNLOCKED_W {
                MODULES_UNLOCKED_W { w: self }
            }
            #[doc = "Bit 28 - SYNTH_NO_LOCK"]
            #[inline(always)]
            pub fn synth_no_lock(&mut self) -> SYNTH_NO_LOCK_W {
                SYNTH_NO_LOCK_W { w: self }
            }
            #[doc = "Bit 27 - IRQ27"]
            #[inline(always)]
            pub fn irq27(&mut self) -> IRQ27_W {
                IRQ27_W { w: self }
            }
            #[doc = "Bit 26 - RX_ABORTED"]
            #[inline(always)]
            pub fn rx_aborted(&mut self) -> RX_ABORTED_W {
                RX_ABORTED_W { w: self }
            }
            #[doc = "Bit 25 - RX_N_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_n_data_written(&mut self) -> RX_N_DATA_WRITTEN_W {
                RX_N_DATA_WRITTEN_W { w: self }
            }
            #[doc = "Bit 24 - RX_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_data_written(&mut self) -> RX_DATA_WRITTEN_W {
                RX_DATA_WRITTEN_W { w: self }
            }
            #[doc = "Bit 23 - RX_ENTRY_DONE"]
            #[inline(always)]
            pub fn rx_entry_done(&mut self) -> RX_ENTRY_DONE_W {
                RX_ENTRY_DONE_W { w: self }
            }
            #[doc = "Bit 22 - RX_BUF_FULL"]
            #[inline(always)]
            pub fn rx_buf_full(&mut self) -> RX_BUF_FULL_W {
                RX_BUF_FULL_W { w: self }
            }
            #[doc = "Bit 21 - RX_CTRL_ACK"]
            #[inline(always)]
            pub fn rx_ctrl_ack(&mut self) -> RX_CTRL_ACK_W {
                RX_CTRL_ACK_W { w: self }
            }
            #[doc = "Bit 20 - RX_CTRL"]
            #[inline(always)]
            pub fn rx_ctrl(&mut self) -> RX_CTRL_W {
                RX_CTRL_W { w: self }
            }
            #[doc = "Bit 19 - RX_EMPTY"]
            #[inline(always)]
            pub fn rx_empty(&mut self) -> RX_EMPTY_W {
                RX_EMPTY_W { w: self }
            }
            #[doc = "Bit 18 - RX_IGNORED"]
            #[inline(always)]
            pub fn rx_ignored(&mut self) -> RX_IGNORED_W {
                RX_IGNORED_W { w: self }
            }
            #[doc = "Bit 17 - RX_NOK"]
            #[inline(always)]
            pub fn rx_nok(&mut self) -> RX_NOK_W {
                RX_NOK_W { w: self }
            }
            #[doc = "Bit 16 - RX_OK"]
            #[inline(always)]
            pub fn rx_ok(&mut self) -> RX_OK_W {
                RX_OK_W { w: self }
            }
            #[doc = "Bit 15 - IRQ15"]
            #[inline(always)]
            pub fn irq15(&mut self) -> IRQ15_W {
                IRQ15_W { w: self }
            }
            #[doc = "Bit 14 - IRQ14"]
            #[inline(always)]
            pub fn irq14(&mut self) -> IRQ14_W {
                IRQ14_W { w: self }
            }
            #[doc = "Bit 13 - IRQ13"]
            #[inline(always)]
            pub fn irq13(&mut self) -> IRQ13_W {
                IRQ13_W { w: self }
            }
            #[doc = "Bit 12 - IRQ12"]
            #[inline(always)]
            pub fn irq12(&mut self) -> IRQ12_W {
                IRQ12_W { w: self }
            }
            #[doc = "Bit 11 - TX_BUFFER_CHANGED"]
            #[inline(always)]
            pub fn tx_buffer_changed(&mut self) -> TX_BUFFER_CHANGED_W {
                TX_BUFFER_CHANGED_W { w: self }
            }
            #[doc = "Bit 10 - TX_ENTRY_DONE"]
            #[inline(always)]
            pub fn tx_entry_done(&mut self) -> TX_ENTRY_DONE_W {
                TX_ENTRY_DONE_W { w: self }
            }
            #[doc = "Bit 9 - TX_RETRANS"]
            #[inline(always)]
            pub fn tx_retrans(&mut self) -> TX_RETRANS_W {
                TX_RETRANS_W { w: self }
            }
            #[doc = "Bit 8 - TX_CTRL_ACK_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack_ack(&mut self) -> TX_CTRL_ACK_ACK_W {
                TX_CTRL_ACK_ACK_W { w: self }
            }
            #[doc = "Bit 7 - TX_CTRL_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack(&mut self) -> TX_CTRL_ACK_W {
                TX_CTRL_ACK_W { w: self }
            }
            #[doc = "Bit 6 - TX_CTRL"]
            #[inline(always)]
            pub fn tx_ctrl(&mut self) -> TX_CTRL_W {
                TX_CTRL_W { w: self }
            }
            #[doc = "Bit 5 - TX_ACK"]
            #[inline(always)]
            pub fn tx_ack(&mut self) -> TX_ACK_W {
                TX_ACK_W { w: self }
            }
            #[doc = "Bit 4 - TX_DONE"]
            #[inline(always)]
            pub fn tx_done(&mut self) -> TX_DONE_W {
                TX_DONE_W { w: self }
            }
            #[doc = "Bit 3 - LAST_FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_fg_command_done(&mut self) -> LAST_FG_COMMAND_DONE_W {
                LAST_FG_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 2 - FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn fg_command_done(&mut self) -> FG_COMMAND_DONE_W {
                FG_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 1 - LAST_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_command_done(&mut self) -> LAST_COMMAND_DONE_W {
                LAST_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 0 - COMMAND_DONE"]
            #[inline(always)]
            pub fn command_done(&mut self) -> COMMAND_DONE_W {
                COMMAND_DONE_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Vector Selection For Command and Packet Engine Generated Interrupts\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfcpeisl](rfcpeisl) module"]
    pub type RFCPEISL = crate::Reg<u32, _RFCPEISL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFCPEISL;
    #[doc = "`read()` method returns [rfcpeisl::R](rfcpeisl::R) reader structure"]
    impl crate::Readable for RFCPEISL {}
    #[doc = "`write(|w| ..)` method takes [rfcpeisl::W](rfcpeisl::W) writer structure"]
    impl crate::Writable for RFCPEISL {}
    #[doc = "Interrupt Vector Selection For Command and Packet Engine Generated Interrupts"]
    pub mod rfcpeisl {
        #[doc = "Reader of register RFCPEISL"]
        pub type R = crate::R<u32, super::RFCPEISL>;
        #[doc = "Writer for register RFCPEISL"]
        pub type W = crate::W<u32, super::RFCPEISL>;
        #[doc = "Register RFCPEISL `reset()`'s with value 0xffff_0000"]
        impl crate::ResetValue for super::RFCPEISL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_0000
            }
        }
        #[doc = "Reader of field `INTERNAL_ERROR`"]
        pub type INTERNAL_ERROR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INTERNAL_ERROR`"]
        pub struct INTERNAL_ERROR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTERNAL_ERROR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `BOOT_DONE`"]
        pub type BOOT_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOT_DONE`"]
        pub struct BOOT_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOT_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `MODULES_UNLOCKED`"]
        pub type MODULES_UNLOCKED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MODULES_UNLOCKED`"]
        pub struct MODULES_UNLOCKED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODULES_UNLOCKED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `SYNTH_NO_LOCK`"]
        pub type SYNTH_NO_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYNTH_NO_LOCK`"]
        pub struct SYNTH_NO_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNTH_NO_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ27`"]
        pub type IRQ27_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ27`"]
        pub struct IRQ27_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ27_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `RX_ABORTED`"]
        pub type RX_ABORTED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_ABORTED`"]
        pub struct RX_ABORTED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ABORTED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `RX_N_DATA_WRITTEN`"]
        pub type RX_N_DATA_WRITTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_N_DATA_WRITTEN`"]
        pub struct RX_N_DATA_WRITTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_N_DATA_WRITTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `RX_DATA_WRITTEN`"]
        pub type RX_DATA_WRITTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_DATA_WRITTEN`"]
        pub struct RX_DATA_WRITTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_DATA_WRITTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RX_ENTRY_DONE`"]
        pub type RX_ENTRY_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_ENTRY_DONE`"]
        pub struct RX_ENTRY_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_ENTRY_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `RX_BUF_FULL`"]
        pub type RX_BUF_FULL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_BUF_FULL`"]
        pub struct RX_BUF_FULL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_BUF_FULL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `RX_CTRL_ACK`"]
        pub type RX_CTRL_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_CTRL_ACK`"]
        pub struct RX_CTRL_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_CTRL_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `RX_CTRL`"]
        pub type RX_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_CTRL`"]
        pub struct RX_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `RX_EMPTY`"]
        pub type RX_EMPTY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_EMPTY`"]
        pub struct RX_EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RX_IGNORED`"]
        pub type RX_IGNORED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_IGNORED`"]
        pub struct RX_IGNORED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_IGNORED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `RX_NOK`"]
        pub type RX_NOK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_NOK`"]
        pub struct RX_NOK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_NOK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RX_OK`"]
        pub type RX_OK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RX_OK`"]
        pub struct RX_OK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RX_OK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ15`"]
        pub type IRQ15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ15`"]
        pub struct IRQ15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ14`"]
        pub type IRQ14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ14`"]
        pub struct IRQ14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ13`"]
        pub type IRQ13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ13`"]
        pub struct IRQ13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `IRQ12`"]
        pub type IRQ12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRQ12`"]
        pub struct IRQ12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRQ12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TX_BUFFER_CHANGED`"]
        pub type TX_BUFFER_CHANGED_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_BUFFER_CHANGED`"]
        pub struct TX_BUFFER_CHANGED_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_BUFFER_CHANGED_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `TX_ENTRY_DONE`"]
        pub type TX_ENTRY_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_ENTRY_DONE`"]
        pub struct TX_ENTRY_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ENTRY_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TX_RETRANS`"]
        pub type TX_RETRANS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_RETRANS`"]
        pub struct TX_RETRANS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_RETRANS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL_ACK_ACK`"]
        pub type TX_CTRL_ACK_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL_ACK_ACK`"]
        pub struct TX_CTRL_ACK_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_ACK_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL_ACK`"]
        pub type TX_CTRL_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL_ACK`"]
        pub struct TX_CTRL_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TX_CTRL`"]
        pub type TX_CTRL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_CTRL`"]
        pub struct TX_CTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_CTRL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TX_ACK`"]
        pub type TX_ACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_ACK`"]
        pub struct TX_ACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_ACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TX_DONE`"]
        pub type TX_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TX_DONE`"]
        pub struct TX_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TX_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `LAST_FG_COMMAND_DONE`"]
        pub type LAST_FG_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LAST_FG_COMMAND_DONE`"]
        pub struct LAST_FG_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_FG_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `FG_COMMAND_DONE`"]
        pub type FG_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FG_COMMAND_DONE`"]
        pub struct FG_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FG_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LAST_COMMAND_DONE`"]
        pub type LAST_COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LAST_COMMAND_DONE`"]
        pub struct LAST_COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LAST_COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `COMMAND_DONE`"]
        pub type COMMAND_DONE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMMAND_DONE`"]
        pub struct COMMAND_DONE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMMAND_DONE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - INTERNAL_ERROR"]
            #[inline(always)]
            pub fn internal_error(&self) -> INTERNAL_ERROR_R {
                INTERNAL_ERROR_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - BOOT_DONE"]
            #[inline(always)]
            pub fn boot_done(&self) -> BOOT_DONE_R {
                BOOT_DONE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - MODULES_UNLOCKED"]
            #[inline(always)]
            pub fn modules_unlocked(&self) -> MODULES_UNLOCKED_R {
                MODULES_UNLOCKED_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - SYNTH_NO_LOCK"]
            #[inline(always)]
            pub fn synth_no_lock(&self) -> SYNTH_NO_LOCK_R {
                SYNTH_NO_LOCK_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - IRQ27"]
            #[inline(always)]
            pub fn irq27(&self) -> IRQ27_R {
                IRQ27_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - RX_ABORTED"]
            #[inline(always)]
            pub fn rx_aborted(&self) -> RX_ABORTED_R {
                RX_ABORTED_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - RX_N_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_n_data_written(&self) -> RX_N_DATA_WRITTEN_R {
                RX_N_DATA_WRITTEN_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - RX_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_data_written(&self) -> RX_DATA_WRITTEN_R {
                RX_DATA_WRITTEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - RX_ENTRY_DONE"]
            #[inline(always)]
            pub fn rx_entry_done(&self) -> RX_ENTRY_DONE_R {
                RX_ENTRY_DONE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - RX_BUF_FULL"]
            #[inline(always)]
            pub fn rx_buf_full(&self) -> RX_BUF_FULL_R {
                RX_BUF_FULL_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - RX_CTRL_ACK"]
            #[inline(always)]
            pub fn rx_ctrl_ack(&self) -> RX_CTRL_ACK_R {
                RX_CTRL_ACK_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - RX_CTRL"]
            #[inline(always)]
            pub fn rx_ctrl(&self) -> RX_CTRL_R {
                RX_CTRL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RX_EMPTY"]
            #[inline(always)]
            pub fn rx_empty(&self) -> RX_EMPTY_R {
                RX_EMPTY_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - RX_IGNORED"]
            #[inline(always)]
            pub fn rx_ignored(&self) -> RX_IGNORED_R {
                RX_IGNORED_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - RX_NOK"]
            #[inline(always)]
            pub fn rx_nok(&self) -> RX_NOK_R {
                RX_NOK_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RX_OK"]
            #[inline(always)]
            pub fn rx_ok(&self) -> RX_OK_R {
                RX_OK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - IRQ15"]
            #[inline(always)]
            pub fn irq15(&self) -> IRQ15_R {
                IRQ15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - IRQ14"]
            #[inline(always)]
            pub fn irq14(&self) -> IRQ14_R {
                IRQ14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - IRQ13"]
            #[inline(always)]
            pub fn irq13(&self) -> IRQ13_R {
                IRQ13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - IRQ12"]
            #[inline(always)]
            pub fn irq12(&self) -> IRQ12_R {
                IRQ12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TX_BUFFER_CHANGED"]
            #[inline(always)]
            pub fn tx_buffer_changed(&self) -> TX_BUFFER_CHANGED_R {
                TX_BUFFER_CHANGED_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - TX_ENTRY_DONE"]
            #[inline(always)]
            pub fn tx_entry_done(&self) -> TX_ENTRY_DONE_R {
                TX_ENTRY_DONE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - TX_RETRANS"]
            #[inline(always)]
            pub fn tx_retrans(&self) -> TX_RETRANS_R {
                TX_RETRANS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TX_CTRL_ACK_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack_ack(&self) -> TX_CTRL_ACK_ACK_R {
                TX_CTRL_ACK_ACK_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TX_CTRL_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack(&self) -> TX_CTRL_ACK_R {
                TX_CTRL_ACK_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TX_CTRL"]
            #[inline(always)]
            pub fn tx_ctrl(&self) -> TX_CTRL_R {
                TX_CTRL_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TX_ACK"]
            #[inline(always)]
            pub fn tx_ack(&self) -> TX_ACK_R {
                TX_ACK_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TX_DONE"]
            #[inline(always)]
            pub fn tx_done(&self) -> TX_DONE_R {
                TX_DONE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - LAST_FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_fg_command_done(&self) -> LAST_FG_COMMAND_DONE_R {
                LAST_FG_COMMAND_DONE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn fg_command_done(&self) -> FG_COMMAND_DONE_R {
                FG_COMMAND_DONE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - LAST_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_command_done(&self) -> LAST_COMMAND_DONE_R {
                LAST_COMMAND_DONE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - COMMAND_DONE"]
            #[inline(always)]
            pub fn command_done(&self) -> COMMAND_DONE_R {
                COMMAND_DONE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - INTERNAL_ERROR"]
            #[inline(always)]
            pub fn internal_error(&mut self) -> INTERNAL_ERROR_W {
                INTERNAL_ERROR_W { w: self }
            }
            #[doc = "Bit 30 - BOOT_DONE"]
            #[inline(always)]
            pub fn boot_done(&mut self) -> BOOT_DONE_W {
                BOOT_DONE_W { w: self }
            }
            #[doc = "Bit 29 - MODULES_UNLOCKED"]
            #[inline(always)]
            pub fn modules_unlocked(&mut self) -> MODULES_UNLOCKED_W {
                MODULES_UNLOCKED_W { w: self }
            }
            #[doc = "Bit 28 - SYNTH_NO_LOCK"]
            #[inline(always)]
            pub fn synth_no_lock(&mut self) -> SYNTH_NO_LOCK_W {
                SYNTH_NO_LOCK_W { w: self }
            }
            #[doc = "Bit 27 - IRQ27"]
            #[inline(always)]
            pub fn irq27(&mut self) -> IRQ27_W {
                IRQ27_W { w: self }
            }
            #[doc = "Bit 26 - RX_ABORTED"]
            #[inline(always)]
            pub fn rx_aborted(&mut self) -> RX_ABORTED_W {
                RX_ABORTED_W { w: self }
            }
            #[doc = "Bit 25 - RX_N_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_n_data_written(&mut self) -> RX_N_DATA_WRITTEN_W {
                RX_N_DATA_WRITTEN_W { w: self }
            }
            #[doc = "Bit 24 - RX_DATA_WRITTEN"]
            #[inline(always)]
            pub fn rx_data_written(&mut self) -> RX_DATA_WRITTEN_W {
                RX_DATA_WRITTEN_W { w: self }
            }
            #[doc = "Bit 23 - RX_ENTRY_DONE"]
            #[inline(always)]
            pub fn rx_entry_done(&mut self) -> RX_ENTRY_DONE_W {
                RX_ENTRY_DONE_W { w: self }
            }
            #[doc = "Bit 22 - RX_BUF_FULL"]
            #[inline(always)]
            pub fn rx_buf_full(&mut self) -> RX_BUF_FULL_W {
                RX_BUF_FULL_W { w: self }
            }
            #[doc = "Bit 21 - RX_CTRL_ACK"]
            #[inline(always)]
            pub fn rx_ctrl_ack(&mut self) -> RX_CTRL_ACK_W {
                RX_CTRL_ACK_W { w: self }
            }
            #[doc = "Bit 20 - RX_CTRL"]
            #[inline(always)]
            pub fn rx_ctrl(&mut self) -> RX_CTRL_W {
                RX_CTRL_W { w: self }
            }
            #[doc = "Bit 19 - RX_EMPTY"]
            #[inline(always)]
            pub fn rx_empty(&mut self) -> RX_EMPTY_W {
                RX_EMPTY_W { w: self }
            }
            #[doc = "Bit 18 - RX_IGNORED"]
            #[inline(always)]
            pub fn rx_ignored(&mut self) -> RX_IGNORED_W {
                RX_IGNORED_W { w: self }
            }
            #[doc = "Bit 17 - RX_NOK"]
            #[inline(always)]
            pub fn rx_nok(&mut self) -> RX_NOK_W {
                RX_NOK_W { w: self }
            }
            #[doc = "Bit 16 - RX_OK"]
            #[inline(always)]
            pub fn rx_ok(&mut self) -> RX_OK_W {
                RX_OK_W { w: self }
            }
            #[doc = "Bit 15 - IRQ15"]
            #[inline(always)]
            pub fn irq15(&mut self) -> IRQ15_W {
                IRQ15_W { w: self }
            }
            #[doc = "Bit 14 - IRQ14"]
            #[inline(always)]
            pub fn irq14(&mut self) -> IRQ14_W {
                IRQ14_W { w: self }
            }
            #[doc = "Bit 13 - IRQ13"]
            #[inline(always)]
            pub fn irq13(&mut self) -> IRQ13_W {
                IRQ13_W { w: self }
            }
            #[doc = "Bit 12 - IRQ12"]
            #[inline(always)]
            pub fn irq12(&mut self) -> IRQ12_W {
                IRQ12_W { w: self }
            }
            #[doc = "Bit 11 - TX_BUFFER_CHANGED"]
            #[inline(always)]
            pub fn tx_buffer_changed(&mut self) -> TX_BUFFER_CHANGED_W {
                TX_BUFFER_CHANGED_W { w: self }
            }
            #[doc = "Bit 10 - TX_ENTRY_DONE"]
            #[inline(always)]
            pub fn tx_entry_done(&mut self) -> TX_ENTRY_DONE_W {
                TX_ENTRY_DONE_W { w: self }
            }
            #[doc = "Bit 9 - TX_RETRANS"]
            #[inline(always)]
            pub fn tx_retrans(&mut self) -> TX_RETRANS_W {
                TX_RETRANS_W { w: self }
            }
            #[doc = "Bit 8 - TX_CTRL_ACK_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack_ack(&mut self) -> TX_CTRL_ACK_ACK_W {
                TX_CTRL_ACK_ACK_W { w: self }
            }
            #[doc = "Bit 7 - TX_CTRL_ACK"]
            #[inline(always)]
            pub fn tx_ctrl_ack(&mut self) -> TX_CTRL_ACK_W {
                TX_CTRL_ACK_W { w: self }
            }
            #[doc = "Bit 6 - TX_CTRL"]
            #[inline(always)]
            pub fn tx_ctrl(&mut self) -> TX_CTRL_W {
                TX_CTRL_W { w: self }
            }
            #[doc = "Bit 5 - TX_ACK"]
            #[inline(always)]
            pub fn tx_ack(&mut self) -> TX_ACK_W {
                TX_ACK_W { w: self }
            }
            #[doc = "Bit 4 - TX_DONE"]
            #[inline(always)]
            pub fn tx_done(&mut self) -> TX_DONE_W {
                TX_DONE_W { w: self }
            }
            #[doc = "Bit 3 - LAST_FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_fg_command_done(&mut self) -> LAST_FG_COMMAND_DONE_W {
                LAST_FG_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 2 - FG_COMMAND_DONE"]
            #[inline(always)]
            pub fn fg_command_done(&mut self) -> FG_COMMAND_DONE_W {
                FG_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 1 - LAST_COMMAND_DONE"]
            #[inline(always)]
            pub fn last_command_done(&mut self) -> LAST_COMMAND_DONE_W {
                LAST_COMMAND_DONE_W { w: self }
            }
            #[doc = "Bit 0 - COMMAND_DONE"]
            #[inline(always)]
            pub fn command_done(&mut self) -> COMMAND_DONE_W {
                COMMAND_DONE_W { w: self }
            }
        }
    }
    #[doc = "Doorbell Command Acknowledgement Interrupt Flag\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rfackifg](rfackifg) module"]
    pub type RFACKIFG = crate::Reg<u32, _RFACKIFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RFACKIFG;
    #[doc = "`read()` method returns [rfackifg::R](rfackifg::R) reader structure"]
    impl crate::Readable for RFACKIFG {}
    #[doc = "`write(|w| ..)` method takes [rfackifg::W](rfackifg::W) writer structure"]
    impl crate::Writable for RFACKIFG {}
    #[doc = "Doorbell Command Acknowledgement Interrupt Flag"]
    pub mod rfackifg {
        #[doc = "Reader of register RFACKIFG"]
        pub type R = crate::R<u32, super::RFACKIFG>;
        #[doc = "Writer for register RFACKIFG"]
        pub type W = crate::W<u32, super::RFACKIFG>;
        #[doc = "Register RFACKIFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::RFACKIFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ACKFLAG`"]
        pub type ACKFLAG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ACKFLAG`"]
        pub struct ACKFLAG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACKFLAG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ACKFLAG"]
            #[inline(always)]
            pub fn ackflag(&self) -> ACKFLAG_R {
                ACKFLAG_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ACKFLAG"]
            #[inline(always)]
            pub fn ackflag(&mut self) -> ACKFLAG_W {
                ACKFLAG_W { w: self }
            }
        }
    }
    #[doc = "RF Core General Purpose Output Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sysgpoctl](sysgpoctl) module"]
    pub type SYSGPOCTL = crate::Reg<u32, _SYSGPOCTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SYSGPOCTL;
    #[doc = "`read()` method returns [sysgpoctl::R](sysgpoctl::R) reader structure"]
    impl crate::Readable for SYSGPOCTL {}
    #[doc = "`write(|w| ..)` method takes [sysgpoctl::W](sysgpoctl::W) writer structure"]
    impl crate::Writable for SYSGPOCTL {}
    #[doc = "RF Core General Purpose Output Control"]
    pub mod sysgpoctl {
        #[doc = "Reader of register SYSGPOCTL"]
        pub type R = crate::R<u32, super::SYSGPOCTL>;
        #[doc = "Writer for register SYSGPOCTL"]
        pub type W = crate::W<u32, super::SYSGPOCTL>;
        #[doc = "Register SYSGPOCTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::SYSGPOCTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `GPOCTL3`"]
        pub type GPOCTL3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOCTL3`"]
        pub struct GPOCTL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOCTL3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `GPOCTL2`"]
        pub type GPOCTL2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOCTL2`"]
        pub struct GPOCTL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOCTL2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `GPOCTL1`"]
        pub type GPOCTL1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOCTL1`"]
        pub struct GPOCTL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOCTL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `GPOCTL0`"]
        pub type GPOCTL0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOCTL0`"]
        pub struct GPOCTL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOCTL0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - GPOCTL3"]
            #[inline(always)]
            pub fn gpoctl3(&self) -> GPOCTL3_R {
                GPOCTL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - GPOCTL2"]
            #[inline(always)]
            pub fn gpoctl2(&self) -> GPOCTL2_R {
                GPOCTL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - GPOCTL1"]
            #[inline(always)]
            pub fn gpoctl1(&self) -> GPOCTL1_R {
                GPOCTL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - GPOCTL0"]
            #[inline(always)]
            pub fn gpoctl0(&self) -> GPOCTL0_R {
                GPOCTL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - GPOCTL3"]
            #[inline(always)]
            pub fn gpoctl3(&mut self) -> GPOCTL3_W {
                GPOCTL3_W { w: self }
            }
            #[doc = "Bits 8:11 - GPOCTL2"]
            #[inline(always)]
            pub fn gpoctl2(&mut self) -> GPOCTL2_W {
                GPOCTL2_W { w: self }
            }
            #[doc = "Bits 4:7 - GPOCTL1"]
            #[inline(always)]
            pub fn gpoctl1(&mut self) -> GPOCTL1_W {
                GPOCTL1_W { w: self }
            }
            #[doc = "Bits 0:3 - GPOCTL0"]
            #[inline(always)]
            pub fn gpoctl0(&mut self) -> GPOCTL0_W {
                GPOCTL0_W { w: self }
            }
        }
    }
}
#[doc = "RF Core Power Management"]
pub struct RFC_PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RFC_PWR {}
impl RFC_PWR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rfc_pwr::RegisterBlock {
        0x4004_0000 as *const _
    }
}
impl Deref for RFC_PWR {
    type Target = rfc_pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RFC_PWR::ptr() }
    }
}
#[doc = "RF Core Power Management"]
pub mod rfc_pwr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - RF Core Power Management and Clock Enable"]
        pub pwmclken: PWMCLKEN,
    }
    #[doc = "RF Core Power Management and Clock Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pwmclken](pwmclken) module"]
    pub type PWMCLKEN = crate::Reg<u32, _PWMCLKEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PWMCLKEN;
    #[doc = "`read()` method returns [pwmclken::R](pwmclken::R) reader structure"]
    impl crate::Readable for PWMCLKEN {}
    #[doc = "`write(|w| ..)` method takes [pwmclken::W](pwmclken::W) writer structure"]
    impl crate::Writable for PWMCLKEN {}
    #[doc = "RF Core Power Management and Clock Enable"]
    pub mod pwmclken {
        #[doc = "Reader of register PWMCLKEN"]
        pub type R = crate::R<u32, super::PWMCLKEN>;
        #[doc = "Writer for register PWMCLKEN"]
        pub type W = crate::W<u32, super::PWMCLKEN>;
        #[doc = "Register PWMCLKEN `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::PWMCLKEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `RFCTRC`"]
        pub type RFCTRC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFCTRC`"]
        pub struct RFCTRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFCTRC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `FSCA`"]
        pub type FSCA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSCA`"]
        pub struct FSCA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSCA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PHA`"]
        pub type PHA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PHA`"]
        pub struct PHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `RAT`"]
        pub type RAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAT`"]
        pub struct RAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RFERAM`"]
        pub type RFERAM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFERAM`"]
        pub struct RFERAM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFERAM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RFE`"]
        pub type RFE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFE`"]
        pub struct RFE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `MDMRAM`"]
        pub type MDMRAM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDMRAM`"]
        pub struct MDMRAM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDMRAM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MDM`"]
        pub type MDM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MDM`"]
        pub struct MDM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MDM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CPERAM`"]
        pub type CPERAM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPERAM`"]
        pub struct CPERAM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPERAM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CPE`"]
        pub type CPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPE`"]
        pub struct CPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RFC`"]
        pub type RFC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RFC`"]
        pub struct RFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RFC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - RFCTRC"]
            #[inline(always)]
            pub fn rfctrc(&self) -> RFCTRC_R {
                RFCTRC_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - FSCA"]
            #[inline(always)]
            pub fn fsca(&self) -> FSCA_R {
                FSCA_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PHA"]
            #[inline(always)]
            pub fn pha(&self) -> PHA_R {
                PHA_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - RAT"]
            #[inline(always)]
            pub fn rat(&self) -> RAT_R {
                RAT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RFERAM"]
            #[inline(always)]
            pub fn rferam(&self) -> RFERAM_R {
                RFERAM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RFE"]
            #[inline(always)]
            pub fn rfe(&self) -> RFE_R {
                RFE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - MDMRAM"]
            #[inline(always)]
            pub fn mdmram(&self) -> MDMRAM_R {
                MDMRAM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - MDM"]
            #[inline(always)]
            pub fn mdm(&self) -> MDM_R {
                MDM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CPERAM"]
            #[inline(always)]
            pub fn cperam(&self) -> CPERAM_R {
                CPERAM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CPE"]
            #[inline(always)]
            pub fn cpe(&self) -> CPE_R {
                CPE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RFC"]
            #[inline(always)]
            pub fn rfc(&self) -> RFC_R {
                RFC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - RFCTRC"]
            #[inline(always)]
            pub fn rfctrc(&mut self) -> RFCTRC_W {
                RFCTRC_W { w: self }
            }
            #[doc = "Bit 9 - FSCA"]
            #[inline(always)]
            pub fn fsca(&mut self) -> FSCA_W {
                FSCA_W { w: self }
            }
            #[doc = "Bit 8 - PHA"]
            #[inline(always)]
            pub fn pha(&mut self) -> PHA_W {
                PHA_W { w: self }
            }
            #[doc = "Bit 7 - RAT"]
            #[inline(always)]
            pub fn rat(&mut self) -> RAT_W {
                RAT_W { w: self }
            }
            #[doc = "Bit 6 - RFERAM"]
            #[inline(always)]
            pub fn rferam(&mut self) -> RFERAM_W {
                RFERAM_W { w: self }
            }
            #[doc = "Bit 5 - RFE"]
            #[inline(always)]
            pub fn rfe(&mut self) -> RFE_W {
                RFE_W { w: self }
            }
            #[doc = "Bit 4 - MDMRAM"]
            #[inline(always)]
            pub fn mdmram(&mut self) -> MDMRAM_W {
                MDMRAM_W { w: self }
            }
            #[doc = "Bit 3 - MDM"]
            #[inline(always)]
            pub fn mdm(&mut self) -> MDM_W {
                MDM_W { w: self }
            }
            #[doc = "Bit 2 - CPERAM"]
            #[inline(always)]
            pub fn cperam(&mut self) -> CPERAM_W {
                CPERAM_W { w: self }
            }
            #[doc = "Bit 1 - CPE"]
            #[inline(always)]
            pub fn cpe(&mut self) -> CPE_W {
                CPE_W { w: self }
            }
            #[doc = "Bit 0 - RFC"]
            #[inline(always)]
            pub fn rfc(&mut self) -> RFC_W {
                RFC_W { w: self }
            }
        }
    }
}
#[doc = "RF Core Radio Timer"]
pub struct RFC_RAT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RFC_RAT {}
impl RFC_RAT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rfc_rat::RegisterBlock {
        0x4004_3000 as *const _
    }
}
impl Deref for RFC_RAT {
    type Target = rfc_rat::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RFC_RAT::ptr() }
    }
}
#[doc = "RF Core Radio Timer"]
pub mod rfc_rat {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 4usize],
        #[doc = "0x04 - Radio Timer Counter Value"]
        pub ratcnt: RATCNT,
        _reserved1: [u8; 120usize],
        #[doc = "0x80 - Timer Channel 0 Capture/Compare Register"]
        pub ratch0val: RATCH0VAL,
        #[doc = "0x84 - Timer Channel 1 Capture/Compare Register"]
        pub ratch1val: RATCH1VAL,
        #[doc = "0x88 - Timer Channel 2 Capture/Compare Register"]
        pub ratch2val: RATCH2VAL,
        #[doc = "0x8c - Timer Channel 3 Capture/Compare Register"]
        pub ratch3val: RATCH3VAL,
        #[doc = "0x90 - Timer Channel 4 Capture/Compare Register"]
        pub ratch4val: RATCH4VAL,
        #[doc = "0x94 - Timer Channel 5 Capture/Compare Register"]
        pub ratch5val: RATCH5VAL,
        #[doc = "0x98 - Timer Channel 6 Capture/Compare Register"]
        pub ratch6val: RATCH6VAL,
        #[doc = "0x9c - Timer Channel 7 Capture/Compare Register"]
        pub ratch7val: RATCH7VAL,
    }
    #[doc = "Radio Timer Counter Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratcnt](ratcnt) module"]
    pub type RATCNT = crate::Reg<u32, _RATCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCNT;
    #[doc = "`read()` method returns [ratcnt::R](ratcnt::R) reader structure"]
    impl crate::Readable for RATCNT {}
    #[doc = "`write(|w| ..)` method takes [ratcnt::W](ratcnt::W) writer structure"]
    impl crate::Writable for RATCNT {}
    #[doc = "Radio Timer Counter Value"]
    pub mod ratcnt {
        #[doc = "Reader of register RATCNT"]
        pub type R = crate::R<u32, super::RATCNT>;
        #[doc = "Writer for register RATCNT"]
        pub type W = crate::W<u32, super::RATCNT>;
        #[doc = "Register RATCNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CNT"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CNT"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 0 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch0val](ratch0val) module"]
    pub type RATCH0VAL = crate::Reg<u32, _RATCH0VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH0VAL;
    #[doc = "`read()` method returns [ratch0val::R](ratch0val::R) reader structure"]
    impl crate::Readable for RATCH0VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch0val::W](ratch0val::W) writer structure"]
    impl crate::Writable for RATCH0VAL {}
    #[doc = "Timer Channel 0 Capture/Compare Register"]
    pub mod ratch0val {
        #[doc = "Reader of register RATCH0VAL"]
        pub type R = crate::R<u32, super::RATCH0VAL>;
        #[doc = "Writer for register RATCH0VAL"]
        pub type W = crate::W<u32, super::RATCH0VAL>;
        #[doc = "Register RATCH0VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH0VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 1 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch1val](ratch1val) module"]
    pub type RATCH1VAL = crate::Reg<u32, _RATCH1VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH1VAL;
    #[doc = "`read()` method returns [ratch1val::R](ratch1val::R) reader structure"]
    impl crate::Readable for RATCH1VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch1val::W](ratch1val::W) writer structure"]
    impl crate::Writable for RATCH1VAL {}
    #[doc = "Timer Channel 1 Capture/Compare Register"]
    pub mod ratch1val {
        #[doc = "Reader of register RATCH1VAL"]
        pub type R = crate::R<u32, super::RATCH1VAL>;
        #[doc = "Writer for register RATCH1VAL"]
        pub type W = crate::W<u32, super::RATCH1VAL>;
        #[doc = "Register RATCH1VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH1VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 2 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch2val](ratch2val) module"]
    pub type RATCH2VAL = crate::Reg<u32, _RATCH2VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH2VAL;
    #[doc = "`read()` method returns [ratch2val::R](ratch2val::R) reader structure"]
    impl crate::Readable for RATCH2VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch2val::W](ratch2val::W) writer structure"]
    impl crate::Writable for RATCH2VAL {}
    #[doc = "Timer Channel 2 Capture/Compare Register"]
    pub mod ratch2val {
        #[doc = "Reader of register RATCH2VAL"]
        pub type R = crate::R<u32, super::RATCH2VAL>;
        #[doc = "Writer for register RATCH2VAL"]
        pub type W = crate::W<u32, super::RATCH2VAL>;
        #[doc = "Register RATCH2VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH2VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 3 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch3val](ratch3val) module"]
    pub type RATCH3VAL = crate::Reg<u32, _RATCH3VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH3VAL;
    #[doc = "`read()` method returns [ratch3val::R](ratch3val::R) reader structure"]
    impl crate::Readable for RATCH3VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch3val::W](ratch3val::W) writer structure"]
    impl crate::Writable for RATCH3VAL {}
    #[doc = "Timer Channel 3 Capture/Compare Register"]
    pub mod ratch3val {
        #[doc = "Reader of register RATCH3VAL"]
        pub type R = crate::R<u32, super::RATCH3VAL>;
        #[doc = "Writer for register RATCH3VAL"]
        pub type W = crate::W<u32, super::RATCH3VAL>;
        #[doc = "Register RATCH3VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH3VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 4 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch4val](ratch4val) module"]
    pub type RATCH4VAL = crate::Reg<u32, _RATCH4VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH4VAL;
    #[doc = "`read()` method returns [ratch4val::R](ratch4val::R) reader structure"]
    impl crate::Readable for RATCH4VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch4val::W](ratch4val::W) writer structure"]
    impl crate::Writable for RATCH4VAL {}
    #[doc = "Timer Channel 4 Capture/Compare Register"]
    pub mod ratch4val {
        #[doc = "Reader of register RATCH4VAL"]
        pub type R = crate::R<u32, super::RATCH4VAL>;
        #[doc = "Writer for register RATCH4VAL"]
        pub type W = crate::W<u32, super::RATCH4VAL>;
        #[doc = "Register RATCH4VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH4VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 5 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch5val](ratch5val) module"]
    pub type RATCH5VAL = crate::Reg<u32, _RATCH5VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH5VAL;
    #[doc = "`read()` method returns [ratch5val::R](ratch5val::R) reader structure"]
    impl crate::Readable for RATCH5VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch5val::W](ratch5val::W) writer structure"]
    impl crate::Writable for RATCH5VAL {}
    #[doc = "Timer Channel 5 Capture/Compare Register"]
    pub mod ratch5val {
        #[doc = "Reader of register RATCH5VAL"]
        pub type R = crate::R<u32, super::RATCH5VAL>;
        #[doc = "Writer for register RATCH5VAL"]
        pub type W = crate::W<u32, super::RATCH5VAL>;
        #[doc = "Register RATCH5VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH5VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 6 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch6val](ratch6val) module"]
    pub type RATCH6VAL = crate::Reg<u32, _RATCH6VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH6VAL;
    #[doc = "`read()` method returns [ratch6val::R](ratch6val::R) reader structure"]
    impl crate::Readable for RATCH6VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch6val::W](ratch6val::W) writer structure"]
    impl crate::Writable for RATCH6VAL {}
    #[doc = "Timer Channel 6 Capture/Compare Register"]
    pub mod ratch6val {
        #[doc = "Reader of register RATCH6VAL"]
        pub type R = crate::R<u32, super::RATCH6VAL>;
        #[doc = "Writer for register RATCH6VAL"]
        pub type W = crate::W<u32, super::RATCH6VAL>;
        #[doc = "Register RATCH6VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH6VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
    #[doc = "Timer Channel 7 Capture/Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ratch7val](ratch7val) module"]
    pub type RATCH7VAL = crate::Reg<u32, _RATCH7VAL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RATCH7VAL;
    #[doc = "`read()` method returns [ratch7val::R](ratch7val::R) reader structure"]
    impl crate::Readable for RATCH7VAL {}
    #[doc = "`write(|w| ..)` method takes [ratch7val::W](ratch7val::W) writer structure"]
    impl crate::Writable for RATCH7VAL {}
    #[doc = "Timer Channel 7 Capture/Compare Register"]
    pub mod ratch7val {
        #[doc = "Reader of register RATCH7VAL"]
        pub type R = crate::R<u32, super::RATCH7VAL>;
        #[doc = "Writer for register RATCH7VAL"]
        pub type W = crate::W<u32, super::RATCH7VAL>;
        #[doc = "Register RATCH7VAL `reset()`'s with value 0"]
        impl crate::ResetValue for super::RATCH7VAL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `VAL`"]
        pub type VAL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `VAL`"]
        pub struct VAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VAL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&self) -> VAL_R {
                VAL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - VAL"]
            #[inline(always)]
            pub fn val(&mut self) -> VAL_W {
                VAL_W { w: self }
            }
        }
    }
}
#[doc = "MCU Semaphore Module This module provides 32 binary semaphores. The state of a binary semaphore is either taken or available. A semaphore does not implement any ownership attribute. Still, a semaphore can be used to handle mutual exclusion scenarios."]
pub struct SMPH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SMPH {}
impl SMPH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const smph::RegisterBlock {
        0x4008_4000 as *const _
    }
}
impl Deref for SMPH {
    type Target = smph::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SMPH::ptr() }
    }
}
#[doc = "MCU Semaphore Module This module provides 32 binary semaphores. The state of a binary semaphore is either taken or available. A semaphore does not implement any ownership attribute. Still, a semaphore can be used to handle mutual exclusion scenarios."]
pub mod smph {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - MCU SEMAPHORE 0"]
        pub smph0: SMPH0,
        #[doc = "0x04 - MCU SEMAPHORE 1"]
        pub smph1: SMPH1,
        #[doc = "0x08 - MCU SEMAPHORE 2"]
        pub smph2: SMPH2,
        #[doc = "0x0c - MCU SEMAPHORE 3"]
        pub smph3: SMPH3,
        #[doc = "0x10 - MCU SEMAPHORE 4"]
        pub smph4: SMPH4,
        #[doc = "0x14 - MCU SEMAPHORE 5"]
        pub smph5: SMPH5,
        #[doc = "0x18 - MCU SEMAPHORE 6"]
        pub smph6: SMPH6,
        #[doc = "0x1c - MCU SEMAPHORE 7"]
        pub smph7: SMPH7,
        #[doc = "0x20 - MCU SEMAPHORE 8"]
        pub smph8: SMPH8,
        #[doc = "0x24 - MCU SEMAPHORE 9"]
        pub smph9: SMPH9,
        #[doc = "0x28 - MCU SEMAPHORE 10"]
        pub smph10: SMPH10,
        #[doc = "0x2c - MCU SEMAPHORE 11"]
        pub smph11: SMPH11,
        #[doc = "0x30 - MCU SEMAPHORE 12"]
        pub smph12: SMPH12,
        #[doc = "0x34 - MCU SEMAPHORE 13"]
        pub smph13: SMPH13,
        #[doc = "0x38 - MCU SEMAPHORE 14"]
        pub smph14: SMPH14,
        #[doc = "0x3c - MCU SEMAPHORE 15"]
        pub smph15: SMPH15,
        #[doc = "0x40 - MCU SEMAPHORE 16"]
        pub smph16: SMPH16,
        #[doc = "0x44 - MCU SEMAPHORE 17"]
        pub smph17: SMPH17,
        #[doc = "0x48 - MCU SEMAPHORE 18"]
        pub smph18: SMPH18,
        #[doc = "0x4c - MCU SEMAPHORE 19"]
        pub smph19: SMPH19,
        #[doc = "0x50 - MCU SEMAPHORE 20"]
        pub smph20: SMPH20,
        #[doc = "0x54 - MCU SEMAPHORE 21"]
        pub smph21: SMPH21,
        #[doc = "0x58 - MCU SEMAPHORE 22"]
        pub smph22: SMPH22,
        #[doc = "0x5c - MCU SEMAPHORE 23"]
        pub smph23: SMPH23,
        #[doc = "0x60 - MCU SEMAPHORE 24"]
        pub smph24: SMPH24,
        #[doc = "0x64 - MCU SEMAPHORE 25"]
        pub smph25: SMPH25,
        #[doc = "0x68 - MCU SEMAPHORE 26"]
        pub smph26: SMPH26,
        #[doc = "0x6c - MCU SEMAPHORE 27"]
        pub smph27: SMPH27,
        #[doc = "0x70 - MCU SEMAPHORE 28"]
        pub smph28: SMPH28,
        #[doc = "0x74 - MCU SEMAPHORE 29"]
        pub smph29: SMPH29,
        #[doc = "0x78 - MCU SEMAPHORE 30"]
        pub smph30: SMPH30,
        #[doc = "0x7c - MCU SEMAPHORE 31"]
        pub smph31: SMPH31,
        _reserved32: [u8; 1920usize],
        #[doc = "0x800 - MCU SEMAPHORE 0 ALIAS"]
        pub peek0: PEEK0,
        #[doc = "0x804 - MCU SEMAPHORE 1 ALIAS"]
        pub peek1: PEEK1,
        #[doc = "0x808 - MCU SEMAPHORE 2 ALIAS"]
        pub peek2: PEEK2,
        #[doc = "0x80c - MCU SEMAPHORE 3 ALIAS"]
        pub peek3: PEEK3,
        #[doc = "0x810 - MCU SEMAPHORE 4 ALIAS"]
        pub peek4: PEEK4,
        #[doc = "0x814 - MCU SEMAPHORE 5 ALIAS"]
        pub peek5: PEEK5,
        #[doc = "0x818 - MCU SEMAPHORE 6 ALIAS"]
        pub peek6: PEEK6,
        #[doc = "0x81c - MCU SEMAPHORE 7 ALIAS"]
        pub peek7: PEEK7,
        #[doc = "0x820 - MCU SEMAPHORE 8 ALIAS"]
        pub peek8: PEEK8,
        #[doc = "0x824 - MCU SEMAPHORE 9 ALIAS"]
        pub peek9: PEEK9,
        #[doc = "0x828 - MCU SEMAPHORE 10 ALIAS"]
        pub peek10: PEEK10,
        #[doc = "0x82c - MCU SEMAPHORE 11 ALIAS"]
        pub peek11: PEEK11,
        #[doc = "0x830 - MCU SEMAPHORE 12 ALIAS"]
        pub peek12: PEEK12,
        #[doc = "0x834 - MCU SEMAPHORE 13 ALIAS"]
        pub peek13: PEEK13,
        #[doc = "0x838 - MCU SEMAPHORE 14 ALIAS"]
        pub peek14: PEEK14,
        #[doc = "0x83c - MCU SEMAPHORE 15 ALIAS"]
        pub peek15: PEEK15,
        #[doc = "0x840 - MCU SEMAPHORE 16 ALIAS"]
        pub peek16: PEEK16,
        #[doc = "0x844 - MCU SEMAPHORE 17 ALIAS"]
        pub peek17: PEEK17,
        #[doc = "0x848 - MCU SEMAPHORE 18 ALIAS"]
        pub peek18: PEEK18,
        #[doc = "0x84c - MCU SEMAPHORE 19 ALIAS"]
        pub peek19: PEEK19,
        #[doc = "0x850 - MCU SEMAPHORE 20 ALIAS"]
        pub peek20: PEEK20,
        #[doc = "0x854 - MCU SEMAPHORE 21 ALIAS"]
        pub peek21: PEEK21,
        #[doc = "0x858 - MCU SEMAPHORE 22 ALIAS"]
        pub peek22: PEEK22,
        #[doc = "0x85c - MCU SEMAPHORE 23 ALIAS"]
        pub peek23: PEEK23,
        #[doc = "0x860 - MCU SEMAPHORE 24 ALIAS"]
        pub peek24: PEEK24,
        #[doc = "0x864 - MCU SEMAPHORE 25 ALIAS"]
        pub peek25: PEEK25,
        #[doc = "0x868 - MCU SEMAPHORE 26 ALIAS"]
        pub peek26: PEEK26,
        #[doc = "0x86c - MCU SEMAPHORE 27 ALIAS"]
        pub peek27: PEEK27,
        #[doc = "0x870 - MCU SEMAPHORE 28 ALIAS"]
        pub peek28: PEEK28,
        #[doc = "0x874 - MCU SEMAPHORE 29 ALIAS"]
        pub peek29: PEEK29,
        #[doc = "0x878 - MCU SEMAPHORE 30 ALIAS"]
        pub peek30: PEEK30,
        #[doc = "0x87c - MCU SEMAPHORE 31 ALIAS"]
        pub peek31: PEEK31,
    }
    #[doc = "MCU SEMAPHORE 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph0](smph0) module"]
    pub type SMPH0 = crate::Reg<u32, _SMPH0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH0;
    #[doc = "`read()` method returns [smph0::R](smph0::R) reader structure"]
    impl crate::Readable for SMPH0 {}
    #[doc = "`write(|w| ..)` method takes [smph0::W](smph0::W) writer structure"]
    impl crate::Writable for SMPH0 {}
    #[doc = "MCU SEMAPHORE 0"]
    pub mod smph0 {
        #[doc = "Reader of register SMPH0"]
        pub type R = crate::R<u32, super::SMPH0>;
        #[doc = "Writer for register SMPH0"]
        pub type W = crate::W<u32, super::SMPH0>;
        #[doc = "Register SMPH0 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph1](smph1) module"]
    pub type SMPH1 = crate::Reg<u32, _SMPH1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH1;
    #[doc = "`read()` method returns [smph1::R](smph1::R) reader structure"]
    impl crate::Readable for SMPH1 {}
    #[doc = "`write(|w| ..)` method takes [smph1::W](smph1::W) writer structure"]
    impl crate::Writable for SMPH1 {}
    #[doc = "MCU SEMAPHORE 1"]
    pub mod smph1 {
        #[doc = "Reader of register SMPH1"]
        pub type R = crate::R<u32, super::SMPH1>;
        #[doc = "Writer for register SMPH1"]
        pub type W = crate::W<u32, super::SMPH1>;
        #[doc = "Register SMPH1 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph2](smph2) module"]
    pub type SMPH2 = crate::Reg<u32, _SMPH2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH2;
    #[doc = "`read()` method returns [smph2::R](smph2::R) reader structure"]
    impl crate::Readable for SMPH2 {}
    #[doc = "`write(|w| ..)` method takes [smph2::W](smph2::W) writer structure"]
    impl crate::Writable for SMPH2 {}
    #[doc = "MCU SEMAPHORE 2"]
    pub mod smph2 {
        #[doc = "Reader of register SMPH2"]
        pub type R = crate::R<u32, super::SMPH2>;
        #[doc = "Writer for register SMPH2"]
        pub type W = crate::W<u32, super::SMPH2>;
        #[doc = "Register SMPH2 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph3](smph3) module"]
    pub type SMPH3 = crate::Reg<u32, _SMPH3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH3;
    #[doc = "`read()` method returns [smph3::R](smph3::R) reader structure"]
    impl crate::Readable for SMPH3 {}
    #[doc = "`write(|w| ..)` method takes [smph3::W](smph3::W) writer structure"]
    impl crate::Writable for SMPH3 {}
    #[doc = "MCU SEMAPHORE 3"]
    pub mod smph3 {
        #[doc = "Reader of register SMPH3"]
        pub type R = crate::R<u32, super::SMPH3>;
        #[doc = "Writer for register SMPH3"]
        pub type W = crate::W<u32, super::SMPH3>;
        #[doc = "Register SMPH3 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph4](smph4) module"]
    pub type SMPH4 = crate::Reg<u32, _SMPH4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH4;
    #[doc = "`read()` method returns [smph4::R](smph4::R) reader structure"]
    impl crate::Readable for SMPH4 {}
    #[doc = "`write(|w| ..)` method takes [smph4::W](smph4::W) writer structure"]
    impl crate::Writable for SMPH4 {}
    #[doc = "MCU SEMAPHORE 4"]
    pub mod smph4 {
        #[doc = "Reader of register SMPH4"]
        pub type R = crate::R<u32, super::SMPH4>;
        #[doc = "Writer for register SMPH4"]
        pub type W = crate::W<u32, super::SMPH4>;
        #[doc = "Register SMPH4 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 5\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph5](smph5) module"]
    pub type SMPH5 = crate::Reg<u32, _SMPH5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH5;
    #[doc = "`read()` method returns [smph5::R](smph5::R) reader structure"]
    impl crate::Readable for SMPH5 {}
    #[doc = "`write(|w| ..)` method takes [smph5::W](smph5::W) writer structure"]
    impl crate::Writable for SMPH5 {}
    #[doc = "MCU SEMAPHORE 5"]
    pub mod smph5 {
        #[doc = "Reader of register SMPH5"]
        pub type R = crate::R<u32, super::SMPH5>;
        #[doc = "Writer for register SMPH5"]
        pub type W = crate::W<u32, super::SMPH5>;
        #[doc = "Register SMPH5 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 6\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph6](smph6) module"]
    pub type SMPH6 = crate::Reg<u32, _SMPH6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH6;
    #[doc = "`read()` method returns [smph6::R](smph6::R) reader structure"]
    impl crate::Readable for SMPH6 {}
    #[doc = "`write(|w| ..)` method takes [smph6::W](smph6::W) writer structure"]
    impl crate::Writable for SMPH6 {}
    #[doc = "MCU SEMAPHORE 6"]
    pub mod smph6 {
        #[doc = "Reader of register SMPH6"]
        pub type R = crate::R<u32, super::SMPH6>;
        #[doc = "Writer for register SMPH6"]
        pub type W = crate::W<u32, super::SMPH6>;
        #[doc = "Register SMPH6 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 7\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph7](smph7) module"]
    pub type SMPH7 = crate::Reg<u32, _SMPH7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH7;
    #[doc = "`read()` method returns [smph7::R](smph7::R) reader structure"]
    impl crate::Readable for SMPH7 {}
    #[doc = "`write(|w| ..)` method takes [smph7::W](smph7::W) writer structure"]
    impl crate::Writable for SMPH7 {}
    #[doc = "MCU SEMAPHORE 7"]
    pub mod smph7 {
        #[doc = "Reader of register SMPH7"]
        pub type R = crate::R<u32, super::SMPH7>;
        #[doc = "Writer for register SMPH7"]
        pub type W = crate::W<u32, super::SMPH7>;
        #[doc = "Register SMPH7 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH7 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 8\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph8](smph8) module"]
    pub type SMPH8 = crate::Reg<u32, _SMPH8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH8;
    #[doc = "`read()` method returns [smph8::R](smph8::R) reader structure"]
    impl crate::Readable for SMPH8 {}
    #[doc = "`write(|w| ..)` method takes [smph8::W](smph8::W) writer structure"]
    impl crate::Writable for SMPH8 {}
    #[doc = "MCU SEMAPHORE 8"]
    pub mod smph8 {
        #[doc = "Reader of register SMPH8"]
        pub type R = crate::R<u32, super::SMPH8>;
        #[doc = "Writer for register SMPH8"]
        pub type W = crate::W<u32, super::SMPH8>;
        #[doc = "Register SMPH8 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH8 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 9\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph9](smph9) module"]
    pub type SMPH9 = crate::Reg<u32, _SMPH9>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH9;
    #[doc = "`read()` method returns [smph9::R](smph9::R) reader structure"]
    impl crate::Readable for SMPH9 {}
    #[doc = "`write(|w| ..)` method takes [smph9::W](smph9::W) writer structure"]
    impl crate::Writable for SMPH9 {}
    #[doc = "MCU SEMAPHORE 9"]
    pub mod smph9 {
        #[doc = "Reader of register SMPH9"]
        pub type R = crate::R<u32, super::SMPH9>;
        #[doc = "Writer for register SMPH9"]
        pub type W = crate::W<u32, super::SMPH9>;
        #[doc = "Register SMPH9 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH9 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 10\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph10](smph10) module"]
    pub type SMPH10 = crate::Reg<u32, _SMPH10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH10;
    #[doc = "`read()` method returns [smph10::R](smph10::R) reader structure"]
    impl crate::Readable for SMPH10 {}
    #[doc = "`write(|w| ..)` method takes [smph10::W](smph10::W) writer structure"]
    impl crate::Writable for SMPH10 {}
    #[doc = "MCU SEMAPHORE 10"]
    pub mod smph10 {
        #[doc = "Reader of register SMPH10"]
        pub type R = crate::R<u32, super::SMPH10>;
        #[doc = "Writer for register SMPH10"]
        pub type W = crate::W<u32, super::SMPH10>;
        #[doc = "Register SMPH10 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH10 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 11\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph11](smph11) module"]
    pub type SMPH11 = crate::Reg<u32, _SMPH11>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH11;
    #[doc = "`read()` method returns [smph11::R](smph11::R) reader structure"]
    impl crate::Readable for SMPH11 {}
    #[doc = "`write(|w| ..)` method takes [smph11::W](smph11::W) writer structure"]
    impl crate::Writable for SMPH11 {}
    #[doc = "MCU SEMAPHORE 11"]
    pub mod smph11 {
        #[doc = "Reader of register SMPH11"]
        pub type R = crate::R<u32, super::SMPH11>;
        #[doc = "Writer for register SMPH11"]
        pub type W = crate::W<u32, super::SMPH11>;
        #[doc = "Register SMPH11 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH11 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 12\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph12](smph12) module"]
    pub type SMPH12 = crate::Reg<u32, _SMPH12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH12;
    #[doc = "`read()` method returns [smph12::R](smph12::R) reader structure"]
    impl crate::Readable for SMPH12 {}
    #[doc = "`write(|w| ..)` method takes [smph12::W](smph12::W) writer structure"]
    impl crate::Writable for SMPH12 {}
    #[doc = "MCU SEMAPHORE 12"]
    pub mod smph12 {
        #[doc = "Reader of register SMPH12"]
        pub type R = crate::R<u32, super::SMPH12>;
        #[doc = "Writer for register SMPH12"]
        pub type W = crate::W<u32, super::SMPH12>;
        #[doc = "Register SMPH12 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH12 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 13\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph13](smph13) module"]
    pub type SMPH13 = crate::Reg<u32, _SMPH13>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH13;
    #[doc = "`read()` method returns [smph13::R](smph13::R) reader structure"]
    impl crate::Readable for SMPH13 {}
    #[doc = "`write(|w| ..)` method takes [smph13::W](smph13::W) writer structure"]
    impl crate::Writable for SMPH13 {}
    #[doc = "MCU SEMAPHORE 13"]
    pub mod smph13 {
        #[doc = "Reader of register SMPH13"]
        pub type R = crate::R<u32, super::SMPH13>;
        #[doc = "Writer for register SMPH13"]
        pub type W = crate::W<u32, super::SMPH13>;
        #[doc = "Register SMPH13 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH13 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 14\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph14](smph14) module"]
    pub type SMPH14 = crate::Reg<u32, _SMPH14>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH14;
    #[doc = "`read()` method returns [smph14::R](smph14::R) reader structure"]
    impl crate::Readable for SMPH14 {}
    #[doc = "`write(|w| ..)` method takes [smph14::W](smph14::W) writer structure"]
    impl crate::Writable for SMPH14 {}
    #[doc = "MCU SEMAPHORE 14"]
    pub mod smph14 {
        #[doc = "Reader of register SMPH14"]
        pub type R = crate::R<u32, super::SMPH14>;
        #[doc = "Writer for register SMPH14"]
        pub type W = crate::W<u32, super::SMPH14>;
        #[doc = "Register SMPH14 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH14 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 15\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph15](smph15) module"]
    pub type SMPH15 = crate::Reg<u32, _SMPH15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH15;
    #[doc = "`read()` method returns [smph15::R](smph15::R) reader structure"]
    impl crate::Readable for SMPH15 {}
    #[doc = "`write(|w| ..)` method takes [smph15::W](smph15::W) writer structure"]
    impl crate::Writable for SMPH15 {}
    #[doc = "MCU SEMAPHORE 15"]
    pub mod smph15 {
        #[doc = "Reader of register SMPH15"]
        pub type R = crate::R<u32, super::SMPH15>;
        #[doc = "Writer for register SMPH15"]
        pub type W = crate::W<u32, super::SMPH15>;
        #[doc = "Register SMPH15 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH15 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 16\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph16](smph16) module"]
    pub type SMPH16 = crate::Reg<u32, _SMPH16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH16;
    #[doc = "`read()` method returns [smph16::R](smph16::R) reader structure"]
    impl crate::Readable for SMPH16 {}
    #[doc = "`write(|w| ..)` method takes [smph16::W](smph16::W) writer structure"]
    impl crate::Writable for SMPH16 {}
    #[doc = "MCU SEMAPHORE 16"]
    pub mod smph16 {
        #[doc = "Reader of register SMPH16"]
        pub type R = crate::R<u32, super::SMPH16>;
        #[doc = "Writer for register SMPH16"]
        pub type W = crate::W<u32, super::SMPH16>;
        #[doc = "Register SMPH16 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH16 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 17\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph17](smph17) module"]
    pub type SMPH17 = crate::Reg<u32, _SMPH17>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH17;
    #[doc = "`read()` method returns [smph17::R](smph17::R) reader structure"]
    impl crate::Readable for SMPH17 {}
    #[doc = "`write(|w| ..)` method takes [smph17::W](smph17::W) writer structure"]
    impl crate::Writable for SMPH17 {}
    #[doc = "MCU SEMAPHORE 17"]
    pub mod smph17 {
        #[doc = "Reader of register SMPH17"]
        pub type R = crate::R<u32, super::SMPH17>;
        #[doc = "Writer for register SMPH17"]
        pub type W = crate::W<u32, super::SMPH17>;
        #[doc = "Register SMPH17 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH17 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 18\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph18](smph18) module"]
    pub type SMPH18 = crate::Reg<u32, _SMPH18>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH18;
    #[doc = "`read()` method returns [smph18::R](smph18::R) reader structure"]
    impl crate::Readable for SMPH18 {}
    #[doc = "`write(|w| ..)` method takes [smph18::W](smph18::W) writer structure"]
    impl crate::Writable for SMPH18 {}
    #[doc = "MCU SEMAPHORE 18"]
    pub mod smph18 {
        #[doc = "Reader of register SMPH18"]
        pub type R = crate::R<u32, super::SMPH18>;
        #[doc = "Writer for register SMPH18"]
        pub type W = crate::W<u32, super::SMPH18>;
        #[doc = "Register SMPH18 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH18 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 19\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph19](smph19) module"]
    pub type SMPH19 = crate::Reg<u32, _SMPH19>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH19;
    #[doc = "`read()` method returns [smph19::R](smph19::R) reader structure"]
    impl crate::Readable for SMPH19 {}
    #[doc = "`write(|w| ..)` method takes [smph19::W](smph19::W) writer structure"]
    impl crate::Writable for SMPH19 {}
    #[doc = "MCU SEMAPHORE 19"]
    pub mod smph19 {
        #[doc = "Reader of register SMPH19"]
        pub type R = crate::R<u32, super::SMPH19>;
        #[doc = "Writer for register SMPH19"]
        pub type W = crate::W<u32, super::SMPH19>;
        #[doc = "Register SMPH19 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH19 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 20\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph20](smph20) module"]
    pub type SMPH20 = crate::Reg<u32, _SMPH20>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH20;
    #[doc = "`read()` method returns [smph20::R](smph20::R) reader structure"]
    impl crate::Readable for SMPH20 {}
    #[doc = "`write(|w| ..)` method takes [smph20::W](smph20::W) writer structure"]
    impl crate::Writable for SMPH20 {}
    #[doc = "MCU SEMAPHORE 20"]
    pub mod smph20 {
        #[doc = "Reader of register SMPH20"]
        pub type R = crate::R<u32, super::SMPH20>;
        #[doc = "Writer for register SMPH20"]
        pub type W = crate::W<u32, super::SMPH20>;
        #[doc = "Register SMPH20 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH20 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 21\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph21](smph21) module"]
    pub type SMPH21 = crate::Reg<u32, _SMPH21>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH21;
    #[doc = "`read()` method returns [smph21::R](smph21::R) reader structure"]
    impl crate::Readable for SMPH21 {}
    #[doc = "`write(|w| ..)` method takes [smph21::W](smph21::W) writer structure"]
    impl crate::Writable for SMPH21 {}
    #[doc = "MCU SEMAPHORE 21"]
    pub mod smph21 {
        #[doc = "Reader of register SMPH21"]
        pub type R = crate::R<u32, super::SMPH21>;
        #[doc = "Writer for register SMPH21"]
        pub type W = crate::W<u32, super::SMPH21>;
        #[doc = "Register SMPH21 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH21 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 22\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph22](smph22) module"]
    pub type SMPH22 = crate::Reg<u32, _SMPH22>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH22;
    #[doc = "`read()` method returns [smph22::R](smph22::R) reader structure"]
    impl crate::Readable for SMPH22 {}
    #[doc = "`write(|w| ..)` method takes [smph22::W](smph22::W) writer structure"]
    impl crate::Writable for SMPH22 {}
    #[doc = "MCU SEMAPHORE 22"]
    pub mod smph22 {
        #[doc = "Reader of register SMPH22"]
        pub type R = crate::R<u32, super::SMPH22>;
        #[doc = "Writer for register SMPH22"]
        pub type W = crate::W<u32, super::SMPH22>;
        #[doc = "Register SMPH22 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH22 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 23\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph23](smph23) module"]
    pub type SMPH23 = crate::Reg<u32, _SMPH23>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH23;
    #[doc = "`read()` method returns [smph23::R](smph23::R) reader structure"]
    impl crate::Readable for SMPH23 {}
    #[doc = "`write(|w| ..)` method takes [smph23::W](smph23::W) writer structure"]
    impl crate::Writable for SMPH23 {}
    #[doc = "MCU SEMAPHORE 23"]
    pub mod smph23 {
        #[doc = "Reader of register SMPH23"]
        pub type R = crate::R<u32, super::SMPH23>;
        #[doc = "Writer for register SMPH23"]
        pub type W = crate::W<u32, super::SMPH23>;
        #[doc = "Register SMPH23 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH23 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 24\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph24](smph24) module"]
    pub type SMPH24 = crate::Reg<u32, _SMPH24>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH24;
    #[doc = "`read()` method returns [smph24::R](smph24::R) reader structure"]
    impl crate::Readable for SMPH24 {}
    #[doc = "`write(|w| ..)` method takes [smph24::W](smph24::W) writer structure"]
    impl crate::Writable for SMPH24 {}
    #[doc = "MCU SEMAPHORE 24"]
    pub mod smph24 {
        #[doc = "Reader of register SMPH24"]
        pub type R = crate::R<u32, super::SMPH24>;
        #[doc = "Writer for register SMPH24"]
        pub type W = crate::W<u32, super::SMPH24>;
        #[doc = "Register SMPH24 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH24 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 25\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph25](smph25) module"]
    pub type SMPH25 = crate::Reg<u32, _SMPH25>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH25;
    #[doc = "`read()` method returns [smph25::R](smph25::R) reader structure"]
    impl crate::Readable for SMPH25 {}
    #[doc = "`write(|w| ..)` method takes [smph25::W](smph25::W) writer structure"]
    impl crate::Writable for SMPH25 {}
    #[doc = "MCU SEMAPHORE 25"]
    pub mod smph25 {
        #[doc = "Reader of register SMPH25"]
        pub type R = crate::R<u32, super::SMPH25>;
        #[doc = "Writer for register SMPH25"]
        pub type W = crate::W<u32, super::SMPH25>;
        #[doc = "Register SMPH25 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH25 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 26\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph26](smph26) module"]
    pub type SMPH26 = crate::Reg<u32, _SMPH26>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH26;
    #[doc = "`read()` method returns [smph26::R](smph26::R) reader structure"]
    impl crate::Readable for SMPH26 {}
    #[doc = "`write(|w| ..)` method takes [smph26::W](smph26::W) writer structure"]
    impl crate::Writable for SMPH26 {}
    #[doc = "MCU SEMAPHORE 26"]
    pub mod smph26 {
        #[doc = "Reader of register SMPH26"]
        pub type R = crate::R<u32, super::SMPH26>;
        #[doc = "Writer for register SMPH26"]
        pub type W = crate::W<u32, super::SMPH26>;
        #[doc = "Register SMPH26 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH26 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 27\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph27](smph27) module"]
    pub type SMPH27 = crate::Reg<u32, _SMPH27>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH27;
    #[doc = "`read()` method returns [smph27::R](smph27::R) reader structure"]
    impl crate::Readable for SMPH27 {}
    #[doc = "`write(|w| ..)` method takes [smph27::W](smph27::W) writer structure"]
    impl crate::Writable for SMPH27 {}
    #[doc = "MCU SEMAPHORE 27"]
    pub mod smph27 {
        #[doc = "Reader of register SMPH27"]
        pub type R = crate::R<u32, super::SMPH27>;
        #[doc = "Writer for register SMPH27"]
        pub type W = crate::W<u32, super::SMPH27>;
        #[doc = "Register SMPH27 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH27 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 28\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph28](smph28) module"]
    pub type SMPH28 = crate::Reg<u32, _SMPH28>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH28;
    #[doc = "`read()` method returns [smph28::R](smph28::R) reader structure"]
    impl crate::Readable for SMPH28 {}
    #[doc = "`write(|w| ..)` method takes [smph28::W](smph28::W) writer structure"]
    impl crate::Writable for SMPH28 {}
    #[doc = "MCU SEMAPHORE 28"]
    pub mod smph28 {
        #[doc = "Reader of register SMPH28"]
        pub type R = crate::R<u32, super::SMPH28>;
        #[doc = "Writer for register SMPH28"]
        pub type W = crate::W<u32, super::SMPH28>;
        #[doc = "Register SMPH28 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH28 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 29\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph29](smph29) module"]
    pub type SMPH29 = crate::Reg<u32, _SMPH29>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH29;
    #[doc = "`read()` method returns [smph29::R](smph29::R) reader structure"]
    impl crate::Readable for SMPH29 {}
    #[doc = "`write(|w| ..)` method takes [smph29::W](smph29::W) writer structure"]
    impl crate::Writable for SMPH29 {}
    #[doc = "MCU SEMAPHORE 29"]
    pub mod smph29 {
        #[doc = "Reader of register SMPH29"]
        pub type R = crate::R<u32, super::SMPH29>;
        #[doc = "Writer for register SMPH29"]
        pub type W = crate::W<u32, super::SMPH29>;
        #[doc = "Register SMPH29 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH29 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 30\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph30](smph30) module"]
    pub type SMPH30 = crate::Reg<u32, _SMPH30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH30;
    #[doc = "`read()` method returns [smph30::R](smph30::R) reader structure"]
    impl crate::Readable for SMPH30 {}
    #[doc = "`write(|w| ..)` method takes [smph30::W](smph30::W) writer structure"]
    impl crate::Writable for SMPH30 {}
    #[doc = "MCU SEMAPHORE 30"]
    pub mod smph30 {
        #[doc = "Reader of register SMPH30"]
        pub type R = crate::R<u32, super::SMPH30>;
        #[doc = "Writer for register SMPH30"]
        pub type W = crate::W<u32, super::SMPH30>;
        #[doc = "Register SMPH30 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH30 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 31\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smph31](smph31) module"]
    pub type SMPH31 = crate::Reg<u32, _SMPH31>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPH31;
    #[doc = "`read()` method returns [smph31::R](smph31::R) reader structure"]
    impl crate::Readable for SMPH31 {}
    #[doc = "`write(|w| ..)` method takes [smph31::W](smph31::W) writer structure"]
    impl crate::Writable for SMPH31 {}
    #[doc = "MCU SEMAPHORE 31"]
    pub mod smph31 {
        #[doc = "Reader of register SMPH31"]
        pub type R = crate::R<u32, super::SMPH31>;
        #[doc = "Writer for register SMPH31"]
        pub type W = crate::W<u32, super::SMPH31>;
        #[doc = "Register SMPH31 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::SMPH31 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STAT`"]
        pub struct STAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&mut self) -> STAT_W {
                STAT_W { w: self }
            }
        }
    }
    #[doc = "MCU SEMAPHORE 0 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek0](peek0) module"]
    pub type PEEK0 = crate::Reg<u32, _PEEK0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK0;
    #[doc = "`read()` method returns [peek0::R](peek0::R) reader structure"]
    impl crate::Readable for PEEK0 {}
    #[doc = "MCU SEMAPHORE 0 ALIAS"]
    pub mod peek0 {
        #[doc = "Reader of register PEEK0"]
        pub type R = crate::R<u32, super::PEEK0>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 1 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek1](peek1) module"]
    pub type PEEK1 = crate::Reg<u32, _PEEK1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK1;
    #[doc = "`read()` method returns [peek1::R](peek1::R) reader structure"]
    impl crate::Readable for PEEK1 {}
    #[doc = "MCU SEMAPHORE 1 ALIAS"]
    pub mod peek1 {
        #[doc = "Reader of register PEEK1"]
        pub type R = crate::R<u32, super::PEEK1>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 2 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek2](peek2) module"]
    pub type PEEK2 = crate::Reg<u32, _PEEK2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK2;
    #[doc = "`read()` method returns [peek2::R](peek2::R) reader structure"]
    impl crate::Readable for PEEK2 {}
    #[doc = "MCU SEMAPHORE 2 ALIAS"]
    pub mod peek2 {
        #[doc = "Reader of register PEEK2"]
        pub type R = crate::R<u32, super::PEEK2>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 3 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek3](peek3) module"]
    pub type PEEK3 = crate::Reg<u32, _PEEK3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK3;
    #[doc = "`read()` method returns [peek3::R](peek3::R) reader structure"]
    impl crate::Readable for PEEK3 {}
    #[doc = "MCU SEMAPHORE 3 ALIAS"]
    pub mod peek3 {
        #[doc = "Reader of register PEEK3"]
        pub type R = crate::R<u32, super::PEEK3>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 4 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek4](peek4) module"]
    pub type PEEK4 = crate::Reg<u32, _PEEK4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK4;
    #[doc = "`read()` method returns [peek4::R](peek4::R) reader structure"]
    impl crate::Readable for PEEK4 {}
    #[doc = "MCU SEMAPHORE 4 ALIAS"]
    pub mod peek4 {
        #[doc = "Reader of register PEEK4"]
        pub type R = crate::R<u32, super::PEEK4>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 5 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek5](peek5) module"]
    pub type PEEK5 = crate::Reg<u32, _PEEK5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK5;
    #[doc = "`read()` method returns [peek5::R](peek5::R) reader structure"]
    impl crate::Readable for PEEK5 {}
    #[doc = "MCU SEMAPHORE 5 ALIAS"]
    pub mod peek5 {
        #[doc = "Reader of register PEEK5"]
        pub type R = crate::R<u32, super::PEEK5>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 6 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek6](peek6) module"]
    pub type PEEK6 = crate::Reg<u32, _PEEK6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK6;
    #[doc = "`read()` method returns [peek6::R](peek6::R) reader structure"]
    impl crate::Readable for PEEK6 {}
    #[doc = "MCU SEMAPHORE 6 ALIAS"]
    pub mod peek6 {
        #[doc = "Reader of register PEEK6"]
        pub type R = crate::R<u32, super::PEEK6>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 7 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek7](peek7) module"]
    pub type PEEK7 = crate::Reg<u32, _PEEK7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK7;
    #[doc = "`read()` method returns [peek7::R](peek7::R) reader structure"]
    impl crate::Readable for PEEK7 {}
    #[doc = "MCU SEMAPHORE 7 ALIAS"]
    pub mod peek7 {
        #[doc = "Reader of register PEEK7"]
        pub type R = crate::R<u32, super::PEEK7>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 8 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek8](peek8) module"]
    pub type PEEK8 = crate::Reg<u32, _PEEK8>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK8;
    #[doc = "`read()` method returns [peek8::R](peek8::R) reader structure"]
    impl crate::Readable for PEEK8 {}
    #[doc = "MCU SEMAPHORE 8 ALIAS"]
    pub mod peek8 {
        #[doc = "Reader of register PEEK8"]
        pub type R = crate::R<u32, super::PEEK8>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 9 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek9](peek9) module"]
    pub type PEEK9 = crate::Reg<u32, _PEEK9>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK9;
    #[doc = "`read()` method returns [peek9::R](peek9::R) reader structure"]
    impl crate::Readable for PEEK9 {}
    #[doc = "MCU SEMAPHORE 9 ALIAS"]
    pub mod peek9 {
        #[doc = "Reader of register PEEK9"]
        pub type R = crate::R<u32, super::PEEK9>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 10 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek10](peek10) module"]
    pub type PEEK10 = crate::Reg<u32, _PEEK10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK10;
    #[doc = "`read()` method returns [peek10::R](peek10::R) reader structure"]
    impl crate::Readable for PEEK10 {}
    #[doc = "MCU SEMAPHORE 10 ALIAS"]
    pub mod peek10 {
        #[doc = "Reader of register PEEK10"]
        pub type R = crate::R<u32, super::PEEK10>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 11 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek11](peek11) module"]
    pub type PEEK11 = crate::Reg<u32, _PEEK11>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK11;
    #[doc = "`read()` method returns [peek11::R](peek11::R) reader structure"]
    impl crate::Readable for PEEK11 {}
    #[doc = "MCU SEMAPHORE 11 ALIAS"]
    pub mod peek11 {
        #[doc = "Reader of register PEEK11"]
        pub type R = crate::R<u32, super::PEEK11>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 12 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek12](peek12) module"]
    pub type PEEK12 = crate::Reg<u32, _PEEK12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK12;
    #[doc = "`read()` method returns [peek12::R](peek12::R) reader structure"]
    impl crate::Readable for PEEK12 {}
    #[doc = "MCU SEMAPHORE 12 ALIAS"]
    pub mod peek12 {
        #[doc = "Reader of register PEEK12"]
        pub type R = crate::R<u32, super::PEEK12>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 13 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek13](peek13) module"]
    pub type PEEK13 = crate::Reg<u32, _PEEK13>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK13;
    #[doc = "`read()` method returns [peek13::R](peek13::R) reader structure"]
    impl crate::Readable for PEEK13 {}
    #[doc = "MCU SEMAPHORE 13 ALIAS"]
    pub mod peek13 {
        #[doc = "Reader of register PEEK13"]
        pub type R = crate::R<u32, super::PEEK13>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 14 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek14](peek14) module"]
    pub type PEEK14 = crate::Reg<u32, _PEEK14>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK14;
    #[doc = "`read()` method returns [peek14::R](peek14::R) reader structure"]
    impl crate::Readable for PEEK14 {}
    #[doc = "MCU SEMAPHORE 14 ALIAS"]
    pub mod peek14 {
        #[doc = "Reader of register PEEK14"]
        pub type R = crate::R<u32, super::PEEK14>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 15 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek15](peek15) module"]
    pub type PEEK15 = crate::Reg<u32, _PEEK15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK15;
    #[doc = "`read()` method returns [peek15::R](peek15::R) reader structure"]
    impl crate::Readable for PEEK15 {}
    #[doc = "MCU SEMAPHORE 15 ALIAS"]
    pub mod peek15 {
        #[doc = "Reader of register PEEK15"]
        pub type R = crate::R<u32, super::PEEK15>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 16 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek16](peek16) module"]
    pub type PEEK16 = crate::Reg<u32, _PEEK16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK16;
    #[doc = "`read()` method returns [peek16::R](peek16::R) reader structure"]
    impl crate::Readable for PEEK16 {}
    #[doc = "MCU SEMAPHORE 16 ALIAS"]
    pub mod peek16 {
        #[doc = "Reader of register PEEK16"]
        pub type R = crate::R<u32, super::PEEK16>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 17 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek17](peek17) module"]
    pub type PEEK17 = crate::Reg<u32, _PEEK17>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK17;
    #[doc = "`read()` method returns [peek17::R](peek17::R) reader structure"]
    impl crate::Readable for PEEK17 {}
    #[doc = "MCU SEMAPHORE 17 ALIAS"]
    pub mod peek17 {
        #[doc = "Reader of register PEEK17"]
        pub type R = crate::R<u32, super::PEEK17>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 18 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek18](peek18) module"]
    pub type PEEK18 = crate::Reg<u32, _PEEK18>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK18;
    #[doc = "`read()` method returns [peek18::R](peek18::R) reader structure"]
    impl crate::Readable for PEEK18 {}
    #[doc = "MCU SEMAPHORE 18 ALIAS"]
    pub mod peek18 {
        #[doc = "Reader of register PEEK18"]
        pub type R = crate::R<u32, super::PEEK18>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 19 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek19](peek19) module"]
    pub type PEEK19 = crate::Reg<u32, _PEEK19>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK19;
    #[doc = "`read()` method returns [peek19::R](peek19::R) reader structure"]
    impl crate::Readable for PEEK19 {}
    #[doc = "MCU SEMAPHORE 19 ALIAS"]
    pub mod peek19 {
        #[doc = "Reader of register PEEK19"]
        pub type R = crate::R<u32, super::PEEK19>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 20 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek20](peek20) module"]
    pub type PEEK20 = crate::Reg<u32, _PEEK20>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK20;
    #[doc = "`read()` method returns [peek20::R](peek20::R) reader structure"]
    impl crate::Readable for PEEK20 {}
    #[doc = "MCU SEMAPHORE 20 ALIAS"]
    pub mod peek20 {
        #[doc = "Reader of register PEEK20"]
        pub type R = crate::R<u32, super::PEEK20>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 21 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek21](peek21) module"]
    pub type PEEK21 = crate::Reg<u32, _PEEK21>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK21;
    #[doc = "`read()` method returns [peek21::R](peek21::R) reader structure"]
    impl crate::Readable for PEEK21 {}
    #[doc = "MCU SEMAPHORE 21 ALIAS"]
    pub mod peek21 {
        #[doc = "Reader of register PEEK21"]
        pub type R = crate::R<u32, super::PEEK21>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 22 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek22](peek22) module"]
    pub type PEEK22 = crate::Reg<u32, _PEEK22>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK22;
    #[doc = "`read()` method returns [peek22::R](peek22::R) reader structure"]
    impl crate::Readable for PEEK22 {}
    #[doc = "MCU SEMAPHORE 22 ALIAS"]
    pub mod peek22 {
        #[doc = "Reader of register PEEK22"]
        pub type R = crate::R<u32, super::PEEK22>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 23 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek23](peek23) module"]
    pub type PEEK23 = crate::Reg<u32, _PEEK23>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK23;
    #[doc = "`read()` method returns [peek23::R](peek23::R) reader structure"]
    impl crate::Readable for PEEK23 {}
    #[doc = "MCU SEMAPHORE 23 ALIAS"]
    pub mod peek23 {
        #[doc = "Reader of register PEEK23"]
        pub type R = crate::R<u32, super::PEEK23>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 24 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek24](peek24) module"]
    pub type PEEK24 = crate::Reg<u32, _PEEK24>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK24;
    #[doc = "`read()` method returns [peek24::R](peek24::R) reader structure"]
    impl crate::Readable for PEEK24 {}
    #[doc = "MCU SEMAPHORE 24 ALIAS"]
    pub mod peek24 {
        #[doc = "Reader of register PEEK24"]
        pub type R = crate::R<u32, super::PEEK24>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 25 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek25](peek25) module"]
    pub type PEEK25 = crate::Reg<u32, _PEEK25>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK25;
    #[doc = "`read()` method returns [peek25::R](peek25::R) reader structure"]
    impl crate::Readable for PEEK25 {}
    #[doc = "MCU SEMAPHORE 25 ALIAS"]
    pub mod peek25 {
        #[doc = "Reader of register PEEK25"]
        pub type R = crate::R<u32, super::PEEK25>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 26 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek26](peek26) module"]
    pub type PEEK26 = crate::Reg<u32, _PEEK26>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK26;
    #[doc = "`read()` method returns [peek26::R](peek26::R) reader structure"]
    impl crate::Readable for PEEK26 {}
    #[doc = "MCU SEMAPHORE 26 ALIAS"]
    pub mod peek26 {
        #[doc = "Reader of register PEEK26"]
        pub type R = crate::R<u32, super::PEEK26>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 27 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek27](peek27) module"]
    pub type PEEK27 = crate::Reg<u32, _PEEK27>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK27;
    #[doc = "`read()` method returns [peek27::R](peek27::R) reader structure"]
    impl crate::Readable for PEEK27 {}
    #[doc = "MCU SEMAPHORE 27 ALIAS"]
    pub mod peek27 {
        #[doc = "Reader of register PEEK27"]
        pub type R = crate::R<u32, super::PEEK27>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 28 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek28](peek28) module"]
    pub type PEEK28 = crate::Reg<u32, _PEEK28>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK28;
    #[doc = "`read()` method returns [peek28::R](peek28::R) reader structure"]
    impl crate::Readable for PEEK28 {}
    #[doc = "MCU SEMAPHORE 28 ALIAS"]
    pub mod peek28 {
        #[doc = "Reader of register PEEK28"]
        pub type R = crate::R<u32, super::PEEK28>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 29 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek29](peek29) module"]
    pub type PEEK29 = crate::Reg<u32, _PEEK29>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK29;
    #[doc = "`read()` method returns [peek29::R](peek29::R) reader structure"]
    impl crate::Readable for PEEK29 {}
    #[doc = "MCU SEMAPHORE 29 ALIAS"]
    pub mod peek29 {
        #[doc = "Reader of register PEEK29"]
        pub type R = crate::R<u32, super::PEEK29>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 30 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek30](peek30) module"]
    pub type PEEK30 = crate::Reg<u32, _PEEK30>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK30;
    #[doc = "`read()` method returns [peek30::R](peek30::R) reader structure"]
    impl crate::Readable for PEEK30 {}
    #[doc = "MCU SEMAPHORE 30 ALIAS"]
    pub mod peek30 {
        #[doc = "Reader of register PEEK30"]
        pub type R = crate::R<u32, super::PEEK30>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "MCU SEMAPHORE 31 ALIAS\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [peek31](peek31) module"]
    pub type PEEK31 = crate::Reg<u32, _PEEK31>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PEEK31;
    #[doc = "`read()` method returns [peek31::R](peek31::R) reader structure"]
    impl crate::Readable for PEEK31 {}
    #[doc = "MCU SEMAPHORE 31 ALIAS"]
    pub mod peek31 {
        #[doc = "Reader of register PEEK31"]
        pub type R = crate::R<u32, super::PEEK31>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
}
#[doc = "Synchronous Serial Interface with master and slave capabilities"]
pub struct SSI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SSI0 {}
impl SSI0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ssi0::RegisterBlock {
        0x4000_0000 as *const _
    }
}
impl Deref for SSI0 {
    type Target = ssi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SSI0::ptr() }
    }
}
#[doc = "Synchronous Serial Interface with master and slave capabilities"]
pub mod ssi0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control 0"]
        pub cr0: CR0,
        #[doc = "0x04 - Control 1"]
        pub cr1: CR1,
        #[doc = "0x08 - Data 16-bits wide data register: When read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When written, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the TXD output pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer."]
        pub dr: DR,
        #[doc = "0x0c - Status"]
        pub sr: SR,
        #[doc = "0x10 - Clock Prescale"]
        pub cpsr: CPSR,
        #[doc = "0x14 - Interrupt Mask Set and Clear"]
        pub imsc: IMSC,
        #[doc = "0x18 - Raw Interrupt Status"]
        pub ris: RIS,
        #[doc = "0x1c - Masked Interrupt Status"]
        pub mis: MIS,
        #[doc = "0x20 - Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect."]
        pub icr: ICR,
        #[doc = "0x24 - DMA Control"]
        pub dmacr: DMACR,
    }
    #[doc = "Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr0](cr0) module"]
    pub type CR0 = crate::Reg<u32, _CR0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR0;
    #[doc = "`read()` method returns [cr0::R](cr0::R) reader structure"]
    impl crate::Readable for CR0 {}
    #[doc = "`write(|w| ..)` method takes [cr0::W](cr0::W) writer structure"]
    impl crate::Writable for CR0 {}
    #[doc = "Control 0"]
    pub mod cr0 {
        #[doc = "Reader of register CR0"]
        pub type R = crate::R<u32, super::CR0>;
        #[doc = "Writer for register CR0"]
        pub type W = crate::W<u32, super::CR0>;
        #[doc = "Register CR0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCR`"]
        pub type SCR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCR`"]
        pub struct SCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SPH`"]
        pub type SPH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPH`"]
        pub struct SPH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SPO`"]
        pub type SPO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPO`"]
        pub struct SPO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `FRF`"]
        pub type FRF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FRF`"]
        pub struct FRF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DSS`"]
        pub type DSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DSS`"]
        pub struct DSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - SCR"]
            #[inline(always)]
            pub fn scr(&self) -> SCR_R {
                SCR_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 7 - SPH"]
            #[inline(always)]
            pub fn sph(&self) -> SPH_R {
                SPH_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPO"]
            #[inline(always)]
            pub fn spo(&self) -> SPO_R {
                SPO_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - FRF"]
            #[inline(always)]
            pub fn frf(&self) -> FRF_R {
                FRF_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - DSS"]
            #[inline(always)]
            pub fn dss(&self) -> DSS_R {
                DSS_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - SCR"]
            #[inline(always)]
            pub fn scr(&mut self) -> SCR_W {
                SCR_W { w: self }
            }
            #[doc = "Bit 7 - SPH"]
            #[inline(always)]
            pub fn sph(&mut self) -> SPH_W {
                SPH_W { w: self }
            }
            #[doc = "Bit 6 - SPO"]
            #[inline(always)]
            pub fn spo(&mut self) -> SPO_W {
                SPO_W { w: self }
            }
            #[doc = "Bits 4:5 - FRF"]
            #[inline(always)]
            pub fn frf(&mut self) -> FRF_W {
                FRF_W { w: self }
            }
            #[doc = "Bits 0:3 - DSS"]
            #[inline(always)]
            pub fn dss(&mut self) -> DSS_W {
                DSS_W { w: self }
            }
        }
    }
    #[doc = "Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SOD`"]
        pub type SOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOD`"]
        pub struct SOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MS`"]
        pub type MS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MS`"]
        pub struct MS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SSE`"]
        pub type SSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSE`"]
        pub struct SSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LBM`"]
        pub type LBM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBM`"]
        pub struct LBM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - SOD"]
            #[inline(always)]
            pub fn sod(&self) -> SOD_R {
                SOD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - MS"]
            #[inline(always)]
            pub fn ms(&self) -> MS_R {
                MS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SSE"]
            #[inline(always)]
            pub fn sse(&self) -> SSE_R {
                SSE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LBM"]
            #[inline(always)]
            pub fn lbm(&self) -> LBM_R {
                LBM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - SOD"]
            #[inline(always)]
            pub fn sod(&mut self) -> SOD_W {
                SOD_W { w: self }
            }
            #[doc = "Bit 2 - MS"]
            #[inline(always)]
            pub fn ms(&mut self) -> MS_W {
                MS_W { w: self }
            }
            #[doc = "Bit 1 - SSE"]
            #[inline(always)]
            pub fn sse(&mut self) -> SSE_W {
                SSE_W { w: self }
            }
            #[doc = "Bit 0 - LBM"]
            #[inline(always)]
            pub fn lbm(&mut self) -> LBM_W {
                LBM_W { w: self }
            }
        }
    }
    #[doc = "Data 16-bits wide data register: When read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When written, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the TXD output pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data 16-bits wide data register: When read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When written, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the TXD output pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer."]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "Status"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RFF`"]
        pub type RFF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RNE`"]
        pub type RNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TNF`"]
        pub type TNF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TFE`"]
        pub type TFE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 4 - BSY"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RFF"]
            #[inline(always)]
            pub fn rff(&self) -> RFF_R {
                RFF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RNE"]
            #[inline(always)]
            pub fn rne(&self) -> RNE_R {
                RNE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TNF"]
            #[inline(always)]
            pub fn tnf(&self) -> TNF_R {
                TNF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TFE"]
            #[inline(always)]
            pub fn tfe(&self) -> TFE_R {
                TFE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Clock Prescale\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpsr](cpsr) module"]
    pub type CPSR = crate::Reg<u32, _CPSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPSR;
    #[doc = "`read()` method returns [cpsr::R](cpsr::R) reader structure"]
    impl crate::Readable for CPSR {}
    #[doc = "`write(|w| ..)` method takes [cpsr::W](cpsr::W) writer structure"]
    impl crate::Writable for CPSR {}
    #[doc = "Clock Prescale"]
    pub mod cpsr {
        #[doc = "Reader of register CPSR"]
        pub type R = crate::R<u32, super::CPSR>;
        #[doc = "Writer for register CPSR"]
        pub type W = crate::W<u32, super::CPSR>;
        #[doc = "Register CPSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CPSDVSR`"]
        pub type CPSDVSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CPSDVSR`"]
        pub struct CPSDVSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPSDVSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - CPSDVSR"]
            #[inline(always)]
            pub fn cpsdvsr(&self) -> CPSDVSR_R {
                CPSDVSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - CPSDVSR"]
            #[inline(always)]
            pub fn cpsdvsr(&mut self) -> CPSDVSR_W {
                CPSDVSR_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask Set and Clear\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imsc](imsc) module"]
    pub type IMSC = crate::Reg<u32, _IMSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMSC;
    #[doc = "`read()` method returns [imsc::R](imsc::R) reader structure"]
    impl crate::Readable for IMSC {}
    #[doc = "`write(|w| ..)` method takes [imsc::W](imsc::W) writer structure"]
    impl crate::Writable for IMSC {}
    #[doc = "Interrupt Mask Set and Clear"]
    pub mod imsc {
        #[doc = "Reader of register IMSC"]
        pub type R = crate::R<u32, super::IMSC>;
        #[doc = "Writer for register IMSC"]
        pub type W = crate::W<u32, super::IMSC>;
        #[doc = "Register IMSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXIM`"]
        pub type TXIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXIM`"]
        pub struct TXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RXIM`"]
        pub type RXIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXIM`"]
        pub struct RXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RTIM`"]
        pub type RTIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTIM`"]
        pub struct RTIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RORIM`"]
        pub type RORIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RORIM`"]
        pub struct RORIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RORIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - TXIM"]
            #[inline(always)]
            pub fn txim(&self) -> TXIM_R {
                TXIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RXIM"]
            #[inline(always)]
            pub fn rxim(&self) -> RXIM_R {
                RXIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTIM"]
            #[inline(always)]
            pub fn rtim(&self) -> RTIM_R {
                RTIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RORIM"]
            #[inline(always)]
            pub fn rorim(&self) -> RORIM_R {
                RORIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - TXIM"]
            #[inline(always)]
            pub fn txim(&mut self) -> TXIM_W {
                TXIM_W { w: self }
            }
            #[doc = "Bit 2 - RXIM"]
            #[inline(always)]
            pub fn rxim(&mut self) -> RXIM_W {
                RXIM_W { w: self }
            }
            #[doc = "Bit 1 - RTIM"]
            #[inline(always)]
            pub fn rtim(&mut self) -> RTIM_W {
                RTIM_W { w: self }
            }
            #[doc = "Bit 0 - RORIM"]
            #[inline(always)]
            pub fn rorim(&mut self) -> RORIM_W {
                RORIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `TXRIS`"]
        pub type TXRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXRIS`"]
        pub type RXRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTRIS`"]
        pub type RTRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RORRIS`"]
        pub type RORRIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 3 - TXRIS"]
            #[inline(always)]
            pub fn txris(&self) -> TXRIS_R {
                TXRIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RXRIS"]
            #[inline(always)]
            pub fn rxris(&self) -> RXRIS_R {
                RXRIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTRIS"]
            #[inline(always)]
            pub fn rtris(&self) -> RTRIS_R {
                RTRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RORRIS"]
            #[inline(always)]
            pub fn rorris(&self) -> RORRIS_R {
                RORRIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `TXMIS`"]
        pub type TXMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXMIS`"]
        pub type RXMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTMIS`"]
        pub type RTMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RORMIS`"]
        pub type RORMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 3 - TXMIS"]
            #[inline(always)]
            pub fn txmis(&self) -> TXMIS_R {
                TXMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RXMIS"]
            #[inline(always)]
            pub fn rxmis(&self) -> RXMIS_R {
                RXMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTMIS"]
            #[inline(always)]
            pub fn rtmis(&self) -> RTMIS_R {
                RTMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RORMIS"]
            #[inline(always)]
            pub fn rormis(&self) -> RORMIS_R {
                RORMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect."]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `RTIC`"]
        pub struct RTIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RORIC`"]
        pub struct RORIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RORIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - RTIC"]
            #[inline(always)]
            pub fn rtic(&mut self) -> RTIC_W {
                RTIC_W { w: self }
            }
            #[doc = "Bit 0 - RORIC"]
            #[inline(always)]
            pub fn roric(&mut self) -> RORIC_W {
                RORIC_W { w: self }
            }
        }
    }
    #[doc = "DMA Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmacr](dmacr) module"]
    pub type DMACR = crate::Reg<u32, _DMACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACR;
    #[doc = "`read()` method returns [dmacr::R](dmacr::R) reader structure"]
    impl crate::Readable for DMACR {}
    #[doc = "`write(|w| ..)` method takes [dmacr::W](dmacr::W) writer structure"]
    impl crate::Writable for DMACR {}
    #[doc = "DMA Control"]
    pub mod dmacr {
        #[doc = "Reader of register DMACR"]
        pub type R = crate::R<u32, super::DMACR>;
        #[doc = "Writer for register DMACR"]
        pub type W = crate::W<u32, super::DMACR>;
        #[doc = "Register DMACR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXDMAE`"]
        pub type TXDMAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDMAE`"]
        pub struct TXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RXDMAE`"]
        pub type RXDMAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDMAE`"]
        pub struct RXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&self) -> TXDMAE_R {
                TXDMAE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&self) -> RXDMAE_R {
                RXDMAE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&mut self) -> TXDMAE_W {
                TXDMAE_W { w: self }
            }
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&mut self) -> RXDMAE_W {
                RXDMAE_W { w: self }
            }
        }
    }
}
#[doc = "Synchronous Serial Interface with master and slave capabilities"]
pub struct SSI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SSI1 {}
impl SSI1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ssi1::RegisterBlock {
        0x4000_8000 as *const _
    }
}
impl Deref for SSI1 {
    type Target = ssi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SSI1::ptr() }
    }
}
#[doc = "Synchronous Serial Interface with master and slave capabilities"]
pub mod ssi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control 0"]
        pub cr0: CR0,
        #[doc = "0x04 - Control 1"]
        pub cr1: CR1,
        #[doc = "0x08 - Data 16-bits wide data register: When read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When written, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the TXD output pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer."]
        pub dr: DR,
        #[doc = "0x0c - Status"]
        pub sr: SR,
        #[doc = "0x10 - Clock Prescale"]
        pub cpsr: CPSR,
        #[doc = "0x14 - Interrupt Mask Set and Clear"]
        pub imsc: IMSC,
        #[doc = "0x18 - Raw Interrupt Status"]
        pub ris: RIS,
        #[doc = "0x1c - Masked Interrupt Status"]
        pub mis: MIS,
        #[doc = "0x20 - Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect."]
        pub icr: ICR,
        #[doc = "0x24 - DMA Control"]
        pub dmacr: DMACR,
    }
    #[doc = "Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr0](cr0) module"]
    pub type CR0 = crate::Reg<u32, _CR0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR0;
    #[doc = "`read()` method returns [cr0::R](cr0::R) reader structure"]
    impl crate::Readable for CR0 {}
    #[doc = "`write(|w| ..)` method takes [cr0::W](cr0::W) writer structure"]
    impl crate::Writable for CR0 {}
    #[doc = "Control 0"]
    pub mod cr0 {
        #[doc = "Reader of register CR0"]
        pub type R = crate::R<u32, super::CR0>;
        #[doc = "Writer for register CR0"]
        pub type W = crate::W<u32, super::CR0>;
        #[doc = "Register CR0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCR`"]
        pub type SCR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCR`"]
        pub struct SCR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SPH`"]
        pub type SPH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPH`"]
        pub struct SPH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SPO`"]
        pub type SPO_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPO`"]
        pub struct SPO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPO_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `FRF`"]
        pub type FRF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `FRF`"]
        pub struct FRF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DSS`"]
        pub type DSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DSS`"]
        pub struct DSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - SCR"]
            #[inline(always)]
            pub fn scr(&self) -> SCR_R {
                SCR_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 7 - SPH"]
            #[inline(always)]
            pub fn sph(&self) -> SPH_R {
                SPH_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPO"]
            #[inline(always)]
            pub fn spo(&self) -> SPO_R {
                SPO_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - FRF"]
            #[inline(always)]
            pub fn frf(&self) -> FRF_R {
                FRF_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - DSS"]
            #[inline(always)]
            pub fn dss(&self) -> DSS_R {
                DSS_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - SCR"]
            #[inline(always)]
            pub fn scr(&mut self) -> SCR_W {
                SCR_W { w: self }
            }
            #[doc = "Bit 7 - SPH"]
            #[inline(always)]
            pub fn sph(&mut self) -> SPH_W {
                SPH_W { w: self }
            }
            #[doc = "Bit 6 - SPO"]
            #[inline(always)]
            pub fn spo(&mut self) -> SPO_W {
                SPO_W { w: self }
            }
            #[doc = "Bits 4:5 - FRF"]
            #[inline(always)]
            pub fn frf(&mut self) -> FRF_W {
                FRF_W { w: self }
            }
            #[doc = "Bits 0:3 - DSS"]
            #[inline(always)]
            pub fn dss(&mut self) -> DSS_W {
                DSS_W { w: self }
            }
        }
    }
    #[doc = "Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SOD`"]
        pub type SOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOD`"]
        pub struct SOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MS`"]
        pub type MS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MS`"]
        pub struct MS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SSE`"]
        pub type SSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSE`"]
        pub struct SSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LBM`"]
        pub type LBM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBM`"]
        pub struct LBM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - SOD"]
            #[inline(always)]
            pub fn sod(&self) -> SOD_R {
                SOD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - MS"]
            #[inline(always)]
            pub fn ms(&self) -> MS_R {
                MS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SSE"]
            #[inline(always)]
            pub fn sse(&self) -> SSE_R {
                SSE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LBM"]
            #[inline(always)]
            pub fn lbm(&self) -> LBM_R {
                LBM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - SOD"]
            #[inline(always)]
            pub fn sod(&mut self) -> SOD_W {
                SOD_W { w: self }
            }
            #[doc = "Bit 2 - MS"]
            #[inline(always)]
            pub fn ms(&mut self) -> MS_W {
                MS_W { w: self }
            }
            #[doc = "Bit 1 - SSE"]
            #[inline(always)]
            pub fn sse(&mut self) -> SSE_W {
                SSE_W { w: self }
            }
            #[doc = "Bit 0 - LBM"]
            #[inline(always)]
            pub fn lbm(&mut self) -> LBM_W {
                LBM_W { w: self }
            }
        }
    }
    #[doc = "Data 16-bits wide data register: When read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When written, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the TXD output pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data 16-bits wide data register: When read, the entry in the receive FIFO, pointed to by the current FIFO read pointer, is accessed. As data values are removed by the receive logic from the incoming data frame, they are placed into the entry in the receive FIFO, pointed to by the current FIFO write pointer. When written, the entry in the transmit FIFO, pointed to by the write pointer, is written to. Data values are removed from the transmit FIFO one value at a time by the transmit logic. It is loaded into the transmit serial shifter, then serially shifted out onto the TXD output pin at the programmed bit rate. When a data size of less than 16 bits is selected, the user must right-justify data written to the transmit FIFO. The transmit logic ignores the unused bits. Received data less than 16 bits is automatically right-justified in the receive buffer."]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DATA`"]
        pub type DATA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DATA"]
            #[inline(always)]
            pub fn data(&self) -> DATA_R {
                DATA_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "Status"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RFF`"]
        pub type RFF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RNE`"]
        pub type RNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TNF`"]
        pub type TNF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TFE`"]
        pub type TFE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 4 - BSY"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - RFF"]
            #[inline(always)]
            pub fn rff(&self) -> RFF_R {
                RFF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RNE"]
            #[inline(always)]
            pub fn rne(&self) -> RNE_R {
                RNE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TNF"]
            #[inline(always)]
            pub fn tnf(&self) -> TNF_R {
                TNF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TFE"]
            #[inline(always)]
            pub fn tfe(&self) -> TFE_R {
                TFE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Clock Prescale\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpsr](cpsr) module"]
    pub type CPSR = crate::Reg<u32, _CPSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPSR;
    #[doc = "`read()` method returns [cpsr::R](cpsr::R) reader structure"]
    impl crate::Readable for CPSR {}
    #[doc = "`write(|w| ..)` method takes [cpsr::W](cpsr::W) writer structure"]
    impl crate::Writable for CPSR {}
    #[doc = "Clock Prescale"]
    pub mod cpsr {
        #[doc = "Reader of register CPSR"]
        pub type R = crate::R<u32, super::CPSR>;
        #[doc = "Writer for register CPSR"]
        pub type W = crate::W<u32, super::CPSR>;
        #[doc = "Register CPSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CPSDVSR`"]
        pub type CPSDVSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CPSDVSR`"]
        pub struct CPSDVSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPSDVSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - CPSDVSR"]
            #[inline(always)]
            pub fn cpsdvsr(&self) -> CPSDVSR_R {
                CPSDVSR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - CPSDVSR"]
            #[inline(always)]
            pub fn cpsdvsr(&mut self) -> CPSDVSR_W {
                CPSDVSR_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask Set and Clear\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imsc](imsc) module"]
    pub type IMSC = crate::Reg<u32, _IMSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMSC;
    #[doc = "`read()` method returns [imsc::R](imsc::R) reader structure"]
    impl crate::Readable for IMSC {}
    #[doc = "`write(|w| ..)` method takes [imsc::W](imsc::W) writer structure"]
    impl crate::Writable for IMSC {}
    #[doc = "Interrupt Mask Set and Clear"]
    pub mod imsc {
        #[doc = "Reader of register IMSC"]
        pub type R = crate::R<u32, super::IMSC>;
        #[doc = "Writer for register IMSC"]
        pub type W = crate::W<u32, super::IMSC>;
        #[doc = "Register IMSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXIM`"]
        pub type TXIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXIM`"]
        pub struct TXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RXIM`"]
        pub type RXIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXIM`"]
        pub struct RXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RTIM`"]
        pub type RTIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTIM`"]
        pub struct RTIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RORIM`"]
        pub type RORIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RORIM`"]
        pub struct RORIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RORIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - TXIM"]
            #[inline(always)]
            pub fn txim(&self) -> TXIM_R {
                TXIM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RXIM"]
            #[inline(always)]
            pub fn rxim(&self) -> RXIM_R {
                RXIM_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTIM"]
            #[inline(always)]
            pub fn rtim(&self) -> RTIM_R {
                RTIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RORIM"]
            #[inline(always)]
            pub fn rorim(&self) -> RORIM_R {
                RORIM_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - TXIM"]
            #[inline(always)]
            pub fn txim(&mut self) -> TXIM_W {
                TXIM_W { w: self }
            }
            #[doc = "Bit 2 - RXIM"]
            #[inline(always)]
            pub fn rxim(&mut self) -> RXIM_W {
                RXIM_W { w: self }
            }
            #[doc = "Bit 1 - RTIM"]
            #[inline(always)]
            pub fn rtim(&mut self) -> RTIM_W {
                RTIM_W { w: self }
            }
            #[doc = "Bit 0 - RORIM"]
            #[inline(always)]
            pub fn rorim(&mut self) -> RORIM_W {
                RORIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `TXRIS`"]
        pub type TXRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXRIS`"]
        pub type RXRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTRIS`"]
        pub type RTRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RORRIS`"]
        pub type RORRIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 3 - TXRIS"]
            #[inline(always)]
            pub fn txris(&self) -> TXRIS_R {
                TXRIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RXRIS"]
            #[inline(always)]
            pub fn rxris(&self) -> RXRIS_R {
                RXRIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTRIS"]
            #[inline(always)]
            pub fn rtris(&self) -> RTRIS_R {
                RTRIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RORRIS"]
            #[inline(always)]
            pub fn rorris(&self) -> RORRIS_R {
                RORRIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `TXMIS`"]
        pub type TXMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXMIS`"]
        pub type RXMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTMIS`"]
        pub type RTMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RORMIS`"]
        pub type RORMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 3 - TXMIS"]
            #[inline(always)]
            pub fn txmis(&self) -> TXMIS_R {
                TXMIS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RXMIS"]
            #[inline(always)]
            pub fn rxmis(&self) -> RXMIS_R {
                RXMIS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTMIS"]
            #[inline(always)]
            pub fn rtmis(&self) -> RTMIS_R {
                RTMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RORMIS"]
            #[inline(always)]
            pub fn rormis(&self) -> RORMIS_R {
                RORMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect."]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `RTIC`"]
        pub struct RTIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RORIC`"]
        pub struct RORIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RORIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - RTIC"]
            #[inline(always)]
            pub fn rtic(&mut self) -> RTIC_W {
                RTIC_W { w: self }
            }
            #[doc = "Bit 0 - RORIC"]
            #[inline(always)]
            pub fn roric(&mut self) -> RORIC_W {
                RORIC_W { w: self }
            }
        }
    }
    #[doc = "DMA Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmacr](dmacr) module"]
    pub type DMACR = crate::Reg<u32, _DMACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACR;
    #[doc = "`read()` method returns [dmacr::R](dmacr::R) reader structure"]
    impl crate::Readable for DMACR {}
    #[doc = "`write(|w| ..)` method takes [dmacr::W](dmacr::W) writer structure"]
    impl crate::Writable for DMACR {}
    #[doc = "DMA Control"]
    pub mod dmacr {
        #[doc = "Reader of register DMACR"]
        pub type R = crate::R<u32, super::DMACR>;
        #[doc = "Writer for register DMACR"]
        pub type W = crate::W<u32, super::DMACR>;
        #[doc = "Register DMACR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXDMAE`"]
        pub type TXDMAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDMAE`"]
        pub struct TXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RXDMAE`"]
        pub type RXDMAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDMAE`"]
        pub struct RXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&self) -> TXDMAE_R {
                TXDMAE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&self) -> RXDMAE_R {
                RXDMAE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&mut self) -> TXDMAE_W {
                TXDMAE_W { w: self }
            }
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&mut self) -> RXDMAE_W {
                RXDMAE_W { w: self }
            }
        }
    }
}
#[doc = "True Random Number Generator"]
pub struct TRNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRNG {}
impl TRNG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trng::RegisterBlock {
        0x4002_8000 as *const _
    }
}
impl Deref for TRNG {
    type Target = trng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TRNG::ptr() }
    }
}
#[doc = "True Random Number Generator"]
pub mod trng {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Random Number Lower Word Readout Value"]
        pub out0: OUT0,
        #[doc = "0x04 - Random Number Upper Word Readout Value"]
        pub out1: OUT1,
        #[doc = "0x08 - Interrupt Status"]
        pub irqflagstat: IRQFLAGSTAT,
        #[doc = "0x0c - Interrupt Mask"]
        pub irqflagmask: IRQFLAGMASK,
        #[doc = "0x10 - Interrupt Flag Clear"]
        pub irqflagclr: IRQFLAGCLR,
        #[doc = "0x14 - Control"]
        pub ctl: CTL,
        #[doc = "0x18 - Configuration 0"]
        pub cfg0: CFG0,
        #[doc = "0x1c - Alarm Control"]
        pub alarmcnt: ALARMCNT,
        #[doc = "0x20 - FRO Enable"]
        pub froen: FROEN,
        #[doc = "0x24 - FRO De-tune Bit"]
        pub frodetune: FRODETUNE,
        #[doc = "0x28 - Alarm Event"]
        pub alarmmask: ALARMMASK,
        #[doc = "0x2c - Alarm Shutdown"]
        pub alarmstop: ALARMSTOP,
        #[doc = "0x30 - LFSR Readout Value"]
        pub lfsr0: LFSR0,
        #[doc = "0x34 - LFSR Readout Value"]
        pub lfsr1: LFSR1,
        #[doc = "0x38 - LFSR Readout Value"]
        pub lfsr2: LFSR2,
        _reserved15: [u8; 60usize],
        #[doc = "0x78 - TRNG Engine Options Information"]
        pub hwopt: HWOPT,
        #[doc = "0x7c - HW Version 0 EIP Number And Core Revision"]
        pub hwver0: HWVER0,
        _reserved17: [u8; 8024usize],
        #[doc = "0x1fd8 - Interrupt Status After Masking"]
        pub irqstatmask: IRQSTATMASK,
        _reserved18: [u8; 4usize],
        #[doc = "0x1fe0 - HW Version 1 TRNG Revision Number"]
        pub hwver1: HWVER1,
        _reserved19: [u8; 8usize],
        #[doc = "0x1fec - Interrupt Set"]
        pub irqset: IRQSET,
        #[doc = "0x1ff0 - SW Reset Control"]
        pub swreset: SWRESET,
        _reserved21: [u8; 4usize],
        #[doc = "0x1ff8 - Interrupt Status"]
        pub irqstat: IRQSTAT,
    }
    #[doc = "Random Number Lower Word Readout Value\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out0](out0) module"]
    pub type OUT0 = crate::Reg<u32, _OUT0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OUT0;
    #[doc = "`read()` method returns [out0::R](out0::R) reader structure"]
    impl crate::Readable for OUT0 {}
    #[doc = "Random Number Lower Word Readout Value"]
    pub mod out0 {
        #[doc = "Reader of register OUT0"]
        pub type R = crate::R<u32, super::OUT0>;
        #[doc = "Reader of field `VALUE_31_0`"]
        pub type VALUE_31_0_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - VALUE_31_0"]
            #[inline(always)]
            pub fn value_31_0(&self) -> VALUE_31_0_R {
                VALUE_31_0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Random Number Upper Word Readout Value\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out1](out1) module"]
    pub type OUT1 = crate::Reg<u32, _OUT1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OUT1;
    #[doc = "`read()` method returns [out1::R](out1::R) reader structure"]
    impl crate::Readable for OUT1 {}
    #[doc = "Random Number Upper Word Readout Value"]
    pub mod out1 {
        #[doc = "Reader of register OUT1"]
        pub type R = crate::R<u32, super::OUT1>;
        #[doc = "Reader of field `VALUE_63_32`"]
        pub type VALUE_63_32_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - VALUE_63_32"]
            #[inline(always)]
            pub fn value_63_32(&self) -> VALUE_63_32_R {
                VALUE_63_32_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqflagstat](irqflagstat) module"]
    pub type IRQFLAGSTAT = crate::Reg<u32, _IRQFLAGSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQFLAGSTAT;
    #[doc = "`read()` method returns [irqflagstat::R](irqflagstat::R) reader structure"]
    impl crate::Readable for IRQFLAGSTAT {}
    #[doc = "Interrupt Status"]
    pub mod irqflagstat {
        #[doc = "Reader of register IRQFLAGSTAT"]
        pub type R = crate::R<u32, super::IRQFLAGSTAT>;
        #[doc = "Reader of field `NEED_CLOCK`"]
        pub type NEED_CLOCK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SHUTDOWN_OVF`"]
        pub type SHUTDOWN_OVF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RDY`"]
        pub type RDY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 31 - NEED_CLOCK"]
            #[inline(always)]
            pub fn need_clock(&self) -> NEED_CLOCK_R {
                NEED_CLOCK_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 1 - SHUTDOWN_OVF"]
            #[inline(always)]
            pub fn shutdown_ovf(&self) -> SHUTDOWN_OVF_R {
                SHUTDOWN_OVF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RDY"]
            #[inline(always)]
            pub fn rdy(&self) -> RDY_R {
                RDY_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqflagmask](irqflagmask) module"]
    pub type IRQFLAGMASK = crate::Reg<u32, _IRQFLAGMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQFLAGMASK;
    #[doc = "`read()` method returns [irqflagmask::R](irqflagmask::R) reader structure"]
    impl crate::Readable for IRQFLAGMASK {}
    #[doc = "`write(|w| ..)` method takes [irqflagmask::W](irqflagmask::W) writer structure"]
    impl crate::Writable for IRQFLAGMASK {}
    #[doc = "Interrupt Mask"]
    pub mod irqflagmask {
        #[doc = "Reader of register IRQFLAGMASK"]
        pub type R = crate::R<u32, super::IRQFLAGMASK>;
        #[doc = "Writer for register IRQFLAGMASK"]
        pub type W = crate::W<u32, super::IRQFLAGMASK>;
        #[doc = "Register IRQFLAGMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQFLAGMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SHUTDOWN_OVF`"]
        pub type SHUTDOWN_OVF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SHUTDOWN_OVF`"]
        pub struct SHUTDOWN_OVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHUTDOWN_OVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RDY`"]
        pub type RDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RDY`"]
        pub struct RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - SHUTDOWN_OVF"]
            #[inline(always)]
            pub fn shutdown_ovf(&self) -> SHUTDOWN_OVF_R {
                SHUTDOWN_OVF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RDY"]
            #[inline(always)]
            pub fn rdy(&self) -> RDY_R {
                RDY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - SHUTDOWN_OVF"]
            #[inline(always)]
            pub fn shutdown_ovf(&mut self) -> SHUTDOWN_OVF_W {
                SHUTDOWN_OVF_W { w: self }
            }
            #[doc = "Bit 0 - RDY"]
            #[inline(always)]
            pub fn rdy(&mut self) -> RDY_W {
                RDY_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Flag Clear\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqflagclr](irqflagclr) module"]
    pub type IRQFLAGCLR = crate::Reg<u32, _IRQFLAGCLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQFLAGCLR;
    #[doc = "`write(|w| ..)` method takes [irqflagclr::W](irqflagclr::W) writer structure"]
    impl crate::Writable for IRQFLAGCLR {}
    #[doc = "Interrupt Flag Clear"]
    pub mod irqflagclr {
        #[doc = "Writer for register IRQFLAGCLR"]
        pub type W = crate::W<u32, super::IRQFLAGCLR>;
        #[doc = "Register IRQFLAGCLR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQFLAGCLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `SHUTDOWN_OVF`"]
        pub struct SHUTDOWN_OVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHUTDOWN_OVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `RDY`"]
        pub struct RDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - SHUTDOWN_OVF"]
            #[inline(always)]
            pub fn shutdown_ovf(&mut self) -> SHUTDOWN_OVF_W {
                SHUTDOWN_OVF_W { w: self }
            }
            #[doc = "Bit 0 - RDY"]
            #[inline(always)]
            pub fn rdy(&mut self) -> RDY_W {
                RDY_W { w: self }
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STARTUP_CYCLES`"]
        pub type STARTUP_CYCLES_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `STARTUP_CYCLES`"]
        pub struct STARTUP_CYCLES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STARTUP_CYCLES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TRNG_EN`"]
        pub type TRNG_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TRNG_EN`"]
        pub struct TRNG_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRNG_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `NO_LFSR_FB`"]
        pub type NO_LFSR_FB_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NO_LFSR_FB`"]
        pub struct NO_LFSR_FB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NO_LFSR_FB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TEST_MODE`"]
        pub type TEST_MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEST_MODE`"]
        pub struct TEST_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEST_MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - STARTUP_CYCLES"]
            #[inline(always)]
            pub fn startup_cycles(&self) -> STARTUP_CYCLES_R {
                STARTUP_CYCLES_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bit 10 - TRNG_EN"]
            #[inline(always)]
            pub fn trng_en(&self) -> TRNG_EN_R {
                TRNG_EN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 2 - NO_LFSR_FB"]
            #[inline(always)]
            pub fn no_lfsr_fb(&self) -> NO_LFSR_FB_R {
                NO_LFSR_FB_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TEST_MODE"]
            #[inline(always)]
            pub fn test_mode(&self) -> TEST_MODE_R {
                TEST_MODE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - STARTUP_CYCLES"]
            #[inline(always)]
            pub fn startup_cycles(&mut self) -> STARTUP_CYCLES_W {
                STARTUP_CYCLES_W { w: self }
            }
            #[doc = "Bit 10 - TRNG_EN"]
            #[inline(always)]
            pub fn trng_en(&mut self) -> TRNG_EN_W {
                TRNG_EN_W { w: self }
            }
            #[doc = "Bit 2 - NO_LFSR_FB"]
            #[inline(always)]
            pub fn no_lfsr_fb(&mut self) -> NO_LFSR_FB_W {
                NO_LFSR_FB_W { w: self }
            }
            #[doc = "Bit 1 - TEST_MODE"]
            #[inline(always)]
            pub fn test_mode(&mut self) -> TEST_MODE_W {
                TEST_MODE_W { w: self }
            }
        }
    }
    #[doc = "Configuration 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfg0](cfg0) module"]
    pub type CFG0 = crate::Reg<u32, _CFG0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG0;
    #[doc = "`read()` method returns [cfg0::R](cfg0::R) reader structure"]
    impl crate::Readable for CFG0 {}
    #[doc = "`write(|w| ..)` method takes [cfg0::W](cfg0::W) writer structure"]
    impl crate::Writable for CFG0 {}
    #[doc = "Configuration 0"]
    pub mod cfg0 {
        #[doc = "Reader of register CFG0"]
        pub type R = crate::R<u32, super::CFG0>;
        #[doc = "Writer for register CFG0"]
        pub type W = crate::W<u32, super::CFG0>;
        #[doc = "Register CFG0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MAX_REFILL_CYCLES`"]
        pub type MAX_REFILL_CYCLES_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `MAX_REFILL_CYCLES`"]
        pub struct MAX_REFILL_CYCLES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MAX_REFILL_CYCLES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SMPL_DIV`"]
        pub type SMPL_DIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMPL_DIV`"]
        pub struct SMPL_DIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPL_DIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MIN_REFILL_CYCLES`"]
        pub type MIN_REFILL_CYCLES_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MIN_REFILL_CYCLES`"]
        pub struct MIN_REFILL_CYCLES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MIN_REFILL_CYCLES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - MAX_REFILL_CYCLES"]
            #[inline(always)]
            pub fn max_refill_cycles(&self) -> MAX_REFILL_CYCLES_R {
                MAX_REFILL_CYCLES_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 8:11 - SMPL_DIV"]
            #[inline(always)]
            pub fn smpl_div(&self) -> SMPL_DIV_R {
                SMPL_DIV_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 0:7 - MIN_REFILL_CYCLES"]
            #[inline(always)]
            pub fn min_refill_cycles(&self) -> MIN_REFILL_CYCLES_R {
                MIN_REFILL_CYCLES_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - MAX_REFILL_CYCLES"]
            #[inline(always)]
            pub fn max_refill_cycles(&mut self) -> MAX_REFILL_CYCLES_W {
                MAX_REFILL_CYCLES_W { w: self }
            }
            #[doc = "Bits 8:11 - SMPL_DIV"]
            #[inline(always)]
            pub fn smpl_div(&mut self) -> SMPL_DIV_W {
                SMPL_DIV_W { w: self }
            }
            #[doc = "Bits 0:7 - MIN_REFILL_CYCLES"]
            #[inline(always)]
            pub fn min_refill_cycles(&mut self) -> MIN_REFILL_CYCLES_W {
                MIN_REFILL_CYCLES_W { w: self }
            }
        }
    }
    #[doc = "Alarm Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alarmcnt](alarmcnt) module"]
    pub type ALARMCNT = crate::Reg<u32, _ALARMCNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALARMCNT;
    #[doc = "`read()` method returns [alarmcnt::R](alarmcnt::R) reader structure"]
    impl crate::Readable for ALARMCNT {}
    #[doc = "`write(|w| ..)` method takes [alarmcnt::W](alarmcnt::W) writer structure"]
    impl crate::Writable for ALARMCNT {}
    #[doc = "Alarm Control"]
    pub mod alarmcnt {
        #[doc = "Reader of register ALARMCNT"]
        pub type R = crate::R<u32, super::ALARMCNT>;
        #[doc = "Writer for register ALARMCNT"]
        pub type W = crate::W<u32, super::ALARMCNT>;
        #[doc = "Register ALARMCNT `reset()`'s with value 0xff"]
        impl crate::ResetValue for super::ALARMCNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xff
            }
        }
        #[doc = "Reader of field `SHUTDOWN_CNT`"]
        pub type SHUTDOWN_CNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SHUTDOWN_CNT`"]
        pub struct SHUTDOWN_CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHUTDOWN_CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 24)) | (((value as u32) & 0x3f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SHUTDOWN_THR`"]
        pub type SHUTDOWN_THR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SHUTDOWN_THR`"]
        pub struct SHUTDOWN_THR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHUTDOWN_THR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 16)) | (((value as u32) & 0x1f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ALARM_THR`"]
        pub type ALARM_THR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ALARM_THR`"]
        pub struct ALARM_THR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALARM_THR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:29 - SHUTDOWN_CNT"]
            #[inline(always)]
            pub fn shutdown_cnt(&self) -> SHUTDOWN_CNT_R {
                SHUTDOWN_CNT_R::new(((self.bits >> 24) & 0x3f) as u8)
            }
            #[doc = "Bits 16:20 - SHUTDOWN_THR"]
            #[inline(always)]
            pub fn shutdown_thr(&self) -> SHUTDOWN_THR_R {
                SHUTDOWN_THR_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 0:7 - ALARM_THR"]
            #[inline(always)]
            pub fn alarm_thr(&self) -> ALARM_THR_R {
                ALARM_THR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:29 - SHUTDOWN_CNT"]
            #[inline(always)]
            pub fn shutdown_cnt(&mut self) -> SHUTDOWN_CNT_W {
                SHUTDOWN_CNT_W { w: self }
            }
            #[doc = "Bits 16:20 - SHUTDOWN_THR"]
            #[inline(always)]
            pub fn shutdown_thr(&mut self) -> SHUTDOWN_THR_W {
                SHUTDOWN_THR_W { w: self }
            }
            #[doc = "Bits 0:7 - ALARM_THR"]
            #[inline(always)]
            pub fn alarm_thr(&mut self) -> ALARM_THR_W {
                ALARM_THR_W { w: self }
            }
        }
    }
    #[doc = "FRO Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [froen](froen) module"]
    pub type FROEN = crate::Reg<u32, _FROEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FROEN;
    #[doc = "`read()` method returns [froen::R](froen::R) reader structure"]
    impl crate::Readable for FROEN {}
    #[doc = "`write(|w| ..)` method takes [froen::W](froen::W) writer structure"]
    impl crate::Writable for FROEN {}
    #[doc = "FRO Enable"]
    pub mod froen {
        #[doc = "Reader of register FROEN"]
        pub type R = crate::R<u32, super::FROEN>;
        #[doc = "Writer for register FROEN"]
        pub type W = crate::W<u32, super::FROEN>;
        #[doc = "Register FROEN `reset()`'s with value 0x00ff_ffff"]
        impl crate::ResetValue for super::FROEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x00ff_ffff
            }
        }
        #[doc = "Reader of field `FRO_MASK`"]
        pub type FRO_MASK_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FRO_MASK`"]
        pub struct FRO_MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRO_MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - FRO_MASK"]
            #[inline(always)]
            pub fn fro_mask(&self) -> FRO_MASK_R {
                FRO_MASK_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - FRO_MASK"]
            #[inline(always)]
            pub fn fro_mask(&mut self) -> FRO_MASK_W {
                FRO_MASK_W { w: self }
            }
        }
    }
    #[doc = "FRO De-tune Bit\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [frodetune](frodetune) module"]
    pub type FRODETUNE = crate::Reg<u32, _FRODETUNE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FRODETUNE;
    #[doc = "`read()` method returns [frodetune::R](frodetune::R) reader structure"]
    impl crate::Readable for FRODETUNE {}
    #[doc = "`write(|w| ..)` method takes [frodetune::W](frodetune::W) writer structure"]
    impl crate::Writable for FRODETUNE {}
    #[doc = "FRO De-tune Bit"]
    pub mod frodetune {
        #[doc = "Reader of register FRODETUNE"]
        pub type R = crate::R<u32, super::FRODETUNE>;
        #[doc = "Writer for register FRODETUNE"]
        pub type W = crate::W<u32, super::FRODETUNE>;
        #[doc = "Register FRODETUNE `reset()`'s with value 0"]
        impl crate::ResetValue for super::FRODETUNE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FRO_MASK`"]
        pub type FRO_MASK_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FRO_MASK`"]
        pub struct FRO_MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRO_MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - FRO_MASK"]
            #[inline(always)]
            pub fn fro_mask(&self) -> FRO_MASK_R {
                FRO_MASK_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - FRO_MASK"]
            #[inline(always)]
            pub fn fro_mask(&mut self) -> FRO_MASK_W {
                FRO_MASK_W { w: self }
            }
        }
    }
    #[doc = "Alarm Event\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alarmmask](alarmmask) module"]
    pub type ALARMMASK = crate::Reg<u32, _ALARMMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALARMMASK;
    #[doc = "`read()` method returns [alarmmask::R](alarmmask::R) reader structure"]
    impl crate::Readable for ALARMMASK {}
    #[doc = "`write(|w| ..)` method takes [alarmmask::W](alarmmask::W) writer structure"]
    impl crate::Writable for ALARMMASK {}
    #[doc = "Alarm Event"]
    pub mod alarmmask {
        #[doc = "Reader of register ALARMMASK"]
        pub type R = crate::R<u32, super::ALARMMASK>;
        #[doc = "Writer for register ALARMMASK"]
        pub type W = crate::W<u32, super::ALARMMASK>;
        #[doc = "Register ALARMMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALARMMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FRO_MASK`"]
        pub type FRO_MASK_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FRO_MASK`"]
        pub struct FRO_MASK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRO_MASK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - FRO_MASK"]
            #[inline(always)]
            pub fn fro_mask(&self) -> FRO_MASK_R {
                FRO_MASK_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - FRO_MASK"]
            #[inline(always)]
            pub fn fro_mask(&mut self) -> FRO_MASK_W {
                FRO_MASK_W { w: self }
            }
        }
    }
    #[doc = "Alarm Shutdown\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alarmstop](alarmstop) module"]
    pub type ALARMSTOP = crate::Reg<u32, _ALARMSTOP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALARMSTOP;
    #[doc = "`read()` method returns [alarmstop::R](alarmstop::R) reader structure"]
    impl crate::Readable for ALARMSTOP {}
    #[doc = "`write(|w| ..)` method takes [alarmstop::W](alarmstop::W) writer structure"]
    impl crate::Writable for ALARMSTOP {}
    #[doc = "Alarm Shutdown"]
    pub mod alarmstop {
        #[doc = "Reader of register ALARMSTOP"]
        pub type R = crate::R<u32, super::ALARMSTOP>;
        #[doc = "Writer for register ALARMSTOP"]
        pub type W = crate::W<u32, super::ALARMSTOP>;
        #[doc = "Register ALARMSTOP `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALARMSTOP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `FRO_FLAGS`"]
        pub type FRO_FLAGS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `FRO_FLAGS`"]
        pub struct FRO_FLAGS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRO_FLAGS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - FRO_FLAGS"]
            #[inline(always)]
            pub fn fro_flags(&self) -> FRO_FLAGS_R {
                FRO_FLAGS_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - FRO_FLAGS"]
            #[inline(always)]
            pub fn fro_flags(&mut self) -> FRO_FLAGS_W {
                FRO_FLAGS_W { w: self }
            }
        }
    }
    #[doc = "LFSR Readout Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lfsr0](lfsr0) module"]
    pub type LFSR0 = crate::Reg<u32, _LFSR0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LFSR0;
    #[doc = "`read()` method returns [lfsr0::R](lfsr0::R) reader structure"]
    impl crate::Readable for LFSR0 {}
    #[doc = "`write(|w| ..)` method takes [lfsr0::W](lfsr0::W) writer structure"]
    impl crate::Writable for LFSR0 {}
    #[doc = "LFSR Readout Value"]
    pub mod lfsr0 {
        #[doc = "Reader of register LFSR0"]
        pub type R = crate::R<u32, super::LFSR0>;
        #[doc = "Writer for register LFSR0"]
        pub type W = crate::W<u32, super::LFSR0>;
        #[doc = "Register LFSR0 `reset()`'s with value 0"]
        impl crate::ResetValue for super::LFSR0 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LFSR_31_0`"]
        pub type LFSR_31_0_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `LFSR_31_0`"]
        pub struct LFSR_31_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LFSR_31_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - LFSR_31_0"]
            #[inline(always)]
            pub fn lfsr_31_0(&self) -> LFSR_31_0_R {
                LFSR_31_0_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - LFSR_31_0"]
            #[inline(always)]
            pub fn lfsr_31_0(&mut self) -> LFSR_31_0_W {
                LFSR_31_0_W { w: self }
            }
        }
    }
    #[doc = "LFSR Readout Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lfsr1](lfsr1) module"]
    pub type LFSR1 = crate::Reg<u32, _LFSR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LFSR1;
    #[doc = "`read()` method returns [lfsr1::R](lfsr1::R) reader structure"]
    impl crate::Readable for LFSR1 {}
    #[doc = "`write(|w| ..)` method takes [lfsr1::W](lfsr1::W) writer structure"]
    impl crate::Writable for LFSR1 {}
    #[doc = "LFSR Readout Value"]
    pub mod lfsr1 {
        #[doc = "Reader of register LFSR1"]
        pub type R = crate::R<u32, super::LFSR1>;
        #[doc = "Writer for register LFSR1"]
        pub type W = crate::W<u32, super::LFSR1>;
        #[doc = "Register LFSR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::LFSR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LFSR_63_32`"]
        pub type LFSR_63_32_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `LFSR_63_32`"]
        pub struct LFSR_63_32_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LFSR_63_32_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - LFSR_63_32"]
            #[inline(always)]
            pub fn lfsr_63_32(&self) -> LFSR_63_32_R {
                LFSR_63_32_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - LFSR_63_32"]
            #[inline(always)]
            pub fn lfsr_63_32(&mut self) -> LFSR_63_32_W {
                LFSR_63_32_W { w: self }
            }
        }
    }
    #[doc = "LFSR Readout Value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lfsr2](lfsr2) module"]
    pub type LFSR2 = crate::Reg<u32, _LFSR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LFSR2;
    #[doc = "`read()` method returns [lfsr2::R](lfsr2::R) reader structure"]
    impl crate::Readable for LFSR2 {}
    #[doc = "`write(|w| ..)` method takes [lfsr2::W](lfsr2::W) writer structure"]
    impl crate::Writable for LFSR2 {}
    #[doc = "LFSR Readout Value"]
    pub mod lfsr2 {
        #[doc = "Reader of register LFSR2"]
        pub type R = crate::R<u32, super::LFSR2>;
        #[doc = "Writer for register LFSR2"]
        pub type W = crate::W<u32, super::LFSR2>;
        #[doc = "Register LFSR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::LFSR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LFSR_80_64`"]
        pub type LFSR_80_64_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `LFSR_80_64`"]
        pub struct LFSR_80_64_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LFSR_80_64_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0001_ffff) | ((value as u32) & 0x0001_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:16 - LFSR_80_64"]
            #[inline(always)]
            pub fn lfsr_80_64(&self) -> LFSR_80_64_R {
                LFSR_80_64_R::new((self.bits & 0x0001_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:16 - LFSR_80_64"]
            #[inline(always)]
            pub fn lfsr_80_64(&mut self) -> LFSR_80_64_W {
                LFSR_80_64_W { w: self }
            }
        }
    }
    #[doc = "TRNG Engine Options Information\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hwopt](hwopt) module"]
    pub type HWOPT = crate::Reg<u32, _HWOPT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HWOPT;
    #[doc = "`read()` method returns [hwopt::R](hwopt::R) reader structure"]
    impl crate::Readable for HWOPT {}
    #[doc = "TRNG Engine Options Information"]
    pub mod hwopt {
        #[doc = "Reader of register HWOPT"]
        pub type R = crate::R<u32, super::HWOPT>;
        #[doc = "Reader of field `NR_OF_FROS`"]
        pub type NR_OF_FROS_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 6:11 - NR_OF_FROS"]
            #[inline(always)]
            pub fn nr_of_fros(&self) -> NR_OF_FROS_R {
                NR_OF_FROS_R::new(((self.bits >> 6) & 0x3f) as u8)
            }
        }
    }
    #[doc = "HW Version 0 EIP Number And Core Revision\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hwver0](hwver0) module"]
    pub type HWVER0 = crate::Reg<u32, _HWVER0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HWVER0;
    #[doc = "`read()` method returns [hwver0::R](hwver0::R) reader structure"]
    impl crate::Readable for HWVER0 {}
    #[doc = "HW Version 0 EIP Number And Core Revision"]
    pub mod hwver0 {
        #[doc = "Reader of register HWVER0"]
        pub type R = crate::R<u32, super::HWVER0>;
        #[doc = "Reader of field `HW_MAJOR_VER`"]
        pub type HW_MAJOR_VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HW_MINOR_VER`"]
        pub type HW_MINOR_VER_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HW_PATCH_LVL`"]
        pub type HW_PATCH_LVL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `EIP_NUM_COMPL`"]
        pub type EIP_NUM_COMPL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `EIP_NUM`"]
        pub type EIP_NUM_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 24:27 - HW_MAJOR_VER"]
            #[inline(always)]
            pub fn hw_major_ver(&self) -> HW_MAJOR_VER_R {
                HW_MAJOR_VER_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - HW_MINOR_VER"]
            #[inline(always)]
            pub fn hw_minor_ver(&self) -> HW_MINOR_VER_R {
                HW_MINOR_VER_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - HW_PATCH_LVL"]
            #[inline(always)]
            pub fn hw_patch_lvl(&self) -> HW_PATCH_LVL_R {
                HW_PATCH_LVL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - EIP_NUM_COMPL"]
            #[inline(always)]
            pub fn eip_num_compl(&self) -> EIP_NUM_COMPL_R {
                EIP_NUM_COMPL_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - EIP_NUM"]
            #[inline(always)]
            pub fn eip_num(&self) -> EIP_NUM_R {
                EIP_NUM_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Interrupt Status After Masking\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqstatmask](irqstatmask) module"]
    pub type IRQSTATMASK = crate::Reg<u32, _IRQSTATMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQSTATMASK;
    #[doc = "`read()` method returns [irqstatmask::R](irqstatmask::R) reader structure"]
    impl crate::Readable for IRQSTATMASK {}
    #[doc = "Interrupt Status After Masking"]
    pub mod irqstatmask {
        #[doc = "Reader of register IRQSTATMASK"]
        pub type R = crate::R<u32, super::IRQSTATMASK>;
        #[doc = "Reader of field `SHUTDOWN_OVF`"]
        pub type SHUTDOWN_OVF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RDY`"]
        pub type RDY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 1 - SHUTDOWN_OVF"]
            #[inline(always)]
            pub fn shutdown_ovf(&self) -> SHUTDOWN_OVF_R {
                SHUTDOWN_OVF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RDY"]
            #[inline(always)]
            pub fn rdy(&self) -> RDY_R {
                RDY_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "HW Version 1 TRNG Revision Number\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [hwver1](hwver1) module"]
    pub type HWVER1 = crate::Reg<u32, _HWVER1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _HWVER1;
    #[doc = "`read()` method returns [hwver1::R](hwver1::R) reader structure"]
    impl crate::Readable for HWVER1 {}
    #[doc = "HW Version 1 TRNG Revision Number"]
    pub mod hwver1 {
        #[doc = "Reader of register HWVER1"]
        pub type R = crate::R<u32, super::HWVER1>;
        #[doc = "Reader of field `REV`"]
        pub type REV_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - REV"]
            #[inline(always)]
            pub fn rev(&self) -> REV_R {
                REV_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Interrupt Set\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqset](irqset) module"]
    pub type IRQSET = crate::Reg<u32, _IRQSET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQSET;
    #[doc = "`read()` method returns [irqset::R](irqset::R) reader structure"]
    impl crate::Readable for IRQSET {}
    #[doc = "`write(|w| ..)` method takes [irqset::W](irqset::W) writer structure"]
    impl crate::Writable for IRQSET {}
    #[doc = "Interrupt Set"]
    pub mod irqset {
        #[doc = "Reader of register IRQSET"]
        pub type R = crate::R<u32, super::IRQSET>;
        #[doc = "Writer for register IRQSET"]
        pub type W = crate::W<u32, super::IRQSET>;
        #[doc = "Register IRQSET `reset()`'s with value 0"]
        impl crate::ResetValue for super::IRQSET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        impl R {}
        impl W {}
    }
    #[doc = "SW Reset Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swreset](swreset) module"]
    pub type SWRESET = crate::Reg<u32, _SWRESET>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWRESET;
    #[doc = "`read()` method returns [swreset::R](swreset::R) reader structure"]
    impl crate::Readable for SWRESET {}
    #[doc = "`write(|w| ..)` method takes [swreset::W](swreset::W) writer structure"]
    impl crate::Writable for SWRESET {}
    #[doc = "SW Reset Control"]
    pub mod swreset {
        #[doc = "Reader of register SWRESET"]
        pub type R = crate::R<u32, super::SWRESET>;
        #[doc = "Writer for register SWRESET"]
        pub type W = crate::W<u32, super::SWRESET>;
        #[doc = "Register SWRESET `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWRESET {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RESET`"]
        pub type RESET_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - RESET"]
            #[inline(always)]
            pub fn reset(&self) -> RESET_R {
                RESET_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - RESET"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [irqstat](irqstat) module"]
    pub type IRQSTAT = crate::Reg<u32, _IRQSTAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IRQSTAT;
    #[doc = "`read()` method returns [irqstat::R](irqstat::R) reader structure"]
    impl crate::Readable for IRQSTAT {}
    #[doc = "Interrupt Status"]
    pub mod irqstat {
        #[doc = "Reader of register IRQSTAT"]
        pub type R = crate::R<u32, super::IRQSTAT>;
        #[doc = "Reader of field `STAT`"]
        pub type STAT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - STAT"]
            #[inline(always)]
            pub fn stat(&self) -> STAT_R {
                STAT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
}
#[doc = "Universal Asynchronous Receiver/Transmitter (UART) interface"]
pub struct UART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART0 {}
impl UART0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        0x4000_1000 as *const _
    }
}
impl Deref for UART0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*UART0::ptr() }
    }
}
#[doc = "Universal Asynchronous Receiver/Transmitter (UART) interface"]
pub mod uart0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Data For words to be transmitted: - if the FIFOs are enabled (LCRH.FEN = 1), data written to this location is pushed onto the transmit FIFO - if the FIFOs are not enabled (LCRH.FEN = 0), data is stored in the transmitter holding register (the bottom word of the transmit FIFO). The write operation initiates transmission from the UART. The data is prefixed with a start bit, appended with the appropriate parity bit (if parity is enabled), and a stop bit. The resultant word is then transmitted. For received words: - if the FIFOs are enabled (LCRH.FEN = 1), the data byte and the 4-bit status (break, frame, parity, and overrun) is pushed onto the 12-bit wide receive FIFO - if the FIFOs are not enabled (LCRH.FEN = 0), the data byte and status are stored in the receiving holding register (the bottom word of the receive FIFO). The received data byte is read by performing reads from this register along with the corresponding status information. The status information can also be read by a read of the RSR register."]
        pub dr: DR,
        _reserved_1_ecr: [u8; 4usize],
        _reserved2: [u8; 16usize],
        #[doc = "0x18 - Flag Reads from this register return the UART flags."]
        pub fr: FR,
        _reserved3: [u8; 8usize],
        #[doc = "0x24 - Integer Baud-Rate Divisor If this register is modified while trasmission or reception is on-going, the baudrate will not be updated until transmission or reception of the current character is complete."]
        pub ibrd: IBRD,
        #[doc = "0x28 - Fractional Baud-Rate Divisor If this register is modified while trasmission or reception is on-going, the baudrate will not be updated until transmission or reception of the current character is complete."]
        pub fbrd: FBRD,
        #[doc = "0x2c - Line Control"]
        pub lcrh: LCRH,
        #[doc = "0x30 - Control"]
        pub ctl: CTL,
        #[doc = "0x34 - Interrupt FIFO Level Select"]
        pub ifls: IFLS,
        #[doc = "0x38 - Interrupt Mask Set/Clear"]
        pub imsc: IMSC,
        #[doc = "0x3c - Raw Interrupt Status"]
        pub ris: RIS,
        #[doc = "0x40 - Masked Interrupt Status"]
        pub mis: MIS,
        #[doc = "0x44 - Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect."]
        pub icr: ICR,
        #[doc = "0x48 - DMA Control"]
        pub dmactl: DMACTL,
    }
    impl RegisterBlock {
        #[doc = "0x04 - Error Clear This register is mapped to the same address as RSR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors)."]
        #[inline(always)]
        pub fn ecr(&self) -> &ECR {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const ECR) }
        }
        #[doc = "0x04 - Error Clear This register is mapped to the same address as RSR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors)."]
        #[inline(always)]
        pub fn ecr_mut(&self) -> &mut ECR {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut ECR) }
        }
        #[doc = "0x04 - Status This register is mapped to the same address as ECR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors). If the status is read from this register, then the status information for break, framing and parity corresponds to the data character read from the Data Register, DR prior to reading the RSR. The status information for overrun is set immediately when an overrun condition occurs."]
        #[inline(always)]
        pub fn rsr(&self) -> &RSR {
            unsafe { &*(((self as *const Self) as *const u8).add(4usize) as *const RSR) }
        }
        #[doc = "0x04 - Status This register is mapped to the same address as ECR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors). If the status is read from this register, then the status information for break, framing and parity corresponds to the data character read from the Data Register, DR prior to reading the RSR. The status information for overrun is set immediately when an overrun condition occurs."]
        #[inline(always)]
        pub fn rsr_mut(&self) -> &mut RSR {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(4usize) as *mut RSR) }
        }
    }
    #[doc = "Data For words to be transmitted: - if the FIFOs are enabled (LCRH.FEN = 1), data written to this location is pushed onto the transmit FIFO - if the FIFOs are not enabled (LCRH.FEN = 0), data is stored in the transmitter holding register (the bottom word of the transmit FIFO). The write operation initiates transmission from the UART. The data is prefixed with a start bit, appended with the appropriate parity bit (if parity is enabled), and a stop bit. The resultant word is then transmitted. For received words: - if the FIFOs are enabled (LCRH.FEN = 1), the data byte and the 4-bit status (break, frame, parity, and overrun) is pushed onto the 12-bit wide receive FIFO - if the FIFOs are not enabled (LCRH.FEN = 0), the data byte and status are stored in the receiving holding register (the bottom word of the receive FIFO). The received data byte is read by performing reads from this register along with the corresponding status information. The status information can also be read by a read of the RSR register.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data For words to be transmitted: - if the FIFOs are enabled (LCRH.FEN = 1), data written to this location is pushed onto the transmit FIFO - if the FIFOs are not enabled (LCRH.FEN = 0), data is stored in the transmitter holding register (the bottom word of the transmit FIFO). The write operation initiates transmission from the UART. The data is prefixed with a start bit, appended with the appropriate parity bit (if parity is enabled), and a stop bit. The resultant word is then transmitted. For received words: - if the FIFOs are enabled (LCRH.FEN = 1), the data byte and the 4-bit status (break, frame, parity, and overrun) is pushed onto the 12-bit wide receive FIFO - if the FIFOs are not enabled (LCRH.FEN = 0), the data byte and status are stored in the receiving holding register (the bottom word of the receive FIFO). The received data byte is read by performing reads from this register along with the corresponding status information. The status information can also be read by a read of the RSR register."]
    pub mod dr {
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `OE`"]
        pub struct OE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `BE`"]
        pub struct BE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `FE`"]
        pub struct FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `DATA`"]
        pub struct DATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 11 - OE"]
            #[inline(always)]
            pub fn oe(&mut self) -> OE_W {
                OE_W { w: self }
            }
            #[doc = "Bit 10 - BE"]
            #[inline(always)]
            pub fn be(&mut self) -> BE_W {
                BE_W { w: self }
            }
            #[doc = "Bit 9 - PE"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 8 - FE"]
            #[inline(always)]
            pub fn fe(&mut self) -> FE_W {
                FE_W { w: self }
            }
            #[doc = "Bits 0:7 - DATA"]
            #[inline(always)]
            pub fn data(&mut self) -> DATA_W {
                DATA_W { w: self }
            }
        }
    }
    #[doc = "Status This register is mapped to the same address as ECR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors). If the status is read from this register, then the status information for break, framing and parity corresponds to the data character read from the Data Register, DR prior to reading the RSR. The status information for overrun is set immediately when an overrun condition occurs.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rsr](rsr) module"]
    pub type RSR = crate::Reg<u32, _RSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RSR;
    #[doc = "`read()` method returns [rsr::R](rsr::R) reader structure"]
    impl crate::Readable for RSR {}
    #[doc = "Status This register is mapped to the same address as ECR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors). If the status is read from this register, then the status information for break, framing and parity corresponds to the data character read from the Data Register, DR prior to reading the RSR. The status information for overrun is set immediately when an overrun condition occurs."]
    pub mod rsr {
        #[doc = "Reader of register RSR"]
        pub type R = crate::R<u32, super::RSR>;
        #[doc = "Reader of field `OE`"]
        pub type OE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BE`"]
        pub type BE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FE`"]
        pub type FE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 3 - OE"]
            #[inline(always)]
            pub fn oe(&self) -> OE_R {
                OE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BE"]
            #[inline(always)]
            pub fn be(&self) -> BE_R {
                BE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - PE"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - FE"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Error Clear This register is mapped to the same address as RSR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors).\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ecr](ecr) module"]
    pub type ECR = crate::Reg<u32, _ECR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ECR;
    #[doc = "`write(|w| ..)` method takes [ecr::W](ecr::W) writer structure"]
    impl crate::Writable for ECR {}
    #[doc = "Error Clear This register is mapped to the same address as RSR register. Reads from this address are associated with RSR register and return the receive status. Writes to this address are associated with ECR register and clear the receive status flags (framing, parity, break, and overrun errors)."]
    pub mod ecr {
        #[doc = "Writer for register ECR"]
        pub type W = crate::W<u32, super::ECR>;
        #[doc = "Register ECR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ECR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `OE`"]
        pub struct OE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BE`"]
        pub struct BE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `FE`"]
        pub struct FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 3 - OE"]
            #[inline(always)]
            pub fn oe(&mut self) -> OE_W {
                OE_W { w: self }
            }
            #[doc = "Bit 2 - BE"]
            #[inline(always)]
            pub fn be(&mut self) -> BE_W {
                BE_W { w: self }
            }
            #[doc = "Bit 1 - PE"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 0 - FE"]
            #[inline(always)]
            pub fn fe(&mut self) -> FE_W {
                FE_W { w: self }
            }
        }
    }
    #[doc = "Flag Reads from this register return the UART flags.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fr](fr) module"]
    pub type FR = crate::Reg<u32, _FR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FR;
    #[doc = "`read()` method returns [fr::R](fr::R) reader structure"]
    impl crate::Readable for FR {}
    #[doc = "Flag Reads from this register return the UART flags."]
    pub mod fr {
        #[doc = "Reader of register FR"]
        pub type R = crate::R<u32, super::FR>;
        #[doc = "Reader of field `TXFE`"]
        pub type TXFE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFF`"]
        pub type RXFF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXFF`"]
        pub type TXFF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFE`"]
        pub type RXFE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTS`"]
        pub type CTS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 7 - TXFE"]
            #[inline(always)]
            pub fn txfe(&self) -> TXFE_R {
                TXFE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RXFF"]
            #[inline(always)]
            pub fn rxff(&self) -> RXFF_R {
                RXFF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXFF"]
            #[inline(always)]
            pub fn txff(&self) -> TXFF_R {
                TXFF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXFE"]
            #[inline(always)]
            pub fn rxfe(&self) -> RXFE_R {
                RXFE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CTS"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Integer Baud-Rate Divisor If this register is modified while trasmission or reception is on-going, the baudrate will not be updated until transmission or reception of the current character is complete.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ibrd](ibrd) module"]
    pub type IBRD = crate::Reg<u32, _IBRD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IBRD;
    #[doc = "`read()` method returns [ibrd::R](ibrd::R) reader structure"]
    impl crate::Readable for IBRD {}
    #[doc = "`write(|w| ..)` method takes [ibrd::W](ibrd::W) writer structure"]
    impl crate::Writable for IBRD {}
    #[doc = "Integer Baud-Rate Divisor If this register is modified while trasmission or reception is on-going, the baudrate will not be updated until transmission or reception of the current character is complete."]
    pub mod ibrd {
        #[doc = "Reader of register IBRD"]
        pub type R = crate::R<u32, super::IBRD>;
        #[doc = "Writer for register IBRD"]
        pub type W = crate::W<u32, super::IBRD>;
        #[doc = "Register IBRD `reset()`'s with value 0"]
        impl crate::ResetValue for super::IBRD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIVINT`"]
        pub type DIVINT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DIVINT`"]
        pub struct DIVINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVINT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DIVINT"]
            #[inline(always)]
            pub fn divint(&self) -> DIVINT_R {
                DIVINT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DIVINT"]
            #[inline(always)]
            pub fn divint(&mut self) -> DIVINT_W {
                DIVINT_W { w: self }
            }
        }
    }
    #[doc = "Fractional Baud-Rate Divisor If this register is modified while trasmission or reception is on-going, the baudrate will not be updated until transmission or reception of the current character is complete.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fbrd](fbrd) module"]
    pub type FBRD = crate::Reg<u32, _FBRD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FBRD;
    #[doc = "`read()` method returns [fbrd::R](fbrd::R) reader structure"]
    impl crate::Readable for FBRD {}
    #[doc = "`write(|w| ..)` method takes [fbrd::W](fbrd::W) writer structure"]
    impl crate::Writable for FBRD {}
    #[doc = "Fractional Baud-Rate Divisor If this register is modified while trasmission or reception is on-going, the baudrate will not be updated until transmission or reception of the current character is complete."]
    pub mod fbrd {
        #[doc = "Reader of register FBRD"]
        pub type R = crate::R<u32, super::FBRD>;
        #[doc = "Writer for register FBRD"]
        pub type W = crate::W<u32, super::FBRD>;
        #[doc = "Register FBRD `reset()`'s with value 0"]
        impl crate::ResetValue for super::FBRD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DIVFRAC`"]
        pub type DIVFRAC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DIVFRAC`"]
        pub struct DIVFRAC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVFRAC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - DIVFRAC"]
            #[inline(always)]
            pub fn divfrac(&self) -> DIVFRAC_R {
                DIVFRAC_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - DIVFRAC"]
            #[inline(always)]
            pub fn divfrac(&mut self) -> DIVFRAC_W {
                DIVFRAC_W { w: self }
            }
        }
    }
    #[doc = "Line Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lcrh](lcrh) module"]
    pub type LCRH = crate::Reg<u32, _LCRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCRH;
    #[doc = "`read()` method returns [lcrh::R](lcrh::R) reader structure"]
    impl crate::Readable for LCRH {}
    #[doc = "`write(|w| ..)` method takes [lcrh::W](lcrh::W) writer structure"]
    impl crate::Writable for LCRH {}
    #[doc = "Line Control"]
    pub mod lcrh {
        #[doc = "Reader of register LCRH"]
        pub type R = crate::R<u32, super::LCRH>;
        #[doc = "Writer for register LCRH"]
        pub type W = crate::W<u32, super::LCRH>;
        #[doc = "Register LCRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SPS`"]
        pub type SPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPS`"]
        pub struct SPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `WLEN`"]
        pub type WLEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WLEN`"]
        pub struct WLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `FEN`"]
        pub type FEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FEN`"]
        pub struct FEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `STP2`"]
        pub type STP2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STP2`"]
        pub struct STP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STP2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EPS`"]
        pub type EPS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EPS`"]
        pub struct EPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EPS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PEN`"]
        pub type PEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PEN`"]
        pub struct PEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `BRK`"]
        pub type BRK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BRK`"]
        pub struct BRK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - SPS"]
            #[inline(always)]
            pub fn sps(&self) -> SPS_R {
                SPS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - WLEN"]
            #[inline(always)]
            pub fn wlen(&self) -> WLEN_R {
                WLEN_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 4 - FEN"]
            #[inline(always)]
            pub fn fen(&self) -> FEN_R {
                FEN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - STP2"]
            #[inline(always)]
            pub fn stp2(&self) -> STP2_R {
                STP2_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - EPS"]
            #[inline(always)]
            pub fn eps(&self) -> EPS_R {
                EPS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - PEN"]
            #[inline(always)]
            pub fn pen(&self) -> PEN_R {
                PEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - BRK"]
            #[inline(always)]
            pub fn brk(&self) -> BRK_R {
                BRK_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - SPS"]
            #[inline(always)]
            pub fn sps(&mut self) -> SPS_W {
                SPS_W { w: self }
            }
            #[doc = "Bits 5:6 - WLEN"]
            #[inline(always)]
            pub fn wlen(&mut self) -> WLEN_W {
                WLEN_W { w: self }
            }
            #[doc = "Bit 4 - FEN"]
            #[inline(always)]
            pub fn fen(&mut self) -> FEN_W {
                FEN_W { w: self }
            }
            #[doc = "Bit 3 - STP2"]
            #[inline(always)]
            pub fn stp2(&mut self) -> STP2_W {
                STP2_W { w: self }
            }
            #[doc = "Bit 2 - EPS"]
            #[inline(always)]
            pub fn eps(&mut self) -> EPS_W {
                EPS_W { w: self }
            }
            #[doc = "Bit 1 - PEN"]
            #[inline(always)]
            pub fn pen(&mut self) -> PEN_W {
                PEN_W { w: self }
            }
            #[doc = "Bit 0 - BRK"]
            #[inline(always)]
            pub fn brk(&mut self) -> BRK_W {
                BRK_W { w: self }
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0x0300"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0300
            }
        }
        #[doc = "Reader of field `CTSEN`"]
        pub type CTSEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSEN`"]
        pub struct CTSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `RTSEN`"]
        pub type RTSEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTSEN`"]
        pub struct RTSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `RTS`"]
        pub type RTS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTS`"]
        pub struct RTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RXE`"]
        pub type RXE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXE`"]
        pub struct RXE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXE`"]
        pub struct TXE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LBE`"]
        pub type LBE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBE`"]
        pub struct LBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `UARTEN`"]
        pub type UARTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UARTEN`"]
        pub struct UARTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UARTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - CTSEN"]
            #[inline(always)]
            pub fn ctsen(&self) -> CTSEN_R {
                CTSEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - RTSEN"]
            #[inline(always)]
            pub fn rtsen(&self) -> RTSEN_R {
                RTSEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 11 - RTS"]
            #[inline(always)]
            pub fn rts(&self) -> RTS_R {
                RTS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - RXE"]
            #[inline(always)]
            pub fn rxe(&self) -> RXE_R {
                RXE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TXE"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - LBE"]
            #[inline(always)]
            pub fn lbe(&self) -> LBE_R {
                LBE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 0 - UARTEN"]
            #[inline(always)]
            pub fn uarten(&self) -> UARTEN_R {
                UARTEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - CTSEN"]
            #[inline(always)]
            pub fn ctsen(&mut self) -> CTSEN_W {
                CTSEN_W { w: self }
            }
            #[doc = "Bit 14 - RTSEN"]
            #[inline(always)]
            pub fn rtsen(&mut self) -> RTSEN_W {
                RTSEN_W { w: self }
            }
            #[doc = "Bit 11 - RTS"]
            #[inline(always)]
            pub fn rts(&mut self) -> RTS_W {
                RTS_W { w: self }
            }
            #[doc = "Bit 9 - RXE"]
            #[inline(always)]
            pub fn rxe(&mut self) -> RXE_W {
                RXE_W { w: self }
            }
            #[doc = "Bit 8 - TXE"]
            #[inline(always)]
            pub fn txe(&mut self) -> TXE_W {
                TXE_W { w: self }
            }
            #[doc = "Bit 7 - LBE"]
            #[inline(always)]
            pub fn lbe(&mut self) -> LBE_W {
                LBE_W { w: self }
            }
            #[doc = "Bit 0 - UARTEN"]
            #[inline(always)]
            pub fn uarten(&mut self) -> UARTEN_W {
                UARTEN_W { w: self }
            }
        }
    }
    #[doc = "Interrupt FIFO Level Select\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifls](ifls) module"]
    pub type IFLS = crate::Reg<u32, _IFLS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IFLS;
    #[doc = "`read()` method returns [ifls::R](ifls::R) reader structure"]
    impl crate::Readable for IFLS {}
    #[doc = "`write(|w| ..)` method takes [ifls::W](ifls::W) writer structure"]
    impl crate::Writable for IFLS {}
    #[doc = "Interrupt FIFO Level Select"]
    pub mod ifls {
        #[doc = "Reader of register IFLS"]
        pub type R = crate::R<u32, super::IFLS>;
        #[doc = "Writer for register IFLS"]
        pub type W = crate::W<u32, super::IFLS>;
        #[doc = "Register IFLS `reset()`'s with value 0x12"]
        impl crate::ResetValue for super::IFLS {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x12
            }
        }
        #[doc = "Reader of field `RXSEL`"]
        pub type RXSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RXSEL`"]
        pub struct RXSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u32) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TXSEL`"]
        pub type TXSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TXSEL`"]
        pub struct TXSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 3:5 - RXSEL"]
            #[inline(always)]
            pub fn rxsel(&self) -> RXSEL_R {
                RXSEL_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - TXSEL"]
            #[inline(always)]
            pub fn txsel(&self) -> TXSEL_R {
                TXSEL_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 3:5 - RXSEL"]
            #[inline(always)]
            pub fn rxsel(&mut self) -> RXSEL_W {
                RXSEL_W { w: self }
            }
            #[doc = "Bits 0:2 - TXSEL"]
            #[inline(always)]
            pub fn txsel(&mut self) -> TXSEL_W {
                TXSEL_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Mask Set/Clear\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imsc](imsc) module"]
    pub type IMSC = crate::Reg<u32, _IMSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMSC;
    #[doc = "`read()` method returns [imsc::R](imsc::R) reader structure"]
    impl crate::Readable for IMSC {}
    #[doc = "`write(|w| ..)` method takes [imsc::W](imsc::W) writer structure"]
    impl crate::Writable for IMSC {}
    #[doc = "Interrupt Mask Set/Clear"]
    pub mod imsc {
        #[doc = "Reader of register IMSC"]
        pub type R = crate::R<u32, super::IMSC>;
        #[doc = "Writer for register IMSC"]
        pub type W = crate::W<u32, super::IMSC>;
        #[doc = "Register IMSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::IMSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OEIM`"]
        pub type OEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OEIM`"]
        pub struct OEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `BEIM`"]
        pub type BEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BEIM`"]
        pub struct BEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PEIM`"]
        pub type PEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PEIM`"]
        pub struct PEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `FEIM`"]
        pub type FEIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FEIM`"]
        pub struct FEIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RTIM`"]
        pub type RTIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTIM`"]
        pub struct RTIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TXIM`"]
        pub type TXIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXIM`"]
        pub struct TXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `RXIM`"]
        pub type RXIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXIM`"]
        pub struct RXIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CTSMIM`"]
        pub type CTSMIM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSMIM`"]
        pub struct CTSMIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSMIM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 10 - OEIM"]
            #[inline(always)]
            pub fn oeim(&self) -> OEIM_R {
                OEIM_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BEIM"]
            #[inline(always)]
            pub fn beim(&self) -> BEIM_R {
                BEIM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PEIM"]
            #[inline(always)]
            pub fn peim(&self) -> PEIM_R {
                PEIM_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FEIM"]
            #[inline(always)]
            pub fn feim(&self) -> FEIM_R {
                FEIM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTIM"]
            #[inline(always)]
            pub fn rtim(&self) -> RTIM_R {
                RTIM_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXIM"]
            #[inline(always)]
            pub fn txim(&self) -> TXIM_R {
                TXIM_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXIM"]
            #[inline(always)]
            pub fn rxim(&self) -> RXIM_R {
                RXIM_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CTSMIM"]
            #[inline(always)]
            pub fn ctsmim(&self) -> CTSMIM_R {
                CTSMIM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 10 - OEIM"]
            #[inline(always)]
            pub fn oeim(&mut self) -> OEIM_W {
                OEIM_W { w: self }
            }
            #[doc = "Bit 9 - BEIM"]
            #[inline(always)]
            pub fn beim(&mut self) -> BEIM_W {
                BEIM_W { w: self }
            }
            #[doc = "Bit 8 - PEIM"]
            #[inline(always)]
            pub fn peim(&mut self) -> PEIM_W {
                PEIM_W { w: self }
            }
            #[doc = "Bit 7 - FEIM"]
            #[inline(always)]
            pub fn feim(&mut self) -> FEIM_W {
                FEIM_W { w: self }
            }
            #[doc = "Bit 6 - RTIM"]
            #[inline(always)]
            pub fn rtim(&mut self) -> RTIM_W {
                RTIM_W { w: self }
            }
            #[doc = "Bit 5 - TXIM"]
            #[inline(always)]
            pub fn txim(&mut self) -> TXIM_W {
                TXIM_W { w: self }
            }
            #[doc = "Bit 4 - RXIM"]
            #[inline(always)]
            pub fn rxim(&mut self) -> RXIM_W {
                RXIM_W { w: self }
            }
            #[doc = "Bit 1 - CTSMIM"]
            #[inline(always)]
            pub fn ctsmim(&mut self) -> CTSMIM_W {
                CTSMIM_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `OERIS`"]
        pub type OERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BERIS`"]
        pub type BERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PERIS`"]
        pub type PERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FERIS`"]
        pub type FERIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTRIS`"]
        pub type RTRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXRIS`"]
        pub type TXRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXRIS`"]
        pub type RXRIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTSRMIS`"]
        pub type CTSRMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 10 - OERIS"]
            #[inline(always)]
            pub fn oeris(&self) -> OERIS_R {
                OERIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BERIS"]
            #[inline(always)]
            pub fn beris(&self) -> BERIS_R {
                BERIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PERIS"]
            #[inline(always)]
            pub fn peris(&self) -> PERIS_R {
                PERIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FERIS"]
            #[inline(always)]
            pub fn feris(&self) -> FERIS_R {
                FERIS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTRIS"]
            #[inline(always)]
            pub fn rtris(&self) -> RTRIS_R {
                RTRIS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXRIS"]
            #[inline(always)]
            pub fn txris(&self) -> TXRIS_R {
                TXRIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXRIS"]
            #[inline(always)]
            pub fn rxris(&self) -> RXRIS_R {
                RXRIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CTSRMIS"]
            #[inline(always)]
            pub fn ctsrmis(&self) -> CTSRMIS_R {
                CTSRMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `OEMIS`"]
        pub type OEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BEMIS`"]
        pub type BEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PEMIS`"]
        pub type PEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FEMIS`"]
        pub type FEMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTMIS`"]
        pub type RTMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXMIS`"]
        pub type TXMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXMIS`"]
        pub type RXMIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTSMMIS`"]
        pub type CTSMMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 10 - OEMIS"]
            #[inline(always)]
            pub fn oemis(&self) -> OEMIS_R {
                OEMIS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BEMIS"]
            #[inline(always)]
            pub fn bemis(&self) -> BEMIS_R {
                BEMIS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PEMIS"]
            #[inline(always)]
            pub fn pemis(&self) -> PEMIS_R {
                PEMIS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - FEMIS"]
            #[inline(always)]
            pub fn femis(&self) -> FEMIS_R {
                FEMIS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RTMIS"]
            #[inline(always)]
            pub fn rtmis(&self) -> RTMIS_R {
                RTMIS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - TXMIS"]
            #[inline(always)]
            pub fn txmis(&self) -> TXMIS_R {
                TXMIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - RXMIS"]
            #[inline(always)]
            pub fn rxmis(&self) -> RXMIS_R {
                RXMIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 1 - CTSMMIS"]
            #[inline(always)]
            pub fn ctsmmis(&self) -> CTSMMIS_R {
                CTSMMIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect.\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt Clear On a write of 1, the corresponding interrupt is cleared. A write of 0 has no effect."]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `OEIC`"]
        pub struct OEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `BEIC`"]
        pub struct BEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `PEIC`"]
        pub struct PEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `FEIC`"]
        pub struct FEIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FEIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `RTIC`"]
        pub struct RTIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `TXIC`"]
        pub struct TXIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `RXIC`"]
        pub struct RXIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTSMIC`"]
        pub struct CTSMIC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSMIC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 10 - OEIC"]
            #[inline(always)]
            pub fn oeic(&mut self) -> OEIC_W {
                OEIC_W { w: self }
            }
            #[doc = "Bit 9 - BEIC"]
            #[inline(always)]
            pub fn beic(&mut self) -> BEIC_W {
                BEIC_W { w: self }
            }
            #[doc = "Bit 8 - PEIC"]
            #[inline(always)]
            pub fn peic(&mut self) -> PEIC_W {
                PEIC_W { w: self }
            }
            #[doc = "Bit 7 - FEIC"]
            #[inline(always)]
            pub fn feic(&mut self) -> FEIC_W {
                FEIC_W { w: self }
            }
            #[doc = "Bit 6 - RTIC"]
            #[inline(always)]
            pub fn rtic(&mut self) -> RTIC_W {
                RTIC_W { w: self }
            }
            #[doc = "Bit 5 - TXIC"]
            #[inline(always)]
            pub fn txic(&mut self) -> TXIC_W {
                TXIC_W { w: self }
            }
            #[doc = "Bit 4 - RXIC"]
            #[inline(always)]
            pub fn rxic(&mut self) -> RXIC_W {
                RXIC_W { w: self }
            }
            #[doc = "Bit 1 - CTSMIC"]
            #[inline(always)]
            pub fn ctsmic(&mut self) -> CTSMIC_W {
                CTSMIC_W { w: self }
            }
        }
    }
    #[doc = "DMA Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmactl](dmactl) module"]
    pub type DMACTL = crate::Reg<u32, _DMACTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMACTL;
    #[doc = "`read()` method returns [dmactl::R](dmactl::R) reader structure"]
    impl crate::Readable for DMACTL {}
    #[doc = "`write(|w| ..)` method takes [dmactl::W](dmactl::W) writer structure"]
    impl crate::Writable for DMACTL {}
    #[doc = "DMA Control"]
    pub mod dmactl {
        #[doc = "Reader of register DMACTL"]
        pub type R = crate::R<u32, super::DMACTL>;
        #[doc = "Writer for register DMACTL"]
        pub type W = crate::W<u32, super::DMACTL>;
        #[doc = "Register DMACTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMACTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAONERR`"]
        pub type DMAONERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAONERR`"]
        pub struct DMAONERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAONERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `TXDMAE`"]
        pub type TXDMAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDMAE`"]
        pub struct TXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RXDMAE`"]
        pub type RXDMAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDMAE`"]
        pub struct RXDMAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - DMAONERR"]
            #[inline(always)]
            pub fn dmaonerr(&self) -> DMAONERR_R {
                DMAONERR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&self) -> TXDMAE_R {
                TXDMAE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&self) -> RXDMAE_R {
                RXDMAE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - DMAONERR"]
            #[inline(always)]
            pub fn dmaonerr(&mut self) -> DMAONERR_W {
                DMAONERR_W { w: self }
            }
            #[doc = "Bit 1 - TXDMAE"]
            #[inline(always)]
            pub fn txdmae(&mut self) -> TXDMAE_W {
                TXDMAE_W { w: self }
            }
            #[doc = "Bit 0 - RXDMAE"]
            #[inline(always)]
            pub fn rxdmae(&mut self) -> RXDMAE_W {
                RXDMAE_W { w: self }
            }
        }
    }
}
#[doc = "ARM Micro Direct Memory Access Controller"]
pub struct UDMA0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UDMA0 {}
impl UDMA0 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const udma0::RegisterBlock {
        0x4002_0000 as *const _
    }
}
impl Deref for UDMA0 {
    type Target = udma0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*UDMA0::ptr() }
    }
}
#[doc = "ARM Micro Direct Memory Access Controller"]
pub mod udma0 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status"]
        pub status: STATUS,
        #[doc = "0x04 - Configuration"]
        pub cfg: CFG,
        #[doc = "0x08 - Channel Control Data Base Pointer"]
        pub ctrl: CTRL,
        #[doc = "0x0c - Channel Alternate Control Data Base Pointer"]
        pub altctrl: ALTCTRL,
        #[doc = "0x10 - Channel Wait On Request Status"]
        pub waitonreq: WAITONREQ,
        #[doc = "0x14 - Channel Software Request"]
        pub softreq: SOFTREQ,
        #[doc = "0x18 - Channel Set UseBurst"]
        pub setburst: SETBURST,
        #[doc = "0x1c - Channel Clear UseBurst"]
        pub clearburst: CLEARBURST,
        #[doc = "0x20 - Channel Set Request Mask"]
        pub setreqmask: SETREQMASK,
        #[doc = "0x24 - Clear Channel Request Mask"]
        pub clearreqmask: CLEARREQMASK,
        #[doc = "0x28 - Set Channel Enable"]
        pub setchannelen: SETCHANNELEN,
        #[doc = "0x2c - Clear Channel Enable"]
        pub clearchannelen: CLEARCHANNELEN,
        #[doc = "0x30 - Channel Set Primary-Alternate"]
        pub setchnlprialt: SETCHNLPRIALT,
        #[doc = "0x34 - Channel Clear Primary-Alternate"]
        pub clearchnlprialt: CLEARCHNLPRIALT,
        #[doc = "0x38 - Set Channel Priority"]
        pub setchnlpriority: SETCHNLPRIORITY,
        #[doc = "0x3c - Clear Channel Priority"]
        pub clearchnlpriority: CLEARCHNLPRIORITY,
        _reserved16: [u8; 12usize],
        #[doc = "0x4c - Error Status and Clear"]
        pub error: ERROR,
        _reserved17: [u8; 1204usize],
        #[doc = "0x504 - Channel Request Done"]
        pub reqdone: REQDONE,
        _reserved18: [u8; 24usize],
        #[doc = "0x520 - Channel Request Done Mask"]
        pub donemask: DONEMASK,
    }
    #[doc = "Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status](status) module"]
    pub type STATUS = crate::Reg<u32, _STATUS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STATUS;
    #[doc = "`read()` method returns [status::R](status::R) reader structure"]
    impl crate::Readable for STATUS {}
    #[doc = "Status"]
    pub mod status {
        #[doc = "Reader of register STATUS"]
        pub type R = crate::R<u32, super::STATUS>;
        #[doc = "Reader of field `TEST`"]
        pub type TEST_R = crate::R<u8, u8>;
        #[doc = "Reader of field `TOTALCHANNELS`"]
        pub type TOTALCHANNELS_R = crate::R<u8, u8>;
        #[doc = "Reader of field `STATE`"]
        pub type STATE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MASTERENABLE`"]
        pub type MASTERENABLE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 28:31 - TEST"]
            #[inline(always)]
            pub fn test(&self) -> TEST_R {
                TEST_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 16:20 - TOTALCHANNELS"]
            #[inline(always)]
            pub fn totalchannels(&self) -> TOTALCHANNELS_R {
                TOTALCHANNELS_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 4:7 - STATE"]
            #[inline(always)]
            pub fn state(&self) -> STATE_R {
                STATE_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bit 0 - MASTERENABLE"]
            #[inline(always)]
            pub fn masterenable(&self) -> MASTERENABLE_R {
                MASTERENABLE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Configuration\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
    pub type CFG = crate::Reg<u32, _CFG>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFG;
    #[doc = "`write(|w| ..)` method takes [cfg::W](cfg::W) writer structure"]
    impl crate::Writable for CFG {}
    #[doc = "Configuration"]
    pub mod cfg {
        #[doc = "Writer for register CFG"]
        pub type W = crate::W<u32, super::CFG>;
        #[doc = "Register CFG `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFG {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `PRTOCTRL`"]
        pub struct PRTOCTRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRTOCTRL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | (((value as u32) & 0x07) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `MASTERENABLE`"]
        pub struct MASTERENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASTERENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 5:7 - PRTOCTRL"]
            #[inline(always)]
            pub fn prtoctrl(&mut self) -> PRTOCTRL_W {
                PRTOCTRL_W { w: self }
            }
            #[doc = "Bit 0 - MASTERENABLE"]
            #[inline(always)]
            pub fn masterenable(&mut self) -> MASTERENABLE_W {
                MASTERENABLE_W { w: self }
            }
        }
    }
    #[doc = "Channel Control Data Base Pointer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctrl](ctrl) module"]
    pub type CTRL = crate::Reg<u32, _CTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTRL;
    #[doc = "`read()` method returns [ctrl::R](ctrl::R) reader structure"]
    impl crate::Readable for CTRL {}
    #[doc = "`write(|w| ..)` method takes [ctrl::W](ctrl::W) writer structure"]
    impl crate::Writable for CTRL {}
    #[doc = "Channel Control Data Base Pointer"]
    pub mod ctrl {
        #[doc = "Reader of register CTRL"]
        pub type R = crate::R<u32, super::CTRL>;
        #[doc = "Writer for register CTRL"]
        pub type W = crate::W<u32, super::CTRL>;
        #[doc = "Register CTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BASEPTR`"]
        pub type BASEPTR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BASEPTR`"]
        pub struct BASEPTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BASEPTR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits =
                    (self.w.bits & !(0x003f_ffff << 10)) | (((value as u32) & 0x003f_ffff) << 10);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 10:31 - BASEPTR"]
            #[inline(always)]
            pub fn baseptr(&self) -> BASEPTR_R {
                BASEPTR_R::new(((self.bits >> 10) & 0x003f_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 10:31 - BASEPTR"]
            #[inline(always)]
            pub fn baseptr(&mut self) -> BASEPTR_W {
                BASEPTR_W { w: self }
            }
        }
    }
    #[doc = "Channel Alternate Control Data Base Pointer\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [altctrl](altctrl) module"]
    pub type ALTCTRL = crate::Reg<u32, _ALTCTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALTCTRL;
    #[doc = "`read()` method returns [altctrl::R](altctrl::R) reader structure"]
    impl crate::Readable for ALTCTRL {}
    #[doc = "Channel Alternate Control Data Base Pointer"]
    pub mod altctrl {
        #[doc = "Reader of register ALTCTRL"]
        pub type R = crate::R<u32, super::ALTCTRL>;
        #[doc = "Reader of field `BASEPTR`"]
        pub type BASEPTR_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - BASEPTR"]
            #[inline(always)]
            pub fn baseptr(&self) -> BASEPTR_R {
                BASEPTR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Channel Wait On Request Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [waitonreq](waitonreq) module"]
    pub type WAITONREQ = crate::Reg<u32, _WAITONREQ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WAITONREQ;
    #[doc = "`read()` method returns [waitonreq::R](waitonreq::R) reader structure"]
    impl crate::Readable for WAITONREQ {}
    #[doc = "Channel Wait On Request Status"]
    pub mod waitonreq {
        #[doc = "Reader of register WAITONREQ"]
        pub type R = crate::R<u32, super::WAITONREQ>;
        #[doc = "Reader of field `CHNLSTATUS`"]
        pub type CHNLSTATUS_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - CHNLSTATUS"]
            #[inline(always)]
            pub fn chnlstatus(&self) -> CHNLSTATUS_R {
                CHNLSTATUS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Channel Software Request\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [softreq](softreq) module"]
    pub type SOFTREQ = crate::Reg<u32, _SOFTREQ>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SOFTREQ;
    #[doc = "`write(|w| ..)` method takes [softreq::W](softreq::W) writer structure"]
    impl crate::Writable for SOFTREQ {}
    #[doc = "Channel Software Request"]
    pub mod softreq {
        #[doc = "Writer for register SOFTREQ"]
        pub type W = crate::W<u32, super::SOFTREQ>;
        #[doc = "Register SOFTREQ `reset()`'s with value 0"]
        impl crate::ResetValue for super::SOFTREQ {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Channel Set UseBurst\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [setburst](setburst) module"]
    pub type SETBURST = crate::Reg<u32, _SETBURST>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SETBURST;
    #[doc = "`read()` method returns [setburst::R](setburst::R) reader structure"]
    impl crate::Readable for SETBURST {}
    #[doc = "`write(|w| ..)` method takes [setburst::W](setburst::W) writer structure"]
    impl crate::Writable for SETBURST {}
    #[doc = "Channel Set UseBurst"]
    pub mod setburst {
        #[doc = "Reader of register SETBURST"]
        pub type R = crate::R<u32, super::SETBURST>;
        #[doc = "Writer for register SETBURST"]
        pub type W = crate::W<u32, super::SETBURST>;
        #[doc = "Register SETBURST `reset()`'s with value 0"]
        impl crate::ResetValue for super::SETBURST {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Channel Clear UseBurst\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clearburst](clearburst) module"]
    pub type CLEARBURST = crate::Reg<u32, _CLEARBURST>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLEARBURST;
    #[doc = "`write(|w| ..)` method takes [clearburst::W](clearburst::W) writer structure"]
    impl crate::Writable for CLEARBURST {}
    #[doc = "Channel Clear UseBurst"]
    pub mod clearburst {
        #[doc = "Writer for register CLEARBURST"]
        pub type W = crate::W<u32, super::CLEARBURST>;
        #[doc = "Register CLEARBURST `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLEARBURST {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Channel Set Request Mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [setreqmask](setreqmask) module"]
    pub type SETREQMASK = crate::Reg<u32, _SETREQMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SETREQMASK;
    #[doc = "`read()` method returns [setreqmask::R](setreqmask::R) reader structure"]
    impl crate::Readable for SETREQMASK {}
    #[doc = "`write(|w| ..)` method takes [setreqmask::W](setreqmask::W) writer structure"]
    impl crate::Writable for SETREQMASK {}
    #[doc = "Channel Set Request Mask"]
    pub mod setreqmask {
        #[doc = "Reader of register SETREQMASK"]
        pub type R = crate::R<u32, super::SETREQMASK>;
        #[doc = "Writer for register SETREQMASK"]
        pub type W = crate::W<u32, super::SETREQMASK>;
        #[doc = "Register SETREQMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::SETREQMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Clear Channel Request Mask\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clearreqmask](clearreqmask) module"]
    pub type CLEARREQMASK = crate::Reg<u32, _CLEARREQMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLEARREQMASK;
    #[doc = "`write(|w| ..)` method takes [clearreqmask::W](clearreqmask::W) writer structure"]
    impl crate::Writable for CLEARREQMASK {}
    #[doc = "Clear Channel Request Mask"]
    pub mod clearreqmask {
        #[doc = "Writer for register CLEARREQMASK"]
        pub type W = crate::W<u32, super::CLEARREQMASK>;
        #[doc = "Register CLEARREQMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLEARREQMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Set Channel Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [setchannelen](setchannelen) module"]
    pub type SETCHANNELEN = crate::Reg<u32, _SETCHANNELEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SETCHANNELEN;
    #[doc = "`read()` method returns [setchannelen::R](setchannelen::R) reader structure"]
    impl crate::Readable for SETCHANNELEN {}
    #[doc = "`write(|w| ..)` method takes [setchannelen::W](setchannelen::W) writer structure"]
    impl crate::Writable for SETCHANNELEN {}
    #[doc = "Set Channel Enable"]
    pub mod setchannelen {
        #[doc = "Reader of register SETCHANNELEN"]
        pub type R = crate::R<u32, super::SETCHANNELEN>;
        #[doc = "Writer for register SETCHANNELEN"]
        pub type W = crate::W<u32, super::SETCHANNELEN>;
        #[doc = "Register SETCHANNELEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::SETCHANNELEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Clear Channel Enable\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clearchannelen](clearchannelen) module"]
    pub type CLEARCHANNELEN = crate::Reg<u32, _CLEARCHANNELEN>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLEARCHANNELEN;
    #[doc = "`write(|w| ..)` method takes [clearchannelen::W](clearchannelen::W) writer structure"]
    impl crate::Writable for CLEARCHANNELEN {}
    #[doc = "Clear Channel Enable"]
    pub mod clearchannelen {
        #[doc = "Writer for register CLEARCHANNELEN"]
        pub type W = crate::W<u32, super::CLEARCHANNELEN>;
        #[doc = "Register CLEARCHANNELEN `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLEARCHANNELEN {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Channel Set Primary-Alternate\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [setchnlprialt](setchnlprialt) module"]
    pub type SETCHNLPRIALT = crate::Reg<u32, _SETCHNLPRIALT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SETCHNLPRIALT;
    #[doc = "`read()` method returns [setchnlprialt::R](setchnlprialt::R) reader structure"]
    impl crate::Readable for SETCHNLPRIALT {}
    #[doc = "`write(|w| ..)` method takes [setchnlprialt::W](setchnlprialt::W) writer structure"]
    impl crate::Writable for SETCHNLPRIALT {}
    #[doc = "Channel Set Primary-Alternate"]
    pub mod setchnlprialt {
        #[doc = "Reader of register SETCHNLPRIALT"]
        pub type R = crate::R<u32, super::SETCHNLPRIALT>;
        #[doc = "Writer for register SETCHNLPRIALT"]
        pub type W = crate::W<u32, super::SETCHNLPRIALT>;
        #[doc = "Register SETCHNLPRIALT `reset()`'s with value 0"]
        impl crate::ResetValue for super::SETCHNLPRIALT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Channel Clear Primary-Alternate\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clearchnlprialt](clearchnlprialt) module"]
    pub type CLEARCHNLPRIALT = crate::Reg<u32, _CLEARCHNLPRIALT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLEARCHNLPRIALT;
    #[doc = "`write(|w| ..)` method takes [clearchnlprialt::W](clearchnlprialt::W) writer structure"]
    impl crate::Writable for CLEARCHNLPRIALT {}
    #[doc = "Channel Clear Primary-Alternate"]
    pub mod clearchnlprialt {
        #[doc = "Writer for register CLEARCHNLPRIALT"]
        pub type W = crate::W<u32, super::CLEARCHNLPRIALT>;
        #[doc = "Register CLEARCHNLPRIALT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLEARCHNLPRIALT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Set Channel Priority\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [setchnlpriority](setchnlpriority) module"]
    pub type SETCHNLPRIORITY = crate::Reg<u32, _SETCHNLPRIORITY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SETCHNLPRIORITY;
    #[doc = "`read()` method returns [setchnlpriority::R](setchnlpriority::R) reader structure"]
    impl crate::Readable for SETCHNLPRIORITY {}
    #[doc = "`write(|w| ..)` method takes [setchnlpriority::W](setchnlpriority::W) writer structure"]
    impl crate::Writable for SETCHNLPRIORITY {}
    #[doc = "Set Channel Priority"]
    pub mod setchnlpriority {
        #[doc = "Reader of register SETCHNLPRIORITY"]
        pub type R = crate::R<u32, super::SETCHNLPRIORITY>;
        #[doc = "Writer for register SETCHNLPRIORITY"]
        pub type W = crate::W<u32, super::SETCHNLPRIORITY>;
        #[doc = "Register SETCHNLPRIORITY `reset()`'s with value 0"]
        impl crate::ResetValue for super::SETCHNLPRIORITY {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Clear Channel Priority\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clearchnlpriority](clearchnlpriority) module"]
    pub type CLEARCHNLPRIORITY = crate::Reg<u32, _CLEARCHNLPRIORITY>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CLEARCHNLPRIORITY;
    #[doc = "`write(|w| ..)` method takes [clearchnlpriority::W](clearchnlpriority::W) writer structure"]
    impl crate::Writable for CLEARCHNLPRIORITY {}
    #[doc = "Clear Channel Priority"]
    pub mod clearchnlpriority {
        #[doc = "Writer for register CLEARCHNLPRIORITY"]
        pub type W = crate::W<u32, super::CLEARCHNLPRIORITY>;
        #[doc = "Register CLEARCHNLPRIORITY `reset()`'s with value 0"]
        impl crate::ResetValue for super::CLEARCHNLPRIORITY {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Error Status and Clear\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [error](error) module"]
    pub type ERROR = crate::Reg<u32, _ERROR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ERROR;
    #[doc = "`read()` method returns [error::R](error::R) reader structure"]
    impl crate::Readable for ERROR {}
    #[doc = "`write(|w| ..)` method takes [error::W](error::W) writer structure"]
    impl crate::Writable for ERROR {}
    #[doc = "Error Status and Clear"]
    pub mod error {
        #[doc = "Reader of register ERROR"]
        pub type R = crate::R<u32, super::ERROR>;
        #[doc = "Writer for register ERROR"]
        pub type W = crate::W<u32, super::ERROR>;
        #[doc = "Register ERROR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ERROR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STATUS`"]
        pub type STATUS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STATUS`"]
        pub struct STATUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STATUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - STATUS"]
            #[inline(always)]
            pub fn status(&self) -> STATUS_R {
                STATUS_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - STATUS"]
            #[inline(always)]
            pub fn status(&mut self) -> STATUS_W {
                STATUS_W { w: self }
            }
        }
    }
    #[doc = "Channel Request Done\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reqdone](reqdone) module"]
    pub type REQDONE = crate::Reg<u32, _REQDONE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _REQDONE;
    #[doc = "`read()` method returns [reqdone::R](reqdone::R) reader structure"]
    impl crate::Readable for REQDONE {}
    #[doc = "`write(|w| ..)` method takes [reqdone::W](reqdone::W) writer structure"]
    impl crate::Writable for REQDONE {}
    #[doc = "Channel Request Done"]
    pub mod reqdone {
        #[doc = "Reader of register REQDONE"]
        pub type R = crate::R<u32, super::REQDONE>;
        #[doc = "Writer for register REQDONE"]
        pub type W = crate::W<u32, super::REQDONE>;
        #[doc = "Register REQDONE `reset()`'s with value 0"]
        impl crate::ResetValue for super::REQDONE {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
    #[doc = "Channel Request Done Mask\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [donemask](donemask) module"]
    pub type DONEMASK = crate::Reg<u32, _DONEMASK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DONEMASK;
    #[doc = "`read()` method returns [donemask::R](donemask::R) reader structure"]
    impl crate::Readable for DONEMASK {}
    #[doc = "`write(|w| ..)` method takes [donemask::W](donemask::W) writer structure"]
    impl crate::Writable for DONEMASK {}
    #[doc = "Channel Request Done Mask"]
    pub mod donemask {
        #[doc = "Reader of register DONEMASK"]
        pub type R = crate::R<u32, super::DONEMASK>;
        #[doc = "Writer for register DONEMASK"]
        pub type W = crate::W<u32, super::DONEMASK>;
        #[doc = "Register DONEMASK `reset()`'s with value 0"]
        impl crate::ResetValue for super::DONEMASK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHNLS`"]
        pub type CHNLS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHNLS`"]
        pub struct CHNLS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHNLS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&self) -> CHNLS_R {
                CHNLS_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CHNLS"]
            #[inline(always)]
            pub fn chnls(&mut self) -> CHNLS_W {
                CHNLS_W { w: self }
            }
        }
    }
}
#[doc = "Versatile Instruction Memory System Controls memory access to the Flash and encapsulates the following instruction memories: - Boot ROM - Cache / GPRAM"]
pub struct VIMS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VIMS {}
impl VIMS {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const vims::RegisterBlock {
        0x4003_4000 as *const _
    }
}
impl Deref for VIMS {
    type Target = vims::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*VIMS::ptr() }
    }
}
#[doc = "Versatile Instruction Memory System Controls memory access to the Flash and encapsulates the following instruction memories: - Boot ROM - Cache / GPRAM"]
pub mod vims {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Status Displays current VIMS mode and line buffer status"]
        pub stat: STAT,
        #[doc = "0x04 - Control Configure VIMS mode and line buffer settings"]
        pub ctl: CTL,
    }
    #[doc = "Status Displays current VIMS mode and line buffer status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stat](stat) module"]
    pub type STAT = crate::Reg<u32, _STAT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STAT;
    #[doc = "`read()` method returns [stat::R](stat::R) reader structure"]
    impl crate::Readable for STAT {}
    #[doc = "Status Displays current VIMS mode and line buffer status"]
    pub mod stat {
        #[doc = "Reader of register STAT"]
        pub type R = crate::R<u32, super::STAT>;
        #[doc = "Reader of field `IDCODE_LB_DIS`"]
        pub type IDCODE_LB_DIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SYSBUS_LB_DIS`"]
        pub type SYSBUS_LB_DIS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MODE_CHANGING`"]
        pub type MODE_CHANGING_R = crate::R<bool, bool>;
        #[doc = "Reader of field `INV`"]
        pub type INV_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 5 - IDCODE_LB_DIS"]
            #[inline(always)]
            pub fn idcode_lb_dis(&self) -> IDCODE_LB_DIS_R {
                IDCODE_LB_DIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - SYSBUS_LB_DIS"]
            #[inline(always)]
            pub fn sysbus_lb_dis(&self) -> SYSBUS_LB_DIS_R {
                SYSBUS_LB_DIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - MODE_CHANGING"]
            #[inline(always)]
            pub fn mode_changing(&self) -> MODE_CHANGING_R {
                MODE_CHANGING_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - INV"]
            #[inline(always)]
            pub fn inv(&self) -> INV_R {
                INV_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - MODE"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new((self.bits & 0x03) as u8)
            }
        }
    }
    #[doc = "Control Configure VIMS mode and line buffer settings\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control Configure VIMS mode and line buffer settings"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STATS_CLR`"]
        pub type STATS_CLR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STATS_CLR`"]
        pub struct STATS_CLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STATS_CLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `STATS_EN`"]
        pub type STATS_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STATS_EN`"]
        pub struct STATS_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STATS_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DYN_CG_EN`"]
        pub type DYN_CG_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DYN_CG_EN`"]
        pub struct DYN_CG_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DYN_CG_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `IDCODE_LB_DIS`"]
        pub type IDCODE_LB_DIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IDCODE_LB_DIS`"]
        pub struct IDCODE_LB_DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDCODE_LB_DIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SYSBUS_LB_DIS`"]
        pub type SYSBUS_LB_DIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSBUS_LB_DIS`"]
        pub struct SYSBUS_LB_DIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSBUS_LB_DIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ARB_CFG`"]
        pub type ARB_CFG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARB_CFG`"]
        pub struct ARB_CFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARB_CFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PREF_EN`"]
        pub type PREF_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PREF_EN`"]
        pub struct PREF_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREF_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `MODE`"]
        pub type MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODE`"]
        pub struct MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - STATS_CLR"]
            #[inline(always)]
            pub fn stats_clr(&self) -> STATS_CLR_R {
                STATS_CLR_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - STATS_EN"]
            #[inline(always)]
            pub fn stats_en(&self) -> STATS_EN_R {
                STATS_EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - DYN_CG_EN"]
            #[inline(always)]
            pub fn dyn_cg_en(&self) -> DYN_CG_EN_R {
                DYN_CG_EN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 5 - IDCODE_LB_DIS"]
            #[inline(always)]
            pub fn idcode_lb_dis(&self) -> IDCODE_LB_DIS_R {
                IDCODE_LB_DIS_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - SYSBUS_LB_DIS"]
            #[inline(always)]
            pub fn sysbus_lb_dis(&self) -> SYSBUS_LB_DIS_R {
                SYSBUS_LB_DIS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ARB_CFG"]
            #[inline(always)]
            pub fn arb_cfg(&self) -> ARB_CFG_R {
                ARB_CFG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - PREF_EN"]
            #[inline(always)]
            pub fn pref_en(&self) -> PREF_EN_R {
                PREF_EN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - MODE"]
            #[inline(always)]
            pub fn mode(&self) -> MODE_R {
                MODE_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - STATS_CLR"]
            #[inline(always)]
            pub fn stats_clr(&mut self) -> STATS_CLR_W {
                STATS_CLR_W { w: self }
            }
            #[doc = "Bit 30 - STATS_EN"]
            #[inline(always)]
            pub fn stats_en(&mut self) -> STATS_EN_W {
                STATS_EN_W { w: self }
            }
            #[doc = "Bit 29 - DYN_CG_EN"]
            #[inline(always)]
            pub fn dyn_cg_en(&mut self) -> DYN_CG_EN_W {
                DYN_CG_EN_W { w: self }
            }
            #[doc = "Bit 5 - IDCODE_LB_DIS"]
            #[inline(always)]
            pub fn idcode_lb_dis(&mut self) -> IDCODE_LB_DIS_W {
                IDCODE_LB_DIS_W { w: self }
            }
            #[doc = "Bit 4 - SYSBUS_LB_DIS"]
            #[inline(always)]
            pub fn sysbus_lb_dis(&mut self) -> SYSBUS_LB_DIS_W {
                SYSBUS_LB_DIS_W { w: self }
            }
            #[doc = "Bit 3 - ARB_CFG"]
            #[inline(always)]
            pub fn arb_cfg(&mut self) -> ARB_CFG_W {
                ARB_CFG_W { w: self }
            }
            #[doc = "Bit 2 - PREF_EN"]
            #[inline(always)]
            pub fn pref_en(&mut self) -> PREF_EN_W {
                PREF_EN_W { w: self }
            }
            #[doc = "Bits 0:1 - MODE"]
            #[inline(always)]
            pub fn mode(&mut self) -> MODE_W {
                MODE_W { w: self }
            }
        }
    }
}
#[doc = "Watchdog Timer"]
pub struct WDT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDT {}
impl WDT {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdt::RegisterBlock {
        0x4008_0000 as *const _
    }
}
impl Deref for WDT {
    type Target = wdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*WDT::ptr() }
    }
}
#[doc = "Watchdog Timer"]
pub mod wdt {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Configuration"]
        pub load: LOAD,
        #[doc = "0x04 - Current Count Value"]
        pub value: VALUE,
        #[doc = "0x08 - Control"]
        pub ctl: CTL,
        #[doc = "0x0c - Interrupt Clear"]
        pub icr: ICR,
        #[doc = "0x10 - Raw Interrupt Status"]
        pub ris: RIS,
        #[doc = "0x14 - Masked Interrupt Status"]
        pub mis: MIS,
        _reserved6: [u8; 1024usize],
        #[doc = "0x418 - Test Mode"]
        pub test: TEST,
        #[doc = "0x41c - Interrupt Cause Test Mode"]
        pub int_caus: INT_CAUS,
        _reserved8: [u8; 2016usize],
        #[doc = "0xc00 - Lock"]
        pub lock: LOCK,
    }
    #[doc = "Configuration\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [load](load) module"]
    pub type LOAD = crate::Reg<u32, _LOAD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LOAD;
    #[doc = "`read()` method returns [load::R](load::R) reader structure"]
    impl crate::Readable for LOAD {}
    #[doc = "`write(|w| ..)` method takes [load::W](load::W) writer structure"]
    impl crate::Writable for LOAD {}
    #[doc = "Configuration"]
    pub mod load {
        #[doc = "Reader of register LOAD"]
        pub type R = crate::R<u32, super::LOAD>;
        #[doc = "Writer for register LOAD"]
        pub type W = crate::W<u32, super::LOAD>;
        #[doc = "Register LOAD `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::LOAD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `WDTLOAD`"]
        pub type WDTLOAD_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `WDTLOAD`"]
        pub struct WDTLOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTLOAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - WDTLOAD"]
            #[inline(always)]
            pub fn wdtload(&self) -> WDTLOAD_R {
                WDTLOAD_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - WDTLOAD"]
            #[inline(always)]
            pub fn wdtload(&mut self) -> WDTLOAD_W {
                WDTLOAD_W { w: self }
            }
        }
    }
    #[doc = "Current Count Value\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [value](value) module"]
    pub type VALUE = crate::Reg<u32, _VALUE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _VALUE;
    #[doc = "`read()` method returns [value::R](value::R) reader structure"]
    impl crate::Readable for VALUE {}
    #[doc = "Current Count Value"]
    pub mod value {
        #[doc = "Reader of register VALUE"]
        pub type R = crate::R<u32, super::VALUE>;
        #[doc = "Reader of field `WDTVALUE`"]
        pub type WDTVALUE_R = crate::R<u32, u32>;
        impl R {
            #[doc = "Bits 0:31 - WDTVALUE"]
            #[inline(always)]
            pub fn wdtvalue(&self) -> WDTVALUE_R {
                WDTVALUE_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
    }
    #[doc = "Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ctl](ctl) module"]
    pub type CTL = crate::Reg<u32, _CTL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CTL;
    #[doc = "`read()` method returns [ctl::R](ctl::R) reader structure"]
    impl crate::Readable for CTL {}
    #[doc = "`write(|w| ..)` method takes [ctl::W](ctl::W) writer structure"]
    impl crate::Writable for CTL {}
    #[doc = "Control"]
    pub mod ctl {
        #[doc = "Reader of register CTL"]
        pub type R = crate::R<u32, super::CTL>;
        #[doc = "Writer for register CTL"]
        pub type W = crate::W<u32, super::CTL>;
        #[doc = "Register CTL `reset()`'s with value 0"]
        impl crate::ResetValue for super::CTL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INTTYPE`"]
        pub type INTTYPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INTTYPE`"]
        pub struct INTTYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTTYPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `RESEN`"]
        pub type RESEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RESEN`"]
        pub struct RESEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `INTEN`"]
        pub type INTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INTEN`"]
        pub struct INTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - INTTYPE"]
            #[inline(always)]
            pub fn inttype(&self) -> INTTYPE_R {
                INTTYPE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - RESEN"]
            #[inline(always)]
            pub fn resen(&self) -> RESEN_R {
                RESEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - INTEN"]
            #[inline(always)]
            pub fn inten(&self) -> INTEN_R {
                INTEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - INTTYPE"]
            #[inline(always)]
            pub fn inttype(&mut self) -> INTTYPE_W {
                INTTYPE_W { w: self }
            }
            #[doc = "Bit 1 - RESEN"]
            #[inline(always)]
            pub fn resen(&mut self) -> RESEN_W {
                RESEN_W { w: self }
            }
            #[doc = "Bit 0 - INTEN"]
            #[inline(always)]
            pub fn inten(&mut self) -> INTEN_W {
                INTEN_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Clear\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt Clear"]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `WDTICR`"]
        pub struct WDTICR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTICR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - WDTICR"]
            #[inline(always)]
            pub fn wdticr(&mut self) -> WDTICR_W {
                WDTICR_W { w: self }
            }
        }
    }
    #[doc = "Raw Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ris](ris) module"]
    pub type RIS = crate::Reg<u32, _RIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RIS;
    #[doc = "`read()` method returns [ris::R](ris::R) reader structure"]
    impl crate::Readable for RIS {}
    #[doc = "Raw Interrupt Status"]
    pub mod ris {
        #[doc = "Reader of register RIS"]
        pub type R = crate::R<u32, super::RIS>;
        #[doc = "Reader of field `WDTRIS`"]
        pub type WDTRIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - WDTRIS"]
            #[inline(always)]
            pub fn wdtris(&self) -> WDTRIS_R {
                WDTRIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Masked Interrupt Status\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mis](mis) module"]
    pub type MIS = crate::Reg<u32, _MIS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MIS;
    #[doc = "`read()` method returns [mis::R](mis::R) reader structure"]
    impl crate::Readable for MIS {}
    #[doc = "Masked Interrupt Status"]
    pub mod mis {
        #[doc = "Reader of register MIS"]
        pub type R = crate::R<u32, super::MIS>;
        #[doc = "Reader of field `WDTMIS`"]
        pub type WDTMIS_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - WDTMIS"]
            #[inline(always)]
            pub fn wdtmis(&self) -> WDTMIS_R {
                WDTMIS_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Test Mode\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [test](test) module"]
    pub type TEST = crate::Reg<u32, _TEST>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TEST;
    #[doc = "`read()` method returns [test::R](test::R) reader structure"]
    impl crate::Readable for TEST {}
    #[doc = "`write(|w| ..)` method takes [test::W](test::W) writer structure"]
    impl crate::Writable for TEST {}
    #[doc = "Test Mode"]
    pub mod test {
        #[doc = "Reader of register TEST"]
        pub type R = crate::R<u32, super::TEST>;
        #[doc = "Writer for register TEST"]
        pub type W = crate::W<u32, super::TEST>;
        #[doc = "Register TEST `reset()`'s with value 0"]
        impl crate::ResetValue for super::TEST {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `STALL`"]
        pub type STALL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STALL`"]
        pub struct STALL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STALL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TEST_EN`"]
        pub type TEST_EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEST_EN`"]
        pub struct TEST_EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEST_EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - STALL"]
            #[inline(always)]
            pub fn stall(&self) -> STALL_R {
                STALL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 0 - TEST_EN"]
            #[inline(always)]
            pub fn test_en(&self) -> TEST_EN_R {
                TEST_EN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - STALL"]
            #[inline(always)]
            pub fn stall(&mut self) -> STALL_W {
                STALL_W { w: self }
            }
            #[doc = "Bit 0 - TEST_EN"]
            #[inline(always)]
            pub fn test_en(&mut self) -> TEST_EN_W {
                TEST_EN_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Cause Test Mode\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [int_caus](int_caus) module"]
    pub type INT_CAUS = crate::Reg<u32, _INT_CAUS>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INT_CAUS;
    #[doc = "`read()` method returns [int_caus::R](int_caus::R) reader structure"]
    impl crate::Readable for INT_CAUS {}
    #[doc = "Interrupt Cause Test Mode"]
    pub mod int_caus {
        #[doc = "Reader of register INT_CAUS"]
        pub type R = crate::R<u32, super::INT_CAUS>;
        #[doc = "Reader of field `CAUSE_RESET`"]
        pub type CAUSE_RESET_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CAUSE_INTR`"]
        pub type CAUSE_INTR_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 1 - CAUSE_RESET"]
            #[inline(always)]
            pub fn cause_reset(&self) -> CAUSE_RESET_R {
                CAUSE_RESET_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - CAUSE_INTR"]
            #[inline(always)]
            pub fn cause_intr(&self) -> CAUSE_INTR_R {
                CAUSE_INTR_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Lock\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lock](lock) module"]
    pub type LOCK = crate::Reg<u32, _LOCK>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LOCK;
    #[doc = "`read()` method returns [lock::R](lock::R) reader structure"]
    impl crate::Readable for LOCK {}
    #[doc = "`write(|w| ..)` method takes [lock::W](lock::W) writer structure"]
    impl crate::Writable for LOCK {}
    #[doc = "Lock"]
    pub mod lock {
        #[doc = "Reader of register LOCK"]
        pub type R = crate::R<u32, super::LOCK>;
        #[doc = "Writer for register LOCK"]
        pub type W = crate::W<u32, super::LOCK>;
        #[doc = "Register LOCK `reset()`'s with value 0"]
        impl crate::ResetValue for super::LOCK {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WDTLOCK`"]
        pub type WDTLOCK_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `WDTLOCK`"]
        pub struct WDTLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTLOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - WDTLOCK"]
            #[inline(always)]
            pub fn wdtlock(&self) -> WDTLOCK_R {
                WDTLOCK_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - WDTLOCK"]
            #[inline(always)]
            pub fn wdtlock(&mut self) -> WDTLOCK_W {
                WDTLOCK_W { w: self }
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "AON_BATMON"]
    pub AON_BATMON: AON_BATMON,
    #[doc = "AON_EVENT"]
    pub AON_EVENT: AON_EVENT,
    #[doc = "AON_IOC"]
    pub AON_IOC: AON_IOC,
    #[doc = "AON_RTC"]
    pub AON_RTC: AON_RTC,
    #[doc = "AON_SYSCTL"]
    pub AON_SYSCTL: AON_SYSCTL,
    #[doc = "AON_WUC"]
    pub AON_WUC: AON_WUC,
    #[doc = "AUX_ADI4"]
    pub AUX_ADI4: AUX_ADI4,
    #[doc = "AUX_AIODIO0"]
    pub AUX_AIODIO0: AUX_AIODIO0,
    #[doc = "AUX_AIODIO1"]
    pub AUX_AIODIO1: AUX_AIODIO1,
    #[doc = "AUX_ANAIF"]
    pub AUX_ANAIF: AUX_ANAIF,
    #[doc = "AUX_DDI0_OSC"]
    pub AUX_DDI0_OSC: AUX_DDI0_OSC,
    #[doc = "AUX_EVCTL"]
    pub AUX_EVCTL: AUX_EVCTL,
    #[doc = "AUX_SCE"]
    pub AUX_SCE: AUX_SCE,
    #[doc = "AUX_SMPH"]
    pub AUX_SMPH: AUX_SMPH,
    #[doc = "AUX_TDCIF"]
    pub AUX_TDCIF: AUX_TDCIF,
    #[doc = "AUX_TIMER"]
    pub AUX_TIMER: AUX_TIMER,
    #[doc = "AUX_WUC"]
    pub AUX_WUC: AUX_WUC,
    #[doc = "CCFG"]
    pub CCFG: CCFG,
    #[doc = "CPU_TIPROP"]
    pub CPU_TIPROP: CPU_TIPROP,
    #[doc = "CRYPTO"]
    pub CRYPTO: CRYPTO,
    #[doc = "EVENT"]
    pub EVENT: EVENT,
    #[doc = "FCFG1"]
    pub FCFG1: FCFG1,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "GPIO"]
    pub GPIO: GPIO,
    #[doc = "GPT0"]
    pub GPT0: GPT0,
    #[doc = "GPT1"]
    pub GPT1: GPT1,
    #[doc = "GPT2"]
    pub GPT2: GPT2,
    #[doc = "GPT3"]
    pub GPT3: GPT3,
    #[doc = "I2C0"]
    pub I2C0: I2C0,
    #[doc = "I2S0"]
    pub I2S0: I2S0,
    #[doc = "IOC"]
    pub IOC: IOC,
    #[doc = "PRCM"]
    pub PRCM: PRCM,
    #[doc = "RFC_DBELL"]
    pub RFC_DBELL: RFC_DBELL,
    #[doc = "RFC_PWR"]
    pub RFC_PWR: RFC_PWR,
    #[doc = "RFC_RAT"]
    pub RFC_RAT: RFC_RAT,
    #[doc = "SMPH"]
    pub SMPH: SMPH,
    #[doc = "SSI0"]
    pub SSI0: SSI0,
    #[doc = "SSI1"]
    pub SSI1: SSI1,
    #[doc = "TRNG"]
    pub TRNG: TRNG,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "UDMA0"]
    pub UDMA0: UDMA0,
    #[doc = "VIMS"]
    pub VIMS: VIMS,
    #[doc = "WDT"]
    pub WDT: WDT,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            AON_BATMON: AON_BATMON {
                _marker: PhantomData,
            },
            AON_EVENT: AON_EVENT {
                _marker: PhantomData,
            },
            AON_IOC: AON_IOC {
                _marker: PhantomData,
            },
            AON_RTC: AON_RTC {
                _marker: PhantomData,
            },
            AON_SYSCTL: AON_SYSCTL {
                _marker: PhantomData,
            },
            AON_WUC: AON_WUC {
                _marker: PhantomData,
            },
            AUX_ADI4: AUX_ADI4 {
                _marker: PhantomData,
            },
            AUX_AIODIO0: AUX_AIODIO0 {
                _marker: PhantomData,
            },
            AUX_AIODIO1: AUX_AIODIO1 {
                _marker: PhantomData,
            },
            AUX_ANAIF: AUX_ANAIF {
                _marker: PhantomData,
            },
            AUX_DDI0_OSC: AUX_DDI0_OSC {
                _marker: PhantomData,
            },
            AUX_EVCTL: AUX_EVCTL {
                _marker: PhantomData,
            },
            AUX_SCE: AUX_SCE {
                _marker: PhantomData,
            },
            AUX_SMPH: AUX_SMPH {
                _marker: PhantomData,
            },
            AUX_TDCIF: AUX_TDCIF {
                _marker: PhantomData,
            },
            AUX_TIMER: AUX_TIMER {
                _marker: PhantomData,
            },
            AUX_WUC: AUX_WUC {
                _marker: PhantomData,
            },
            CCFG: CCFG {
                _marker: PhantomData,
            },
            CPU_TIPROP: CPU_TIPROP {
                _marker: PhantomData,
            },
            CRYPTO: CRYPTO {
                _marker: PhantomData,
            },
            EVENT: EVENT {
                _marker: PhantomData,
            },
            FCFG1: FCFG1 {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            GPIO: GPIO {
                _marker: PhantomData,
            },
            GPT0: GPT0 {
                _marker: PhantomData,
            },
            GPT1: GPT1 {
                _marker: PhantomData,
            },
            GPT2: GPT2 {
                _marker: PhantomData,
            },
            GPT3: GPT3 {
                _marker: PhantomData,
            },
            I2C0: I2C0 {
                _marker: PhantomData,
            },
            I2S0: I2S0 {
                _marker: PhantomData,
            },
            IOC: IOC {
                _marker: PhantomData,
            },
            PRCM: PRCM {
                _marker: PhantomData,
            },
            RFC_DBELL: RFC_DBELL {
                _marker: PhantomData,
            },
            RFC_PWR: RFC_PWR {
                _marker: PhantomData,
            },
            RFC_RAT: RFC_RAT {
                _marker: PhantomData,
            },
            SMPH: SMPH {
                _marker: PhantomData,
            },
            SSI0: SSI0 {
                _marker: PhantomData,
            },
            SSI1: SSI1 {
                _marker: PhantomData,
            },
            TRNG: TRNG {
                _marker: PhantomData,
            },
            UART0: UART0 {
                _marker: PhantomData,
            },
            UDMA0: UDMA0 {
                _marker: PhantomData,
            },
            VIMS: VIMS {
                _marker: PhantomData,
            },
            WDT: WDT {
                _marker: PhantomData,
            },
        }
    }
}
